language: go_test.go
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var counter\
    \ int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmprctyhvlb_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmprctyhvlb_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmprctyhvlb_test.go:45: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmprctyhvlb_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmprctyhvlb_test.go:45: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmprctyhvlb_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmprctyhvlb_test.go:45: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmprctyhvlb_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := 0\n  \
    \  z := n/10\n    for i := 0; i < z; i++ {\n        if (n%11 == 0) || (n%13 ==\
    \ 0) || (n%11+n%13 == 1) {\n            x += 1;\n        }\n        n /= 10\n\
    \    }\n    return x\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpsubwxla8_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpsubwxla8_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpsubwxla8_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpsubwxla8_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpsubwxla8_test.go:47: expected '%!s(int=6)', got '%!s(int=17)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpsubwxla8_test.go:47:\
    \ expected '%!s(int=192)', got '%!s(int=396)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpsubwxla8_test.go:47: expected '%!s(int=639)', got '%!s(int=995)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpsubwxla8_test.go:47:\
    \ expected '%!s(int=8026)', got '%!s(int=9994)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 ||\
    \ n < 13 {\n        return 0\n    }\n    i := 0\n    for ; i < n; i += 11 {\n\
    \        if n%11 == 0 {\n            return i\n        }\n    }\n    for ; i <\
    \ n; i += 13 {\n        if n%13 == 0 {\n            return i\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpl7apf072_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpl7apf072_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpl7apf072_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpl7apf072_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpl7apf072_test.go:53: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpl7apf072_test.go:53:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpl7apf072_test.go:53: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    return 1 + fizz_buzz(n / 11)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp5ey7s04k_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp5ey7s04k_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp5ey7s04k_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp5ey7s04k_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp5ey7s04k_test.go:42: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp5ey7s04k_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp5ey7s04k_test.go:42: expected '%!s(int=639)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp5ey7s04k_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return n\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpb1on_k3u_test.go:39: expected '%!s(int=0)', got '%!s(int=50)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpb1on_k3u_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpb1on_k3u_test.go:39: expected '%!s(int=3)', got '%!s(int=79)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpb1on_k3u_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=100)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpb1on_k3u_test.go:39: expected '%!s(int=6)', got '%!s(int=200)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpb1on_k3u_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=4000)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpb1on_k3u_test.go:39: expected '%!s(int=639)', got '%!s(int=10000)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpb1on_k3u_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=100000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpl9ldsgyv_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpl9ldsgyv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpl9ldsgyv_test.go:45: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpl9ldsgyv_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpl9ldsgyv_test.go:45: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpl9ldsgyv_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpl9ldsgyv_test.go:45: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpl9ldsgyv_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 ||\
    \ n > 13 {\n        return -1\n    }\n\n    m := n % 11\n    n /= 11\n    if n\
    \ == 0 {\n        return 0\n    }\n\n    s := n%13\n    n /= 13\n\n    if m ==\
    \ 0 {\n        if s == 0 {\n            return m\n        }\n        return 13\n\
    \    }\n\n    if s == 0 {\n        return m+7\n    }\n\n    return 11\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp5j_djbf__test.go:63: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp5j_djbf__test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp5j_djbf__test.go:63: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp5j_djbf__test.go:63:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp5j_djbf__test.go:63: expected '%!s(int=6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp5j_djbf__test.go:63:\
    \ expected '%!s(int=192)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp5j_djbf__test.go:63: expected '%!s(int=639)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp5j_djbf__test.go:63:\
    \ expected '%!s(int=8026)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        number := n\n        if number % 11 ==\
    \ 0 || number % 13 == 0 {\n            number /= 11\n            result += 1\n\
    \        }\n        if number % 11 != 0 || number % 13 != 0 {\n            result\
    \ += 3\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpjnidxjhd_test.go:50: expected '%!s(int=0)', got '%!s(int=150)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpjnidxjhd_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=312)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpjnidxjhd_test.go:50: expected '%!s(int=3)', got '%!s(int=237)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpjnidxjhd_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=300)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpjnidxjhd_test.go:50: expected '%!s(int=6)', got '%!s(int=600)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpjnidxjhd_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=12000)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpjnidxjhd_test.go:50: expected '%!s(int=639)', got '%!s(int=30000)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpjnidxjhd_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=300000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \n    if n % 11 == 0 || n % 13 == 0 {\n        count = 0\n    } else {\n     \
    \   count = 0\n        for i := 0; i < n; i++ {\n            if i % 11 == 0 ||\
    \ i % 13 == 0 {\n                count++\n            }\n        }\n    }\n\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpf8li75dt_test.go:52: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpf8li75dt_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpf8li75dt_test.go:52: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpf8li75dt_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpf8li75dt_test.go:52: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpf8li75dt_test.go:52:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpf8li75dt_test.go:52: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpf8li75dt_test.go:52:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    \n    count := 0\n    \n    for\
    \ i := 0; i < n; i++ {\n        if n%11 == 7 || n%13 == 7 {\n            count++\n\
    \        }\n        \n        if n%11 != 7 && n%13 != 7 {\n            n = n -\
    \ 1\n        }\n        \n        if n%11 == 0 && n%13 == 0 {\n            count++\n\
    \        }\n    }\n    \n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmps4xp6nik_test.go:59: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmps4xp6nik_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmps4xp6nik_test.go:59: expected '%!s(int=3)', got '%!s(int=67)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmps4xp6nik_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=96)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmps4xp6nik_test.go:59: expected '%!s(int=6)', got '%!s(int=188)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmps4xp6nik_test.go:59:\
    \ expected '%!s(int=192)', got '%!s(int=4000)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmps4xp6nik_test.go:59: expected '%!s(int=639)', got '%!s(int=9990)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmps4xp6nik_test.go:59:\
    \ expected '%!s(int=8026)', got '%!s(int=99994)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ fizz_buzz(n/11 + 1) + fizz_buzz(n/13 + 1)\n    }\n    return fizz_buzz(n/11\
    \ + 1)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0x1?)\n\
    \t/tmp/tmp3xobcc7b_test.go:15 +0x115 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef775\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef755\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc020160448 sp=0xc020160420 pc=0x4ef755\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc020160470 sp=0xc020160448 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc020160498 sp=0xc020160470 pc=0x4ef755\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef755\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc020160538 sp=0xc020160510 pc=0x4ef755\n\
    command-line-arguments_test.fizz_buzz(0x1)\n\t/tmp/tmp3xobcc7b_test.go:22 +0xf5\
    \ fp=0xc020160560 sp=0xc020160538 pc=0x4ef755\ncommand-line-arguments_test.fizz_buzz(0x1)\n\
    \t/tmp/tmp3xobcc7b_test.go:22 +0xf5 fp=0xc020160588 sp=0xc020160560 "
  timestamp: 1660075406
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n %= 1000\n\
    \    n %= 100\n    n %= 10\n    i := 0\n    for ; n < n; i += 1 {\n        if\
    \ n%11 == 7 || n%13 == 7 {\n            i += n\n        }\n        n /= 10\n \
    \   }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpnmjr_0qf_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpnmjr_0qf_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpnmjr_0qf_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpnmjr_0qf_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpnmjr_0qf_test.go:49: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpnmjr_0qf_test.go:49:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpnmjr_0qf_test.go:49: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if ((i % 11) == 0 && (i % 13) == 0) ||\
    \ ((i % 11) != 0 && (i % 13) != 0) {\n            count++\n        }\n    }\n\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpbskn216n_test.go:46: expected '%!s(int=0)', got '%!s(int=43)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpbskn216n_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpbskn216n_test.go:46: expected '%!s(int=3)', got '%!s(int=66)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpbskn216n_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=84)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpbskn216n_test.go:46: expected '%!s(int=6)', got '%!s(int=169)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpbskn216n_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=3384)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpbskn216n_test.go:46: expected '%!s(int=639)', got '%!s(int=8460)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpbskn216n_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=84616)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n %= 11\n \
    \   if n == 0 {\n        return 0\n    }\n    n %= 13\n    if n == 0 {\n     \
    \   return 1\n    }\n    return fizz_buzz(n-1)+fizz_buzz(n-2)+fizz_buzz(n-3)+fizz_buzz(n-4)+fizz_buzz(n-5)+fizz_buzz(n-6)\n\
    }\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520355?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0xfffffffffffffffb?)\n\
    \t/tmp/tmphpvnq3w2_test.go:15 +0x14d fp=0xc020160380 sp=0xc020160378 pc=0x4ef7ad\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0x92\
    \ fp=0xc0201603c8 sp=0xc020160380 pc=0x4ef6f2\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0xc020160410 sp=0xc0201603c8 pc=0x4ef6f2\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0x92\
    \ fp=0xc020160458 sp=0xc020160410 pc=0x4ef6f2\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0xc0201604a0 sp=0xc020160458 pc=0x4ef6f2\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0xa8\
    \ fp=0xc0201604e8 sp=0xc0201604a0 pc=0x4ef708\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0xc020160530 sp=0xc0201604e8 pc=0x4ef6f2\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0x92\
    \ fp=0xc020160578 sp=0xc020160530 pc=0x4ef6f2\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0xc0201605c0 sp=0xc020160578 pc=0x4ef6f2\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0x92\
    \ fp=0xc020160608 sp=0xc0201605c0 pc=0x4ef6f2\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0xc020160650 sp=0xc020160608 pc=0x4ef6f2\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmphpvnq3w2_test.go:24 +0x92\
    \ fp=0xc020160698 sp=0xc020160650 pc=0x4ef6f2\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmphpvnq3w2_test.go:24 +0x92 fp=0x"
  timestamp: 1660075406
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpu2f7i7xi_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpu2f7i7xi_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpu2f7i7xi_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpu2f7i7xi_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpu2f7i7xi_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpu2f7i7xi_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpu2f7i7xi_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    temp := n\n\n    // We need to make sure we aren't dividing by zero here,\
    \ which\n    // means we need to make sure n is a positive integer.\n    if temp%11\
    \ == 0 || temp%13 == 0 {\n        count++\n    }\n\n    for temp > 0 {\n     \
    \   if temp%11 == 0 || temp%13 == 0 {\n            count++\n        }\n\n    \
    \    temp = temp / 11\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpiy5s0np2_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpiy5s0np2_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpiy5s0np2_test.go:56: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpiy5s0np2_test.go:56:\
    \ expected '%!s(int=192)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpiy5s0np2_test.go:56: expected '%!s(int=639)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpiy5s0np2_test.go:56:\
    \ expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    count := 0\n    for i := 0; i\
    \ < n; i++ {\n        if n%11 == 0 && i%11 == 0 && n%13 == 0 && i%13 == 0 {\n\
    \            count++\n        }\n        if n%11 == 0 {\n            count++\n\
    \        }\n        if n%13 == 0 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpsd86j6gb_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpsd86j6gb_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpsd86j6gb_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpsd86j6gb_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpsd86j6gb_test.go:54: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpsd86j6gb_test.go:54:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpsd86j6gb_test.go:54: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i <= n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n        \
    \    count++\n        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpdo2ebpzy_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpdo2ebpzy_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpdo2ebpzy_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpdo2ebpzy_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpdo2ebpzy_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpdo2ebpzy_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpdo2ebpzy_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n += 1 // Ignore\
    \ the number 1.\n\n    digit7 := false\n    sum := 0\n    for i := 0; i < n; i++\
    \ {\n        sum += i\n        if sum % 11 == 0 || sum % 13 == 0 {\n         \
    \   digit7 = true\n        }\n    }\n\n    if digit7 {\n        return len(strconv.Itoa(n))\n\
    \    }\n\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7b6kdgs3_test.go:28:20: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075404
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n         \
    \   if i == 7 {\n                count++\n            }\n        } else {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp6ueefcy9_test.go:49: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp6ueefcy9_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=65)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp6ueefcy9_test.go:49: expected '%!s(int=3)', got '%!s(int=65)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp6ueefcy9_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=83)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp6ueefcy9_test.go:49: expected '%!s(int=6)', got '%!s(int=167)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp6ueefcy9_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=3356)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp6ueefcy9_test.go:49: expected '%!s(int=639)', got '%!s(int=8390)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp6ueefcy9_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=83916)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075405
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for i < n && n%11 != 0 || n%13 != 0 {\n        if n%11 == 0 {\n           \
    \ i += 10\n            n /= 11\n        } else if n%13 == 0 {\n            i +=\
    \ 13\n            n /= 13\n        } else {\n            i++\n        }\n    }\n\
    \    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n         \
    \   if i == 7 {\n                count++\n            }\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpp_o3ah_p_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpp_o3ah_p_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpp_o3ah_p_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpp_o3ah_p_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpp_o3ah_p_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpp_o3ah_p_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpp_o3ah_p_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n         \
    \   count++\n        }\n    }\n    return count\n}\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmphhcj8pbc_test.go:44: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmphhcj8pbc_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmphhcj8pbc_test.go:44: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmphhcj8pbc_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmphhcj8pbc_test.go:44: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphhcj8pbc_test.go:44:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmphhcj8pbc_test.go:44: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphhcj8pbc_test.go:44:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    \n    i :=\
    \ 0\n    \n    while(n > 0){\n        \n        if ((n%11)%2 != 0){\n        \
    \    i += 0\n        } else if((n%13)%2 != 0){\n            i += 1\n        }\n\
    \        \n        n /= 10\n    }\n    \n    return i\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmlbdp10q_test.go:19:17: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075403
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 0 {\n\
    \        return 0\n    }\n    i := 0\n    for i = 1; i <= n; i++ {\n        if\
    \ n%11 == 0 || n%13 == 0 {\n            break\n        }\n        if n%11 > 0\
    \ && n%11 != 7 || n%13 > 0 && n%13 != 7 {\n            fmt.Printf(\"%d\\n\", i)\n\
    \        }\n    }\n    return i\n}\n</code>\nThe above program is very simple\
    \ and straightforward.  It just counts the number of 7s in numbers less than or\
    \ equal to n.\nAs a beginner programmer, I love to play with the new language.\
    \  I love to practice what I learned.  This is one of my favorite programming\
    \ languages.  A little more advanced than my favorite languages.\n<|/ a dscore=5\
    \ tags=algorithm,fizzbuzz,c#,java |>\n<| c |>\nThis is a good answer, but one\
    \ thing I would add is that it is much easier to read if you remove the `if n\
    \ < 0` check and the `i < 100` loop from the main function and just have it call\
    \ `fizz_buzz(100)`.  `i < 100` is more idiomatic in C#, Java, and Python.\n<|/\
    \ c |>\n<| c |>\nI appreciate your comment on readability. I am a beginner programmer\
    \ at best. I like to be able to make my code easy to understand. Thanks!\n<|/\
    \ c |>\n<| c |>\nThe for loop should be `for (int i = 1; i <= n; i++)` otherwise\
    \ this program will crash on negative numbers.\n<|/ c |>\n<| c |>\nI made the\
    \ correction.  Thanks!\n<|/ c |>\n<| c |>\nIn order to make this an infinite loop,\
    \ add an `i--` after `println(i);`, otherwise it just keeps going.\n<|/ c |>\n\
    <| a tags=algorithm,fizzbuzz,c#,java |>\nOne more approach is as follows:\n<code>\n\
    string FizzBuzz(int n)\n{\n    string result = string.Empty;\n    if (n%3==0 &&\
    \ n%5==0 && n%7==0)\n    {\n        result = \"FizzBuzz\";\n    }\n    else if\
    \ (n%3==0)\n    {\n        result = \"Fizz\";\n    }\n    else if (n%5==0)\n \
    \   {\n        result = \"Buzz\";\n    }\n    else if (n%7==0)\n    {\n      \
    \  result = \"Buzz\";\n    }\n    else if (n%3==0 && n%5==0)\n    {\n        result\
    \ = \"FizzBuzz\";\n    }\n    else \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ma_fxvt_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    divisibility\
    \ := map[int]int{\n        11: 2,\n        13: 3,\n    }\n    if n > 0 && n <\
    \ 100 {\n        if n % 11 == 0 || n % 13 == 0 {\n            return fmt.Sprint(n)\n\
    \        }\n    }\n    for k, v := range divisibility {\n        if n%k <= v {\n\
    \            return fmt.Sprint(n)\n        }\n    }\n    return fmt.Sprint(n)\n\
    }\n</code>\n<|/ a tags=fizzbuzz,go dscore=2 |>\n<| c |>\nThis answer has all the\
    \ details needed to solve the problem of understanding what is happening here:\
    \ https://stackoverflow.com/questions/47998595/what-is-the-fastest-way-to-find-the-number-of-div/47999020#47999020\n\
    <|/ c |>\n<| a |>\nHere's an easy way:\n<code>\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjy5fropi_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075405
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    s := fizz_buzz(n/11) * 11 + fizz_buzz(n/13)\
    \ * 13\n    if n % 11 == 0 || n % 13 == 0 {\n        s += 11\n    }\n    return\
    \ s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp06isa9pb_test.go:46: expected '%!s(int=2)', got '%!s(int=11)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp06isa9pb_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp06isa9pb_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp06isa9pb_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp06isa9pb_test.go:46: expected '%!s(int=192)', got '%!s(int=1452)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp06isa9pb_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp06isa9pb_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n\n    if n%11 > 0 && n%13 > 0 {\n\
    \        return 2\n    }\n\n    return 0\n}\n</code>\n<|/ a tags=go,fizzbuzz |>\n\
    <| a tags=go,fizzbuzz |>\nI find this easier to read and understand than the accepted\
    \ answer. \n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2kd40eeb_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075406
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 0; i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n         \
    \   count++\n        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpw6v94ho9_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpw6v94ho9_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpw6v94ho9_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpw6v94ho9_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpw6v94ho9_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpw6v94ho9_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpw6v94ho9_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    m := n % 10\n\
    \    m /= 10\n    m /= 10\n    m /= 10\n    m /= 10\n    m /= 10\n    m /= 10\n\
    \    m /= 10\n    m /= 10\n    m /= 10\n    m /= 10\n    m /= 10\n    return m\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpnzucg2np_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpnzucg2np_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpnzucg2np_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpnzucg2np_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpnzucg2np_test.go:51: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpnzucg2np_test.go:51:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpnzucg2np_test.go:51: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_test.fizz_buzz(n)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8img_hp3_test.go:16:12: undefined: fizz_buzz_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Write your\
    \ code here.\n    sumNums := 0\n    for numDigits := 0; numDigits < 10; numDigits++\
    \ {\n        if n%11 == 0 || n%13 == 0 {\n            n /= 11\n        }\n   \
    \     if n%11 != 0 {\n            n /= 13\n        }\n        sumNums += 1\n \
    \   }\n    if sumNums == 0 {\n        return 0\n    }\n    return sumNums\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp4ybswam0_test.go:53: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp4ybswam0_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp4ybswam0_test.go:53: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp4ybswam0_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp4ybswam0_test.go:53: expected '%!s(int=6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp4ybswam0_test.go:53:\
    \ expected '%!s(int=192)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp4ybswam0_test.go:53: expected '%!s(int=639)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp4ybswam0_test.go:53:\
    \ expected '%!s(int=8026)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075407
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n\n    return fizz_buzz(n-1) + fizz_buzz(n-1)\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075420
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i, divisor\
    \ := 0, n\n    for divisor != 0 {\n        i = i + (divisor % 11 == 0 || divisor\
    \ % 13 == 0)\n        divisor = divisor / 10\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxe3y7mj_test.go:18:13: invalid operation: i + (divisor % 11 == 0 || divisor
    % 13 == 0) (mismatched types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 10 {\n\
    \        return n\n    }\n    return fizz_buzz((n / 10) % 10) * 10 + (n % 10)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp18f1g362_test.go:42: expected '%!s(int=0)', got '%!s(int=50)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp18f1g362_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp18f1g362_test.go:42: expected '%!s(int=3)', got '%!s(int=79)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp18f1g362_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp18f1g362_test.go:42: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp18f1g362_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp18f1g362_test.go:42: expected '%!s(int=639)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp18f1g362_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075407
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n /= 11\n \
    \   n /= 13\n    count := 0\n    for {\n        if n%11 == 0 || n%13 == 0 {\n\
    \            count += 1\n        }\n        n /= 11\n        n /= 13\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Initialize\
    \ a counter\n    count := 0\n    // Add 1 to count for each integer n\n    for\
    \ i := 0; i < n; i++ {\n        // Check if divisible by 11 or 13\n        if\
    \ ((i / 10) % 11 == 0 && (i / 10) % 13 == 0) {\n            count++\n        }\n\
    \    }\n    // Return the count\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpwn1shux2_test.go:49: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpwn1shux2_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpwn1shux2_test.go:49: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpwn1shux2_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpwn1shux2_test.go:49: expected '%!s(int=6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpwn1shux2_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=30)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpwn1shux2_test.go:49: expected '%!s(int=639)', got '%!s(int=70)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpwn1shux2_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    digit7 := 0\n\
    \    i := n\n    for i /= 10 {\n        if i == 7 || i == 11 || i == 13 {\n  \
    \          digit7++\n        }\n    }\n    return digit7\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2xjlfdp1_test.go:18:9: expected boolean or range expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075406
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    d := n % 10\n\
    \    n /= 10\n\n    if n == 0 {\n        return 0\n    }\n\n    if d == 7 && n%11\
    \ == 0 ||\n        d == 7 && n%13 == 0 {\n        return 1 + fizz_buzz(n)\n  \
    \  }\n\n    return fizz_buzz(n)\n}\n</code>\n<|/ a tags=algorithm,go,fizzbuzz\
    \ dscore=3 |>\n<| c |>\nIt seems that you missed that the original question had\
    \ this in his code: \"(In all three tests the answer should be the same as the\
    \ number of iterations of the test suite where the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.)\"\n<|/ c |>\n<| c |>\nI see. Well\
    \ I gave it a try but I can't find a way to make that happen. Thanks anyway!\n\
    <|/ c |>\n<| a |>\nI wrote a fizzbuzz generator in Javascript. It's a recursive\
    \ generator function which returns each number in the range for which a fizzbuzz\
    \ test is valid. \n<code>\nconst fizzbuzz = (start, stop) => {\n  const numbers\
    \ = [];\n  const maxNumbers = stop - start;\n  const lastDivisibleBy3 = (n) =>\
    \ (n % 3 == 0);\n  const lastDivisibleBy5 = (n) => (n % 5 == 0);\n  const lastDivisibleBy7\
    \ = (n) => (n % 7 == 0);\n  const fizzBuzz = (n) => {\n    if (lastDivisibleBy3(n)\
    \ && lastDivisibleBy5(n)) {\n      numbers.push(n)\n    } else if (lastDivisibleBy3(n))\
    \ {\n      numbers.push(n)\n    } else if (lastDivisibleBy5(n)) {\n      numbers.push(n)\n\
    \    } else if (lastDivisibleBy7(n)) {\n      numbers.push(n)\n    }\n    if (n\
    \ === maxNumbers) {\n      console.log(numbers);\n    }\n    if (n === 1) {\n\
    \      console.log(numbers);\n    }\n    if (n === 2) {\n      numbers.push('2')\n\
    \    }\n    return fizzBuzz(n + 1)\n  }\n  fizzBuzz(start)\n}\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,go,fizzbuzz |>\n<| c |>\nWelcome to Stack Overflow!\
    \ While this code snippet may be the solution, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-\u200C\
    \u200Bcode-based-answers) really helps to improve the quality of your post. Remember\
    \ that you are answering the question for readers in the future, and those people\
    \ might not know the reasons for \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpchi21k12_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075406
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for n > 0 {\n\
    \        if n%11 == 0 || n%13 == 0 {\n            return n\n        }\n      \
    \  n--\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp6ngoy879_test.go:45: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp6ngoy879_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp6ngoy879_test.go:45: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp6ngoy879_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp6ngoy879_test.go:45: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp6ngoy879_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp6ngoy879_test.go:45: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp6ngoy879_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    switch {\n\
    \    case n % 11 == 0:\n        return fizz_buzz_test.Number_0\n    case n % 13\
    \ == 0:\n        return fizz_buzz_test.Number_1\n    }\n    return fizz_buzz_test.Number_2\n\
    }\n\nvar fizz_buzz_test = TestSuite{\n    Number_0: func() {\n        for i :=\
    \ 0; i < 100; i++ {\n            n := fizz_buzz(i)\n            fmt.Println(n)\n\
    \        }\n    },\n    Number_1: func() {\n        for i := 0; i < 100; i++ {\n\
    \            n := fizz_buzz(i)\n            fmt.Println(n)\n        }\n    },\n\
    \    Number_2: func() {\n        for i := 0; i < 100; i++ {\n            n :=\
    \ fizz_buzz(i)\n            fmt.Println(n)\n        }\n    },\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2fnp0hf_test.go:25:5:\
    \ initialization loop for fizz_buzz_test\n\t/tmp/tmpa2fnp0hf_test.go:25:5: fizz_buzz_test\
    \ refers to\n\t/tmp/tmpa2fnp0hf_test.go:15:6: fizz_buzz refers to\n\t/tmp/tmpa2fnp0hf_test.go:25:5:\
    \ fizz_buzz_test\n/tmp/tmpa2fnp0hf_test.go:25:22: undefined: TestSuite\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    if n%11 == 0 {\n        return\
    \ 1\n    }\n\n    if n%13 == 0 {\n        return 2\n    }\n\n    return 3\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpdliq8529_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpdliq8529_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpdliq8529_test.go:51: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpdliq8529_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpdliq8529_test.go:51: expected '%!s(int=639)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpdliq8529_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    if n % 7 == 0 {\n        return\
    \ 1\n    }\n    return fizz_buzz(n / 7) * 7\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp79uj42i__test.go:45: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp79uj42i__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp79uj42i__test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp79uj42i__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp79uj42i__test.go:45: expected '%!s(int=6)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp79uj42i__test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp79uj42i__test.go:45: expected '%!s(int=639)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp79uj42i__test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    if n >= 10 {\n        return 3\n    }\n\n    mod\
    \ := n%11\n    if mod == 0 {\n        return 0\n    }\n\n    if mod == 11 {\n\
    \        return 1\n    }\n\n    return fizz_buzz(mod)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpmlqbgq42_test.go:56: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpmlqbgq42_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpmlqbgq42_test.go:56: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpmlqbgq42_test.go:56:\
    \ expected '%!s(int=192)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpmlqbgq42_test.go:56: expected '%!s(int=639)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpmlqbgq42_test.go:56:\
    \ expected '%!s(int=8026)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // base case:\
    \ if we have 0 numbers, or 1 number, return 0\n    if n < 2 {\n        return\
    \ 0\n    }\n\n    // base case: if the number evenly divides by 11, return 1\n\
    \    if n%11 == 0 {\n        return 1\n    }\n\n    // base case: if the number\
    \ evenly divides by 13, return 2\n    if n%13 == 0 {\n        return 2\n    }\n\
    \n    // otherwise, we recur on the remainder and add 1 to the result of the recursive\
    \ call\n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmphnthbjpf_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmphnthbjpf_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmphnthbjpf_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphnthbjpf_test.go:55:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmphnthbjpf_test.go:55: expected '%!s(int=639)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphnthbjpf_test.go:55:\
    \ expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    } else {\n        return 0\n    }\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmplnm54bwz_test.go:43: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmplnm54bwz_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmplnm54bwz_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmplnm54bwz_test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmplnm54bwz_test.go:43: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmplnm54bwz_test.go:43:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmplnm54bwz_test.go:43: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075408
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 1 {\n\
    \        return 0\n    }\n    if n%11 == 0 {\n        return 1\n    }\n    if\
    \ n%13 == 0 {\n        return 2\n    }\n    return fizz_buzz(n-1)\n}\n</code>\n\
    <|/ a dscore=3 tags=fizzbuzz,go |>\n<| c |>\nI didn't get it - how will that help\
    \ to fizz buzz the numbers?\n<|/ c |>\n<| c |>\nI didn't have time at the moment\
    \ to give a full explanation, but basically it helps you write less code. :)\n\
    <|/ c |>\n<| a dscore=3 |>\nYou could also do it in one line, which may be simpler\
    \ to understand and probably more efficient:\n<code>\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp65bslsgt_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075407
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    d := 7\n  \
    \  for i < n && n % d == 0 {\n        d *= 3\n        n /= d\n    }\n    return\
    \ n\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis code is definitely more elegant\
    \ than my attempt at an answer.  Just a little bit off-by-one: the `for` loop\
    \ is supposed to read `for i := 0; i < n; i++ {`, not `for i := 0; i <= n; i++\
    \ {`, so this implementation will return a value of `0` for `fizz_buzz(0)`.\n\
    <|/ c |>\n<| c |>\nI agree with you. I am updating my answer right now. Thanks\n\
    <|/ c |>\n<| c |>\nI see that I was a little off the mark in the last revision\
    \ of this answer.  I see that you have changed the loop condition as well, and\
    \ that's a lot better.  I'll remove my comments.\n<|/ c |>\n<| a tags=go,algorithm\
    \ |>\nI took Chris' answer and optimized a little bit his version for speed:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"testing\"\n)\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6jfklciq_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075408
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n\n    if n%7 == 0 {\n        return\
    \ 2\n    }\n\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp71lct6j5_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp71lct6j5_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp71lct6j5_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp71lct6j5_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp71lct6j5_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp71lct6j5_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp71lct6j5_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    \n    count\
    \ := 0\n    \n    x := n%11\n    \n    if x == 0 {\n        count = count + 1\n\
    \    }\n    \n    x = n%13\n    \n    if x == 0 {\n        count = count + 1\n\
    \    }\n    \n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpxa3_yybk_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpxa3_yybk_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpxa3_yybk_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpxa3_yybk_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpxa3_yybk_test.go:54: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpxa3_yybk_test.go:54:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpxa3_yybk_test.go:54: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n         \
    \   count++\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpuu1iyodx_test.go:46: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpuu1iyodx_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpuu1iyodx_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpuu1iyodx_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpuu1iyodx_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpuu1iyodx_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpuu1iyodx_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 || n%(i*11) == 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp0jdlar34_test.go:45: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp0jdlar34_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp0jdlar34_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp0jdlar34_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=9)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp0jdlar34_test.go:45: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp0jdlar34_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=24)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp0jdlar34_test.go:45: expected '%!s(int=639)', got '%!s(int=25)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp0jdlar34_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=36)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    divisor := 11\n    switch {\n    case n%divisor:\n        count++\n    case\
    \ n%divisor+divisor:\n        count++\n    case n%divisor+divisor+divisor:\n \
    \       count++\n    case n%divisor+divisor+divisor+divisor:\n        count++\n\
    \    }\n    return count\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy0hu_a9__test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075408
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    return 1 + fizz_buzz(n/11)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpgl99lkjc_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgl99lkjc_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpgl99lkjc_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgl99lkjc_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpgl99lkjc_test.go:42: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgl99lkjc_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpgl99lkjc_test.go:42: expected '%!s(int=639)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgl99lkjc_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := 0\n  \
    \  for n < 90 {\n        if n%11 == 0 || n%13 == 0 {\n            x = x + 1\n\
    \        }\n        n = n + 1\n    }\n    return x\n}\n</code>\n<|/ a tags=fizzbuzz,go\
    \ |>\n<| a tags=fizzbuzz,go |>\nI wrote my own solution:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ms_53dd_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075408
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := n\n  \
    \  y := x%11\n    if y == 0 || y == 11 || n == x {\n        return 1\n    }\n\
    \    y *= 2\n    if y == 11 || y == 13 {\n        return 2\n    }\n    return\
    \ fizz_buzz(y)\n}\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpyb28gdey_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyb28gdey_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpyb28gdey_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyb28gdey_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpyb28gdey_test.go:47: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyb28gdey_test.go:47:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpyb28gdey_test.go:47: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyb28gdey_test.go:47:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if ((n%11)%13 == 0 || n%13 == 0) && int(n/11)\
    \ == 7 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpx1exrnja_test.go:45: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpx1exrnja_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpx1exrnja_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpx1exrnja_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpx1exrnja_test.go:45: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpx1exrnja_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpx1exrnja_test.go:45: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 10 {\n\
    \        return 1\n    }\n    if n < 100 {\n        if n % 11 == 0 {\n       \
    \     return 1 + fizz_buzz(int(n/11))\n        }\n        if n % 13 == 0 {\n \
    \           return 1 + fizz_buzz(int(n/13))\n        }\n        return 0\n   \
    \ }\n    if n < 1000 {\n        if n % 11 == 0 {\n            return 1 + fizz_buzz(int(n/11))\n\
    \        }\n        if n % 13 == 0 {\n            return 1 + fizz_buzz(int(n/13))\n\
    \        }\n        if n % 17 == 0 {\n            return 1 + fizz_buzz(int(n/17))\n\
    \        }\n        if n % 19 == 0 {\n            return 1 + fizz_buzz(int(n/19))\n\
    \        }\n        if n % 25 == 0 {\n            return 1 + fizz_buzz(int(n/25))\n\
    \        }\n        if n % 29 == 0 {\n            return 1 + fizz_buzz(int(n/29))\n\
    \        }\n        if n % 33 == 0 {\n            return 1 + fizz_buzz(int(n/33))\n\
    \        }\n        if n % 37 == 0 {\n            return 1 + fizz_buzz(int(n/37))\n\
    \        }\n        if n % 41 == 0 {\n            return 1 + fizz_buzz(int(n/41))\n\
    \        }\n        if n % 45 == 0 {\n            return 1 + fizz_buzz(int(n/45))\n\
    \        }\n        if n % 49 == 0 {\n            return 1 + fizz_buzz(int(n/49))\n\
    \        }\n        if n % 53 == 0 {\n            return 1 + fizz_buzz(int(n/53))\n\
    \        }\n        if n % 57 == 0 {\n            return 1 + fizz_buzz(int(n/57))\n\
    \        }\n        if n % 61 == 0 {\n            return 1 + fizz_buzz(int(n/61))\n\
    \        }\n        if n % 67 == 0 {\n            return 1 + fizz_buzz(int(n/67))\n\
    \        }\n        if n % 71 == 0 {\n            return 1 + fizz_buzz(int(n/71))\n\
    \        }\n        if n % 75 == 0 {\n            return 1 + fizz_buzz(int(n/75))\n\
    \        }\n        if n % 79 == 0 {\n            return 1 + fizz_buzz(int(n/79))\n\
    \        }\n        if n % 83 == 0 {\n            return 1 + fizz_buzz(int(n/83))\n\
    \        }\n        if n % 87 == 0 {\n            return 1 + fizz_buzz(int(n/87))\n\
    \        }\n        if n % 91 == 0 {\n            return 1 + fizz_buzz(int(n/91))\n\
    \        }\n        if n % 95 == 0 {\n            return 1 + fizz_buzz(int(n/95))\n\
    \        }\n        if n % 99 == 0 {\n            return 1 + fi\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0d0yw9b1_test.go:97:6: expected ''('', found TestFizz_Buzz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := \"\"\n\
    \    if n < 10 && n % 11 == 0 {\n        s += \"11\"\n    }\n    if n < 10 &&\
    \ n % 13 == 0 {\n        s += \"13\"\n    }\n    if n > 10 {\n        s += fmt.Sprintf(\"\
    %d\", n)\n    }\n    return strings.Count(s, \"7\")\n}\n</code>\n<|/ a dscore=2\
    \ tags=go,algorithm |>\n<| c |>\nThat is one way to solve the problem at hand.\
    \ But I guess OP wants to do it in a different way. Anyways +1 for the effort\n\
    <|/ c |>\n<| a tags=go,algorithm |>\nI wrote a little script that works in every\
    \ language with regex support:\n<code>\n#!/bin/bash\n\n[[ $# -eq 1 ]] || { echo\
    \ \"$0 <filename>\"; exit 1; }\n[[ ! -r \"$1\" ]] || { echo \"$1 does not exist!\"\
    ; exit 1; }\n[[ ! -w \"$1\" ]] || { echo \"$1 exists but is not writable!\"; exit\
    \ 1; }\n\nlines=$(wc -l \"$1\" | awk '{print $1}')\ni=0\nwhile read line; do\n\
    \  case \"$line\" in\n    \"# Fizz\"*) fizz_count=$(echo \"$line\" | grep -c \"\
    ^# Fizz\"); break ;;\n    \"# Buzz\"*) buzz_count=$(echo \"$line\" | grep -c \"\
    ^# Buzz\"); break ;;\n    \"# FizzBuzz\"*) fizz_buzz_count=$(echo \"$line\" |\
    \ grep -c \"^# FizzBuzz\"); break ;;\n    *)\n    # Do nothing\n    ;;\n  esac\n\
    \  ((i++))\n  [[ $i -eq $lines ]] && break;\ndone\necho \"Fizz: $fizz_count\"\n\
    echo \"Buzz: $buzz_count\"\necho \"FizzBuzz: $fizz_buzz_count\"\n</code>\nA few\
    \ notes:\n\nThe script assumes that the file has at least a line with either Fizz,\
    \ Buzz, or FizzBuzz followed by the number. Also, it assumes that any line starting\
    \ with # is comment\nThe script assumes that all numbers are positive numbers,\
    \ thus Fizz can not appear before Buzz and FizzBuzz. \n\nThe script works in bash\
    \ and zsh. \nThe script also works in Perl. It also works in Ruby, PHP, JavaScript,\
    \ and Python (Python's regular expression engine is RE2, which is very similar\
    \ to Perl's RE\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpezn4nyy3_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\
    \ return 0 }\n    count := 0\n    for i := n - 1; i >= 0; i-- {\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            count++\n        }\n        if count\
    \ == 7 {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpurziz9w3_test.go:49: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpurziz9w3_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpurziz9w3_test.go:49: expected '%!s(int=3)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpurziz9w3_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpurziz9w3_test.go:49: expected '%!s(int=6)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpurziz9w3_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpurziz9w3_test.go:49: expected '%!s(int=639)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpurziz9w3_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 11\
    \ || n == 13 {\n        return n\n    }\n    n -= 2\n    num := n\n    for num\
    \ > 0 {\n        if num % 11 == 0 || num % 13 == 0 {\n            num /= 13\n\
    \        }\n        num /= 11\n    }\n    return num\n}\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpw_wm325z_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpw_wm325z_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpw_wm325z_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpw_wm325z_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpw_wm325z_test.go:49: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpw_wm325z_test.go:49:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpw_wm325z_test.go:49: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    const (\n \
    \       fizz_buzz_digit_mask = 15\n        fizz_buzz_digit_mask = 15\n       \
    \ fizz_buzz_digit_mask\n        fizz_buzz_digit_mask\n        fizz_buzz_digit_mask\n\
    \        fizz_buzz_digit_mask\n        fizz_buzz_digit_mask\n        fizz_buzz_digit_mask\n\
    \        fizz_buzz_digit_mask\n    )\n    var (\n        fizz_buzz_digit_count\
    \    int\n        fizz_buzz_digit_count_mod int\n        fizz_buzz_digit_count_mod2\
    \ int\n    )\n\n    // If n is divisible by 11 or 13, then fizz_buzz_digit_count\
    \ is 0 and the function does not proceed.\n    if n%11 == 0 || n%13 == 0 {\n \
    \       return 0\n    }\n\n    fizz_buzz_digit_count_mod2 = 0\n    fizz_buzz_digit_count_mod\
    \ = 0\n\n    // Compute the count of digit 7 in n and return the count if it is\
    \ greater than zero or zero if the count is zero.\n    fizz_buzz_digit_count =\
    \ (n&fizz_buzz_digit_mask) >> fizz_buzz_digit_mask\n    if fizz_buzz_digit_count\
    \ > 0 {\n        return fizz_buzz_digit_count\n    }\n\n    // If fizz_buzz_digit_count_mod\
    \ is zero, then the 7 is in n.\n    // If fizz_buzz_digit_count_mod is not zero,\
    \ then the 7 is NOT in n.\n    fizz_buzz_digit_count_mod = fizz_buzz_digit_count_mod2\n\
    \    if fizz_buzz_digit_count_mod == 0 {\n        for fizz_buzz_digit_count_mod2\
    \ := 0; fizz_buzz_digit_count_mod2 < 12; fizz_buzz_digit_count_mod2++ {\n    \
    \        if n%10 == fizz_buzz_digit_count_mod2 {\n                fizz_buzz_digit_count_mod\
    \ += 1\n                break\n            }\n        }\n    }\n\n    // If fizz_buzz_digit_count_mod\
    \ is zero, then the 7 is NOT in n.\n    // If fizz_buzz_digit_count_mod is not\
    \ zero, then the 7 is in n.\n    if fizz_buzz_digit_count_mod == 0 {\n       \
    \ for fizz_buzz_digit_count_mod2 := 0; fizz_buzz_digit_count_mod2 < 12; fizz_buzz_\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxcolwqal_test.go:62:89: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for ; n >= 11; i++ {\n        n /= 11\n    }\n    for ; n > 0; n-- {\n    \
    \    if n == 13 || n % 11 == 0 {\n            i++\n        }\n    }\n    return\
    \ i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpaghhzxmx_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpaghhzxmx_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpaghhzxmx_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpaghhzxmx_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpaghhzxmx_test.go:48: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpaghhzxmx_test.go:48:\
    \ expected '%!s(int=192)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpaghhzxmx_test.go:48: expected '%!s(int=639)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpaghhzxmx_test.go:48:\
    \ expected '%!s(int=8026)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 {\n        return n / 11\n    } else if n % 13 == 0 {\n        return n /\
    \ 13 + 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmptkazie0k_test.go:44: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmptkazie0k_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmptkazie0k_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmptkazie0k_test.go:44:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmptkazie0k_test.go:44: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmptkazie0k_test.go:44:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmptkazie0k_test.go:44: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count, i :=\
    \ 0, 0\n    for ; n > 0; n /= 10 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            count++\n        }\n        i = n\n    }\n    return count\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhat does `<<<` mean?\n<|/ c |>\n<| c |>\nIt\u2019s part of\
    \ the syntax for a `heredoc` literal.  See [heredocs](https://golang.org/ref/spec#Here_documents).\n\
    <|/ c |>\n<| c |>\nThis is much less efficient than using a `switch` statement\n\
    <|/ c |>\n<| c |>\nI agree. As I stated at the start of the answer, the function\
    \ was designed to return an integer, not print anything. Using a `switch` statement\
    \ will print each number on a new line. Using this solution, the function returns\
    \ immediately and prints the correct number of 7s.\n<|/ c |>\n<| a |>\nThe accepted\
    \ answer works perfectly fine. However, it lacks a bit of explanation.\nThe <<<\
    \ operator is called a heredoc and is used to define a string literal, which can\
    \ be used for readability and also for performance reasons.\nThe two characters\
    \ <<<, <<  mean exactly that: here I defined the string \"Hello, World!\" as one\
    \ single string literal.\nThe characters < and > define the start and end of the\
    \ string.\nThe actual string itself is defined, without these delimiters.\nWhen\
    \ reading in a text file, or when defining strings, you might want to use these\
    \ delimiters, because these delimiters might change in different places, depending\
    \ on the language the source code is written in and you don't want to have to\
    \ fix this everywhere.\nFor example if the string is defined in a text file in\
    \ ANSI encoding (like in UTF-8), you will need to add a BOM to it like so:\n<code>\n\
    \"\\uFEFFHello, World!\"\n</code>\n<|/ a dscore=5 tags=go |>\n<| c |>\nWhy does\
    \ this answer not have a higher score?\n<|/ c |>\n<| c |>\nIt does, but this answer\
    \ has a bit more detail than the accepted answer. Maybe the accepted answer would\
    \ be a better answer, if the accepted answer would have contained more detail.\n\
    <|/ c |>\n<| c |>\nThe accepted answer also contains details. It's just that it's\
    \ better to explain in a few lines rather than give a long explanation.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<<< is a HEREDOC. Here's an example on how it works:\n\
    <code>\npackage main\n\nimport (\n    \"\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpym9olaq2_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var counter\
    \ int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            counter += 1\n        }\n    }\n    return counter\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpnv7mzxsk_test.go:45: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpnv7mzxsk_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=12)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpnv7mzxsk_test.go:45: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpnv7mzxsk_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpnv7mzxsk_test.go:45: expected '%!s(int=6)', got '%!s(int=32)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpnv7mzxsk_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpnv7mzxsk_test.go:45: expected '%!s(int=639)', got '%!s(int=1609)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpnv7mzxsk_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    counts := make([]int,\
    \ 2)\n    for i := 0; i < n; i++ {\n        digit := n % 10\n        if digit\
    \ == 7 || digit == 11 || digit == 13 {\n            counts[0]++\n        }\n \
    \       n, digit = n/10, digit\n        if digit == 7 || digit == 11 || digit\
    \ == 13 {\n            counts[1]++\n        }\n    }\n    return counts[0] - counts[1]\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp5hc7zzaw_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp5hc7zzaw_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp5hc7zzaw_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp5hc7zzaw_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp5hc7zzaw_test.go:50: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp5hc7zzaw_test.go:50:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp5hc7zzaw_test.go:50: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    fmt.Printf(\"\
    n=%v\\n\", n)\n    if n > 1000 {\n        fmt.Printf(\"n is too big for recursion\\\
    n\")\n        return 0\n    }\n    if n % 11 == 0 && n % 13 == 0 {\n        return\
    \ 1\n    }\n    if n % 11 == 0 && n % 13 != 0 {\n        return fizz_buzz(n /\
    \ 11) + 1\n    }\n    if n % 11 != 0 && n % 13 == 0 {\n        return fizz_buzz(n\
    \ / 13) + 1\n    }\n    if n % 11 != 0 && n % 13 != 0 {\n        return fizz_buzz(n\
    \ / 11) + fizz_buzz(n / 13) + 1\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaywap1k8_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075409
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for i := 0; i < n; i++ {\n        if n%11 == 0 { // is divisible by 11?\n \
    \           if n%13 == 0 { // is divisible by 13?\n                i += 2\n  \
    \          } else {\n                i += 1\n            }\n        } else if\
    \ n%13 == 0 {\n            i += 3\n        } else {\n            i += 1\n    \
    \    }\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpl9xthjs2_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpl9xthjs2_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpl9xthjs2_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpl9xthjs2_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpl9xthjs2_test.go:53: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpl9xthjs2_test.go:53:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpl9xthjs2_test.go:53: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // If n is\
    \ divisible by 11 then we know that all digits from 1 to 9 are divisible by 11.\n\
    \    // So we know that if n is not divisible by 11, then we know the answer is\
    \ 0.\n    // If the number is divisible by 11, we know the answer is (n - n %\
    \ 11).\n    // If the number is divisible by 13, we know the answer is (n - n\
    \ % 13).\n\n    // If n is not divisible by 11, then we know that the number is\
    \ divisible by 13.\n    // So the answer is (n - n % 13) + 1.\n    return (n -\
    \ n % 13) + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpt_k3q290_test.go:46: expected '%!s(int=0)', got '%!s(int=40)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpt_k3q290_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=79)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpt_k3q290_test.go:46: expected '%!s(int=3)', got '%!s(int=79)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpt_k3q290_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpt_k3q290_test.go:46: expected '%!s(int=6)', got '%!s(int=196)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpt_k3q290_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=3992)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpt_k3q290_test.go:46: expected '%!s(int=639)', got '%!s(int=9998)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpt_k3q290_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=99997)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // If n is\
    \ divisible by 11 or 13, then we return zero for that number.\n    if n >= 11\
    \ || n%11 == 0 || n%13 == 0 {\n        return 0\n    }\n    \n    // If n is not\
    \ divisible by 11 or 13, then we return 1 if n is divisible by 7 and 2 otherwise.\n\
    \    return (n%7 == 0 ? 1 : 0)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7jktjwep_test.go:22:22: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for ; (n < 0 || n >= 100) && (i < 100); i++ {\n        n = n/11\n    }\n  \
    \  if n == 0 || n == 1 { return i }\n    if n == 11 { i = i + 2 }\n    if n ==\
    \ 13 { i = i + 3 }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpyky_f29g_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpyky_f29g_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpyky_f29g_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpyky_f29g_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpyky_f29g_test.go:46: expected '%!s(int=192)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpyky_f29g_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpyky_f29g_test.go:46: expected '%!s(int=8026)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp2f63jc9u_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp2f63jc9u_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp2f63jc9u_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp2f63jc9u_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp2f63jc9u_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp2f63jc9u_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp2f63jc9u_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := \"\"\n\
    \    for i := 1; i <= n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n        \
    \    s += fmt.Sprintf(\"%d\", i)\n        }\n    }\n    return len(s) - 1\n}\n\
    </code>\n<|/ a tags=go,string,algorithm |>\n<| c |>\nThis is an awesome solution.\
    \ Works perfectly when applied to the example I gave. Thank you!\n<|/ c |>\n<|\
    \ a dscore=4 |>\nGo has a builtin function which makes a string slice (slice)\
    \ from a string:\n<code>\nstrings.Split(\"hello world how are you?\", \" \")\n\
    </code>\n<|/ a tags=go,string,algorithm |>\n<| c |>\nThis answer is really good,\
    \ I was just looking for a way to split a string on multiple chars, and this is\
    \ exactly what I was looking for.\n<|/ c |>\n<| a |>\nIf you're going to use regular\
    \ expressions try this:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    regexp\"\n    \"strconv\"\n)\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6orjnbl_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for i := 1;\
    \ i <= n; i += 11 {\n        if i % 11 == 0 {\n            for j := 1; j < (11+n%11-1);\
    \ j++ {\n                fmt.Printf(\"%d\\n\", j)\n            }\n        }\n\
    \    }\n    for i := 1; i <= n; i += 13 {\n        if i % 13 == 0 {\n        \
    \    for j := 1; j < (13+n%13-1); j++ {\n                fmt.Printf(\"%d\\n\"\
    , j)\n            }\n        }\n    }\n    return n\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,go,for-loop dscore=0 |>\nThis answer explains how to\
    \ do it with loops\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo8lsuxh8_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075410
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // initialize\
    \ a counter variable\n    var count = 0\n    // for loop through the integers\
    \ less than n\n    for i := 1; i <= n && n >= 11; i++ {\n        // if the number\
    \ n is divisible by 11 or 13, add one to the counter\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            count += 1\n        }\n    }\n    // return the counter\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpflfls_zo_test.go:49: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpflfls_zo_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpflfls_zo_test.go:49: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpflfls_zo_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpflfls_zo_test.go:49: expected '%!s(int=6)', got '%!s(int=32)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpflfls_zo_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpflfls_zo_test.go:49: expected '%!s(int=639)', got '%!s(int=1609)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpflfls_zo_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for i := 0;\
    \ i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            fmt.Println(i)\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: '0

    11

    13

    22

    26

    33

    39

    44

    0

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    0

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    0

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    0

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    104

    110

    117

    121

    130

    132

    143

    154

    156

    165

    169

    176

    182

    187

    195

    198

    0

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    104

    110

    117

    121

    130

    132

    143

    154

    156

    165

    169

    176

    182

    187

    195

    198

    208

    209

    220

    221

    231

    234

    242

    247

    253

    260

    264

    273

    275

    286

    297

    299

    308

    312

    319

    325

    330

    338

    341

    351

    352

    363

    364

    374

    377

    385

    390

    396

    403

    407

    416

    418

    429

    440

    442

    451

    455

    462

    468

    473

    481

    484

    494

    495

    506

    507

    517

    520

    528

    533

    539

    546

    550

    559

    561

    572

    583

    585

    594

    598

    605

    611

    616

    624

    627

    637

    638

    649

    650

    660

    663

    671

    676

    682

    689

    693

    702

    704

    715

    726

    728

    737

    741

    748

    754

    759

    767

    770

    780

    781

    792

    793

    803

    806

    814

    819

    825

    832

    836

    845

    847

    858

    869

    871

    880

    884

    891

    897

    902

    910

    913

    923

    924

    935

    936

    946

    949

    957

    962

    968

    975

    979

    988

    990

    1001

    1012

    1014

    1023

    1027

    1034

    1040

    1045

    1053

    1056

    1066

    1067

    1078

    1079

    1089

    1092

    1100

    1105

    1111

    1118

    1122

    1131

    1133

    1144

    1155

    1157

    1166

    1170

    1177

    1183

    1188

    1196

    1199

    1209

    1210

    1221

    1222

    1232

    1235

    1243

    1248

    1254

    1261

    1265

    1274

    1276

    1287

    1298

    1300

    1309

    1313

    1320

    1326

    1331

    1339

    1342

    1352

    1353

    1364

    1365

    1375

    1378

    1386

    1391

    1397

    1404

    1408

    1417

    1419

    1430

    1441

    1443

    1452

    1456

    1463

    1469

    1474

    1482

    1485

    1495

    1496

    1507

    1508

    1518

    1521

    1529

    1534

    1540

    1547

    1551

    1560

    1562

    1573

    1584

    1586

    1595

    1599

    1606

    1612

    1617

    1625

    1628

    1638

    1639

    1650

    1651

    1661

    1664

    1672

    1677

    1683

    1690

    1694

    1703

    1705

    1716

    1727

    1729

    1738

    1742

    1749

    1755

    1760

    1768

    1771

    1781

    1782

    1793

    1794

    1804

    1807

    1815

    1820

    1826

    1833

    1837

    1846

    1848

    1859

    1870

    1872

    1881

    1885

    1892

    1898

    1903

    1911

    1914

    1924

    1925

    1936

    1937

    1947

    1950

    1958

    1963

    1969

    1976

    1980

    1989

    1991

    2002

    2013

    2015

    2024

    2028

    2035

    2041

    2046

    2054

    2057

    2067

    2068

    2079

    2080

    2090

    2093

    2101

    2106

    2112

    2119

    2123

    2132

    2134

    2145

    2156

    2158

    2167

    2171

    2178

    2184

    2189

    2197

    2200

    2210

    2211

    2222

    2223

    2233

    2236

    2244

    2249

    2255

    2262

    2266

    2275

    2277

    2288

    2299

    2301

    2310

    2314

    2321

    2327

    2332

    2340

    2343

    2353

    2354

    2365

    2366

    2376

    2379

    2387

    2392

    2398

    2405

    2409

    2418

    2420

    2431

    2'
  timestamp: 1660075412
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if ((i%11)%13 == 0) count++\n   \
    \ }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw2hk1_vn_test.go:18:29: expected '';'', found count

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075411
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return n\n    }\n\n    count := 0\n    max := n\n\n    for {\n      \
    \  if n % 11 == 0 || n % 13 == 0 {\n            break\n        }\n\n        n\
    \ = n%10\n        count++\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvrrsm6b_test.go:21:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075412
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return n\n    }\n    if n > 0 && n%11 > 0 && n%13\
    \ > 0 {\n        return fizz_buzz(n/11) + fizz_buzz(n/13)\n    }\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpzlbzg7la_test.go:45: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpzlbzg7la_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpzlbzg7la_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpzlbzg7la_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpzlbzg7la_test.go:45: expected '%!s(int=192)', got '%!s(int=363)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpzlbzg7la_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpzlbzg7la_test.go:45: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075412
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int\n\
    \    var count int\n    count = 0\n    i = n - 1\n    for ; i >= 0; i-- {\n  \
    \      if ((n / 10) % 11 == 0) || ((n / 10) % 13 == 0) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpfeoemm9n_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpfeoemm9n_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpfeoemm9n_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpfeoemm9n_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpfeoemm9n_test.go:48: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpfeoemm9n_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpfeoemm9n_test.go:48: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075412
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i % 11 == 0 && i % 13 == 0 {\n       \
    \     c++\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpddvdbgdj_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpddvdbgdj_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpddvdbgdj_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpddvdbgdj_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpddvdbgdj_test.go:45: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpddvdbgdj_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=28)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpddvdbgdj_test.go:45: expected '%!s(int=639)', got '%!s(int=70)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpddvdbgdj_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075412
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    m := n % 11\n\
    \    if m == 0 || m == 1 {\n        return 1\n    }\n    return fizz_buzz(n /\
    \ 11) + fizz_buzz(n / 13)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpgv5xiy3p_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgv5xiy3p_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpgv5xiy3p_test.go:43: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgv5xiy3p_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpgv5xiy3p_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgv5xiy3p_test.go:43:\
    \ expected '%!s(int=192)', got '%!s(int=6)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpgv5xiy3p_test.go:43: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgv5xiy3p_test.go:43:\
    \ expected '%!s(int=8026)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \n    div11 := n % 11\n    div13 := n % 13\n    \n    if div11 == 0 || div13 ==\
    \ 0 {\n        count = 0\n    }\n    \n    if n < 21 {\n        count++\n    }\n\
    \    \n    if n < 49 {\n        if div13 == 0 {\n            count++\n       \
    \ }\n    }\n    \n    if n < 74 {\n        if div11 == 0 {\n            count++\n\
    \        }\n    }\n    \n    if n < 99 {\n        if div11 == 0 && div13 == 0\
    \ {\n            count++\n        }\n    }\n    \n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpm15xp93m_test.go:70: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpm15xp93m_test.go:70:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpm15xp93m_test.go:70: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpm15xp93m_test.go:70:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpm15xp93m_test.go:70: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpm15xp93m_test.go:70:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpm15xp93m_test.go:70: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Set a counter\
    \ variable to count the number of times 7 appears in n which are divisible by\
    \ 11 or 13.\n    // Use a for loop to iterate over all possible values between\
    \ n and n+10.\n    // For each value of i, check if it's divisible by 11 and 13,\
    \ then increment the counter variable.\n    // If it isn't divisible by 11 and\
    \ 13, then return 0.\n    // Return count. \n\n    count := 0\n\n    for i :=\
    \ n; i <= n+10; i++ {\n        if ((i % 11 == 0 && i % 13 == 0) || (i % 11 !=\
    \ 0 && i % 13 != 0)) {\n            count += 1\n        }\n    }\n\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpwywbn_3h_test.go:53: expected '%!s(int=0)', got '%!s(int=9)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpwywbn_3h_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=9)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpwywbn_3h_test.go:53: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpwywbn_3h_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=9)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpwywbn_3h_test.go:53: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpwywbn_3h_test.go:53:\
    \ expected '%!s(int=192)', got '%!s(int=11)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpwywbn_3h_test.go:53: expected '%!s(int=639)', got '%!s(int=11)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpwywbn_3h_test.go:53:\
    \ expected '%!s(int=8026)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n >= 100\
    \ || n%11 == 0 || n%13 == 0 {\n        return 0\n    }\n    \n    if n%11 == 0\
    \ {\n        return 1\n    }\n    \n    if n%13 == 0 {\n        return 2\n   \
    \ }\n    \n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n}\n</code>\nAnd that's\
    \ it!\n<|/ a |>\n<| c |>\nYeah, I saw the solution and I like it :) but I think\
    \ I like my solution more! I'll post my solution too\n<|/ c |>\n<| a tags=go,fizzbuzz\
    \ dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/big\"\
    \n)\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5ok3ean_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075411
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n\n    if n%11 == 0 || n%13 == 0 {\n        for i := 0; i < n; i++ {\n \
    \           if n%11 == 0 && n%13 == 0 {\n                count++\n           \
    \ }\n            if n%11 != 0 && n%13 == 0 {\n                count++\n      \
    \      }\n            if n%11 != 0 && n%13 != 0 {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpfs7hv9z8_test.go:54: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpfs7hv9z8_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpfs7hv9z8_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpfs7hv9z8_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpfs7hv9z8_test.go:54: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpfs7hv9z8_test.go:54:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpfs7hv9z8_test.go:54: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n         \
    \   if i == 7 {\n                count++\n            }\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp80ew27w8_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp80ew27w8_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp80ew27w8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp80ew27w8_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp80ew27w8_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp80ew27w8_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp80ew27w8_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  n %= 100\n    for {\n        if n % 11 == 0 && (i + 1) % 10 == 0 {\n      \
    \      i++\n        }\n\n        if n % 13 == 0 && (i + 2) % 10 == 0 {\n     \
    \       i += 2\n        }\n\n        if n != 0 {\n            i += 3\n       \
    \ }\n\n        n = (n-1) / 100\n        if n == 0 {\n            break\n     \
    \   }\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpaqr3c91x_test.go:59: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpaqr3c91x_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaqr3c91x_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaqr3c91x_test.go:59:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaqr3c91x_test.go:59: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaqr3c91x_test.go:59:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaqr3c91x_test.go:59: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n -= n % 10\n\
    \    return n / 10 + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpgftf4uar_test.go:40: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgftf4uar_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpgftf4uar_test.go:40: expected '%!s(int=3)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgftf4uar_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpgftf4uar_test.go:40: expected '%!s(int=6)', got '%!s(int=21)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgftf4uar_test.go:40:\
    \ expected '%!s(int=192)', got '%!s(int=401)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpgftf4uar_test.go:40: expected '%!s(int=639)', got '%!s(int=1001)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgftf4uar_test.go:40:\
    \ expected '%!s(int=8026)', got '%!s(int=10001)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return fizzbuzz(n)\n    }\n    return fizz(n)\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6e1ugv1_test.go:17:16: undefined: fizzbuzz

    /tmp/tmpo6e1ugv1_test.go:19:12: undefined: fizz

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n         \
    \   if i%7 == 0 {\n                result += i\n            }\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp4475dzwy_test.go:47: expected '%!s(int=2)', got '%!s(int=462)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp4475dzwy_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp4475dzwy_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp4475dzwy_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp4475dzwy_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp4475dzwy_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp4475dzwy_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075413
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    if n < 10 || n > 83 {\n   \
    \     return 1\n    }\n    if n % 10 == 7 {\n        return fizz_buzz(n / 10)\
    \ + fizz_buzz(n / 10)\n    }\n    return fizz_buzz(n / 10) + fizz_buzz(n / 10)\
    \ + fizz_buzz(n / 10)\n}\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp0ogc8muu_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp0ogc8muu_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp0ogc8muu_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp0ogc8muu_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp0ogc8muu_test.go:47: expected '%!s(int=192)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp0ogc8muu_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp0ogc8muu_test.go:47: expected '%!s(int=8026)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for {\n   \
    \     if n % 11 == 0 || n % 13 == 0 {\n            break\n        }\n        if\
    \ n == 0 {\n            break\n        }\n        n--\n    }\n    return n\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp76zzxn1a_test.go:48: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp76zzxn1a_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp76zzxn1a_test.go:48: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp76zzxn1a_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp76zzxn1a_test.go:48: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp76zzxn1a_test.go:48:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp76zzxn1a_test.go:48: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp76zzxn1a_test.go:48:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 10 {\n\
    \        return n\n    }\n\n    switch {\n    case n % 11 == 0:\n        return\
    \ fizz_buzz(n / 11)\n    case n % 13 == 0:\n        return fizz_buzz(n / 13)\n\
    \    default:\n        return 0\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpj9z6fa5z_test.go:50: expected '%!s(int=2)', got '%!s(int=6)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpj9z6fa5z_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpj9z6fa5z_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpj9z6fa5z_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpj9z6fa5z_test.go:50: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpj9z6fa5z_test.go:50:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpj9z6fa5z_test.go:50: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    if n % 11 == 0 {\n        count += 1\n    }\n    if n % 13 == 0 {\n     \
    \   count += 1\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpghrwrla3_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpghrwrla3_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpghrwrla3_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpghrwrla3_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpghrwrla3_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpghrwrla3_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpghrwrla3_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 {\n        return 0\n    }\n\n    if n%13 == 0 {\n        return 1\n    }\n\
    \n    return fizz_buzz(n/10) + fizz_buzz(n/10)\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmph2z75glb_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmph2z75glb_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmph2z75glb_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmph2z75glb_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmph2z75glb_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmph2z75glb_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmph2z75glb_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n -= 1 // Don't\
    \ count the number 0 as a fizz buzz\n    c := 0\n    if n%11 == 0 && n%13 == 0\
    \ {\n        c++\n    }\n    for i := 9; i >= 1; i-- {\n        if n%i == 0 &&\
    \ n%(i+1) == 0 {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpc8ptfj6z_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpc8ptfj6z_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpc8ptfj6z_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpc8ptfj6z_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpc8ptfj6z_test.go:49: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpc8ptfj6z_test.go:49:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpc8ptfj6z_test.go:49: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for i := 0;\
    \ i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n            if n%11 == 0\
    \ {\n                return i + fizz_buzz(n/11)\n            }\n            return\
    \ i + fizz_buzz(n/13)\n        }\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpbmewnu0i_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpbmewnu0i_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpbmewnu0i_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpbmewnu0i_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpbmewnu0i_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpbmewnu0i_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpbmewnu0i_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpmtfb8024_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpmtfb8024_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpmtfb8024_test.go:45: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpmtfb8024_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpmtfb8024_test.go:45: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpmtfb8024_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpmtfb8024_test.go:45: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpmtfb8024_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 ||\
    \ n > 13 {\n        return 0\n    }\n    switch {\n    case n % 11 == 0:\n   \
    \     return 1\n    case n % 13 == 0:\n        return 2\n    }\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpg8zdev7v_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpg8zdev7v_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpg8zdev7v_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpg8zdev7v_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpg8zdev7v_test.go:48: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpg8zdev7v_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpg8zdev7v_test.go:48: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 ||\
    \ n%11 == 0 || n%13 == 0 {\n        return 0\n    }\n    var count int\n    for\
    \ i := 1; i <= n; i++ {\n        if (n%11 == 0 && n%13 != 0) || (n%11 != 0 &&\
    \ n%13 == 0) {\n            count++\n        }\n        if n%11 == 0 && n%13 ==\
    \ 0 {\n            count++\n        }\n        if n%11 != 0 && n%13 == 0 {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp5_ua9s1t_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp5_ua9s1t_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp5_ua9s1t_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp5_ua9s1t_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp5_ua9s1t_test.go:54: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp5_ua9s1t_test.go:54:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp5_ua9s1t_test.go:54: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    switch {\n\
    \    case n % 11 == 0 and n % 13 == 0:\n        return n\n    case n % 11 == 0:\n\
    \        return 11\n    case n % 13 == 0:\n        return 13\n    default:\n \
    \       return 0\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplv2lwxua_test.go:17:22: expected '':'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075414
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for n >= 10 {\n        if n%11 == 0 || n%13 == 0 {\n            count++\n\
    \        }\n        n = n%10\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp07maixqe_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp07maixqe_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp07maixqe_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp07maixqe_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp07maixqe_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp07maixqe_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp07maixqe_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    x := int(n%10)\n    y := int(n/10)\n\
    \n    if x == y {\n        return fizz_buzz(y)\n    }\n\n    return fizz_buzz(x)\
    \ + fizz_buzz(y)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fizz_buzz(0x5?)\n\
    \t/tmp/tmpyt_p2uww_test.go:15 +0xf6 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef756\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef72b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc020160448 sp=0xc020160420 pc=0x4ef72b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc020160470 sp=0xc020160448 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc020160498 sp=0xc020160470 pc=0x4ef72b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef72b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc020160538 sp=0xc020160510 pc=0x4ef72b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpyt_p2uww_test.go:27 +0xcb\
    \ fp=0xc020160560 sp=0xc020160538 pc=0x4ef72b\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpyt_p2uww_test.go:27 +0xcb fp=0xc020160588 sp=0"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11==0\
    \ || n%13==0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp4lverrls_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp4lverrls_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp4lverrls_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp4lverrls_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp4lverrls_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp4lverrls_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp4lverrls_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return n\n    }\n    return fizz_buzz(n/11)*11 + fizz_buzz(n/13)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpldgfaq_1_test.go:42: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpldgfaq_1_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpldgfaq_1_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpldgfaq_1_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpldgfaq_1_test.go:42: expected '%!s(int=192)', got '%!s(int=3993)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpldgfaq_1_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpldgfaq_1_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    b := buzz(n / 11)\n    b |= buzz(n % 11)\n\n \
    \   return b\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7igrpcqr_test.go:20:10: undefined: buzz

    /tmp/tmp7igrpcqr_test.go:21:10: undefined: buzz

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \n    if n%11 == 0 || n%13 == 0 {\n        count++\n    }\n\n    if n > 10 {\n\
    \        count += fizz_buzz(n/10)\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmphaeraajx_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphaeraajx_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmphaeraajx_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmphaeraajx_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmphaeraajx_test.go:49: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmphaeraajx_test.go:49:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmphaeraajx_test.go:49: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075415
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := \"\"\n\
    \    if n % 11 == 0 {\n        s += \"11\"\n    }\n    if n % 13 == 0 {\n    \
    \    s += \"13\"\n    }\n    if s == \"\" {\n        s = fmt.Sprintf(\"%d\", n)\n\
    \    }\n    f := 0\n    for _, s := range s {\n        f *= len(s)\n        if\
    \ n%s == 0 {\n            f += 1\n        }\n    }\n    return f\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb1h9u22k_test.go:28:18: invalid argument: s (variable of type rune) for
    len

    /tmp/tmpb1h9u22k_test.go:29:12: invalid operation: n % s (mismatched types int
    and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075415
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    total := 0\n    for i := 0; i < n; i++ {\n     \
    \   if isDivisible(i, 11, n) {\n            total++\n        }\n        if isDivisible(i,\
    \ 13, n) {\n            total++\n        }\n    }\n    return total\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplypvmgjq_test.go:21:12: undefined: isDivisible

    /tmp/tmplypvmgjq_test.go:24:12: undefined: isDivisible

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075415
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n > 0 &&\
    \ n < 1000 {\n        if n%11 == 0 || n%13 == 0 {\n            return n\n    \
    \    } else {\n            return 0\n        }\n    } else {\n        return 0\n\
    \    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpz_a93wuv_test.go:47: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpz_a93wuv_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpz_a93wuv_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpz_a93wuv_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpz_a93wuv_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpz_a93wuv_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpz_a93wuv_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return n\n    }\n\n    var count = 0\n    for i\
    \ := 1; i <= n; i += 11 {\n        if i % 11 == 0 {\n            count += 1\n\
    \        }\n        if i % 13 == 0 {\n            count += 1\n        }\n    \
    \    if i == n {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpuddsfe3b_test.go:55: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpuddsfe3b_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpuddsfe3b_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpuddsfe3b_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpuddsfe3b_test.go:55: expected '%!s(int=192)', got '%!s(int=28)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpuddsfe3b_test.go:55:\
    \ expected '%!s(int=639)', got '%!s(int=71)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpuddsfe3b_test.go:55: expected '%!s(int=8026)', got '%!s(int=699)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 {\n        return fizz_buzz(n/11)\n    }\n    if n%13 == 0 {\n        return\
    \ fizz_buzz(n/13)\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp5csssqou_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp5csssqou_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp5csssqou_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp5csssqou_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp5csssqou_test.go:45: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp5csssqou_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp5csssqou_test.go:45: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075416
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    if n < 7 {\n        return 1\n\
    \    }\n    if n < 19 {\n        return 2\n    }\n    if n < 28 {\n        return\
    \ 3\n    }\n    if n < 37 {\n        return 4\n    }\n    if n < 47 {\n      \
    \  return 5\n    }\n    if n < 57 {\n        return 6\n    }\n    if n < 67 {\n\
    \        return 7\n    }\n    if n < 77 {\n        return 8\n    }\n    if n <\
    \ 87 {\n        return 9\n    }\n    if n < 97 {\n        return 10\n    }\n \
    \   if n < 109 {\n        return 11\n    }\n    if n < 117 {\n        return 12\n\
    \    }\n    if n < 127 {\n        return 13\n    }\n    return 14\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmppnd3clm4_test.go:81: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmppnd3clm4_test.go:81:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmppnd3clm4_test.go:81: expected '%!s(int=3)', got '%!s(int=9)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmppnd3clm4_test.go:81:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmppnd3clm4_test.go:81: expected '%!s(int=6)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmppnd3clm4_test.go:81:\
    \ expected '%!s(int=192)', got '%!s(int=14)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmppnd3clm4_test.go:81: expected '%!s(int=639)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmppnd3clm4_test.go:81:\
    \ expected '%!s(int=8026)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0 //\
    \ implement me!\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpkxt8ihjw_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpkxt8ihjw_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpkxt8ihjw_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpkxt8ihjw_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpkxt8ihjw_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkxt8ihjw_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpkxt8ihjw_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i <= n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n        \
    \    if i%11 == 0 && i%13 == 0 {\n                count++\n            }\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpze6tvmpd_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpze6tvmpd_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpze6tvmpd_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpze6tvmpd_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpze6tvmpd_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpze6tvmpd_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpze6tvmpd_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n\
    \        return 0\n    }\n\n    n -= 7\n    if n % 11 == 0 || n % 13 == 0 {\n\
    \        return 1\n    }\n\n    return fizz_buzz(n - 11)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpl0honql7_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpl0honql7_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpl0honql7_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpl0honql7_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpl0honql7_test.go:48: expected '%!s(int=192)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpl0honql7_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpl0honql7_test.go:48: expected '%!s(int=8026)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := n; i > 0; i/= 10 {\n        if i%11 == 0 || i%13 == 0 {\n      \
    \      count += n\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp0kcxkco3_test.go:45: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp0kcxkco3_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp0kcxkco3_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp0kcxkco3_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp0kcxkco3_test.go:45: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp0kcxkco3_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp0kcxkco3_test.go:45: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ 1\n    }\n\n    return fizz_buzz(n-1)\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp3g694iiz_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp3g694iiz_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp3g694iiz_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp3g694iiz_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp3g694iiz_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp3g694iiz_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp3g694iiz_test.go:46: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp3g694iiz_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n%11 == 0 || n%13 == 0 {\n        return n\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        count += int(n%11\
    \ == 0 || n%13 == 0)\n        n = int(n/10)\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxhcbom2_test.go:24:22: cannot convert n % 11 == 0 || n % 13 == 0 (untyped
    bool value) to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 13 {\n\
    \        if n % 11 == 0 {\n            return fizz_buzz(n / 11) + 1\n        }\
    \ else {\n            return fizz_buzz(n / 13) + 1\n        }\n    } else {\n\
    \        return 0\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpp462ig1a_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpp462ig1a_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpp462ig1a_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpp462ig1a_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpp462ig1a_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpp462ig1a_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpp462ig1a_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    return fizz_buzz(n - 1)\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpetupifbq_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpetupifbq_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpetupifbq_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpetupifbq_test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpetupifbq_test.go:43: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpetupifbq_test.go:43:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpetupifbq_test.go:43: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    x := n%11\n    x -= x%3\n   \
    \ x -= x%3\n    x -= x%3\n    return 1 + fizz_buzz(n/3)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpsde3md1k_test.go:46: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpsde3md1k_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpsde3md1k_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpsde3md1k_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpsde3md1k_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpsde3md1k_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=8)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpsde3md1k_test.go:46: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpsde3md1k_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += 1\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmphn8t0512_test.go:46: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmphn8t0512_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmphn8t0512_test.go:46: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmphn8t0512_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmphn8t0512_test.go:46: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphn8t0512_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmphn8t0512_test.go:46: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphn8t0512_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count, _ :=\
    \ buzz(n, 0, 10, 11)\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbn1vqgo5_test.go:16:17: undefined: buzz

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n\
    \    for i := 0; i < n; i++ {\n        if n % 11 == 0 || n % 13 == 0 {\n     \
    \       result++\n        }\n        n = n / 10\n    }\n    return result\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpatg4zxqp_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpatg4zxqp_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpatg4zxqp_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpatg4zxqp_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpatg4zxqp_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpatg4zxqp_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpatg4zxqp_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    count7 := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i % 11 == 0 && i % 13 == 0 {\n            count7++\n\
    \        }\n        if i == 7 {\n            count7++\n        }\n    }\n    return\
    \ count7\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp204q0k3j_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp204q0k3j_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp204q0k3j_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp204q0k3j_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp204q0k3j_test.go:51: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp204q0k3j_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=29)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp204q0k3j_test.go:51: expected '%!s(int=639)', got '%!s(int=71)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp204q0k3j_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=701)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n\n    if n > 13 {\n        return count\n    }\n\n    if n % 11 == 0 {\n\
    \        count += 1\n    }\n\n    if n % 13 == 0 {\n        count += 1\n    }\n\
    \n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpop6f8dxj_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpop6f8dxj_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpop6f8dxj_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpop6f8dxj_test.go:53:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpop6f8dxj_test.go:53: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpop6f8dxj_test.go:53:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpop6f8dxj_test.go:53: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for i := 0;\
    \ i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n            if n%11 == 0\
    \ {\n                return i\n            } else {\n                return i\
    \ + 1\n            }\n        }\n    }\n    return n\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpsuoqitu4_test.go:48: expected '%!s(int=0)', got '%!s(int=50)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpsuoqitu4_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpsuoqitu4_test.go:48: expected '%!s(int=3)', got '%!s(int=79)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpsuoqitu4_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=100)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpsuoqitu4_test.go:48: expected '%!s(int=6)', got '%!s(int=200)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpsuoqitu4_test.go:48:\
    \ expected '%!s(int=192)', got '%!s(int=4000)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpsuoqitu4_test.go:48: expected '%!s(int=639)', got '%!s(int=10000)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpsuoqitu4_test.go:48:\
    \ expected '%!s(int=8026)', got '%!s(int=100000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    return fizz_buzz(n/11)-fizz_buzz(n/13)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpzlowoins_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpzlowoins_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpzlowoins_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpzlowoins_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpzlowoins_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpzlowoins_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpzlowoins_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075418
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    // Return 0 if n is divisible by 11, or 1 if n is\
    \ divisible by 13.\n    if n % 11 == 0 || n % 13 == 0 {\n        return 0\n  \
    \  }\n    // Return the number of times digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13 and are divisible by 3.\n    return n/3 %\
    \ 7 + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpaw0q4sjo_test.go:47: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpaw0q4sjo_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpaw0q4sjo_test.go:47: expected '%!s(int=3)', got '%!s(int=6)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpaw0q4sjo_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpaw0q4sjo_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpaw0q4sjo_test.go:47:\
    \ expected '%!s(int=192)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpaw0q4sjo_test.go:47: expected '%!s(int=639)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpaw0q4sjo_test.go:47:\
    \ expected '%!s(int=8026)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075419
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_test.Get(n/11)%11\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ixg4kud_test.go:16:12: undefined: fizz_buzz_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return n\n    }\n    n -= n%11\n    return fizz_buzz(n/11)\
    \ + n%11\n}\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpikdil3m6_test.go:42: expected '%!s(int=2)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpikdil3m6_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpikdil3m6_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpikdil3m6_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpikdil3m6_test.go:42: expected '%!s(int=192)', got '%!s(int=363)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpikdil3m6_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpikdil3m6_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: Implement\n\
    \    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpytwie1bm_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpytwie1bm_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpytwie1bm_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpytwie1bm_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpytwie1bm_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpytwie1bm_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpytwie1bm_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075419
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        digit, ok := int(n%11), ok\n        if\
    \ !ok || digit == 7 {\n            count++\n        }\n        n = n/10\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp34s0v53f_test.go:18:33: undefined: ok

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 ||\
    \ n % 11 == 0 || n % 13 == 0 {\n        return 1\n    }\n\n    if n % 10 == 0\
    \ {\n        return fizz_buzz(n / 10)\n    }\n\n    if n % 5 == 0 {\n        return\
    \ fizz_buzz(n / 5) + 1\n    }\n\n    if n % 3 == 0 {\n        return fizz_buzz(n\
    \ / 3)\n    }\n\n    return fizz_buzz(n / 9)\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp11rpx_w3_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp11rpx_w3_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp11rpx_w3_test.go:55: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp11rpx_w3_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp11rpx_w3_test.go:55: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp11rpx_w3_test.go:55:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp11rpx_w3_test.go:55: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp11rpx_w3_test.go:55:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 && n % 13 == 0 {\n        return 0\n    }\n    switch {\n    case n % 10 ==\
    \ 0 && n % 11 == 0:\n        return 1\n    case n % 10 == 0 && n % 13 == 0:\n\
    \        return 2\n    case n % 10 == 0 && n % 11 != 0:\n        return 3\n  \
    \  case n % 10 != 0 && n % 11 == 0:\n        return 4\n    case n % 10 != 0 &&\
    \ n % 13 == 0:\n        return 5\n    case n % 10 != 0 && n % 11 != 0:\n     \
    \   return 6\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqbiiel47_test.go:33:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := n\n  \
    \  if x%11 == 0 || x%13 == 0 {\n        return 0\n    }\n\n    q := n%11\n   \
    \ y := n%13\n    if q == 0 || y == 0 || q+y == 3 {\n        return x\n    }\n\n\
    \    q -= 3\n    if q%2 == 0 && y%2 == 0 {\n        x /= 11\n        x /= 13\n\
    \        return x\n    }\n\n    return fizz_buzz(x)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520355?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0x32?)\n\
    \t/tmp/tmpdepvf13e_test.go:15 +0x13b fp=0xc020160398 sp=0xc020160390 pc=0x4ef79b\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc0201603b0 sp=0xc020160398 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc0201603c8 sp=0xc0201603b0 pc=0x4ef787\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc0201603e0 sp=0xc0201603c8 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc0201603f8 sp=0xc0201603e0 pc=0x4ef787\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc020160410 sp=0xc0201603f8 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc020160428 sp=0xc020160410 pc=0x4ef787\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc020160440 sp=0xc020160428 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc020160458 sp=0xc020160440 pc=0x4ef787\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc020160470 sp=0xc020160458 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc020160488 sp=0xc020160470 pc=0x4ef787\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpdepvf13e_test.go:34 +0x127\
    \ fp=0xc0201604a0 sp=0xc020160488 pc=0x4ef787\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpdepvf13e_test.go:34 +0x127 fp=0xc0"
  timestamp: 1660075422
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1)\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1)\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n\n    n /= 11\n    n /= 13\n  \
    \  n /= 11\n    n /= 13\n\n    if n % 7 == 0 {\n        return 2\n    }\n\n  \
    \  return 3\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp24duhree_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp24duhree_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp24duhree_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp24duhree_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp24duhree_test.go:52: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp24duhree_test.go:52:\
    \ expected '%!s(int=192)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp24duhree_test.go:52: expected '%!s(int=639)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp24duhree_test.go:52:\
    \ expected '%!s(int=8026)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n += 11\n \
    \   for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if n / i >=\
    \ i || n / i % 11 == 0 || n / i % 13 == 0 {\n                return i + 1\n  \
    \          }\n        }\n    }\n    return 0\n}\n</code>\n<|/ a tags=algorithm,fizzbuzz,go\
    \ |>\n<| a |>\nJust for fun, another FizzBuzz implementation in golang.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nconst maxFizzBuzz = 13\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgs_zw7wd_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075419
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n\n    return fizz_buzz(n/11) + fizz_buzz(n/13)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpsfysz_sl_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpsfysz_sl_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpsfysz_sl_test.go:43: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpsfysz_sl_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpsfysz_sl_test.go:43: expected '%!s(int=6)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpsfysz_sl_test.go:43:\
    \ expected '%!s(int=192)', got '%!s(int=9)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpsfysz_sl_test.go:43: expected '%!s(int=639)', got '%!s(int=16)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpsfysz_sl_test.go:43:\
    \ expected '%!s(int=8026)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1)\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpyk6mom8g_test.go:42: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyk6mom8g_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  s := make([]byte, 0, n)\n\n    for i := range s {\n        if n%11 == 0 ||\
    \ n%13 == 0 {\n            s = append(s, byte(i))\n        }\n        n /= 10\n\
    \    }\n\n    return len(s) - 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbt3mc4q2_test.go:16:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 ||\
    \ n % 11 != 0 || n % 13 != 0 {\n        return 0\n    }\n    count := 0\n    for\
    \ i := 0; i < n; i++ {\n        if i % 11 == 0 && i % 13 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp2ckjiclj_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp2ckjiclj_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp2ckjiclj_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp2ckjiclj_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp2ckjiclj_test.go:48: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp2ckjiclj_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp2ckjiclj_test.go:48: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpaeep_nah_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpaeep_nah_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075196
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var (\n   \
    \     count int\n        digit = 7\n    )\n    for count < n && n != 0 {\n   \
    \     if n % 10 == digit {\n            n /= 10\n            count++\n       \
    \ }\n        digit = digit + 1\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075433
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    if n%11 == 0 || n%13 == 0 {\n        return n%11\n\
    \    }\n    n /= 11\n    if n%11 == 0 || n%13 == 0 {\n        return n%11\n  \
    \  }\n    n /= 13\n    if n%11 == 0 || n%13 == 0 {\n        return n%11\n    }\n\
    \    n /= 13\n    if n%11 == 0 || n%13 == 0 {\n        return n%11\n    }\n  \
    \  n /= 11\n    if n%11 == 0 || n%13 == 0 {\n        return n%11\n    }\n    return\
    \ 0\n}\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmps233u8f__test.go:60: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmps233u8f__test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmps233u8f__test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmps233u8f__test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmps233u8f__test.go:60: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmps233u8f__test.go:60:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmps233u8f__test.go:60: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 {\n        return int(n / 11)\n    }\n    if n % 13 == 0 {\n        return\
    \ int(n / 13) + 1\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp_iquvb25_test.go:45: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_iquvb25_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp_iquvb25_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_iquvb25_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp_iquvb25_test.go:45: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_iquvb25_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp_iquvb25_test.go:45: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    counts := 0\n\
    \    for i := 0; i < n; i++ {\n        digit := n % 10\n        if digit == 7\
    \ && i%11 == 0 || digit == 7 && i%13 == 0 {\n            counts++\n        }\n\
    \        n /= 10\n    }\n    return counts\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpsfsjkenb_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpsfsjkenb_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpsfsjkenb_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpsfsjkenb_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpsfsjkenb_test.go:47: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpsfsjkenb_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpsfsjkenb_test.go:47: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int\n\
    \    for i = 0; i < n; i++ {\n        if ((i % 11) == 0 || i % 13 == 0) {\n  \
    \          i += 7\n        }\n    }\n    return i\n}\n</code>\n<|/ a dscore=1\
    \ tags=go,fizzbuzz,algorithm,for-loop |>\n<| c |>\nThanks for this answer. Your\
    \ solution is really elegant, but I was looking for something more \"golden\"\
    . I think I was hoping for some way to change the for loop to a while loop that\
    \ skips the loop body when i == 7, but I was unable to figure out a way to do\
    \ so. I'll be trying a few other ideas and will report back.\n<|/ c |>\n<| c |>\n\
    I think the while loop version is more readable. It also doesn't require any extra\
    \ variables like the other answers do.\n<|/ c |>\n<| c |>\nI like this solution\
    \ more than the accepted answer - it's easy to understand and concise. The idea\
    \ of creating a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13 is pretty cool.\n<|/\
    \ c |>\n<| a dscore=0 tags=go,fizzbuzz,algorithm,for-loop |>\nI like answer, but\
    \ his solution does not actually skip the loop body when i == 7, it simply increases\
    \ i by 7 each time.\nThis is how I would approach this problem:\n<code>\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj9e9xmd6_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    switch {\n\
    \    case n > 0 && n % 11 == 0: return 0\n    case n > 0 && n % 13 == 0: return\
    \ 2\n    default: return 3\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n \
    \ candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp0ium80q5_test.go:43: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp0ium80q5_test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp0ium80q5_test.go:43: expected '%!s(int=192)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp0ium80q5_test.go:43:\
    \ expected '%!s(int=639)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp0ium80q5_test.go:43: expected '%!s(int=8026)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n %= 100\n\
    \    switch {\n    case n == 11 || n == 13:\n        return 1\n    case n % 11\
    \ == 0 || n % 13 == 0:\n        return fizz_buzz(n / 11) + 1\n    default:\n \
    \       return 0\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:15 +0xfa fp=0xc020160398 sp=0xc020160390 pc=0x4ef75a\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc0201603b0 sp=0xc020160398 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc0201603c8 sp=0xc0201603b0 pc=0x4ef737\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc0201603e0 sp=0xc0201603c8 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc0201603f8 sp=0xc0201603e0 pc=0x4ef737\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc020160410 sp=0xc0201603f8 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc020160428 sp=0xc020160410 pc=0x4ef737\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc020160440 sp=0xc020160428 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc020160458 sp=0xc020160440 pc=0x4ef737\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc020160470 sp=0xc020160458 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc020160488 sp=0xc020160470 pc=0x4ef737\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmps37x4qao_test.go:21 +0xd7\
    \ fp=0xc0201604a0 sp=0xc020160488 pc=0x4ef737\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmps37x4qao_test.go:21 +0xd7 fp=0xc0201604b8 sp=0"
  timestamp: 1660075425
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i, f := 0,\
    \ n%3 == 0\n    if f&&(i%11 == 0 || i%13 == 0) {\n        return n\n    }\n  \
    \  for ; ; i++ {\n        if f&&(i%11 == 0 || i%13 == 0) {\n            return\
    \ n\n        }\n        if n%10 == i%10 {\n            n/=10\n        } else {\n\
    \            n = i\n        }\n        if n==0 {\n            return 0\n     \
    \   }\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075434
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for i := 0; i < n; i++ {\n        if (n % (i + 1) == 7) {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3m3vuzxo_test.go:16:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    if n % 11 == 0 || n % 13 == 0 {\n        count++\n    }\n    for i := 1;\
    \ i <= n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count++\n\
    \        }\n        if i == n {\n            break\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpt9m2oypu_test.go:51: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpt9m2oypu_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=14)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpt9m2oypu_test.go:51: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpt9m2oypu_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpt9m2oypu_test.go:51: expected '%!s(int=6)', got '%!s(int=32)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpt9m2oypu_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpt9m2oypu_test.go:51: expected '%!s(int=639)', got '%!s(int=1609)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpt9m2oypu_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    q := n % 11\n\
    \    r := n % 13\n\n    if q == 0 && r == 0 {\n        return n\n    }\n\n   \
    \ if q == 0 {\n        return fizz_buzz(n - 1)\n    }\n\n    if r == 0 {\n   \
    \     return fizz_buzz(n - 11)\n    }\n\n    return fizz_buzz(n - 11)\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.fizz_buzz(0xfffffffff1555835?)\n\
    \t/tmp/tmpxjbepfhy_test.go:15 +0xd9 fp=0xc020160398 sp=0xc020160390 pc=0x4ef739\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:31 +0xc5\
    \ fp=0xc0201603b0 sp=0xc020160398 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0xc0201603c8 sp=0xc0201603b0 pc=0x4ef725\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:28 +0xae\
    \ fp=0xc0201603e0 sp=0xc0201603c8 pc=0x4ef70e\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0xc0201603f8 sp=0xc0201603e0 pc=0x4ef725\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:31 +0xc5\
    \ fp=0xc020160410 sp=0xc0201603f8 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0xc020160428 sp=0xc020160410 pc=0x4ef725\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:31 +0xc5\
    \ fp=0xc020160440 sp=0xc020160428 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0xc020160458 sp=0xc020160440 pc=0x4ef725\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:31 +0xc5\
    \ fp=0xc020160470 sp=0xc020160458 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0xc020160488 sp=0xc020160470 pc=0x4ef725\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpxjbepfhy_test.go:31 +0xc5\
    \ fp=0xc0201604a0 sp=0xc020160488 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpxjbepfhy_test.go:31 +0xc5 fp=0x"
  timestamp: 1660075426
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if ((i % 11) == 0 || (i % 13) == 0) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpk9z7zo_h_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpk9z7zo_h_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpk9z7zo_h_test.go:45: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpk9z7zo_h_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpk9z7zo_h_test.go:45: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpk9z7zo_h_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpk9z7zo_h_test.go:45: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpk9z7zo_h_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    divisor :=\
    \ 11\n    if n == 13 {\n        divisor = 13\n    }\n    c := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if n%divisor == 0 {\n            c++\n        }\n \
    \       divisor *= 11\n    }\n    return c\n}\n`\n\nvar fizz_buzz_TestSuite =\
    \ &suite.Suite{\n    Run: func(t testing.TB, g *generator2.Generator) {\n    \
    \    t := g\n        t.Run(\"FizzBuzz\", t.Test(fizz_buzz_TestCase(t, fb, nil)))\n\
    \    },\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpagotrmv8_test.go:29:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 ||\
    \ n > 13 {\n        return 0\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n   \
    \     return 1\n    }\n    return fizz_buzz(n/10) + (n % 10 == 0 ? 0 : 1)\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxyhwhi6e_test.go:22:43: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n\
    \n    if n > 10 {\n        return total\n    }\n\n    for i := 1; i <= n; i++\
    \ {\n        if n%11 == 0 {\n            total++\n        }\n\n        if n%13\
    \ == 0 {\n            total++\n        }\n\n        if n%7 == 0 {\n          \
    \  total++\n        }\n    }\n\n    return total\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,performance\
    \ dscore=0 |>\n<| c |>\nThanks for this.  However, I do not think this gives the\
    \ correct answer.  The problem I am trying to solve is to find the number of numbers\
    \ which are divisible by both 11 and 13 in the range 1 to 100.\n<|/ c |>\n<| c\
    \ |>\nThanks, I actually wrote a program that works in O(n) time.  I'll add it\
    \ to the post\n<|/ c |>\n<| a dscore=0 tags=algorithm,language-agnostic,performance\
    \ |>\nThe algorithm is as follows.\nLet k be the number of the digits in n and\
    \ t be the largest number such that k is divisible by 11 or 13. \nThen \n<code>\n\
    (t - n) / k\n</code>\nis the number of such numbers which can be obtained from\
    \ dividing n by 11 or 13. \nTo improve the efficiency you can notice that the\
    \ number divisible by 11 or 13 can be obtained by adding k and 1 to the number\
    \ (n - k + 1).\nThen it follows that you can divide the range in two ways: \n\
    <code>\n[1 .. t-1]\n</code>\nand\n<code>\n[k .. t-1]\n</code>\nThe first one can\
    \ be achieved if the range of n can be divided by 11 or 13 by adding k and 1 to\
    \ the number (n - k + 1) and the second one can be achieved if n can be divided\
    \ by 11 or 13 (with some conditions) by adding k+1 to the number (n-1).\nSo you\
    \ can obtain the range of numbers as follows:\n<code>\n[1 .. t-1] x [k .. t-1]\n\
    </code>\nThe total number of such numbers can be obtained by summing up all the\
    \ pairs of such numbers as follows:\n<code>\n(t - n) / (k+1) - 1\n</code>\nThe\
    \ complexity of this algorithm is O(n).\n<|/ a |>\n<| c |>\nThanks!  Could you\
    \ clarify how you got the sum of the pairs?  How do you know that you can do this?\
    \  Is it because 11 and 13 are evenly divisible?  Or do you just add them?  Sorry\
    \ if I am ignorant.\n<|/ c |>\n<| c |>\nThe sum is obtained from summing the pairs.\
    \ Suppose that k = 2 and \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg_hb4ybr_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    if n%11 > 0 || n%13 > 0 {\n\
    \        return 1\n    }\n\n    return fizz_buzz(n/11) + 1\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpcqcv19wf_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpcqcv19wf_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpcqcv19wf_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpcqcv19wf_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpcqcv19wf_test.go:47: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpcqcv19wf_test.go:47:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpcqcv19wf_test.go:47: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpcqcv19wf_test.go:47:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if n%11 == 0 || n%13 == 0 {\n         \
    \   count++\n        }\n        n /= 10\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpz2w5wynl_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpz2w5wynl_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpz2w5wynl_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpz2w5wynl_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpz2w5wynl_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpz2w5wynl_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpz2w5wynl_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 1\n    }\n\n    return fizz_buzz(n-1)\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpea6ztbds_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpea6ztbds_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpea6ztbds_test.go:43: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpea6ztbds_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpea6ztbds_test.go:43: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpea6ztbds_test.go:43:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpea6ztbds_test.go:43: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpea6ztbds_test.go:43:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n\n    s := make([]int, 0)\n   \
    \ c := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 && i % 13 == 0\
    \ {\n            c += 1\n        } else {\n            c += 0\n        }\n\n \
    \       if c == 7 {\n            s = append(s, i)\n        }\n    }\n\n    return\
    \ len(s)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpo2x6gko4_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpo2x6gko4_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpo2x6gko4_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpo2x6gko4_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpo2x6gko4_test.go:57: expected '%!s(int=192)', got '%!s(int=143)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpo2x6gko4_test.go:57:\
    \ expected '%!s(int=639)', got '%!s(int=143)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpo2x6gko4_test.go:57: expected '%!s(int=8026)', got '%!s(int=143)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n > 0 &&\
    \ n%11 == 0 || n%13 == 0 {\n        return 1\n    }\n\n    return 0\n}\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpldzy7l2y_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpldzy7l2y_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpldzy7l2y_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpldzy7l2y_test.go:42:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpldzy7l2y_test.go:42: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpldzy7l2y_test.go:42:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpldzy7l2y_test.go:42: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return n\n    }\n    return fizz_buzz(n - 1)\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=3)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=99)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=6)', got '%!s(int=198)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=3993)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpaylxbrbc_test.go:42: expected '%!s(int=639)', got '%!s(int=9999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpaylxbrbc_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=99996)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    return fizz_buzz(n/10) + n%10\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpxnnlm7d5_test.go:42: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpxnnlm7d5_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpxnnlm7d5_test.go:42: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpxnnlm7d5_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpxnnlm7d5_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpxnnlm7d5_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpxnnlm7d5_test.go:42: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpxnnlm7d5_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n    i := 0\n    for {\n        i\
    \ += 1 if n%11 == i || n%13 == i\n        n /= 10\n        if n == 0 {\n     \
    \       break\n        }\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaokbk9d6_test.go:21:16: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    fmt.Println(n)\n\
    \    return 0\n}\n</code>\n<|/ a tags=fizzbuzz,go,algorithm dscore=1 |>\n<| a\
    \ tags=fizzbuzz,go,algorithm |>\nA Go Implementation Using Binary Search and Recursion\
    \ (O(n) time complexity):\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4oj35fc5_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := \"\"\n\
    \    for d := 0; d < n; d++ {\n        if n%d%11 == 0 || n%d%13 == 0 {\n     \
    \       s += \"7\"\n        } else {\n            s += \"0\"\n        }\n    }\n\
    \    \n    return len(s)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fizz_buzz(...)\n\t/tmp/tmpmne_8cvg_test.go:18\n\
    command-line-arguments_test.TestFizz_Buzz(0x0?)\n\t/tmp/tmpmne_8cvg_test.go:35\
    \ +0xb19\ntesting.tRunner(0xc00011aea0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    if n < 2 {\n        return\
    \ n\n    }\n\n    result := 0\n    if n%11 > 0 {\n        result = result + 1\n\
    \    }\n    if n%13 > 0 {\n        result = result + 1\n    }\n    return result\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp2kf4udov_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp2kf4udov_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp2kf4udov_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp2kf4udov_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp2kf4udov_test.go:54: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp2kf4udov_test.go:54:\
    \ expected '%!s(int=192)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp2kf4udov_test.go:54: expected '%!s(int=639)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp2kf4udov_test.go:54:\
    \ expected '%!s(int=8026)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizzBuzz(n,\
    \ 0)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5d4l22cg_test.go:16:12: undefined: fizzBuzz

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n > 100\
    \ {\n        return 0\n    }\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n <= 7 {\n        return 1\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n   \
    \     return fizz_buzz(n - 1)\n    }\n    return fizz_buzz(n - 1) + fizz_buzz(n\
    \ / 11)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp52na26aw_test.go:51: expected '%!s(int=0)', got '%!s(int=34)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp52na26aw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=56)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp52na26aw_test.go:51: expected '%!s(int=3)', got '%!s(int=57)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp52na26aw_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=75)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp52na26aw_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp52na26aw_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp52na26aw_test.go:51: expected '%!s(int=639)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp52na26aw_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return 0\n    }\n\n    count1 := 0\n    count2 :=\
    \ 0\n    count3 := 0\n    count4 := 0\n    count5 := 0\n    count6 := 0\n    count7\
    \ := 0\n    count8 := 0\n    count9 := 0\n\n    for i := 1; i <= n; i++ {\n  \
    \      if i%11 == 0 || i%13 == 0 {\n            count0 := count0 + i\n       \
    \     count1 := count1 + i\n            count2 := count2 + i\n            count3\
    \ := count3 + i\n            count4 := count4 + i\n            count5 := count5\
    \ + i\n            count6 := count6 + i\n            count7 := count7 + i\n  \
    \          count8 := count8 + i\n            count9 := count9 + i\n        }\n\
    \    }\n\n    if count7 <= count8 {\n        return count7\n    }\n    if count8\
    \ <= count9 {\n        return count8\n    }\n    return count9\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm6gd_0a3_test.go:32:23: undefined: count0

    /tmp/tmpm6gd_0a3_test.go:33:13: count1 declared but not used

    /tmp/tmpm6gd_0a3_test.go:34:13: count2 declared but not used

    /tmp/tmpm6gd_0a3_test.go:35:13: count3 declared but not used

    /tmp/tmpm6gd_0a3_test.go:36:13: count4 declared but not used

    /tmp/tmpm6gd_0a3_test.go:37:13: count5 declared but not used

    /tmp/tmpm6gd_0a3_test.go:38:13: count6 declared but not used

    /tmp/tmpm6gd_0a3_test.go:39:13: count7 declared but not used

    /tmp/tmpm6gd_0a3_test.go:40:13: count8 declared but not used

    /tmp/tmpm6gd_0a3_test.go:41:13: count9 declared but not used

    /tmp/tmpm6gd_0a3_test.go:41:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11 ==\
    \ 0 || n%13 == 0 {\n        return n\n    }\n    return fizz_buzz(n/11) * 11 +\
    \ fizz_buzz(n/13) + n%11\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpp0_8z_w0_test.go:42: expected '%!s(int=0)', got '%!s(int=53)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpp0_8z_w0_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpp0_8z_w0_test.go:42: expected '%!s(int=3)', got '%!s(int=85)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpp0_8z_w0_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=107)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpp0_8z_w0_test.go:42: expected '%!s(int=6)', got '%!s(int=227)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpp0_8z_w0_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=4353)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpp0_8z_w0_test.go:42: expected '%!s(int=639)', got '%!s(int=12427)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpp0_8z_w0_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=133048)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n % 11 == 0 || n % 13 == 0 {\n        return\
    \ 1\n    }\n    return fizz_buzz(n/10) + fizz_buzz(n%10)\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0398\
    \ stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmp2saepp1x_test.go:15 +0x10e fp=0xc0200e03a8 sp=0xc0200e03a0 pc=0x4ef76e\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xc5\
    \ fp=0xc0200e03d0 sp=0xc0200e03a8 pc=0x4ef725\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e03f8 sp=0xc0200e03d0 pc=0x4ef746\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xe6\
    \ fp=0xc0200e0420 sp=0xc0200e03f8 pc=0x4ef746\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e0448 sp=0xc0200e0420 pc=0x4ef746\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xe6\
    \ fp=0xc0200e0470 sp=0xc0200e0448 pc=0x4ef746\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e0498 sp=0xc0200e0470 pc=0x4ef746\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xe6\
    \ fp=0xc0200e04c0 sp=0xc0200e0498 pc=0x4ef746\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e04e8 sp=0xc0200e04c0 pc=0x4ef746\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xe6\
    \ fp=0xc0200e0510 sp=0xc0200e04e8 pc=0x4ef746\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e0538 sp=0xc0200e0510 pc=0x4ef746\n\
    command-line-arguments_test.fizz_buzz(0x5)\n\t/tmp/tmp2saepp1x_test.go:22 +0xe6\
    \ fp=0xc0200e0560 sp=0xc0200e0538 pc=0x4ef746\ncommand-line-arguments_test.fizz_buzz(0x5)\n\
    \t/tmp/tmp2saepp1x_test.go:22 +0xe6 fp=0xc0200e0588 sp=0xc0200e0560 "
  timestamp: 1660075426
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for {\n        count += 1\n        if n%11 == 0 || n%13 == 0 {\n        \
    \    return count\n        }\n        if n > 0 {\n            n /= 10\n      \
    \  } else {\n            break\n        }\n    }\n    return 0\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpcjll3smx_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpcjll3smx_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpcjll3smx_test.go:51: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpcjll3smx_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpcjll3smx_test.go:51: expected '%!s(int=192)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpcjll3smx_test.go:51:\
    \ expected '%!s(int=639)', got '%!s(int=6)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpcjll3smx_test.go:51: expected '%!s(int=8026)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       if i % 7 == 0 {\n                count++\n            }\n        } else\
    \ {\n            count++\n        }\n    }\n    return count\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nYour solution is more efficient but I am not sure about\
    \ the correctness of my solution. It gives me correct answer but I am not sure\
    \ if this is the correct solution because I am not able to understand the logic\
    \ of yours. Can you please explain it?\n<|/ c |>\n<| c |>\nYou're correct, your\
    \ solution is more efficient. I'll explain my solution and how it works.\n<|/\
    \ c |>\n<| c |>\nIf it's more efficient, why doesn't the OP's solution work? Can\
    \ you explain why?\n<|/ c |>\n<| c |>\nI edited my answer to explain why your\
    \ solution doesn't work.\n<|/ c |>\n<| c |>\nYes I understand my solution doesn't\
    \ work but I am not sure if my logic is correct or not. I want to know how you\
    \ get this result and how do you get this result.\n<|/ c |>\n<| a tags=fizzbuzz,go,algorithm\
    \ |>\nThe only way to do this properly is to have a counter that keeps track of\
    \ whether or not you've seen the digit 7 and how many times you've seen it.\n\
    This can be done with 2 variables:\n<code>\nvar counter int\nvar seen7 bool\n\
    </code>\nIn your loop, check to see if the digit 7 is seen:\n<code>\nif seen7\
    \ {\n    counter += 1\n} else {\n    seen7 = true\n    counter = 1\n}\n</code>\n\
    Now print the number of times the digit 7 appears:\n<code>\nif counter > 0 {\n\
    \    fmt.Println(counter)\n    counter = 0\n}\n</code>\nThe above can be cleaned\
    \ up slightly by using a for loop and a range like so:\n<code>\nfor i := 0; i\
    \ <= 7; i++ {\n    if seen7 {\n        counter += 1\n    } else {\n        seen7\
    \ = true\n        counter = 1\n    }\n\n    if counter > 0 {\n        fmt.Println(counter)\n\
    \        counter = 0\n    }\n}\n</code>\nThis still produces the desired result,\
    \ but now it's a bit more succinct. The reason why this works is because a for\
    \ loop will always iterate from 0 to whatever the terminating value is - in this\
    \ case it's 7, which is what we want here. As soon as it sees 7 as the number,\
    \ it increments counter and sets seen7 to true.\nIn a for loop, the statement\
    \ \"i < 7\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiqjedgle_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n%11==0\
    \ || n%13==0 {\n        return 0\n    }\n    i := 0\n    for ; i< n; i++ {\n \
    \       b := n%11\n        if b==7 || b==13 {\n            return i\n        }\n\
    \        n = (n-b)/11\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp2ygwsvb9_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp2ygwsvb9_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp2ygwsvb9_test.go:50: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp2ygwsvb9_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp2ygwsvb9_test.go:50: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp2ygwsvb9_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp2ygwsvb9_test.go:50: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp2ygwsvb9_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    count := 0\n    for number := n; number >= 11;\
    \ number-=11 {\n        if number % 11 == 0 {\n            count += 2\n      \
    \  }\n    }\n    if number >= 13 {\n        count += 3\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tne9swe_test.go:26:8: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n > 100\
    \ || n < 0 {\n        fmt.Println(\"n is too large or too small\")\n        return\
    \ -1\n    }\n    digits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\",\
    \ \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\"}\n    count := 0\n    for i := 0; i < n; i++\
    \ {\n        if i % 11 == 0 && i % 13 == 0 {\n            count++\n        }\n\
    \        for _, d := range digits {\n            if i == int(d)*10 {\n       \
    \         count++\n                break\n            }\n        }\n        if\
    \ count == 11 {\n            break\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2k1jnr95_test.go:27:25: cannot convert d (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 || n % 13 == 0 {\n        return 0\n    }\n    return fizz_buzz(n/11) + 1\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpg51hll2l_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpg51hll2l_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpg51hll2l_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpg51hll2l_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpg51hll2l_test.go:42: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpg51hll2l_test.go:42:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpg51hll2l_test.go:42: expected '%!s(int=639)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpg51hll2l_test.go:42:\
    \ expected '%!s(int=8026)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 10 {\n\
    \        return n\n    }\n    if n % 11 == 0 {\n        return fizz_buzz(n / 11)\
    \ + 1\n    }\n    if n % 13 == 0 {\n        return fizz_buzz(n / 13) + 1\n   \
    \ }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpebzonw1i_test.go:48: expected '%!s(int=2)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpebzonw1i_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpebzonw1i_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpebzonw1i_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpebzonw1i_test.go:48: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpebzonw1i_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpebzonw1i_test.go:48: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for i < n {\n        if n%11 == 0 || n%13 == 0 {\n            i += 1\n    \
    \    }\n        n = n/10\n    }\n    return i\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp_xky5ytc_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_xky5ytc_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp_xky5ytc_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_xky5ytc_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp_xky5ytc_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_xky5ytc_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp_xky5ytc_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n % 11 ==\
    \ 0 && n % 13 == 0 {\n        return 1\n    }\n    if n % 11 != 0 {\n        return\
    \ 0\n    }\n    if n % 13 != 0 {\n        return 1\n    }\n    return 0\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you very much! I really appreciate it! My problem is\
    \ solved.\n<|/ c |>\n<| a dscore=0 |>\nUsing a lookup table would work:\n<code>\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph3kdwzwo_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    n += n - 1\n\
    \    if n % 11 == 0 {\n        return n\n    }\n    if n % 13 == 0 {\n       \
    \ return n + 3\n    }\n    return n\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp6tfk0tn4_test.go:46: expected '%!s(int=0)', got '%!s(int=99)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp6tfk0tn4_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=155)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp6tfk0tn4_test.go:46: expected '%!s(int=3)', got '%!s(int=157)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp6tfk0tn4_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=199)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp6tfk0tn4_test.go:46: expected '%!s(int=6)', got '%!s(int=399)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp6tfk0tn4_test.go:46:\
    \ expected '%!s(int=192)', got '%!s(int=7999)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp6tfk0tn4_test.go:46: expected '%!s(int=639)', got '%!s(int=19999)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp6tfk0tn4_test.go:46:\
    \ expected '%!s(int=8026)', got '%!s(int=199999)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpyiwgs7ah_test.go:45: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyiwgs7ah_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=13)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpyiwgs7ah_test.go:45: expected '%!s(int=3)', got '%!s(int=14)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyiwgs7ah_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=17)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpyiwgs7ah_test.go:45: expected '%!s(int=6)', got '%!s(int=33)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyiwgs7ah_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=644)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpyiwgs7ah_test.go:45: expected '%!s(int=639)', got '%!s(int=1610)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyiwgs7ah_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16084)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075196
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    counter :=\
    \ 0\n    for i := 0; i < n; i++ {\n        if n % 11 == 0 || n % 13 == 0 {\n \
    \           counter += 1\n        }\n        n = n / 10\n    }\n    return counter\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmprtpj9y2k_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmprtpj9y2k_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmprtpj9y2k_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmprtpj9y2k_test.go:46:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmprtpj9y2k_test.go:46: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmprtpj9y2k_test.go:46:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmprtpj9y2k_test.go:46: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    k := n % 10\n    v := fizz_buzz((n / 10) % 10)\n\
    \    if k == 1 && v != 0 {\n        return v + 1\n    }\n    if v > 0 {\n    \
    \    return v\n    }\n    return 0\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp18hkytr9_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    i := 0\n  \
    \  for ; ; i++ {\n        if n%11 == 0 && n%13 == 0 {\n            return i\n\
    \        }\n        if n%11 != 0 && n%13 != 0 {\n            i++\n        }\n\
    \        n = n/10\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpkiid0y0b_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpkiid0y0b_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpkiid0y0b_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpkiid0y0b_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpkiid0y0b_test.go:48: expected '%!s(int=192)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkiid0y0b_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=10)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpkiid0y0b_test.go:48: expected '%!s(int=8026)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
