language: go_test.go
name: HumanEval_26_remove_duplicates
results:
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, value := range numbers {\n        // Store\
    \ the value if it's not in the result yet\n        if _, found := result[value];\
    \ !found {\n            result = append(result, value)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp06nhmn5d_test.go:16:24: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return removeDuplicates(numbers, len(numbers), make(map[int]bool))\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ctm3zud_test.go:13:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1cye8zs_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if _, ok := seen[number]; ok {\n        \
    \    continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n</code>\n<|/ a tags=go dscore=3 |>\n<|\
    \ a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpraivlq5z_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n    // Create\
    \ a map of already seen numbers (keyed by their values).\n    var seenNumbers\
    \ map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgs2y2qfl_test.go:18:29: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    result := append(result, numbers...)\n    sort.Ints(result)\n\
    \    var lastNumber int\n    for _, number := range result {\n        if number\
    \ == lastNumber {\n            continue\n        }\n        lastNumber = number\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaf8lpwgj_test.go:14:12: no new variables on left side of :=

    /tmp/tmpaf8lpwgj_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    sort.Sort(numbers)\n    var result []int\n    for _, number := range\
    \ numbers {\n        if !contains(result, number) {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuf8owtgk_test.go:13:5: undefined: sort

    /tmp/tmpuf8owtgk_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := []int{}\n    seen := map[int]bool{}\n\n    for _, v := range\
    \ numbers {\n        if seen[v] == true {\n            continue\n        }\n\n\
    \        seen[v] = true\n        output = append(output, v)\n    }\n\n    return\
    \ output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp1cpk8kln_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if _, ok := seen[number]; ok {\n        \
    \    continue\n        }\n        result = append(result, number)\n        seen[number]\
    \ = true\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmphr3nxe3q_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        out = append(out, number)\n    }\n\
    \    return out\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp6oswzcy8_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    map := make(map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgavkgz1u_test.go:13:9: expected ''['', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := []int{}\n    seen := map[int]bool{}\n    for _, number := range\
    \ numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            out = append(out, number)\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpfqldh9x2_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return append([]int{}, numbers...)\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp6ow0wmti_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // This works because we use a map for keeping track of element counts.\n\
    \    var elems map[int]int\n    for _, number := range numbers {\n        if _,\
    \ ok := elems[number]; ok {\n            continue\n        }\n        elems[number]\
    \ = 1\n    }\n    result := make([]int, 0, len(numbers))\n    for number := range\
    \ elems {\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a300})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a300})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmppjwsp8a5_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmppjwsp8a5_test.go:36\
    \ +0x1e6\ntesting.tRunner(0xc0000be4e0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\n    for _,\
    \ number := range numbers {\n        if _, ok := seen[number]; ok {\n        \
    \    continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpu3a4p9or_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n    seen := make(map[int]bool)\n\
    \    for _, v := range numbers {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        numbers = append(numbers, v)\n   \
    \ }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpjrz9gcux_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpjrz9gcux_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    m := make(map[int]int, len(numbers))\n    for i, n := range numbers {\n\
    \        m[n] = i\n    }\n    return []int(nil)\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmprpnf1hlq_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmprpnf1hlq_test.go:35: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Create a map of current numbers, indexed by number, and set to true\
    \ if found during iteration.\n    seen := map[int]bool{}\n    result := []int{}\n\
    \n    for _, number := range numbers {\n        // Only add to result if not previously\
    \ seen and number is different.\n        if !seen[number] && !seen[number-1] {\n\
    \            result = append(result, number)\n        }\n\n        // Mark number\
    \ as seen in result set.\n        seen[number] = true\n    }\n\n    return result\n\
    }\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpyj6udzl1_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpyj6udzl1_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    for i := range numbers {\n \
    \       removedNumber := numbers[i]\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[j] == removedNumber {\n                numbers\
    \ = append(numbers[:j], numbers[j+1:]...)\n                break\n           \
    \ }\n        }\n        result[i] = removedNumber\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmps9z7vwwp_test.go:15\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmps9z7vwwp_test.go:36\
    \ +0x665\ntesting.tRunner(0xc0000cc340, 0x529028)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ num := range numbers {\n        if _, ok := seen[num]; ok {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpivlnzna5_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if _,\
    \ ok := seen[number]; !ok {\n            result = append(result, number)\n   \
    \         seen[number] = \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy2u1qu17_test.go:18:6: expected ''('', found TestRemove_Duplicates

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Initialize an empty result slice.\n    result := make([]int, 0, len(numbers))\n\
    \n    // Go through all the numbers and count them in the result slice.\n    //\
    \ Note that we can't use map[int]bool or a set because then we'd\n    // have\
    \ to count each number twice (once in the map and again in the set for each\n\
    \    // entry in the map).\n    for _, number := range numbers {\n        count\
    \ := 0\n\n        // See if the number exists in the result slice.\n        for\
    \ _, n := range result {\n            if n == number {\n                count++\n\
    \            }\n        }\n\n        // If the number wasn't in the result slice,\
    \ add it to the result slice.\n        if count == 0 {\n            result = append(result,\
    \ number)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpv6uxhn1x_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    seen := make(map[int]bool)\n    for _, num := range\
    \ numbers {\n        if seen[num] {\n            continue\n        }\n       \
    \ seen[num] = true\n        output = append(output, num)\n    }\n    return output\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpylp2l3xh_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n\n    for i, number := range numbers {\n  \
    \      if i > 0 {\n            if numbers[i-1] != number {\n                result\
    \ = append(result, number)\n            }\n        } else {\n            result\
    \ = append(result, number)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3okbq_m__test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    var seen map[int]bool\n    for _, v :=\
    \ range numbers {\n        if !seen[v] {\n            seen[v] = true\n       \
    \     result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpjcsw831q_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpjcsw831q_test.go:32\
    \ +0x129\ntesting.tRunner(0xc0001031e0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, 0, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0wfo812w_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        output = append(output, number)\n\
    \    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpfjopayx__test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, len(numbers))\n\n    for i := range numbers {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] == numbers[j]\
    \ {\n                continue // skip this one\n            }\n            out[i]\
    \ = numbers[j]\n            i = j\n        }\n    }\n\n    return out\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpa2xz7ur2_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpa2xz7ur2_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=2)\
    \ %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]bool\n\n    for _, number := range\
    \ numbers {\n        if !seen[number] {\n            seen[number] = true\n   \
    \         result = append(result, number)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpu9_t0dby_test.go:18\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpu9_t0dby_test.go:34\
    \ +0x105\ntesting.tRunner(0xc000119040, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51ro55pq_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    var j int\n    for i := range\
    \ numbers {\n        if j == 0 {\n            result[i] = numbers[i]\n       \
    \     continue\n        }\n        if numbers[i] == result[j] {\n            continue\n\
    \        }\n        if numbers[i] > result[j] {\n            result[j] = numbers[i]\n\
    \        } else {\n            result[j+1] = numbers[i]\n        }\n        j++\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpiiyylmuf_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var seen map[int]bool\n    var result []int\n    for i, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn0c6ett_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    count := map[int]int{}\n    var result []int\n    for _, number := range\
    \ numbers {\n        count[number]++\n    }\n    for number := range count {\n\
    \        result = append(result, number)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp2ybpiv99_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmp2ybpiv99_test.go:39: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var ret []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3g3eu9qq_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return removeDuplicates(numbers, 0, len(numbers))\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgu5tj334_test.go:13:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // sort the array in-place, stable sort keeps order\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    result := make([]int, 0)\n\n    for _, number := range numbers {\n      \
    \  // if current number was already in the result list, skip it\n        if contains(result,\
    \ number) {\n            continue\n        }\n\n        // if the current number\
    \ is not yet in result list, add it to the result list\n        result = append(result,\
    \ number)\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpktx3xw_test.go:14:5: undefined: sort

    /tmp/tmpbpktx3xw_test.go:19:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Remove all but the first element and replace it with the last element\n\
    \    // after removing duplicates.\n    result := []int{}\n    first := numbers[0]\n\
    \    for _, num := range numbers[1:] {\n        if num != first {\n          \
    \  result = append(result, first)\n        }\n        first = num\n    }\n   \
    \ return append(result, first)\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpdw9dhrtt_test.go:16\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpdw9dhrtt_test.go:33\
    \ +0x18\ntesting.tRunner(0xc000134000, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var seen map[int]bool\n    result := make([]int, 0)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp3sqlyfq8_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp3sqlyfq8_test.go:32\
    \ +0x129\ntesting.tRunner(0xc0000cc1a0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: null
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers = append(numbers, 0)\n    for i := 1; i < len(numbers); i++ {\n\
    \        if numbers[i] != numbers[i-1] {\n            numbers = append(numbers,\
    \ numbers[i])\n        }\n    }\n    return numbers[:len(numbers)-1]\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074007
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0, len(numbers))\n    for _, number := range numbers\
    \ {\n        if !contains(output, number) {\n            output = append(output,\
    \ number)\n        }\n    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp229ipgx0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    var seen map[int]bool\n\
    \    seen := make(map[int]bool)\n    var result []int\n    for _, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mtwnysn_test.go:17:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    n := len(numbers)\n    result := make([]int, n)\n    seen := make(map[int]bool)\n\
    \    for i := 0; i < n; i++ {\n        if _, seen := seen[numbers[i]]; !seen {\n\
    \            result[i] = numbers[i]\n            seen[numbers[i]] = true\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpueb8ti7w_test.go:19:17: invalid operation: cannot index seen (variable
    of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        if seen[numbers[i]] == true\
    \ {\n            continue\n        }\n        seen[numbers[i]] = true\n      \
    \  result[i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpm31m_6hh_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        output = append(output, number)\n\
    \    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpfjopayx__test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    var seen map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphs4u5i43_test.go:16:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    set := make(map[int]bool)\n    for _, n := range numbers {\n        set[n]\
    \ = true\n    }\n    result := make([]int, 0)\n    for k := range set {\n    \
    \    result = append(result, k)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmptvlor493_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmptvlor493_test.go:39: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    seen := map[int]bool{}\n\n    for _, number :=\
    \ range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpf1onjkyz_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var j int\n    var removed []int\n    for _, number := range numbers\
    \ {\n        if j != number {\n            j = number\n            removed = append(removed,\
    \ number)\n        }\n    }\n    return removed\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprvkuqud3_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    set := make(map[int]bool)\n    for _, number := range numbers {\n   \
    \     set[number] = true\n    }\n    return make([]int, 0, len(set))\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpjwx0l086_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpjwx0l086_test.go:35: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    unique := make([]int, 0)\n    for _, n := range numbers {\n        if\
    \ n != nil {\n            if _, ok := unique[n]; ok {\n                continue\n\
    \            }\n            unique = append(unique, n)\n        }\n    }\n   \
    \ return unique\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsv5auwj1_test.go:15:17: invalid operation: n != nil (mismatched types
    int and untyped nil)

    /tmp/tmpsv5auwj1_test.go:16:25: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    seenSet := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seenSet[number] {\n            continue\n   \
    \     }\n        seenSet[number] = true\n        output = append(output, number)\n\
    \    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw6y7t_sr_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, 0, len(numbers))\n    seen := map[int]bool{}\n\
    \    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        numbers = append(numbers, n)\n   \
    \ }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0dswv4xc_test.go:13:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n    result :=\
    \ []int{}\n    last := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n \
    \       if numbers[i] != last {\n            result = append(result, last)\n \
    \           last = numbers[i]\n        }\n    }\n    return append(result, last)\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpetkp7pur_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make(map[int]bool)\n    for _, number := range numbers {\n\
    \        if _, ok := numbers[number]; !ok {\n            numbers[number] = true\n\
    \        }\n    }\n    var result []int\n    for number := range numbers {\n \
    \       result = append(result, number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9epyd_0r_test.go:13:13: no new variables on left side of :=

    /tmp/tmp9epyd_0r_test.go:13:16: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp9epyd_0r_test.go:15:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp9epyd_0r_test.go:16:31: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make(map[int]bool)\n    var result []int\n    for _, number\
    \ := range numbers {\n        if !numbers[number] {\n            numbers[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu51nhk72_test.go:13:13: no new variables on left side of :=

    /tmp/tmpu51nhk72_test.go:13:16: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmpu51nhk72_test.go:16:13: invalid operation: operator ! not defined on numbers[number]
    (variable of type int)

    /tmp/tmpu51nhk72_test.go:17:31: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !binary_contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphqm4vnku_test.go:15:13: undefined: binary_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    for _, number := range numbers {\n        //\
    \ Store number in a set to remove duplicates.\n        // HashSet is O(n) so this\
    \ should be a reasonable assumption when\n        // we use a set approach.\n\
    \        set := make(map[int]bool)\n        for _, otherNumber := range numbers\
    \ {\n            if otherNumber == number {\n                continue\n      \
    \      }\n            set[otherNumber] = true\n        }\n\n        // Remove\
    \ number from set and add it to result if set.\n        // Set remove takes O(logn)\
    \ time to find an element\n        // O(n) to go through all elements again to\
    \ see if set.Remove is true.\n        for _, otherNumber := range numbers {\n\
    \            if set[otherNumber] {\n                delete(set, otherNumber)\n\
    \                result = append(result, otherNumber)\n            }\n       \
    \ }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpel16q1vj_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    ---\
    \ FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpel16q1vj_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n    index :=\
    \ 0\n\n    found := make(map[int]bool)\n    for _, v := range numbers {\n    \
    \    if found[v] {\n            continue\n        }\n        found[v] = true\n\
    \        numbers[index] = v\n        index++\n    }\n\n    return numbers[:index]\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprq2sulxa_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp702hy5ww_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    j := 0\n    for i := 0; i < len(numbers); i++ {\n        if i > j {\n\
    \            numbers[j] = numbers[i]\n        }\n        j++\n    }\n    return\
    \ numbers[:j]\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate :=\
    \ remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpq12j0as7_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := map[int]bool{}\n    for _, number := range numbers {\n      \
    \  if seen[number] {\n            continue\n        }\n        seen[number] =\
    \ true\n        return append(numbers, number)\n    }\n    return numbers\n}\n\
    \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkylreb6x_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkylreb6x_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5v6ig_7p_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make(map[int]bool)\n    for _, n := range numbers {\n    \
    \    if !numbers[n] {\n            numbers[n] = true\n        }\n    }\n    return\
    \ make([]int, 0, len(numbers))\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4q5caw7_test.go:13:13: no new variables on left side of :=

    /tmp/tmpk4q5caw7_test.go:13:16: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmpk4q5caw7_test.go:15:13: invalid operation: operator ! not defined on numbers[n]
    (variable of type int)

    /tmp/tmpk4q5caw7_test.go:16:26: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, len(numbers))\n    for _, number := range numbers\
    \ {\n        numbers[number] = true\n    }\n    return numbers[:0]\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ga7j6pg_test.go:13:13: no new variables on left side of :=

    /tmp/tmp1ga7j6pg_test.go:15:27: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    if len(numbers) == 0 {\n        return output\n\
    \    }\n    seen := make(map[int]bool)\n    for _, num := range numbers {\n  \
    \      if seen[num] {\n            continue\n        }\n        output = append(output,\
    \ num)\n        seen[num] = true\n    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpb9etybf2_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    ret := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        ret = append(ret, number)\n        seen[number] = true\n    }\n\
    \    return ret\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpjf12uo09_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !hasElement(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40akofyq_test.go:15:13: undefined: hasElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var i int\n    var newNumber int\n    var newNumbers []int\n\n    for\
    \ i = 0; numbers[i] == 0; i++ {\n    }\n    newNumber = numbers[0]\n    for i\
    \ = 0; numbers[i] != 0; i++ {\n        if newNumbers == nil {\n            newNumbers\
    \ = append(newNumbers, newNumber)\n        } else {\n            newNumbers =\
    \ append(newNumbers, newNumbers[i-1])\n        }\n        newNumber = numbers[i]\n\
    \    }\n    return newNumbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp1y0_bnfj_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp1y0_bnfj_test.go:38\
    \ +0x18\ntesting.tRunner(0xc000134000, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n\n    for _,\
    \ n := range numbers {\n        if seen[n] {\n            continue\n        }\n\
    \n        seen[n] = true\n        result = append(result, n)\n    }\n\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpxw5jine0_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // sort before removing duplicates\n    sort.Slice(numbers, 0, len(numbers))\n\
    \    var i int\n    for i = 0; i < len(numbers); i++ {\n        for j = i+1; j\
    \ < len(numbers); j++ {\n            if numbers[i] == numbers[j] {\n         \
    \       numbers = append(numbers[:j], numbers[j+1:]...)\n                break\n\
    \            }\n        }\n    }\n    return numbers\n}\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoups71a7_test.go:14:5: undefined: sort

    /tmp/tmpoups71a7_test.go:17:13: undefined: j

    /tmp/tmpoups71a7_test.go:18:38: undefined: j

    /tmp/tmpoups71a7_test.go:19:43: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // TODO: write your code in Go\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp11vhriit_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    m := make(map[int]bool)\n    for _, v := range numbers {\n        if\
    \ m[v] {\n            continue\n        }\n        m[v] = true\n        return\
    \ append(numbers, v)\n    }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp1tzjswn8_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n        tmp1tzjswn8_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]bool\n    for _, value := range\
    \ numbers {\n        if seen[value] {\n            continue\n        }\n     \
    \   seen[value] = true\n        result = append(result, value)\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpt7wlxi8x_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpt7wlxi8x_test.go:33\
    \ +0x105\ntesting.tRunner(0xc000103380, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074001
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return removeDuplicates2(numbers, numbers)\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0p9cp72y_test.go:13:12: undefined: removeDuplicates2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var outputNumbers []int\n    seen := make(map[int]bool)\n\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n\n        outputNumbers = append(outputNumbers, number)\n        seen[number]\
    \ = true\n    }\n\n    return outputNumbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp5aks5wo5_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5v6ig_7p_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeguy6vlp_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073807
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    for _, number := range numbers {\n    \
    \    if !contains(result, number) {\n            result = append(result, number)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgj3ymi_b_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    remaining := []int{}\n    for _, v := range numbers {\n        if !contains(remaining,\
    \ v) {\n            addNumber(remaining, v)\n        }\n    }\n    return remaining\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nu296gp_test.go:15:13: undefined: contains

    /tmp/tmp3nu296gp_test.go:16:13: undefined: addNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return removeDuplicates(numbers, len(numbers))\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhykofej_test.go:13:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074000
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0, len(numbers))\n    var last int\n    for _,\
    \ number := range numbers {\n        if number == last {\n            continue\n\
    \        }\n        last = number\n        output = append(output, number)\n \
    \   }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp5tfsj4wi_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074001
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, i := range numbers {\n        if _, ok :=\
    \ hasRun(result); ok {\n            continue\n        }\n        result = append(result,\
    \ i)\n        hasRun(result)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7pviilp_test.go:15:21: undefined: hasRun

    /tmp/tmpe7pviilp_test.go:19:9: undefined: hasRun

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074001
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n\n    // The first element is\
    \ the one we keep.\n    result := append(result, numbers[0])\n\n    // Now remove\
    \ all that occur more than once\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] != numbers[i-1] {\n            result := append(result, numbers[i])\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcvhhfeu_test.go:16:12: no new variables on left side of :=

    /tmp/tmpbcvhhfeu_test.go:21:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    sort.Sort(sort.Reverse(numbers))\n\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3so86gml_test.go:15:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51ro55pq_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpox4xl1vu_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    for i := range result {\n  \
    \      result[i] = numbers[i]\n    }\n    lastSeenAt := make(map[int]int)\n  \
    \  for i := range result {\n        if _, ok := lastSeenAt[result[i]]; ok {\n\
    \            result[i] = result[i-1]\n        }\n        lastSeenAt[result[i]]\
    \ = i\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp5fzru2nn_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    set := make(map[int]bool)\n    for _, number := range numbers {\n   \
    \     if !set[number] {\n            set[number] = true\n        }\n    }\n  \
    \  return []int{\n        numbers[0],\n    }\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0000f8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0000f8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpg266uq0m_test.go:20\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpg266uq0m_test.go:31\
    \ +0x51\ntesting.tRunner(0xc00009b1e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if seen[number] {\n            continue\n\
    \        }\n        seen[number] = true\n        result = append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpumm875p1_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp702hy5ww_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073997
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var ret []int\n    i := 0\n    for _, v := range numbers {\n        if\
    \ i == len(numbers) {\n            return nil\n        }\n        if v == numbers[i]\
    \ {\n            i++\n            continue\n        }\n        ret = append(ret,\
    \ v)\n        i++\n    }\n    return ret\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpc7oivtoe_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpc7oivtoe_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var index int\n    var current int\n\n    for index\
    \ = 0; index < len(numbers); index++ {\n        current = numbers[index]\n\n \
    \       if index == 0 {\n            result = append(result, current)\n      \
    \      continue\n        }\n\n        if current == result[len(result)-1] {\n\
    \            result = append(result, current)\n        } else {\n            result\
    \ = append(result, result[len(result)-1])\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpkv2zf5ri_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpkv2zf5ri_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := map[int]bool{}\n    for _, number := range\
    \ numbers {\n        if _, ok := seen[number]; !ok {\n            result = append(result,\
    \ number)\n            seen[number] = true\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpzula9e6j_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n    var lastNumber\
    \ int\n    var toRemove []int\n\n    for _, number := range numbers {\n      \
    \  if number == lastNumber {\n            toRemove = append(toRemove, number)\n\
    \        } else {\n            lastNumber = number\n        }\n    }\n\n    for\
    \ _, number := range toRemove {\n        numbers = append(numbers[:number], numbers[number+1:]...)\n\
    \    }\n\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpa3mf2lb1_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var ret []int\n    var seen map[int]bool\n\n    for _, i := range numbers\
    \ {\n        if seen[i] == true {\n            continue\n        }\n        ret\
    \ = append(ret, i)\n        seen[i] = true\n    }\n\n    return ret\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp5p6_hs1r_test.go:21\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp5p6_hs1r_test.go:35\
    \ +0x15d\ntesting.tRunner(0xc000103380, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ n := range numbers {\n        if !seen[n] {\n            result = append(result,\
    \ n)\n            seen[n] = true\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp9o959bgl_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    var result\
    \ []int\n    var seen map[int]bool\n    seen = make(map[int]bool, len(numbers))\n\
    \    for _, val := range numbers {\n        if seen[val] {\n            continue\n\
    \        }\n        seen[val] = true\n        result = append(result, val)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpyq6thutb_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, v := range numbers {\n        // if number\
    \ is already in result, skip it\n        found := false\n        for _, r := range\
    \ result {\n            if r == v {\n                found = true\n          \
    \  }\n        }\n        // if number was not yet in result and was not yet in\
    \ result, add it\n        if not found {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpygjqj_ut_test.go:23:16: expected '';'', found found

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var unique = make([]int, 0)\n    for _, number := range numbers {\n \
    \       if _, ok := unique[number]; !ok {\n            unique = append(unique,\
    \ number)\n        }\n    }\n    return unique\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__tf1x16_test.go:15:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    count := make(map[int]int, len(numbers))\n\
    \n    for i := range numbers {\n        count[numbers[i]] = count[numbers[i]]\
    \ + 1\n    }\n\n    for i := range numbers {\n        if count[numbers[i]] > 1\
    \ {\n            result[count[numbers[i]]-1] = numbers[i]\n            count[numbers[i]]\
    \ = count[numbers[i]]-1\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpmyskc5o6_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmpmyskc5o6_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0)\n    var i int\n    for _, x := range numbers\
    \ {\n        if i > 0 {\n            if x == numbers[i-1] {\n                continue\n\
    \            }\n            output = append(output, x)\n        }\n        i =\
    \ x\n    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmps82puo0k_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmps82puo0k_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n    numberSet\
    \ := make(map[int]bool)\n    for _, number := range numbers {\n        if _, ok\
    \ := numberSet[number]; !ok {\n            numberSet[number] = true\n        \
    \    return append(numbers, number)\n        }\n    }\n    return numbers\n}\n\
    \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp96t_a21e_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n        tmp96t_a21e_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Keep track of how many times each number occurs in numbers\n    count\
    \ := make(map[int]int, len(numbers))\n    for i, number := range numbers {\n \
    \       count[number]++\n    }\n    out := []int{}\n    for i := range count {\n\
    \        if count[i] > 1 {\n            out = append(out, i)\n        }\n    }\n\
    \    return out\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9zxefhl_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n\n    if len(numbers) == 0 {\n        return nil\n\
    \    }\n\n    for _, value := range numbers {\n        if !contains(output, value)\
    \ {\n            output = append(output, value)\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhfgxkle_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := make(map[int]bool)\n    for _, number :=\
    \ range numbers {\n        if _, ok := seen[number]; ok {\n            continue\n\
    \        }\n        result = append(result, number)\n        seen[number] = true\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpwppygpy3_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, num := range numbers {\n        if seen[num] {\n            continue\n\
    \        }\n        seen[num] = true\n        output[num] = true\n    }\n    return\
    \ output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_8swdeg_test.go:20:23: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := make(map[int]bool)\n    for _, num := range\
    \ numbers {\n        if seen[num] {\n            continue\n        }\n       \
    \ seen[num] = true\n        result = append(result, num)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpgpr_wmjf_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n\n    for _, number := range numbers {\n\
    \        if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptzwaba93_test.go:20:25: undefined: result

    /tmp/tmptzwaba93_test.go:22:12: undefined: result

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var unique []int\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6qd5jsuv_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    j := 0\n    output := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        if i == j {\n            output[i] = number\n     \
    \   } else if number == numbers[j] {\n            j += 1\n        } else {\n \
    \           output[j] = number\n            j++\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmphgac02ne_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmphgac02ne_test.go:43: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=2)\
    \ %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    // Keep track of elements we've already seen\
    \ - we'll remove duplicates\n    // from them in the next step.\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptkk3ag2i_test.go:17:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result)\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9z7_s4r8_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Initialize a new list of integers\n    result := make([]int, len(numbers))\n\
    \    j := 0\n    for i := 0; i < len(numbers); i++ {\n        if result[j] ==\
    \ numbers[i] {\n            continue\n        }\n        result[j] = numbers[i]\n\
    \        j++\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpsi8rriao_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074006
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, len(numbers))\n    var index int\n    for i :=\
    \ range numbers {\n        if index != i {\n            numbers[index] = numbers[i]\n\
    \            index++\n        }\n    }\n    return numbers[:index]\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprj7_vjbe_test.go:13:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1cye8zs_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if seen[number] {\n           \
    \ continue\n        }\n        seen[number] = true\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp2bk1fl_d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    map := make(map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgavkgz1u_test.go:13:9: expected ''['', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := map[int]int{}\n    for _, number := range\
    \ numbers {\n        if _, ok := seen[number]; ok {\n            continue\n  \
    \      }\n        result = append(result, number)\n        seen[number] = 1\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp640a6vv4_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return numbers[:0]\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmprthjm39f_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmprthjm39f_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]bool\n    for _, n := range numbers\
    \ {\n        if seen[n] {\n            continue\n        }\n        seen[n] =\
    \ true\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmptdpc27lo_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmptdpc27lo_test.go:33\
    \ +0x105\ntesting.tRunner(0xc0000cc1a0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var numbers []int\n    numbers := append(numbers, numbers...)\n    numbers\
    \ := append(numbers, numbers...)\n    numbers := append(numbers, numbers...)\n\
    \    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq3sssepm_test.go:13:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpq3sssepm_test.go:12:24: other declaration\
    \ of numbers\n/tmp/tmpq3sssepm_test.go:14:13: no new variables on left side of\
    \ :=\n/tmp/tmpq3sssepm_test.go:15:13: no new variables on left side of :=\n/tmp/tmpq3sssepm_test.go:16:13:\
    \ no new variables on left side of :=\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var seenNumbers map[int] = map[int]bool{}\n    for _, n := range numbers\
    \ {\n        if seenNumbers[n] == true {\n            numbers = append(numbers[:i],\
    \ numbers[i+1:]...)\n        } else {\n            seenNumbers[n] = true\n   \
    \     }\n    }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsreusf63_test.go:13:30: expected type, found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]bool\n    for _, number := range\
    \ numbers {\n        if !seen[number] {\n            seen[number] = true\n   \
    \         result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmptu8t06f1_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmptu8t06f1_test.go:32\
    \ +0x105\ntesting.tRunner(0xc0000cc1a0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    if len(numbers) == 0 {\n        return nil\n\
    \    }\n\n    for i := 0; i < len(numbers); i++ {\n        num := numbers[i]\n\
    \        if i > 0 && result[i-1] == num {\n            continue\n        }\n \
    \       result = append(result, num)\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpihav541a_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074007
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if numbers == nil {\n        return []int{}\n    }\n\n    // Create a\
    \ map to store counts\n    countMap := make(map[int]int)\n\n    for _, number\
    \ := range numbers {\n        if _, ok := countMap[number]; !ok {\n          \
    \  countMap[number] = 1\n        } else {\n            countMap[number]++\n  \
    \      }\n    }\n\n    var result []int\n    for number := range countMap {\n\
    \        result = append(result, number)\n    }\n\n    return []int{result}\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wnnkrv3_test.go:33:18: cannot use result (variable of type []int) as
    type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, num := range numbers {\n        for _, index\
    \ := range result {\n            if num == result[index] {\n                break\n\
    \            }\n        }\n        if num != 0 {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp2oqpvm9m_test.go:16\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp2oqpvm9m_test.go:35\
    \ +0x54d\ntesting.tRunner(0xc000134000, 0x529028)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n \
    \       if !seen[number] {\n            seen[number] = true\n            result\
    \ = append(result, number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpv8u6gy1g_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074008
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n\n    for _, value := range numbers\
    \ {\n        if i := result.FindIndex(func(x *int) bool { return x == value });\
    \ i >= 0 {\n            result[i] = value\n        } else {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmput23ulz8_test.go:16:24: result.FindIndex undefined (type []int has no
    field or method FindIndex)

    /tmp/tmput23ulz8_test.go:16:66: invalid operation: x == value (mismatched types
    *int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51ro55pq_test.go:14:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    j := 0\n    for _, number := range numbers {\n        for i := range\
    \ numbers[:j] {\n            if numbers[i] == number {\n                numbers\
    \ = append(numbers[:i], numbers[j:]...)\n                break\n            }\n\
    \        }\n        j++\n    }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513760,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513760, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpimbc0qno_test.go:16\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpimbc0qno_test.go:35\
    \ +0x5b2\ntesting.tRunner(0xc000103380, 0x529088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074008
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    j := 0\n    for i, v := range numbers {\n        if j == 0 || numbers[j-1]\
    \ != v {\n            numbers[j] = v\n            j++\n        }\n    }\n    return\
    \ numbers[:j]\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate :=\
    \ remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmq9fw21_test.go:14:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var duplicate []int\n    for _, number := range numbers {\n        if\
    \ !contains(duplicate, number) {\n            duplicate = append(duplicate, number)\n\
    \        }\n    }\n    return duplicate\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63okwktg_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, 0)\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhb0aev4_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n  \
    \      if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        numbers = append(numbers, number)\n    }\n    return numbers\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpia1ba0xd_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpia1ba0xd_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    for _, number := range numbers {\n        i :=\
    \ 0\n\n        for ; i+1 < len(numbers); i++ {\n            if numbers[i] == numbers[i+1]\
    \ {\n                numbers = append(numbers[:i], numbers[i+2:]...)\n       \
    \         i = i + 1\n            }\n        }\n\n        if i != 0 {\n       \
    \     result = append(result, number)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpg35h66ug_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074009
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    uniqueNumbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        if i := binarySearch(uniqueNumbers, number); i != -1 {\n\
    \            uniqueNumbers[i] = number\n        } else {\n            uniqueNumbers\
    \ = append(uniqueNumbers, number)\n        }\n    }\n    return uniqueNumbers\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdpzwdq5_test.go:14:9: i declared but not used

    /tmp/tmphdpzwdq5_test.go:15:17: undefined: binarySearch

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, 0)\n\n    for _, i := range numbers {\n        if\
    \ !contains(out, i) {\n            out = append(out, i)\n        }\n    }\n\n\
    \    return out\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp75bm3xru_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return []int{}\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpsoj63t36_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpsoj63t36_test.go:31: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]bool)\n\
    \n    for _, n := range numbers {\n        if seen[n] {\n            continue\n\
    \        }\n        seen[n] = true\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpt5cyvvyx_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    if len(numbers) == 0 {\n        return result\n\
    \    }\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n\
    \        if _, ok := seen[number]; ok {\n            continue\n        }\n   \
    \     seen[number] = true\n        result = append(result, number)\n    }\n  \
    \  return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpyns39_vt_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    ret := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            ret = append(ret, n)\n \
    \           seen[n] = true\n        }\n    }\n    return ret\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpafdsspii_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    seen := make(map[int]bool)\n\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptpr1zby6_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers_seen := make(map[int]bool)\n    result := make([]int, 0)\n  \
    \  for _, number := range numbers {\n        if !numbers_seen[number] {\n    \
    \        result = append(result, number)\n            numbers_seen[number] = true\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp03ak2z_l_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // TODO: Replace with faster algorithm\n    for _, n := range numbers\
    \ {\n        if _, ok := seen[n]; ok {\n            numbers = append(numbers[:n],\
    \ numbers[n+1:]...)\n        } else {\n            seen[n] = \nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4wv9b0k2_test.go:19:6: expected ''('', found TestRemove_Duplicates

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    m := map[int]int{}\n    for _, i := range numbers\
    \ {\n        if _, ok := m[i]; !ok {\n            result = append(result, i)\n\
    \        }\n        m[i] = 1\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp0jsjjcrm_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result = make([]int, 0)\n    for _, n := range numbers {\n      \
    \  if result.Len() != 0 {\n            if !contains(result, n) {\n           \
    \     result = append(result, n)\n            }\n        } else {\n          \
    \  result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6d7_sc0d_test.go:15:19: result.Len undefined (type []int has no field
    or method Len)

    /tmp/tmp6d7_sc0d_test.go:16:17: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // O(n log n)\n    if len(numbers) < 2 {\n        return numbers\n  \
    \  }\n    sort.Ints(numbers)\n    var prev int\n    var result []int\n    for\
    \ _, num := range numbers {\n        if num != prev {\n            result = append(result,\
    \ num)\n            prev = num\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w51fp4c_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var index int\n    var lastNumber int\n    var lastPrev int\n\n    lastNumber\
    \ = numbers[0]\n    lastPrev = numbers[0]\n\n    for _, number := range numbers[1:]\
    \ {\n        if number != lastNumber {\n            lastPrev = lastNumber\n  \
    \          lastNumber = number\n        } else {\n            lastNumber = number\n\
    \        }\n    }\n    return append([]int{lastNumber}, numbers[len(numbers)-index:])\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpapt5j6jx_test.go:15:9: lastPrev declared but not used

    /tmp/tmpapt5j6jx_test.go:28:45: cannot use numbers[len(numbers) - index:] (value
    of type []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, num := range numbers {\n        if !ContainsN(result,\
    \ num, 1) {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk77vcjr5_test.go:15:13: undefined: ContainsN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, len(numbers))\n    prev := -1\n    for _, v :=\
    \ range numbers {\n        if v > prev {\n            output[prev] = v\n     \
    \   }\n        prev = v\n    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpe04h5wyy_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpe04h5wyy_test.go:32\
    \ +0x454\ntesting.tRunner(0xc000103380, 0x528028)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074012
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, v := range numbers {\n        if seen[v] {\n            continue\n\
    \        }\n        results = append(results, v)\n        seen[v] = true\n   \
    \ }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9emmk8k__test.go:19:26: undefined: results

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := map[int]bool{}\n    result := make([]int, 0, len(numbers))\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; !ok {\n\
    \            seen[number] = true\n            result = append(result, number)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbwk7k4zm_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074012
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, 0)\n    var first int\n    for _, num := range numbers\
    \ {\n        if num != first {\n            out = append(out, num)\n         \
    \   first = num\n        }\n    }\n    return out\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmprxfxg3du_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074012
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    countMap := make(map[int]int)\n\n    for _, number := range numbers {\n\
    \        if _, ok := countMap[number]; ok {\n            countMap[number] = countMap[number]\
    \ + 1\n        } else {\n            countMap[number] = 1\n        }\n    }\n\n\
    \    numbers := make([]int, 0, len(countMap))\n    for number := range countMap\
    \ {\n        if countMap[number] == 1 {\n            numbers = append(numbers,\
    \ number)\n        }\n    }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgl2htya_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    count := map[int]int{}\n\n    for _, number := range numbers {\n    \
    \    if _, ok := count[number]; !ok {\n            count[number] = 0\n       \
    \ } else {\n            count[number]++\n        }\n    }\n\n    result := make([]int,\
    \ 0, len(numbers))\n\n    for number := range count {\n        result = append(result,\
    \ number)\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp139xz9y4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074012
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n\n    for _, n := range numbers\
    \ {\n        if n > 1 {\n            result = append(result, n)\n        }\n \
    \   }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmplwachn98_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmplwachn98_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074013
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0)\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpszs7uxs0_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n\n    for _, number := range numbers {\n        if\
    \ !containsElement(result, number) {\n            result = append(result, number)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn1u_iham_test.go:16:13: undefined: containsElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074012
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n    for _, number := range numbers {\n  \
    \      if seen[number] {\n            continue\n        }\n        seen[number]\
    \ = true\n        return append(numbers[:], numbers...)\n    }\n    return numbers\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp9j1y1o0o_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmp9j1y1o0o_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074013
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    if len(numbers) == 0 {\n        return result\n\
    \    }\n\n    seen := map[int]bool{}\n    for _, num := range numbers {\n    \
    \    if seen[num] {\n            continue\n        }\n        results = append(results,\
    \ num)\n        seen[num] = true\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqqml5b60_test.go:23:26: undefined: results

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074013
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, 0, len(numbers))\n    seen := make(map[int]\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0wfo812w_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n    var result []int\n    for _, n := range\
    \ numbers {\n        if seen[n] {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpepp4y4we_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074013
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Start with a copy of the input list to hold the output.\n    output\
    \ := make([]int, len(numbers))\n    // Set current output element to element at\
    \ index 0.\n    output[0] = numbers[0]\n\n    // Iterate through all remaining\
    \ elements in the input list.\n    for i := 1; i < len(numbers); i++ {\n     \
    \   // Check if the current output element matches the current input element.\n\
    \        if numbers[i] != output[i-1] {\n            // It does match, so remove\
    \ element at index i.\n            output = append(output[:i], output[i:]...)\n\
    \            // And set current output element to current input element.\n   \
    \         output[i] = numbers[i]\n        }\n    }\n\n    return output\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpzgot6a7c_test.go:16\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpzgot6a7c_test.go:39\
    \ +0x2f\ntesting.tRunner(0xc0000cc1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074014
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Store a map of seen elements with counts\n    seen := map[int]int{}\n\
    \n    // Iterate through numbers and remove if count > 1\n    for _, num := range\
    \ numbers {\n        // If seen number has a count of 1, remove from map\n   \
    \     if seen[num] == 1 {\n            delete(seen, num)\n        } else {\n \
    \           // Add count\n            seen[num] += 1\n        }\n    }\n\n   \
    \ // Return new slice with result\n    return make([]int, 0, len(seen))\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpwl4jzdpg_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmpwl4jzdpg_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074014
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make([]int, 0, len(numbers))\n\n    var count int\n    for\
    \ _, number := range numbers {\n        count += number\n        if count > 1\
    \ {\n            numbers = append(numbers, number)\n        }\n    }\n\n    return\
    \ numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k7saw30_test.go:13:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074014
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; ok {\n\
    \            continue\n        }\n        seen[number] = true\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp_t0619z0_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2 (0.00s)\n\
    \        tmp_t0619z0_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    var seen map[int]bool\n    for _, number := range\
    \ numbers {\n        if seen[number] {\n            continue\n        }\n    \
    \    outputs = append(output, number)\n        seen[number] = true\n    }\n  \
    \  return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl36nzikh_test.go:19:9: undefined: outputs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074014
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    output := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range numbers {\n        if _, present := seen[v]; present {\n        \
    \    continue\n        }\n        output = append(output, v)\n        seen[v]\
    \ = true\n    }\n    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmph4ij9hvl_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n    result := []int{}\n\n    for _, number\
    \ := range numbers {\n        if seen[number] {\n            continue\n      \
    \  }\n        seen[number] = true\n        result = append(result, number)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp4flf3mqh_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    seen := make(map[int]bool)\n    for _, v := range\
    \ numbers {\n        if seen[v] {\n            continue\n        }\n        result\
    \ = []int{v}\n        seen[v] = true\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmpxu9_j3k1_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpxu9_j3k1_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    set := make(map[int]bool)\n\n    for _, x := range numbers {\n      \
    \  if _, ok := set[x]; !ok {\n            set[x] = true\n        } else {\n  \
    \          delete(set, x)\n        }\n    }\n\n    return []int(set)\n}\n</code>\n\
    <|/ a tags=go dscore=2 |>\n<| a tags=go |>\nThe Go standard library does not provide\
    \ any tools for deduplicating slices or maps of values.  You need to implement\
    \ your own.\nFor slices, a simple way to do this is to loop over the slice, adding\
    \ each element to a set and adding each value to a slice of already seen values:\n\
    <code>\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62xhl9uu_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074013
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := []int{}\n    for _, x := range numbers {\n        if !contains(numbers,\
    \ x) {\n            numbers = append(numbers, x)\n        }\n    }\n    return\
    \ numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5z018iig_test.go:13:13: no new variables on left side of :=

    /tmp/tmp5z018iig_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074015
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    remaining := []int{}\n    for _, number := range numbers {\n        if\
    \ !hasDupe(remaining, number) {\n            remaining = append(remaining, number)\n\
    \        }\n    }\n    return remaining\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjkodx_6e_test.go:15:13: undefined: hasDupe

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeguy6vlp_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073807
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    out := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     out = append(out, n)\n        seen[n] = true\n    }\n    return out\n}\n\
    \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp6lkye43o_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var output []int\n    seen := make(map[int]bool)\n    for _, number :=\
    \ range numbers {\n        if seen[number] {\n            continue\n        }\n\
    \        seen[number] = true\n        output = append(output, number)\n    }\n\
    \    return output\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmphwlvx9q5_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, num := range numbers {\n        ok := false\n\
    \        for _, nnum := range result {\n            if num == nnum {\n       \
    \         ok = true\n                break\n            }\n        }\n       \
    \ if !ok {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpez52oa4w_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := map[int]bool{}\n    result := make([]int, 0)\n    for _, num\
    \ := range numbers {\n        if _, found := seen[num]; found {\n            continue\n\
    \        }\n        seen[num] = true\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmppp960n60_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    numbers :=\
    \ make([]int, len(numbers))\n    var duplicate int\n    for i, number := range\
    \ numbers {\n        if number == number {\n            if number > duplicate\
    \ {\n                duplicate = number\n            }\n        } else {\n   \
    \         numbers[i] = number\n        }\n    }\n    return numbers[:i+1]\n}\n\
    \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqogbt2x5_test.go:16:13: no new variables on left side of :=

    /tmp/tmpqogbt2x5_test.go:27:21: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    seen := make(map[int]bool)\n\
    \    for _, number := range numbers {\n        if _, ok := seen[number]; !ok {\n\
    \            result[len(result)-1] = number\n            seen[number] = true\n\
    \        } else {\n            delete(seen, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__1\
    \ (0.00s)\n        tmp7wjwd8f4_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL:\
    \ TestRemove_Duplicates/test_num__2 (0.00s)\n        tmp7wjwd8f4_test.go:41: expected\
    \ '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t *testing.T) {\n \
    \ candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeguy6vlp_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073807
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0, len(numbers))\n    seen := make(map[int]bool,\
    \ len(numbers))\n    for _, n := range numbers {\n        if seen[n] {\n     \
    \       continue\n        }\n        result = append(result, n)\n        seen[n]\
    \ = true\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpu611dyas_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    var seen map[int]bool\n    for _, n := range numbers\
    \ {\n        if seen[n] == true {\n            continue\n        }\n        seen[n]\
    \ = true\n        result = append(result, n)\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmphxgxed3q_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmphxgxed3q_test.go:33\
    \ +0x109\ntesting.tRunner(0xc0001191e0, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    return remove_duplicates_test{}.TestFunc(numbers)\n}\n\ntype remove_duplicates_test\
    \ \nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg5sshppt_test.go:16:29: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074015
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    seen := make(map[int]\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpox4xl1vu_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074001
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, len(numbers))\n    var seen map[int]bool\n    for\
    \ _, num := range numbers {\n        if seen[num] {\n            continue\n  \
    \      }\n        seen[num] = true\n        result[len(result)-1] = num\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 4\
    \ [running]:\ntesting.tRunner.func1.2({0x502b20, 0x5492b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502b20, 0x5492b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpq32jlufc_test.go:19\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpq32jlufc_test.go:33\
    \ +0xf1\ntesting.tRunner(0xc00013a1a0, 0x528168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if seen[n] == true {\n            continue\n        }\n \
    \       seen[n] = true\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpwz_9d83i_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n\n    for _, number := range numbers {\n  \
    \      if !contains(result, number) {\n            result = append(result, number)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hj_069w_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Iterate through all numbers in order, adding numbers to a new slice\
    \ that is\n    // preallocated to hold all numbers that have not been seen before.\n\
    \    seen := make([]bool, len(numbers))\n\n    for _, n := range numbers {\n \
    \       // If current number is not seen before, add it to the seen slice.\n \
    \       if !seen[n] {\n            seen[n] = true\n            result = append(result,\
    \ n)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2sj0mdv_test.go:21:29: undefined: result

    /tmp/tmpk2sj0mdv_test.go:25:12: undefined: result

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var visited map[int]bool\n    var result []int\n    for _, number :=\
    \ range numbers {\n        if !visited[number] {\n            visited[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: assignment to entry in\
    \ nil map [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503b20, 0x54a2a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmp3qdreb9u_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmp3qdreb9u_test.go:32\
    \ +0x105\ntesting.tRunner(0xc0000cc340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n\n    for _, number := range numbers {\n        if\
    \ len(result) == 0 || number != result[len(result)-1] {\n            result =\
    \ append(result, number)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp21gb30xt_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    seen := make(map[int]\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1cye8zs_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var newNumbers []int\n    seen := map[int]int{}\n    for _, number :=\
    \ range numbers {\n        if _, seen := seen[number]; !seen {\n            newNumbers\
    \ = append(newNumbers, number)\n            seen[number] = 1\n        }\n    }\n\
    \    return newNumbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdozlnku_test.go:18:17: invalid operation: cannot index seen (variable
    of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := make([]int, 0)\n    for _, number := range numbers {\n    \
    \    if !ContainsElement(result, number) {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixlidvia_test.go:15:13: undefined: ContainsElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    numbers := make(map[int]bool)\n    for _, n := range numbers {\n    \
    \    if !numbers[n] {\n            numbers[n] = true\n        } else {\n     \
    \       numbers[n] = false\n        }\n    }\n    for n := range numbers {\n \
    \       if !numbers[n] {\n            return append([]int{n}, numbers[n])\n  \
    \      }\n    }\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T)\
    \ {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgodchdml_test.go:13:13: no new variables on left side of :=

    /tmp/tmpgodchdml_test.go:13:16: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmpgodchdml_test.go:15:13: invalid operation: operator ! not defined on numbers[n]
    (variable of type int)

    /tmp/tmpgodchdml_test.go:16:26: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpgodchdml_test.go:18:26: cannot use false (untyped bool constant) as int
    value in assignment

    /tmp/tmpgodchdml_test.go:22:13: invalid operation: operator ! not defined on numbers[n]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    i := 0\n  \
    \  j := 0\n    numbers := make([]int, 0, len(numbers))\n    for i < len(numbers)\
    \ {\n        numbers := append(numbers, numbers[i+1])\n        i += 2\n    }\n\
    \    return numbers\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nwizc7l_test.go:17:5: j declared but not used

    /tmp/tmp6nwizc7l_test.go:18:13: no new variables on left side of :=

    /tmp/tmp6nwizc7l_test.go:20:9: numbers declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    j := 0\n    result := make([]int, 0, len(numbers))\n    for _, number\
    \ := range numbers {\n        if number == numbers[j] {\n            result[len(result)]\
    \ = number\n            j++\n        } else {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.remove_duplicates(...)\n\t/tmp/tmpdeaph9s5_test.go:17\n\
    command-line-arguments_test.TestRemove_Duplicates(0x0?)\n\t/tmp/tmpdeaph9s5_test.go:34\
    \ +0x530\ntesting.tRunner(0xc0000cc340, 0x528028)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074016
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // Initialize a map to store the seen elements.\n    seen := make(map[int]bool,\
    \ len(numbers))\n\n    // Iterate over the input array and remove all elements\
    \ that occur\n    // more than once.\n    for i, num := range numbers {\n    \
    \    // If element was not seen previously, add it to\n        // seen list. Otherwise,\
    \ remove it.\n        if seen[num] {\n            delete(seen, num)\n        }\
    \ else {\n            seen[num] = true\n        }\n    }\n\n    // Return elements\
    \ from seen list.\n    return seen.values()\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3v3w48zw_test.go:18:9: i declared but not used

    /tmp/tmp3v3w48zw_test.go:29:17: seen.values undefined (type map[int]bool has no
    field or method values)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074016
