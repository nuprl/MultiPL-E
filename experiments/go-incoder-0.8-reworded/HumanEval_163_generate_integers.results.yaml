language: go_test.go
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var nums []int\n    var num1 int\n    var num2 int\n   \
    \ for num1 = a; num1 < b; num1 = num1 + 1 {\n        for num2 = a; num2 < b; num2\
    \ = num2 + 1 {\n            if num1 % num2 == 0 {\n                nums = append(nums,\
    \ num1)\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpj7hii3hy_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=9)\
    \ %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n    \
    \    tmpj7hii3hy_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpj7hii3hy_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpj7hii3hy_test.go:47:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=34)\
    \ %!s(int=35) %!s(int=36) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=38) %!s(int=39)\
    \ %!s(int=40) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=48)\
    \ %!s(int=49) %!s(int=50) %!s(int=50) %!s(int=51) %!s(int=51) %!s(int=52) %!s(int=52)\
    \ %!s(int=53) %!s(int=54) %!s(int=54) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=56)\
    \ %!s(int=57) %!s(int=57) %!s(int=58) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=60)\
    \ %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=62) %!s(int=63) %!s(int=63) %!s(int=64)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=66) %!s(int=66) %!s(int=67) %!s(int=68)\
    \ %!s(int=68) %!s(int=68) %!s(int=69) %!s(int=69) %!s(int=70) %!s(int=70) %!s(int=71)\
    \ %!s(int=72) %!s(int=72) %!s(int=72) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=74)\
    \ %!s(int=75) %!s(int=75) %!s(int=76) %!s(int=76) %!s(int=76) %!s(int=77) %!s(int=78)\
    \ %!s(int=78) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=80) %!s(int=80) %!s(int=81)\
    \ %!s(int=81) %!s(int=82) %!s(int=82) %!s(int=8"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            list = append(list, i)\n        }\n    }\n\
    \    return list\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpvxj4svsa_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvxj4svsa_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvxj4svsa_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvxj4svsa_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    s := make([]int, b - a)\n    for i := a; i <= b; i++ {\n\
    \        s[i - a] = i\n    }\n    return s\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpcifagg2d_test.go:20\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpcifagg2d_test.go:32\
    \ +0x41b\ntesting.tRunner(0xc0001a0340, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    if a > b {\n        return\n\
    \    }\n    for i := a; i < b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu3zdgzda_test.go:20:9:\
    \ not enough return values\n\thave ()\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0, b+1)\n    for i := a; i <= b; i++\
    \ {\n        if i % 2 == 0 {\n            ints = append(ints, i)\n        }\n\
    \    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpmxh_zcde_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpmxh_zcde_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpmxh_zcde_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpmxh_zcde_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a < 0 || b < 0 || a > b {\n        return []int{}\n \
    \   }\n    r := make([]int, b - a + 1)\n    for i := 0; i < len(r); i++ {\n  \
    \      if a > i {\n            r[i] = r[i-1] + 2\n        } else {\n         \
    \   r[i] = 1\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5126a0, 0xc0001d0000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5126a0,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpe231l1ps_test.go:24\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpe231l1ps_test.go:39\
    \ +0x3f4\ntesting.tRunner(0xc00019b040, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074424
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    output := make([]int, 0)\n    for a != b {\n        if a\
    \ > b {\n            break\n        }\n        output = append(output, a)\n  \
    \      a /= 10\n    }\n    return output\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074435
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    m := a % b\n    n := a // b\n\n    integers := make([]int,\
    \ 0)\n    for {\n        if m == 0 {\n            break\n        }\n        integers\
    \ = append(integers, m)\n        m = (m*10 + n) % b\n        n = (n*10 + m) %\
    \ b\n    }\n    if n < b {\n        integers = append(integers, n)\n    }\n\n\
    \    return integers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var i int\n    var res []int\n\n    if a > b {\n       \
    \ i, res = b, a\n    } else {\n        i, res = a, a\n    }\n\n    for i; i <=\
    \ b; i++ {\n        res = append(res, i)\n    }\n\n    return res\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,algorithm,javascript |>\n<code>\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7mt15omf_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074422
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    n := 0\n    for a > b {\n        r :=\
    \ r[0:0]\n        if a > 0 {\n            r := append(r, a%10)\n        }\n  \
    \      a /= 10\n        n = n + 1\n    }\n    if n > 0 {\n        r := append(r,\
    \ a%10)\n    }\n    for a > 0 {\n        r := append(r, a%10)\n        a /= 10\n\
    \    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91k8922r_test.go:23:13: r declared but not used

    /tmp/tmp91k8922r_test.go:29:9: r declared but not used

    /tmp/tmp91k8922r_test.go:32:9: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    n := b - a\n    d := b - a\n    x\
    \ := a\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= x; j++ {\n   \
    \         d -= 1\n            if d < 0 {\n                break\n            }\n\
    \            result.push(d)\n            x -= 1\n        }\n        x -= 2\n \
    \   }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2z3gw5f8_test.go:28:20: result.push undefined (type []int has no field
    or method push)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return nil\n    }\n\n    result := make([]int,\
    \ 0, b - a + 1)\n    for i := 0; i < b - a; i++ {\n        result = append(result,\
    \ i)\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpt9emu7tf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpt9emu7tf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpt9emu7tf_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpt9emu7tf_test.go:46:\
    \ expected '[]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)\
    \ %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18)\
    \ %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25)\
    \ %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32)\
    \ %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39)\
    \ %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46)\
    \ %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53)\
    \ %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60)\
    \ %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67)\
    \ %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    min := a\n    max := b\n\n\
    \    for {\n        c := min + (rand.Int()%(b-min))\n        if c == a+1 {\n \
    \           return result\n        }\n\n        if c+1 > (b-min) {\n         \
    \   break\n        }\n\n        if c > max {\n            break\n        }\n\n\
    \        result = append(result, c)\n        min = c\n    }\n\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7f232iu_test.go:23:21: undefined: rand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    i := 0\n    for a <= b {\n      \
    \  if a % 2 == 0 {\n            if i == b {\n                break\n         \
    \   }\n            result = append(result, a)\n            i += 1\n        }\n\
    \        a += 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpi_760ron_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpi_760ron_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpi_760ron_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpi_760ron_test.go:49:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074424
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for a <= b {\n        a += 1\n  \
    \      if a > b {\n            break\n        }\n        if a > 9 {\n        \
    \    a = a%10\n        }\n        result = append(result, int(a))\n    }\n   \
    \ return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ans := make([]int, 0)\n    for i := a; i <= b; i++ {\n \
    \       if i%2 != 0 {\n            ans = append(ans, i)\n        }\n    }\n  \
    \  return ans\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate :=\
    \ generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8g__kid7_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8g__kid7_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8g__kid7_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmp8g__kid7_test.go:43: expected '[]', got '[%!s(int=17) %!s(int=19)\
    \ %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33)\
    \ %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47)\
    \ %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61)\
    \ %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75)\
    \ %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a < b {\n        return []int{}\n    }\n    if b > a\
    \ {\n        return []int{b - a}\n    }\n    evens := make([]int, 0)\n    divby\
    \ := b / 2\n    for i := a; i <= divby; i++ {\n        if i%2 == 0 {\n       \
    \     evens = append(evens, i)\n        }\n    }\n    return evens\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpg_mxb0q3_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpg_mxb0q3_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpg_mxb0q3_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := make([]int, 0, b)\n    for i := a; i <= b; i++ {\n\
    \        if (r[(b-i) % b] != 0) {\n            r = append(r, 0)\n        }\n \
    \       r[(b-i) % b] = i\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmptg_i7wns_test.go:20\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmptg_i7wns_test.go:35\
    \ +0x5b7\ntesting.tRunner(0xc000103380, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    s := make([]int, 0)\n    for i := a; i <= b; i++ {\n   \
    \     if i%2 == 0 {\n            s = append(s, i)\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpedbzwkvj_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpedbzwkvj_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpedbzwkvj_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpedbzwkvj_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return nil\n    }\n\n    var result\
    \ []int\n    for i := a; i <= b; i++ {\n        if i % 2 != 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfi8tz2k4_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfi8tz2k4_test.go:47: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfi8tz2k4_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmpfi8tz2k4_test.go:47: expected '[]', got '[%!s(int=17) %!s(int=19)\
    \ %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33)\
    \ %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47)\
    \ %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61)\
    \ %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75)\
    \ %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    n := b - a\n    result := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        if a >= b {\n            break\n        }\n       \
    \ result := append(result, a)\n        a++\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaizjmpt_test.go:24:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := []int{}\n    for i := a; i <= b; i++ {\n      \
    \  if i%2 != 0 {\n            evens = append(evens, i)\n        }\n    }\n   \
    \ return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate :=\
    \ generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_op7zfox_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_op7zfox_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_op7zfox_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmp_op7zfox_test.go:43: expected '[]', got '[%!s(int=17) %!s(int=19)\
    \ %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33)\
    \ %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47)\
    \ %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61)\
    \ %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75)\
    \ %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n\n    if a < 0 {\n        a = 0\n    }\n\
    \n    if b < 0 {\n        b = 0\n    }\n\n    for i := a; i <= b; i++ {\n    \
    \    result <- i\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphk1n4ft4_test.go:29:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074423
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    if a > b {\n        a = b\n    }\n  \
    \  for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkamxaug8_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpkamxaug8_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpkamxaug8_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpkamxaug8_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    if a > b {\n        a = a\n    }\n  \
    \  for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp6n8fwe11_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp6n8fwe11_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp6n8fwe11_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp6n8fwe11_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 != 0 {\n            ints = append(ints, i)\n        }\n    }\n\
    \    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpsx35ehmh_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmpsx35ehmh_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpsx35ehmh_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmpsx35ehmh_test.go:43: expected '[]', got '[%!s(int=17) %!s(int=19)\
    \ %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33)\
    \ %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47)\
    \ %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61)\
    \ %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75)\
    \ %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    d := b-a+1\n    even := []int{}\n    \n    if d == 1 {\n\
    \        for i := a; i <= b; i++ {\n            even = append(even, i)\n     \
    \   }\n    }\n    else {\n        if d % 2 == 0 {\n            d /= 2\n      \
    \  }\n        \n        for i := a; i <= d; i++ {\n            even = append(even,\
    \ i)\n        }\n    }\n    \n    return even\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpotyipe2u_test.go:26:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074424
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    n := b - a\n    if n < 2 {\n        return nil\n    }\n\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = a + 2 * i\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpjmper_lf_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpjmper_lf_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpjmper_lf_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpjmper_lf_test.go:47:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89) %!s(int=91) %!s(int=93) %!s(int=95)\
    \ %!s(int=97) %!s(int=99) %!s(int=101) %!s(int=103) %!s(int=105) %!s(int=107)\
    \ %!s(int=109) %!s(int=111) %!s(int=113) %!s(int=115) %!s(int=117) %!s(int=119)\
    \ %!s(int=121) %!s(int=123) %!s(int=125) %!s(int=127) %!s(int=129) %!s(int=131)\
    \ %!s(int=133) %!s(int=135) %!s(int=137) %!s(int=139) %!s(int=141) %!s(int=143)\
    \ %!s(int=145) %!s(int=147) %!s(int=149) %!s(int=151) %!s(int=153) %!s(int=155)\
    \ %!s(int=157) %!s(int=159)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // TODO: write your code here\n    return nil\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpo2dpykhj_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpo2dpykhj_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpo2dpykhj_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    res := make([]int, 0, b - a + 1)\n    for i := 0; i < b;\
    \ i++ {\n        if a <= i && i < b {\n            res = append(res, i)\n    \
    \    }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpnwar1btn_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpnwar1btn_test.go:35\
    \ +0xcd\ntesting.tRunner(0xc0001924e0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ if i%2 == 0 {\n            even = append(even, i)\n        }\n    }\n    return\
    \ even\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5lcj4ckr_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n\n    if a < b {\n\
    \        for i := 0; i < a; i++ {\n            result <- i\n        }\n    }\n\
    \n    for i := a; i < b; i++ {\n        result <- i\n    }\n\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfypsih9_test.go:22:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    /tmp/tmpxfypsih9_test.go:27:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    last := b - a\n    if last < 0 {\n  \
    \      res = make([]int, 0)\n    } else {\n        res = make([]int, last)\n \
    \   }\n    for i := 0; i < last; i++ {\n        res[i] = a + i\n    }\n    return\
    \ res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprs_8k0lg_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmprs_8k0lg_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmprs_8k0lg_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmprs_8k0lg_test.go:47:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    x := a % 10\n    y := b % 10\n    even := make([]int, 0)\n\
    \    for {\n        if x == y {\n            even = append(even, x)\n        \
    \    break\n        }\n        x++\n        if x > y {\n            break\n  \
    \      }\n    }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8kd08tyi_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp8kd08tyi_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp8kd08tyi_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmp8kd08tyi_test.go:50: expected '[]', got '[%!s(int=9)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i < b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpnyii3m5s_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpnyii3m5s_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpnyii3m5s_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ for j := 0; j <= 9; j++ {\n            if i*10+j == i {\n                list\
    \ = append(list, i)\n            }\n        }\n    }\n    return list\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_3oqkb7h_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp_3oqkb7h_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp_3oqkb7h_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    for n := a; n <= b; n++ {\n       \
    \ if n%2 == 0 {\n            even = append(even, n)\n        }\n    }\n    return\
    \ even\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpo765jrmp_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpo765jrmp_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpo765jrmp_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpo765jrmp_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, 2)\n    digitCount := len(fmt.Sprintf(\"\
    %d\", a))\n    i := 0\n    for ; a > 0; a /= 10 {\n        i++\n    }\n    for\
    \ ; i <= digitCount; i++ {\n        result <- a % 10\n        a /= 10\n    }\n\
    \    digitCount := len(fmt.Sprintf(\"%d\", b))\n    for ; i > digitCount; i++\
    \ {\n        result <- b % 10\n        b /= 10\n    }\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzj2la0ut_test.go:25:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    /tmp/tmpzj2la0ut_test.go:28:16: no new variables on left side of :=

    /tmp/tmpzj2la0ut_test.go:30:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074425
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp204q0ozp_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp204q0ozp_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp204q0ozp_test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    currentInt := a\n    for currentInt\
    \ <= b {\n        currentIntStr := fmt.Sprintf(\"%d\", currentInt)\n        if\
    \ currentIntStr != \"\" && currentIntStr[0] != '0' {\n            result = append(result,\
    \ int(currentInt))\n        }\n        currentInt++\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ph364wt_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp2ph364wt_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp2ph364wt_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp2ph364wt_test.go:46:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits := make([]int, b-a+1)\n    for i := 0; i < b-a+1;\
    \ i++ {\n        digits[i] = a+i\n    }\n    copy(digits[b-a+1:], digits)\n  \
    \  return digits[0 : b-a]\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x548d30})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5027e0,\
    \ 0x548d30})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmp9dl940xy_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmp9dl940xy_test.go:34\
    \ +0x54\ntesting.tRunner(0xc0001964e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n    current := 0\n    index :=\
    \ 0\n    for current < b {\n        result[index] = a\n        index++\n     \
    \   current += a / 10\n        a = a%10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpy7mxau5m_test.go:22\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpy7mxau5m_test.go:37\
    \ +0x555\ntesting.tRunner(0xc0001a01a0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        for j := 1; j < 10; j++ {\n            result <- i\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12dcebf3_test.go:21:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074425
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    a -= b\n    for {\n        result\
    \ = append(result, a)\n        a++\n        if a == b {\n            break\n \
    \       }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074439
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    n := b - a\n    result := make([]int, n)\n    last := a\n\
    \    for i := 0; i < n; i++ {\n        result[i] = last / 10\n        last = last\
    \ % 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpxetj5wu1_test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpxetj5wu1_test.go:36\
    \ +0xa8\ntesting.tRunner(0xc000103380, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n    for i := 0; i < b; i++ {\n\
    \        if a >= b {\n            break\n        }\n        result[i] = a\n  \
    \      a /= 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_xo86e5r_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp_xo86e5r_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_xo86e5r_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmp_xo86e5r_test.go:45: expected '[]', got '[%!s(int=17) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var ret []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            ret = append(ret,\
    \ i)\n        }\n    }\n    return ret\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpi9fsimk2_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpi9fsimk2_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpi9fsimk2_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpi9fsimk2_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    arr := make([]int, 0)\n    for a > b {\n        arr = append(arr,\
    \ a)\n        a = a%10\n    }\n    return arr\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzwnbsmal_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpzwnbsmal_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpzwnbsmal_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=132)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a >= b {\n        return []int{}\n    }\n    result :=\
    \ make([]int, 0, b-a+1)\n    for i := a; i <= b; i++ {\n        if i % 2 == 0\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpsqvzbedk_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpsqvzbedk_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpsqvzbedk_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpsqvzbedk_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a <= 0 || b < a {\n        return\
    \ result\n    }\n    for a <= b {\n        result = append(result, a)\n      \
    \  a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmphy7p5l5h_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmphy7p5l5h_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmphy7p5l5h_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmphy7p5l5h_test.go:45:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n\n    r := []int{}\n\
    \    lastDigit := 0\n    for i := 0; i < b; i++ {\n        if i%b == 0 {\n   \
    \         lastDigit = a%b\n        } else {\n            lastDigit = lastDigit\
    \ % b\n        }\n\n        r = append(r, lastDigit)\n        a = a / b\n    }\n\
    \    return r\n}\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpmjzcc_fx_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpmjzcc_fx_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpmjzcc_fx_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int="
  timestamp: 1660074427
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b-a+1)\n    for a != b {\n    \
    \    if a > b {\n            break\n        }\n        digit, result := a+result,\
    \ append(result, digit)\n        a += digit/10\n    }\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3k5c8jc_test.go:23:26: invalid operation: a + result (mismatched types
    int and []int)

    /tmp/tmpz3k5c8jc_test.go:23:51: undefined: digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    i := 0\n    a -= a % 2\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            i += a\n        }\n    }\n\n    numbers :=\
    \ []int{}\n    for i := a; i <= b; i++ {\n        numbers = append(numbers, i)\n\
    \    }\n    return numbers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpuoaz31_test.go:18:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if b < a+1 {\n        return nil\n    }\n    ans := make([]int,\
    \ 0, b+1)\n    for ; a <= b; a++ {\n        ans = append(ans, a)\n    }\n    for\
    \ ; a > 0; a-- {\n        b := a - 1\n        if b < ans[0] {\n            break\n\
    \        }\n        ans = append(ans, 0)\n        for ; b > ans[0]; b-- {\n  \
    \          ans = append(ans, b)\n        }\n    }\n    return ans\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp08pkx5b2_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=0) %!s(int=10) %!s(int=9) %!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=6)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=0) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp08pkx5b2_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp08pkx5b2_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp08pkx5b2_test.go:54:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86)"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, b)\n    for i := 0; i < b; i++ {\n \
    \       ints[i] = a\n        a %= b\n    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp36vryedx_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp36vryedx_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp36vryedx_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmp36vryedx_test.go:42: expected '[]', got '[%!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17) %!s(int=17)\
    \ %!s(int=17) %!s(int=17) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := a; i > b; i++\
    \ {\n        if b <= i {\n            break\n        }\n        result := append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7i7bcrs_test.go:23:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a - 1; i < b; i++ {\n  \
    \      if a%i == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpak9dbao5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpak9dbao5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpak9dbao5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpak9dbao5_test.go:43:\
    \ expected '[]', got '[%!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b - a + 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = a + (i * b) / 100\n    }\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpbkn05tg6_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpbkn05tg6_test.go:33\
    \ +0xa5\ntesting.tRunner(0xc0001a0340, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    k := a\n    d := b - a\n \
    \   while k >= 0 {\n        result = append(result, k-a+1)\n        k--\n    }\n\
    \    d -= len(result)\n    for i := 0; i < d; i++ {\n        result = append(result,\
    \ a+1)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa7fcebvf_test.go:21:11: expected '';'', found k

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        result = append(result, i)\n    }\n\n    for i := a; i < b; i++ {\n\
    \        j = i\n        for {\n            j -= result[i]\n            if j ==\
    \ 0 {\n                break\n            }\n            result = append(result,\
    \ j)\n        }\n    }\n\n    return append(result, 0)\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vcl3h_h_test.go:24:9: undefined: j

    /tmp/tmp0vcl3h_h_test.go:26:13: undefined: j

    /tmp/tmp0vcl3h_h_test.go:27:16: undefined: j

    /tmp/tmp0vcl3h_h_test.go:30:37: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        result := append(result, a%10*10+a//10)\n        a = a / 10\n   \
    \ }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7_unmdem_test.go:20:43: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for a < b {\n        temp = a % 10\n\
    \        result += temp\n        a = a / 10\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkee6_xns_test.go:20:9: undefined: temp

    /tmp/tmpkee6_xns_test.go:21:19: undefined: temp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074427
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n\n    if a >= b {\n        return\
    \ nil\n    }\n\n    var i int\n    for i = a; i <= b; i++ {\n        if i%2 ==\
    \ 0 {\n            result[i] = i\n        }\n    }\n\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmp56twpucl_test.go:27\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmp56twpucl_test.go:41\
    \ +0x3e9\ntesting.tRunner(0xc0001a0340, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        return []int{a}\n    }\n\n    a +=\
    \ 1 // Include the largest possible value.\n    b += 1\n\n    if a == b {\n  \
    \      return []int{}\n    }\n\n    result := make([]int, 0)\n\n    for i := a;\
    \ i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpjpv9bd3k_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpjpv9bd3k_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpjpv9bd3k_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpjpv9bd3k_test.go:56:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits_list := make([]int, b)\n\n    // initialize array\
    \ with b\n    for i := 0; i < b; i++ {\n        digits_list[i] = i\n    }\n\n\
    \    // while loop will terminate when there are no more digits\n    // left to\
    \ return.\n    for i := a; i >= 0; i-- {\n        for j := 0; j < b; j++ {\n \
    \           digits_list[j] *= 10\n        }\n\n        // test if all digits are\
    \ even\n        if digits_list[a%b] == 0 {\n            for j := 0; j < b; j++\
    \ {\n                digits_list[j] /= 10\n            }\n            break\n\
    \        }\n    }\n\n    return digits_list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpsr02xrhf_test.go:60: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1000) %!s(int=2000) %!s(int=3000) %!s(int=4000)\
    \ %!s(int=5000) %!s(int=6000) %!s(int=7000) %!s(int=8000) %!s(int=9000)]'\n  \
    \  --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpsr02xrhf_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpsr02xrhf_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpsr02xrhf_test.go:60:\
    \ expected '[]', got '[%!s(int=0) %!s(int=1000000000000000000) %!s(int=2000000000000000000)\
    \ %!s(int=3000000000000000000) %!s(int=4000000000000000000) %!s(int=5000000000000000000)\
    \ %!s(int=6000000000000000000) %!s(int=7000000000000000000) %!s(int=8000000000000000000)\
    \ %!s(int=9000000000000000000) %!s(int=-8446744073709551616) %!s(int=-7446744073709551616)\
    \ %!s(int=-6446744073709551616) %!s(int=-5446744073709551616) %!s(int=-4446744073709551616)\
    \ %!s(int=-3446744073709551616) %!s(int=-2446744073709551616) %!s(int=-1446744073709551616)\
    \ %!s(int=-446744073709551616) %!s(int=553255926290448384) %!s(int=1553255926290448384)\
    \ %!s(int=2553255926290448384) %!s(int=3553255926290448384) %!s(int=4553255926290448384)\
    \ %!s(int=5553255926290448384) %!s(int=6553255926290448384) %!s(int=7553255926290448384)\
    \ %!s(int=8553255926290448384) %!s(int=-8893488147419103232) %!s(int=-7893488147419103232)\
    \ %!s(int=-6893488147419103232) %!s(int=-5893488147419103232) %!s(int=-4893488147419103232)\
    \ %!s(int=-3893488147419103232) %!s(int=-2893488147419103232) %!s(int=-1893488147419103232)\
    \ %!s(int=-893488147419103232) %!s(int=106511852580896768) %!s(int=1106511852580896768)\
    \ %!s(int=2106511852580896768) %!s(int=3106511852580896768) %!s(int=4106511852580896768)\
    \ %!s(int=5106511852580896768) %!s(int=61065"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := make([]int, 0, b)\n    for i := a - 1; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            even = append(even, i)\n        }\n  \
    \  }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprx_adcnd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmprx_adcnd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmprx_adcnd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmprx_adcnd_test.go:43:\
    \ expected '[]', got '[%!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := 0; i < b; i++ {\n       \
    \ if i%2 == 0 {\n            continue // skip evens\n        }\n        result\
    \ = append(result, i)\n    }\n    if a < 2 {\n        return result\n    }\n \
    \   for i := 0; i < a; i++ {\n        result = append(result, 0)\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkp0kino8_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n    \
    \    tmpkp0kino8_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpkp0kino8_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := make([]int, 0)\n    var x int\n    for x := a; x\
    \ < b; x++ {\n        list = append(list, x)\n    }\n\n    // Sort from low to\
    \ high\n    sort.Sort(sort.Reverse(sort.IntSlice(list)))\n\n    // Return the\
    \ numbers\n    return list\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpos08cufn_test.go:19:9: x declared but not used

    /tmp/tmpos08cufn_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    digits, remainder := 0,\
    \ a % b\n    for {\n        result, remainder = divmod(remainder, 10)\n      \
    \  result = append(result, digits)\n        if remainder == 0 {\n            break\n\
    \        }\n        digits, remainder = divmod(remainder, 10)\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpads8p_c9_test.go:21:29: undefined: divmod

    /tmp/tmpads8p_c9_test.go:26:29: undefined: divmod

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 != 0 {\n            even = append(even, i)\n        }\n    }\n\
    \    return even\n}\n</code>\n<|/ a |>\n<| c |>\nThis won't compile. I think the\
    \ function `generate_integers` should have the type `[]int` instead of the `int`\
    \ you currently have for it.\n<|/ c |>\n<| a dscore=1 tags=python,java,algorithm\
    \ |>\nThis is my implementation\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] nums = {12, 10, 6, 8, 4, 12};\n    System.out.println(nums.stream().map(Integer::valueOf).collect(Collectors.toList()));\n\
    }\n</code>\n<|/ a |>\n<| a tags=python,java,algorithm |>\nHere's my solution.\
    \ \n<code>\npublic class Main {\n    public static void main(String[] args) {\n\
    \        List<Integer> ints = new ArrayList<Integer>();\n        ints.add(1);\n\
    \        ints.add(2);\n        ints.add(3);\n        ints.add(4);\n        ints.add(5);\n\
    \        ints.add(6);\n        ints.add(7);\n        ints.add(8);\n\n        List<Integer>\
    \ evens = IntStream.range(0, ints.size())\n                .filter(i -> i % 2\
    \ == 0)\n                .map(i -> ints.get(i))\n                .collect(Collectors.toList());\n\
    \        System.out.println(evens);\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\nYou can use stream and filter function to get even numbers from\
    \ given array :\n<code>\npublic static void main(String args[]) {\n    int[] arr\
    \ = new int[] { 12, 10, 6, 8, 4, 12 };\n\n    // filter only even numbers\n  \
    \  List<Integer> evenNumbers = IntStream.of(arr)\n            .filter(n -> n %\
    \ 2 == 0)\n            .boxed()\n            .collect(Collectors.toList());\n\n\
    \    System.out.println(evenNumbers);\n}\n</code>\n<|/ a tags=python,java,algorithm\
    \ |>\n<| a |>\nMy solution in python using list comprehension\n<code>\n>>> nums\
    \ = [12, 10, 6, 8, 4, 12]\n>>> [x for x in nums if x%2 == 0]\n[2, 4, 6, 8]\n</code>\n\
    <|/ a tags=python,java,algorithm dscore=0 |>\n<| c |>\nThat is using list comprehension.\
    \ Can you use map instead?\n<|/ c |>\n<| c |>\nYou can do that as well `nums.map(lambda\
    \ x: x if x % 2 == 0 else None)`\n<|/ c |>\n<| c |>\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa4krt255_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    res := make([]int, 0)\n    for i := a; i <= b; i++ {\n \
    \       if i%2 == 0 {\n            res = append(res, i)\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate :=\
    \ generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpshlumeis_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpshlumeis_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpshlumeis_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpshlumeis_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n    for i, j := a, b; i < b; i,\
    \ j = i+1, j+2 {\n        if j < i {\n            continue\n        }\n      \
    \  result[j-i] = i\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpdqlkdvz__test.go:23\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpdqlkdvz__test.go:35\
    \ +0x43b\ntesting.tRunner(0xc0001a0340, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // Create an empty array\n    var numbers = []int{}\n\n\
    \    // Start at 1 to skip a\n    for i := 1; i <= b; i++ {\n        // Check\
    \ if the number is even\n        if i%2 == 0 {\n            // Add it to the array\n\
    \            numbers = append(numbers, i)\n        }\n    }\n\n    // Sort the\
    \ array\n    numbers := sort.Ints(numbers)\n\n    // Return the array\n    return\
    \ numbers\n}\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsob0zcno_test.go:31:13: no new variables on left side of :=

    /tmp/tmpsob0zcno_test.go:31:16: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    var current int\n    for current :=\
    \ a; current <= b; current += 2 {\n        fmt.Printf(\"\\n%v\\n\", current)\n\
    \        result = append(result, current)\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpht5ygqdi_test.go:19:9: current declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0, b - a + 1)\n\n    for i := 0; i <\
    \ b; i++ {\n        ints = append(ints, a)\n        a += 2\n    }\n\n    return\
    \ ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x503920, 0x54a0b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x503920,\
    \ 0x54a0b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpn3q0k6sp_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpn3q0k6sp_test.go:36\
    \ +0xdc\ntesting.tRunner(0xc0001964e0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        result := append(result, i)\n    }\n    fmt.Printf(\"%v\", result)\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwpv354rf_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    slice := make([]int, 0)\n    for a <= b {\n        if a\
    \ < 10 {\n            slice = append(slice, a)\n            a++\n            continue\n\
    \        }\n        digit, a := a/10, a%10\n        digit2, b2 := b/10, b%10\n\
    \        if digit > 0 {\n            slice = append(slice, digit)\n        }\n\
    \        if digit > 0 {\n            slice = append(slice, digit2)\n        }\n\
    \        a++\n        b++\n    }\n    return slice\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7a56vp9_test.go:26:17: b2 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := a % 10\n    result <-\
    \ i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10,\
    \ a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a %\
    \ 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n\
    \    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n\
    \    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n  \
    \  result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a,\
    \ a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n  \
    \  i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result\
    \ <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10,\
    \ a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a %\
    \ 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n\
    \    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n\
    \    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n  \
    \  result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a,\
    \ a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10, a%10\n  \
    \  i := a % 10\n    result <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result\
    \ <- i\n    a, a = a+10, a%10\n    i := a % 10\n    result <- i\n    a, a = a+10,\
    \ a%10\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8xjykso6_test.go:91:6: expected ''('', found TestGenerate_Integers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074428
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n      \
    \  result = append(result, i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppcr5s22i_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmppcr5s22i_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmppcr5s22i_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppcr5s22i_test.go:41:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b+1)\n    last := a\n    for i\
    \ := a - 1; i > 0; i-- {\n        if last < b {\n            break\n        }\n\
    \        result += append(result, last-i)\n        last++\n    }\n    return append(result,\
    \ last)\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y9e6oy3_test.go:24:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var x []int\n    for i := a; i <= b; i++ {\n        if i%2\
    \ == 0 {\n            x = append(x, i)\n        }\n    }\n    return x\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8iupc4dm_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8iupc4dm_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp8iupc4dm_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp8iupc4dm_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   result += []int{i}\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4xmvip2_test.go:20:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    var x int\n    if b < a {\n        res\
    \ = []int{}\n    }\n    for x <= a && x <= b {\n        if x%2 != 0 {\n      \
    \      res = append(res, x)\n        }\n        x = x+1\n    }\n    return res\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpvp081ern_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpvp081ern_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpvp081ern_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpvp081ern_test.go:48: expected '[]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    for i := a; i <= b; i++ {\n        if\
    \ i%2 == 0 {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprvew59ba_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmprvew59ba_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmprvew59ba_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmprvew59ba_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n      \
    \  if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp73kywr_1_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp73kywr_1_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp73kywr_1_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp73kywr_1_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        // swap a and b\n        a, b = b, a\n\
    \    }\n    s := make([]int, 0, b - a + 1)\n    for i := a + 1; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            s = append(s, i)\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxwiefik6_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxwiefik6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpxwiefik6_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30)\
    \ %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44)\
    \ %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58)\
    \ %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72)\
    \ %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86)\
    \ %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98) %!s(int=100)\
    \ %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110) %!s(int=112)\
    \ %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122) %!s(int=124)\
    \ %!s(int=126) %!s(int=128) %!s(int=130) %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpxwiefik6_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20)\
    \ %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34)\
    \ %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48)\
    \ %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62)\
    \ %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76)\
    \ %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ if i%2 == 0 {\n            ints = append(ints, i)\n        }\n    }\n    return\
    \ ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqzlkidte_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqzlkidte_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpqzlkidte_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpqzlkidte_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a ; i < b ; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp_9kuwpp6_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp_9kuwpp6_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp_9kuwpp6_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits := make([]int, b - a + 1)\n\n    if a > b {\n   \
    \     return nil\n    }\n\n    for i := 0; i < b - a + 1; i++ {\n        digits[i]\
    \ = a%10\n        a = a/10\n    }\n\n    return digits\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of\
    \ range [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmp7v4e6hix_test.go:25\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmp7v4e6hix_test.go:39\
    \ +0x449\ntesting.tRunner(0xc0001a0340, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n  \
    \  }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpnwjfq416_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpnwjfq416_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpnwjfq416_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpnwjfq416_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    if a < b {\n        a, b =\
    \ b, a\n    }\n    for x := a; x < b; x++ {\n        result = append(result, x)\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppza1qixc_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmppza1qixc_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppza1qixc_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var s []int\n    n := (b - a) / 2 + a\n    for i := 0; i\
    \ < n; i++ {\n        s = append(s, i+a)\n    }\n    return s\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpal0540xw_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpal0540xw_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__2 (0.00s)\n        tmpal0540xw_test.go:42: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=132) %!s(int=133)\
    \ %!s(int=134) %!s(int=135) %!s(int=136) %!s(int=137) %!s(int=138) %!s(int=139)\
    \ %!s(int=140) %!s(int=141) %!s(int=142) %!s(int=143) %!s(int=144) %!s(int=145)\
    \ %!s(int=146) %!s(int=147) %!s(int=148) %!s(int=149) %!s(int=150) %!s(int=151)\
    \ %!s(int=152) %!s(int=153) %!s(int=154) %!s(int=155) %!s(int=156) %!s(int=157)\
    \ %!s(int=158) %!s(int=159) %!s(int=160) %!s(int=161) %!s(int=162) %!s(int=163)\
    \ %!s(int=164) %!s(int=165) %!s(int=166) %!s(int=167) %!s(int=168) %!s(int=169)\
    \ %!s(int=170) %!s(int=171) %!s(int=172) %!s(int=173) %!s(int=174) %!s(int=175)\
    \ %!s(int=176) %!s(int=177) %!s(int=178) %!s(int=179) %!s(int=180) %!s(int=181)\
    \ %!s(int=182) %!s(int=183) %!s(int=184) %!s(int=185) %!s(int=186) %!s(int=187)\
    \ %!s(int=188) %!s(int=189) %!s(int=190) %!s(int=191) %!s(int=192) %!s(int=193)\
    \ %!s(int=194) %!s(int=195) %!s(int=196) %!s(int=197) %!s(int=198)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpal0540xw_test.go:42:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int="
  timestamp: 1660074430
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    integers := make([]int, 0)\n    digits := make([]int, 0)\n\
    \n    for number := a; number <= b; number++ {\n        digits = append(digits,\
    \ number)\n    }\n\n    for _, d := range digits {\n        integer, err := strconv.Atoi(fmt.Sprintf(\"\
    %d\", d))\n        if err != nil {\n            panic(err)\n        }\n\n    \
    \    if integer%2 == 0 {\n            integers = append(integers, integer)\n \
    \       }\n    }\n\n    return integers\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1abft6cj_test.go:26:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074430
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        if a\
    \ % 2 == 0 {\n            a /= 2\n            result = append(result, a)\n   \
    \     }\n        a += 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074455
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    x := a\n    y := b\n    result := make([]int, 0, x-y+1)\n\
    \    for {\n        if x != y {\n            result <- x\n        }\n        x\
    \ /= 10\n        if x%2 == 0 {\n            x /= 2\n            y *= 2\n     \
    \   } else {\n            y++\n            x /= 2\n        }\n        if x ==\
    \ 0 {\n            break\n        }\n    }\n    return\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpup4hx_gg_test.go:23:13:\
    \ invalid operation: cannot send to non-channel result (variable of type []int)\n\
    /tmp/tmpup4hx_gg_test.go:37:5: not enough return values\n\thave ()\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    if a < b {\n        for a\
    \ <= b {\n            result = append(result, a)\n            a += 2\n       \
    \ }\n    } else {\n        for a >= b {\n            result = append(result, a)\n\
    \            a -= 2\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpk3b94u8r_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpk3b94u8r_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpk3b94u8r_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=130) %!s(int=128) %!s(int=126) %!s(int=124)\
    \ %!s(int=122) %!s(int=120) %!s(int=118) %!s(int=116) %!s(int=114) %!s(int=112)\
    \ %!s(int=110) %!s(int=108) %!s(int=106) %!s(int=104) %!s(int=102) %!s(int=100)\
    \ %!s(int=98) %!s(int=96) %!s(int=94) %!s(int=92) %!s(int=90) %!s(int=88) %!s(int=86)\
    \ %!s(int=84) %!s(int=82) %!s(int=80) %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72)\
    \ %!s(int=70) %!s(int=68) %!s(int=66) %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58)\
    \ %!s(int=56) %!s(int=54) %!s(int=52) %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44)\
    \ %!s(int=42) %!s(int=40) %!s(int=38) %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30)\
    \ %!s(int=28) %!s(int=26) %!s(int=24) %!s(int=22) %!s(int=20) %!s(int=18) %!s(int=16)\
    \ %!s(int=14) %!s(int=12) %!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpk3b94u8r_test.go:49:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074431
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for a > 0 && len(result)\
    \ <= b {\n        for d := 0; d < 10; d++ {\n            a /= 10\n           \
    \ if a == 0 {\n                return result\n            }\n            if a\
    \ > b {\n                break\n            }\n            result <- a\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiyvftvv_test.go:28:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074430
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := make([]int, 1)\n    count := 0\n\n    for count < b\
    \ {\n        if count%a == 0 {\n            r[len(r)] = count\n            count++\n\
    \        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpxu5ykmid_test.go:23\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpxu5ykmid_test.go:37\
    \ +0x35\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074431
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, (a+b-1)/a)\n    for i := 0; i <\
    \ a; i++ {\n        result = append(result, 2*i)\n    }\n    for i := a+1; i <=\
    \ b; i++ {\n        result = append(result, 2*i)\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkqn1d47j_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)]'\n    --- FAIL:\
    \ TestGenerate_Integers/test_num__1 (0.00s)\n        tmpkqn1d47j_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n   \
    \     tmpkqn1d47j_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96)\
    \ %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108)\
    \ %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120)\
    \ %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130) %!s(int=132)\
    \ %!s(int=134) %!s(int=136) %!s(int=138) %!s(int=140) %!s(int=142) %!s(int=144)\
    \ %!s(int=146) %!s(int=148) %!s(int=150) %!s(int=152) %!s(int=154) %!s(int=156)\
    \ %!s(int=158) %!s(int=160) %!s(int=162) %!s(int=164) %!s(int=166) %!s(int=168)\
    \ %!s(int=170) %!s(int=172) %!s(int=174) %!s(int=176) %!s(int=178) %!s(int=180)\
    \ %!s(int=182) %!s(int=184) %!s(int=186) %!s(int=188) %!s(int=190) %!s(int=192)\
    \ %!s(int=194) %!s(int=196) %!s(int=198) %!s(int=200) %!s(int=202) %!s(int=204)\
    \ %!s(int=206) %!s(int=208) %!s(int"
  timestamp: 1660074431
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var a int\n    var b int\n    var result []int\n\n    firstDigitOfAAndB\
    \ := a%b\n    if firstDigitOfAAndB == 0 {\n        return nil\n    }\n\n    result\
    \ := make([]int, firstDigitOfAAndB+1)\n\n    for i := 1; i < b; i++ {\n      \
    \  result = append(result, i)\n        if a%i == 0 {\n            a = a//i\n \
    \       }\n    }\n\n    result = append(result, a)\n\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa3z2btkv_test.go:18:9:\
    \ a redeclared in this block\n\t/tmp/tmpa3z2btkv_test.go:17:24: other declaration\
    \ of a\n/tmp/tmpa3z2btkv_test.go:19:9: b redeclared in this block\n\t/tmp/tmpa3z2btkv_test.go:17:31:\
    \ other declaration of b\n/tmp/tmpa3z2btkv_test.go:27:12: no new variables on\
    \ left side of :=\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074431
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    a -= b\n   \
    \ numbers := make([]int, b - a + 1)\n    if a > 0 {\n        numbers[0] = a\n\
    \    }\n    for i := 1; i < b - a + 1; i++ {\n        numbers[i] = a + (i-1)\n\
    \    }\n    return numbers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpt84_96ym_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=-8) %!s(int=-7) %!s(int=-6) %!s(int=-5)\
    \ %!s(int=-4) %!s(int=-3) %!s(int=-2) %!s(int=-1) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpt84_96ym_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0) %!s(int=-8)\
    \ %!s(int=-7) %!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2) %!s(int=-1)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpt84_96ym_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=-130) %!s(int=-129) %!s(int=-128) %!s(int=-127)\
    \ %!s(int=-126) %!s(int=-125) %!s(int=-124) %!s(int=-123) %!s(int=-122) %!s(int=-121)\
    \ %!s(int=-120) %!s(int=-119) %!s(int=-118) %!s(int=-117) %!s(int=-116) %!s(int=-115)\
    \ %!s(int=-114) %!s(int=-113) %!s(int=-112) %!s(int=-111) %!s(int=-110) %!s(int=-109)\
    \ %!s(int=-108) %!s(int=-107) %!s(int=-106) %!s(int=-105) %!s(int=-104) %!s(int=-103)\
    \ %!s(int=-102) %!s(int=-101) %!s(int=-100) %!s(int=-99) %!s(int=-98) %!s(int=-97)\
    \ %!s(int=-96) %!s(int=-95) %!s(int=-94) %!s(int=-93) %!s(int=-92) %!s(int=-91)\
    \ %!s(int=-90) %!s(int=-89) %!s(int=-88) %!s(int=-87) %!s(int=-86) %!s(int=-85)\
    \ %!s(int=-84) %!s(int=-83) %!s(int=-82) %!s(int=-81) %!s(int=-80) %!s(int=-79)\
    \ %!s(int=-78) %!s(int=-77) %!s(int=-76) %!s(int=-75) %!s(int=-74) %!s(int=-73)\
    \ %!s(int=-72) %!s(int=-71) %!s(int=-70) %!s(int=-69) %!s(int=-68) %!s(int=-67)\
    \ %!s(int=-66) %!s(int=-65) %!s(int=-64) %!s(int=-63) %!s(int=-62) %!s(int=-61)\
    \ %!s(int=-60) %!s(int=-59) %!s(int=-58) %!s(int=-57) %!s(int=-56) %!s(int=-55)\
    \ %!s(int=-54) %!s(int=-53) %!s(int=-52) %!s(int=-51) %!s(int=-50) %!s(int=-49)\
    \ %!s(in"
  timestamp: 1660074431
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    current := a\n    for current\
    \ <= b {\n        if current%2 == 0 {\n            result = append(result, current)\n\
    \        }\n        current += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpurvc7slc_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpurvc7slc_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpurvc7slc_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074431
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == 0 || b == 0 {\n        return []int{}\n    }\n \
    \   ints := make([]int, 0)\n    i := 0\n    for i <= b {\n        ints = append(ints,\
    \ i)\n        i += 2\n    }\n    ints = append(ints, a)\n    return ints\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpckhnq4cn_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n    \
    \    tmpckhnq4cn_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpckhnq4cn_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2) %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpckhnq4cn_test.go:47: expected '[]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30)\
    \ %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44)\
    \ %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58)\
    \ %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72)\
    \ %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86)\
    \ %!s(int=88) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ if i%2 == 0 {\n            even = append(even, i)\n        }\n    }\n    return\
    \ even\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5lcj4ckr_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5lcj4ckr_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074426
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b+1)\n    for i := a; i <= b; i++\
    \ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpua580tz8_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpua580tz8_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpua580tz8_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpua580tz8_test.go:41:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    l := (b - a) / 2\n    evens := make([]int, l)\n    for i\
    \ := 0; i < l; i++ {\n        evens[i] = a%10\n        a /= 10\n    }\n    return\
    \ evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpfv5i7xzg_test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpfv5i7xzg_test.go:35\
    \ +0xa7\ntesting.tRunner(0xc0001924e0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n\n    for i := a; i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            r = append(r, i)\n        }\n    }\n\n    return r\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpbmrl80_f_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpbmrl80_f_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpbmrl80_f_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpbmrl80_f_test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a < b {\n            a += 1\n        }\n        for j := a; j\
    \ < b; j++ {\n            result = append(result, j)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpu24m4bam_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)\
    \ %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n    \
    \    tmpu24m4bam_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpu24m4bam_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpu24m4bam_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29)\
    \ %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36)\
    \ %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43)\
    \ %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50)\
    \ %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57)\
    \ %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64)\
    \ %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71)\
    \ %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78)\
    \ %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85)\
    \ %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29)\
    \ %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36)\
    \ %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41)"
  timestamp: 1660074432
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a - 1; i <= b; i++\
    \ {\n        if i >= 0 {\n            digit, _ := strconv.Atoi(strconv.Itoa(i))\n\
    \            if digit % 2 == 0 {\n                result = append(result, digit)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8fapy87q_test.go:21:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    if a < b {\n        for i := a; i <=\
    \ b; i++ {\n            if i % 2 == 0 {\n                even = append(even, i)\n\
    \            }\n        }\n    } else {\n        for i := b; i >= a; i-- {\n \
    \           if i % 2 == 0 {\n                even = append(even, i)\n        \
    \    }\n        }\n    }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpre9v3a8f_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpre9v3a8f_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpre9v3a8f_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpre9v3a8f_test.go:51:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    a -= a%10\n    b -= b%10\n    result := make([]int, 0)\n\
    \    for a != 0 {\n        result = append(result, a%10)\n        a /= 10\n  \
    \  }\n    for b != 0 {\n        result = append(result, b%10)\n        b /= 10\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_l0e53b8_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp_l0e53b8_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_l0e53b8_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmp_l0e53b8_test.go:48: expected '[]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    if a < b {\n        for i\
    \ := a; i <= b; i++ {\n            result = append(result, i)\n        }\n   \
    \ } else {\n        for i := a; i >= b; i-- {\n            result = append(result,\
    \ i)\n        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp9mf93dnd_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp9mf93dnd_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp9mf93dnd_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=131) %!s(int=130) %!s(int=129) %!s(int=128)\
    \ %!s(int=127) %!s(int=126) %!s(int=125) %!s(int=124) %!s(int=123) %!s(int=122)\
    \ %!s(int=121) %!s(int=120) %!s(int=119) %!s(int=118) %!s(int=117) %!s(int=116)\
    \ %!s(int=115) %!s(int=114) %!s(int=113) %!s(int=112) %!s(int=111) %!s(int=110)\
    \ %!s(int=109) %!s(int=108) %!s(int=107) %!s(int=106) %!s(int=105) %!s(int=104)\
    \ %!s(int=103) %!s(int=102) %!s(int=101) %!s(int=100) %!s(int=99) %!s(int=98)\
    \ %!s(int=97) %!s(int=96) %!s(int=95) %!s(int=94) %!s(int=93) %!s(int=92) %!s(int=91)\
    \ %!s(int=90) %!s(int=89) %!s(int=88) %!s(int=87) %!s(int=86) %!s(int=85) %!s(int=84)\
    \ %!s(int=83) %!s(int=82) %!s(int=81) %!s(int=80) %!s(int=79) %!s(int=78) %!s(int=77)\
    \ %!s(int=76) %!s(int=75) %!s(int=74) %!s(int=73) %!s(int=72) %!s(int=71) %!s(int=70)\
    \ %!s(int=69) %!s(int=68) %!s(int=67) %!s(int=66) %!s(int=65) %!s(int=64) %!s(int=63)\
    \ %!s(int=62) %!s(int=61) %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56)\
    \ %!s(int=55) %!s(int=54) %!s(int=53) %!s(int=52) %!s(int=51) %!s(int=50) %!s(int=49)\
    \ %!s(int=48) %!s(int=47) %!s(int=46) %!s(int=45) %!s(int=44) %!s(int=43) %!s(int=42)\
    \ %!s(int=41) %!s(int=40) %!s(int=39) %!s(int=38) %!s(int=37) %!s(int=36) %!s(int=35)\
    \ %!s(int=34) %!s(int=33) %!s(int=32) %!s(int=31) %!s(int=30) %!s(int=29) %!s(int=28)\
    \ %!s(int=27) %!s(int=26) %!s(int=25) %!s(int=24) %!s(int"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    if a > b {\n        return\
    \ nil\n    }\n    for a <= b {\n        result = append(result, a)\n        a\
    \ *= 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdct5q_ml_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpdct5q_ml_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpdct5q_ml_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpdct5q_ml_test.go:45:\
    \ expected '[]', got '[%!s(int=17) %!s(int=34) %!s(int=68)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    i := a\n    for i <= b {\n      \
    \  if i%2 == 0 {\n            result = append(result, i)\n        }\n        i++\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3g4g07u9_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3g4g07u9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp3g4g07u9_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp3g4g07u9_test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if b < a {\n        return nil\n    }\n    a -= b\n    t\
    \ := make([]int, 0, b)\n    for a >= 0 {\n        t := append(t, a)\n        a\
    \ /= 10\n    }\n    return t\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_y4bgznn_test.go:24:9: t declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074432
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    numbers := make([]int, 0)\n    \n    for i := a; i < b;\
    \ i++ {\n        numbers = append(numbers, i)\n    }\n    \n    // Sort the numbers\
    \ so the even numbers are the first in the array \n    sort.Ints(numbers)\n  \
    \  \n    // Filter out numbers less than the square root of the given integers\n\
    \    numbers := numbers[:len(numbers)/2]\n    \n    return numbers\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48yd9gkm_test.go:25:5: undefined: sort

    /tmp/tmp48yd9gkm_test.go:28:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := make([]int, b)\n    if a >= b {\n        return\
    \ list\n    }\n    for i := range list {\n        list[i] = a\n        a++\n \
    \   }\n    return list\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwtvxjq98_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpwtvxjq98_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpwtvxjq98_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpwtvxjq98_test.go:45: expected '[]', got '[%!s(int=17) %!s(int=18)\
    \ %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25)\
    \ %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32)\
    \ %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39)\
    \ %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46)\
    \ %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53)\
    \ %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60)\
    \ %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67)\
    \ %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74)\
    \ %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81)\
    \ %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88)\
    \ %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95)\
    \ %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102)\
    \ %!s(int=103) %!s(int=104) %!s(int=105)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074432
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits, err := strconv.Atoi(string([]byte{a}))\n    if err\
    \ != nil {\n        return nil\n    }\n    a -= bytesToInt([]byte{digits}) * bytesToInt([]byte{a})\n\
    \    digits, err = strconv.Atoi(string([]byte{b}))\n    if err != nil {\n    \
    \    return nil\n    }\n    b -= bytesToInt([]byte{digits}) * bytesToInt([]byte{b})\n\
    \    var result []int\n    for {\n        a += 1\n        digits, err = strconv.Atoi(string([]byte{a}))\n\
    \        if err != nil {\n            break\n        }\n        a -= bytesToInt([]byte{digits})\
    \ * bytesToInt([]byte{a})\n        b += 1\n        digits, err = strconv.Atoi(string([]byte{b}))\n\
    \        if err != nil {\n            break\n        }\n        b -= bytesToInt([]byte{digits})\
    \ * bytesToInt([]byte{b})\n        if a > b {\n            break\n        }\n\
    \        result = append(result, int(digits))\n    }\n    return append(result,\
    \ int(b))\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyqqao73_test.go:18:20: undefined: strconv

    /tmp/tmplyqqao73_test.go:18:47: cannot use a (variable of type int) as type byte
    in array or slice literal

    /tmp/tmplyqqao73_test.go:22:10: undefined: bytesToInt

    /tmp/tmplyqqao73_test.go:22:57: cannot use a (variable of type int) as type byte
    in array or slice literal

    /tmp/tmplyqqao73_test.go:23:19: undefined: strconv

    /tmp/tmplyqqao73_test.go:23:46: cannot use b (variable of type int) as type byte
    in array or slice literal

    /tmp/tmplyqqao73_test.go:27:10: undefined: bytesToInt

    /tmp/tmplyqqao73_test.go:27:57: cannot use b (variable of type int) as type byte
    in array or slice literal

    /tmp/tmplyqqao73_test.go:31:23: undefined: strconv

    /tmp/tmplyqqao73_test.go:31:50: cannot use a (variable of type int) as type byte
    in array or slice literal

    /tmp/tmplyqqao73_test.go:31:50: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074432
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    rangeCheck(a, b)\n    for i := a; i\
    \ <= b; i++ {\n        if i%2 == 0 {\n            even = append(even, i)\n   \
    \     }\n    }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7_6z6zt_test.go:19:5: undefined: rangeCheck

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074432
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    arr := []int{}\n\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            arr = append(arr, i)\n        }\n    }\n\n   \
    \ return arr\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate :=\
    \ generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxz59rjf2_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxz59rjf2_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpxz59rjf2_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpxz59rjf2_test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ret []int\n    for i := a; i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            ret = append(ret, i)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptm29kevw_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptm29kevw_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmptm29kevw_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmptm29kevw_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074433
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    b := b - a\n    result := make([]int, 0, b)\n\n    for i\
    \ := 0; i < b; i++ {\n        digit, ok := a%10\n        if !ok {\n          \
    \  digit = 10\n        }\n        result = append(result, digit)\n        a /=\
    \ 10\n    }\n    if a > 0 {\n        result = append(result, a)\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zkbhe0x_test.go:18:7: no new variables on left side of :=

    /tmp/tmp5zkbhe0x_test.go:22:22: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := b; i >= a; i-- {\n\
    \        result := append(result, i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxoube1vf_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    last := a\n\n    for {\n \
    \       if last < b {\n            result += append(result, last)\n          \
    \  last++\n        } else {\n            break\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2e29s4h_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_xf2_39p_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_xf2_39p_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp_xf2_39p_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp_xf2_39p_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n    r := b\n\n    for ; a > b;\
    \ a-- {\n        if a % 2 == 0 {\n            r = r / 2\n            result[r]\
    \ = a\n        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppo1ub294_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmppo1ub294_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=4) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmppo1ub294_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=4) %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmppo1ub294_test.go:47: expected '[]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n\
    \    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpnrw7bnby_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpnrw7bnby_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpnrw7bnby_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpnrw7bnby_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    a -= a % 2\n    a /= 2\n \
    \   a += b - a\n    a %= b\n    if a > 0 {\n        result = append(result, a)\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpm3bkb2ie_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpm3bkb2ie_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpm3bkb2ie_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ans []int\n    if a < b {\n        for i := a; i <=\
    \ b; i++ {\n            ans = append(ans, i)\n        }\n    } else {\n      \
    \  for i := a; i >= b; i-- {\n            ans = append(ans, i)\n        }\n  \
    \  }\n    sort.Sort(sort.Reverse(ans))\n    return ans\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ox5w0ah_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b-1)\n    for i := 0; i < b; i++\
    \ {\n        if a < i {\n            break\n        }\n        result = append(result,\
    \ a)\n        a, b = b, a\n    }\n    return append(result, a)\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpaksmbl2s_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=10) %!s(int=2) %!s(int=10)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpaksmbl2s_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=2) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpaksmbl2s_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=132) %!s(int=2) %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpaksmbl2s_test.go:45: expected '[]', got '[%!s(int=17) %!s(int=89)\
    \ %!s(int=17) %!s(int=89) %!s(int=17) %!s(int=89) %!s(int=17) %!s(int=89) %!s(int=17)\
    \ %!s(int=89) %!s(int=17) %!s(int=89) %!s(int=17) %!s(int=89) %!s(int=17) %!s(int=89)\
    \ %!s(int=17) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            ints = append(ints, i)\n        }\n    }\n\
    \    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5jqusp_3_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5jqusp_3_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5jqusp_3_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5jqusp_3_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n\n    if a > b {\n        fmt.Println(\"\
    a > b\")\n        return nil\n    }\n\n    if a < b {\n        a = b\n    }\n\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a > b\na > b\n--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpn_fkr0pr_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpn_fkr0pr_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpn_fkr0pr_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var a int\n    var b int\n    var n int\n    var result\
    \ []int\n\n    for a--; a >= 0; a-- {\n        for b--; b >= 0; b-- {\n      \
    \      n = a*1000 + b\n            result = append(result, int(n%1000))\n    \
    \        n /= 1000\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsktt63m_test.go:18:9:\
    \ a redeclared in this block\n\t/tmp/tmplsktt63m_test.go:17:24: other declaration\
    \ of a\n/tmp/tmplsktt63m_test.go:19:9: b redeclared in this block\n\t/tmp/tmplsktt63m_test.go:17:31:\
    \ other declaration of b\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b - a + 1; i++ {\n        if a <= i && i <= b {\n            result = append(result,\
    \ a)\n        }\n        a = a + 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x503920, 0x54a0b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x503920,\
    \ 0x54a0b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpneby773y_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpneby773y_test.go:36\
    \ +0xf6\ntesting.tRunner(0xc0001924e0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        digits\
    \ := strconv.Itoa(a)\n        if a%2 == 0 {\n            result = append(result,\
    \ digits)\n        }\n        a = a + 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbikf2k1_test.go:20:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    if a > b {\n        return\
    \ nil\n    }\n    digit, divider := a, b\n    for i := 1; i <= divider; i++ {\n\
    \        digit *= 10\n        if digit > b {\n            return nil\n       \
    \ }\n        result = append(result, digit)\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpc64k_iyl_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpc64k_iyl_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpc64k_iyl_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, 10)\n    if b < a {\n        return\
    \ nil\n    }\n    if a < 10 {\n        return nil\n    }\n    for i := a % 10;\
    \ i < b; i++ {\n        result = append(result, i)\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp4q1erknt_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp4q1erknt_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp4q1erknt_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp4q1erknt_test.go:47:\
    \ expected '[]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)\
    \ %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18)\
    \ %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25)\
    \ %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32)\
    \ %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39)\
    \ %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46)\
    \ %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53)\
    \ %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60)\
    \ %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67)\
    \ %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74)\
    \ %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81)\
    \ %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, a+1)\n    for i := a; i <= b; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpcvldyu58_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpcvldyu58_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpcvldyu58_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpcvldyu58_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    numbers := make([]int, b-a+1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = a+i\n    }\n    numbers := numbers[:len(numbers)-1]\n\
    \    numbers := numbers[:len(numbers)-1]\n    return numbers\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt8w82qjw_test.go:22:13: no new variables on left side of :=

    /tmp/tmpt8w82qjw_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0)\n    for x := a; x < b; x++ {\n \
    \       for x := a; x < b; x++ {\n            ints = append(ints, int(x%10))\n\
    \        }\n    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp09vct7ui_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp09vct7ui_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp09vct7ui_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp09vct7ui_test.go:43:\
    \ expected '[]', got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1) %!s(int=2) %!s(i"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    i, ii := a, b\n    for ; i < ii;\
    \ i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpld_d0chy_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpld_d0chy_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpld_d0chy_test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n\n    // First find the difference between\
    \ a and b\n    a -= b\n    b /= 2\n\n    // Then find how many even digits there\
    \ are in a\n    a /= 10\n    a /= b\n\n    for i := 0; i < a; i++ {\n        result\
    \ = append(result, i)\n    }\n\n    return append(result, b)\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp98ej3vx3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=5)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp98ej3vx3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp98ej3vx3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)\
    \ %!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n    \
    \    tmp98ej3vx3_test.go:51: expected '[]', got '[%!s(int=44)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ ints = append(ints, i)\n    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpualex7w9_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpualex7w9_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpualex7w9_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpualex7w9_test.go:41:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    n := b - a\n    evens := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        evens[i] = a + 2*i\n    }\n    return evens\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpio1w6p8j_test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpio1w6p8j_test.go:34\
    \ +0x79\ntesting.tRunner(0xc0001a01a0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, 10)\n    for i := a + (b - a) /\
    \ 2; i >= a; i-- {\n        result = append(result, i)\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp89tp5ev0_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp89tp5ev0_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp89tp5ev0_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp89tp5ev0_test.go:41:\
    \ expected '[]', got '[%!s(int=53) %!s(int=52) %!s(int=51) %!s(int=50) %!s(int=49)\
    \ %!s(int=48) %!s(int=47) %!s(int=46) %!s(int=45) %!s(int=44) %!s(int=43) %!s(int=42)\
    \ %!s(int=41) %!s(int=40) %!s(int=39) %!s(int=38) %!s(int=37) %!s(int=36) %!s(int=35)\
    \ %!s(int=34) %!s(int=33) %!s(int=32) %!s(int=31) %!s(int=30) %!s(int=29) %!s(int=28)\
    \ %!s(int=27) %!s(int=26) %!s(int=25) %!s(int=24) %!s(int=23) %!s(int=22) %!s(int=21)\
    \ %!s(int=20) %!s(int=19) %!s(int=18) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var a int\n\
    \    for a == 0 || b == 0 || a > b {\n        a = rand.Intn(1000) + a\n      \
    \  b = rand.Intn(1000) + b\n    }\n    result := make([]int, 0, a-1)\n    for\
    \ i := 0; i < a; i++ {\n        result = append(result, i*10 + rand.Intn(10)*10)\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpue0_x6nr_test.go:21:9:\
    \ a redeclared in this block\n\t/tmp/tmpue0_x6nr_test.go:17:24: other declaration\
    \ of a\n/tmp/tmpue0_x6nr_test.go:23:13: undefined: rand\n/tmp/tmpue0_x6nr_test.go:24:13:\
    \ undefined: rand\n/tmp/tmpue0_x6nr_test.go:28:40: undefined: rand\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := make([]int, 0)\n    k := a\n    x := a / b\n   \
    \ for i := 0; i < b; i++ {\n        for j := 0; j < x; j++ {\n            if k\
    \ % b == 0 {\n                list = append(list, k)\n            }\n        \
    \    k /= b\n        }\n        x /= a\n    }\n    return list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5tdwm4ya_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp5tdwm4ya_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=10) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp5tdwm4ya_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=66) %!s(int=16) %!s(int=8) %!s(int=4)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074435
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n\n    for i := 0; i < b; i++\
    \ {\n        last := a + i - 1\n        result := append(result, int(i%last))\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77b9ateo_test.go:22:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074435
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    s := make([]int,\
    \ b)\n    t := b - a\n    for i := 0; i < t; i++ {\n        s[i] = a\n       \
    \ a += 2\n    }\n    return s\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpmvcwee4r_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpmvcwee4r_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpmvcwee4r_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132) %!s(int=134) %!s(int=136) %!s(int=138) %!s(int=140) %!s(int=142)\
    \ %!s(int=144) %!s(int=146) %!s(int=148) %!s(int=150) %!s(int=152) %!s(int=154)\
    \ %!s(int=156) %!s(int=158) %!s(int=160) %!s(int=162) %!s(int=164) %!s(int=166)\
    \ %!s(int=168) %!s(int=170) %!s(int=172) %!s(int=174) %!s(int=176) %!s(int=178)\
    \ %!s(int=180) %!s(int=182) %!s(int=184) %!s(int=186) %!s(int=188) %!s(int=190)\
    \ %!s(int=192) %!s(int=194) %!s(int=196) %!s(int=198) %!s(int=200) %!s(int=202)\
    \ %!s(int=204) %!s(int=206) %!s(int=208) %!s(int=210) %!s(int="
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    result := make([]int,\
    \ 0, b-a+1)\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n          \
    \  result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp45jebzs6_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp45jebzs6_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp45jebzs6_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp45jebzs6_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n\n    if a >= b {\n        return []int{}\n\
    \    }\n\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpweyeyjhp_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpweyeyjhp_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpweyeyjhp_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpweyeyjhp_test.go:49:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ret := make([]int, 0, b)\n\n    for i := a; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            ret = append(ret, i)\n        }\n    }\n\
    \n    return ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpaybmaoj0_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpaybmaoj0_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpaybmaoj0_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpaybmaoj0_test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for ; i <= b;\
    \ i++ {\n        if i % a == 0 {\n            result = append(result, i)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpvcf7lt65_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvcf7lt65_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpvcf7lt65_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpvcf7lt65_test.go:44:\
    \ expected '[]', got '[%!s(int=0) %!s(int=17) %!s(int=34) %!s(int=51) %!s(int=68)\
    \ %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    \n    for a < b {\n      \
    \  // If the integer is even add a value to the result list\n        if a % 2\
    \ == 0 {\n            result = append(result, a)\n        }\n        a = a + 1\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp5jqy1e52_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp5jqy1e52_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5jqy1e52_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    d := b - a\n    evens := make([]int, d)\n    for i := 0;\
    \ i < d; i++ {\n        evens[i] = a\n        a += 2\n    }\n    return evens\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpqeyf98u2_test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpqeyf98u2_test.go:35\
    \ +0x7a\ntesting.tRunner(0xc000192680, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := make([]int, 0, b)\n    if a > b {\n        return\
    \ list\n    }\n    if a > 0 {\n        list = append(list, a)\n    }\n    for\
    \ i := a + 1; i < b; i++ {\n        list = append(list, i)\n    }\n    return\
    \ list\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp91ckrfgi_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp91ckrfgi_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp91ckrfgi_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp91ckrfgi_test.go:47:\
    \ expected '[]', got '[%!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074436
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for a < b {\n        result += []int{a\
    \ % 10, a / 10}\n        a /= 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7k_co_q_test.go:20:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    m := b - a\n    if m <= 0 {\n        return nil\n    }\n\
    \    var ans []int\n    if m % 2 == 0 {\n        ans = append(ans, m)\n    }\n\
    \    for i := a; i <= b; i++ {\n        for j := 0; j < m; j++ {\n           \
    \ if i+j == m {\n                ans = append(ans, i+j)\n                break\n\
    \            }\n            c := int(i % 10) + int(j / 10)\n            if c <\
    \ m {\n                ans = append(ans, c)\n            }\n        }\n    }\n\
    \    return ans\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwjcnrchq_test.go:57: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=8) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=8) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpwjcnrchq_test.go:57: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpwjcnrchq_test.go:57: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpwjcnrchq_test.go:57:\
    \ expected '[]', got '[%!s(int=72) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7)\
    \ %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10)\
    \ %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10)\
    \ %!s(int=10) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11)\
    \ %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=12) %!s(int=12) %!s(int=12)\
    \ %!s(int=12) %!s(int=12) %!s(int=72) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)\
    \ %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10)\
    \ %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=11"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := make([]int, 0, b)\n    for i := 0; i < b; i++ {\n \
    \       if i%2 == 0 {\n            r = append(r, a)\n        }\n        a *= 10\n\
    \    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp71_389ca_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=200) %!s(int=20000) %!s(int=2000000)\
    \ %!s(int=200000000)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmp71_389ca_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp71_389ca_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n\
    \        tmp71_389ca_test.go:44: expected '[]', got '[%!s(int=17) %!s(int=1700)\
    \ %!s(int=170000) %!s(int=17000000) %!s(int=1700000000) %!s(int=170000000000)\
    \ %!s(int=17000000000000) %!s(int=1700000000000000) %!s(int=170000000000000000)\
    \ %!s(int=-1446744073709551616) %!s(int=2899545218721251328) %!s(int=-5193383307227693056)\
    \ %!s(int=-2829496658901860352) %!s(int=-6248504784542760960) %!s(int=2338820051848658944)\
    \ %!s(int=-5925667773358276608) %!s(int=-2270966977122009088) %!s(int=-5735768827686289408)\
    \ %!s(int=-1727816483632840704) %!s(int=-6760951699898105856) %!s(int=6434360737442824192)\
    \ %!s(int=-2199968835551887360) %!s(int=1364045329325883392) %!s(int=7277324416621477888)\
    \ %!s(int=8309422787475275776) %!s(int=838795430597754880) %!s(int=-8354177308772270080)\
    \ %!s(int=-5314247560297185280) %!s(int=3530822107858468864) %!s(int=2594073385365405696)\
    \ %!s(int=1152921504606846976) %!s(int=4611686018427387904) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for a <= b {\n        result\
    \ := append(result, a%10)\n        a = a / 10\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhtxqs_w_test.go:20:9: result declared but not used

    /tmp/tmpyhtxqs_w_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074436
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n\n    if a > b {\n        // swap\
    \ a and b\n        a, b = b, a\n    }\n\n    if a > 0 {\n        // Add all even\
    \ digits in a to result\n        for a > 0 {\n            a /= 10\n          \
    \  result = append(result, a)\n        }\n    }\n\n    if b > 0 {\n        //\
    \ Add all even digits in b to result\n        for b > 0 {\n            b /= 10\n\
    \            result = append(result, b)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp6fd6pkr8_test.go:60: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp6fd6pkr8_test.go:60: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp6fd6pkr8_test.go:60: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=13) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp6fd6pkr8_test.go:60:\
    \ expected '[]', got '[%!s(int=1) %!s(int=0) %!s(int=8) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    divider := b - a\n    if divider\
    \ < 1 {\n        fmt.Printf(\"%d - %d < 1\\n\", a, b)\n        return result\n\
    \    }\n    for i := a + 1; i <= b; i++ {\n        if i%2 == 0 {\n           \
    \ result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "10 - 2 < 1\n132 - 2 < 1\n--- FAIL: TestGenerate_Integers (0.00s)\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpfxtie4fj_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpfxtie4fj_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpfxtie4fj_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpfxtie4fj_test.go:48:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n\n    list := make([]int,\
    \ b - a + 1)\n    i := 0\n\n    for i <= b {\n        list[i] = a\n        i +=\
    \ 2\n    }\n\n    return list\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 9 [recovered]\n\tpanic: runtime error: index out of\
    \ range [10] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpyd15gin4_test.go:26\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpyd15gin4_test.go:40\
    \ +0x475\ntesting.tRunner(0xc0001964e0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n\n    if a == b {\n        result\
    \ = []int{a}\n        return result // Don't return anything if there's nothing\
    \ to return.\n    }\n\n    if a > b {\n        a, b = b, a\n    }\n\n    for i\
    \ := a; i <= b; i++ {\n        if isEven(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7t7ci2c_test.go:30:12: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b - a + 1; i++ {\n        if a >= i {\n            a -= i\n            result\
    \ += i\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1i7fzui9_test.go:22:13: invalid operation: result += i (mismatched types
    []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    c := a\n    for b <= c {\n\
    \        if b%2 == 0 {\n            result = append(result, b)\n        }\n  \
    \      b = b / 2\n    }\n    return append(result, b)\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074457
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n\n    // a must be less than b.\n    if\
    \ a > b {\n        return nil\n    }\n\n    // Loop through the digits from 0\
    \ to a.\n    for i := 0; i < a; i++ {\n        // Add b to a and multiply by a\
    \ to get a digit.\n        // If this digit is even add it to the result.\n  \
    \      // If this digit is odd subtract b from it.\n        digit := (b * i) +\
    \ a\n\n        if digit%2 == 0 {\n            result = append(result, digit)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpu0umdjm8_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=12)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpu0umdjm8_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpu0umdjm8_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpu0umdjm8_test.go:56:\
    \ expected '[]', got '[%!s(int=106) %!s(int=284) %!s(int=462) %!s(int=640) %!s(int=818)\
    \ %!s(int=996) %!s(int=1174) %!s(int=1352)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digitRange := b-a+1\n    result := make([]int, digitRange)\n\
    \    for i := 0; i < digitRange; i++ {\n        result[i] = a - i\n    }\n   \
    \ return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpz4s7dqw2_test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpz4s7dqw2_test.go:34\
    \ +0x78\ntesting.tRunner(0xc000003d40, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return []int{}\n    }\n    c := make([]int,\
    \ 0, a+1)\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            c\
    \ = append(c, i)\n        }\n    }\n    return c\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpi5bzv06j_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpi5bzv06j_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpi5bzv06j_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpi5bzv06j_test.go:46:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzd9jf1vo_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    base := b - a\n    if base < 2 {\n\
    \        return result\n    }\n    num := base\n    loop := true\n    for num\
    \ > 0 {\n        if loop {\n            loop = false\n            continue\n \
    \       }\n        result = append(result, num%10)\n        num /= 10\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkmazz7u2_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=8)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpkmazz7u2_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpkmazz7u2_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpkmazz7u2_test.go:52:\
    \ expected '[]', got '[%!s(int=2) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074437
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    if a >= b {\n        return\
    \ result\n    }\n\n    for i := a - 1; i <= b; i++ {\n        result := append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2kpkad6_test.go:24:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    i := 0\n    x := a\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for {\n        if x >= b {\n            break\n        }\n       \
    \ if x % 2 == 0 {\n            if i == 0 {\n                i := i + 1\n     \
    \       }\n            arr := make([]int, 0, i)\n            arr = append(arr,\
    \ x)\n            return arr\n        }\n        x /= 2\n        i++\n    }\n\
    \    return []int{}\n}\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjh2op0s9_test.go:29:17: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := make([]int, 0, b-a+1)\n    for i := 0; i < b-a+1;\
    \ i++ {\n        ints = append(ints, a+i)\n    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpko_3rv8n_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpko_3rv8n_test.go:33\
    \ +0xbe\ntesting.tRunner(0xc0001a01a0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := []int{}\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n \
    \   return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp59tmkf0r_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        var tmp int =\
    \ b\n        b = a\n        a = tmp\n    }\n    for i := a; i <= b; i++ {\n  \
    \      if i % 2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp01b3gpy8_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp01b3gpy8_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp01b3gpy8_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp01b3gpy8_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    n := 0\n    output := make([]int, b)\n    for i := range\
    \ output {\n        n += a / 10\n        output[i] = n\n        n %= 10\n    \
    \    a %= 10\n    }\n    if a != 0 {\n        output = append(output, a)\n   \
    \ }\n    return output\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpx1_ot62h_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpx1_ot62h_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpx1_ot62h_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=13) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpx1_ot62h_test.go:48: expected '[]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n\n    lowInt := a % 10\n    highInt := b\
    \ % 10\n\n    // Check whether all digits are used up\n    if (lowInt == highInt)\
    \ {\n        res = append(res, lowInt)\n    } else {\n        // Find out how\
    \ many digits will need to be used\n        digitCount := int(math.Ceil(math.Log10(float64(b-a))\
    \ + 1))\n\n        for i := 0; i < digitCount; i++ {\n            digitOfA :=\
    \ a / 10\n            digitOfB := b / 10\n            int := digitOfA * 10 + digitOfB\n\
    \n            if int > highInt {\n                break\n            }\n\n   \
    \         highInt = int % 10\n            res = append(res, int)\n        }\n\
    \    }\n\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94flvord_test.go:28:27: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074438
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    start := 0\n    end := a\n\n    result := make([]int, 0)\n\
    \n    for a <= b {\n        result = append(result, a)\n\n        start += 2\n\
    \        end += 2\n        a = a / 10\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074459
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits := make([]int, 0)\n    digits := append(digits, a%10)\n\
    \    digits := append(digits, b%10)\n    for i := 1; i < len(digits)-1; i++ {\n\
    \        digits[i] += digits[i-1]\n    }\n    return digits\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7motohoe_test.go:19:12: no new variables on left side of :=

    /tmp/tmp7motohoe_test.go:20:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b-b+2)\n    for i := b; i >= a;\
    \ i-- {\n        if i%2 == 0 {\n            result = append(result, i)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3ytli6tp_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3ytli6tp_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp3ytli6tp_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp3ytli6tp_test.go:43:\
    \ expected '[]', got '[%!s(int=88) %!s(int=86) %!s(int=84) %!s(int=82) %!s(int=80)\
    \ %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72) %!s(int=70) %!s(int=68) %!s(int=66)\
    \ %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58) %!s(int=56) %!s(int=54) %!s(int=52)\
    \ %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44) %!s(int=42) %!s(int=40) %!s(int=38)\
    \ %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30) %!s(int=28) %!s(int=26) %!s(int=24)\
    \ %!s(int=22) %!s(int=20) %!s(int=18)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, b)\n    for i := 0; i < a; i++ {\n\
    \        result[i] = i\n    }\n\n    for i := b; i > a; i-- {\n        result[i]\
    \ = i\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc00015a000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc00015a000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpxf2q9fft_test.go:24\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpxf2q9fft_test.go:36\
    \ +0x475\ntesting.tRunner(0xc000103520, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b+1)\n    for i := 0; i < b; i++\
    \ {\n        if a <= i {\n            result = append(result, 0)\n        } else\
    \ {\n            digit, mod := a%10, a/10\n            digit--\n            if\
    \ digit == 0 {\n                digit = 1\n            }\n            a /= 10\n\
    \            b /= 10\n            result = append(result, digit*b+mod)\n     \
    \   }\n    }\n    for i < b {\n        digit, mod := a%10, a/10\n        result[len(result)-1]++\n\
    \        a /= 10\n        b /= 10\n        result = append(result, digit*b+mod)\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscwz6c4q_test.go:33:9: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    arr := make([]int, 0)\n    for a != b {\n        arr +=\
    \ int(a)\n        a, b = b / 10, a % 10\n    }\n    return arr\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8exra53_test.go:20:9: invalid operation: arr += int(a) (mismatched types
    []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074438
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for a > 0 && b > 0 {\n        if\
    \ a % 2 == 0 && b % 2 == 0 {\n            result = append(result, a / 2)\n   \
    \     }\n        if b / 2 != 0 {\n            b = b / 2\n        } else {\n  \
    \          a++\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074456
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    for i := a; i < b; i++ {\n        if i%2\
    \ == 0 {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpqo90yytw_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpqo90yytw_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpqo90yytw_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074439
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    x := a\n    y := b\n    z := []int{x}\n    for {\n     \
    \   y = y%10\n        if y == 0 {\n            y = b\n        }\n        z = append(z,\
    \ y)\n        if y == b {\n            break\n        }\n        y = y%10\n  \
    \      if y == 0 {\n            y = b\n        }\n        z = append(z, y)\n \
    \   }\n    return z\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074458
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, a+1)\n    for i := a; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp68da_si8_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp68da_si8_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp68da_si8_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp68da_si8_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for a != b {\n        result := []int{}\n\
    \        for b < a {\n            result = (result + []int{b}):append(result,\
    \ a)\n            b = b + 1\n        }\n        a = a + 1\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmot1owo4_test.go:22:41: expected '';'', found '':''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    lastNumber := b\n    for number\
    \ := a; number <= lastNumber; number++ {\n        result := append(result, number)\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppikkxyqv_test.go:21:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074439
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    digits, i := make([]int, a), 0\n    for i < b {\n      \
    \  if digits[i%len(digits)] == 0 {\n            digits[i%len(digits)] += 1\n \
    \       } else {\n            digits[(i+1)%len(digits)] += 1\n        }\n    \
    \    if i == a {\n            digits[i%len(digits)] = 0\n            i++\n   \
    \     }\n    }\n\n    return digits[a:]\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074458
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    temp := a\n    for i := a;\
    \ i <= b; i++ {\n        if temp%2 == 0 {\n            result = append(result,\
    \ temp)\n        }\n        temp = temp / 2\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpr1vmh8gi_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpr1vmh8gi_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpr1vmh8gi_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpr1vmh8gi_test.go:45:\
    \ expected '[]', got '[%!s(int=8) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    l := b - a\n    ret := make([]int, l)\n    for i := 0; i\
    \ < l; i++ {\n        ret[i] = a + 2*i\n    }\n    return ret\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490a0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpxtmgug4__test.go:19\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpxtmgug4__test.go:34\
    \ +0x79\ntesting.tRunner(0xc000103380, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    currentDigit := a\n    currentNumber\
    \ := a\n    for currentDigit <= b {\n        currentNumber += 2\n        if currentNumber\
    \ > b {\n            break\n        }\n        result = append(result, currentNumber)\n\
    \        currentDigit++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpk3frv8kl_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpk3frv8kl_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpk3frv8kl_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpk3frv8kl_test.go:48:\
    \ expected '[]', got '[%!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25) %!s(int=27)\
    \ %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39) %!s(int=41)\
    \ %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53) %!s(int=55)\
    \ %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67) %!s(int=69)\
    \ %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81) %!s(int=83)\
    \ %!s(int=85) %!s(int=87) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    c := make([]int, b-a+1)\n    n := len(c)\n    i := 0\n \
    \   for ; i <= b {\n        c[i] = i\n        i += int(b - a) / int(2)\n    }\n\
    \    c[c-n] = i\n    return c\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4irejyd1_test.go:21:18: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074439
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    c := make([]int, 0, b-1)\n    for i := 0; i < b; i++ {\n\
    \        c <- a%10\n        b := a / 10\n        a = b\n    }\n    return c\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjch7e_s0_test.go:20:9: invalid operation: cannot send to non-channel c
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074439
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    d := b - a\n    i := d\n    r := make([]int, 0)\n    for\
    \ i := a; i <= b; i++ {\n        if i%2 == 0 {\n            r = append(r, i)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkelwm1e2_test.go:19:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074439
