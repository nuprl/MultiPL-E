name: HumanEval_98_count_upper
language: go_test.go
prompt: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s, count the number of uppercase vowels in even indices.\n// For\
  \ example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
  )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n"
tests: "func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
  \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected:\
  \ 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
  U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'A' {\n            count += 1\n        }\n        if s[i]\
    \ == 'e' || s[i] == 'E' {\n            count += 1\n        }\n        if s[i]\
    \ == 'i' || s[i] == 'I' {\n            count += 1\n        }\n        if s[i]\
    \ == 'o' || s[i] == 'O' {\n            count += 1\n        }\n        if s[i]\
    \ == 'u' || s[i] == 'U' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n", "    result := 0\n    for i := 0; i < len(s); i += 2 {\n      \
    \  if s[i] == 'A' && s[i+1] == 'A' {\n            result++\n        }\n    }\n\
    \    return result\n}\n", "    n := 0\n    for _, c := range s {\n        if unicode.IsUpper(c)\
    \ {\n            n += 1\n        }\n        if n%2 == 0 && n != 0 {\n        \
    \    n++\n        }\n    }\n    return n\n}\n", "    var count = 0\n    for i\
    \ := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n      \
    \      count += 1 // even indices.\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for _, r := range s {\n        if r == 'a' || r == 'e' || r\
    \ == 'i' || r == 'o' || r == 'u'{\n            count++\n        }\n    }\n   \
    \ return count\n}\n", "    vowel := \"AEIOU\"\n    even_indices := make([]int,\
    \ len(s)/2)\n    for _, i := range even_indices {\n        if s[i] == vowel[i]\
    \ {\n            even_indices[i] += 1\n        }\n    }\n    return len(even_indices)\
    \ / 4\n}\n", "    vowels := \"aeiouAEIOU\"\n    n := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == vowels[(i*2)%len(vowels)] {\n            n++\n   \
    \     }\n    }\n    return n\n}", "    var i int\n    for ; i < len(s); i++ {\n\
    \        switch s[i] {\n        case 'A', 'B', 'C', 'D', 'E', 'F', 'G':\n    \
    \        continue\n        case 'a':\n        case 'e':\n        case 'i':\n \
    \       case 'o':\n        case 'u':\n            return 1\n        case 'y':\n\
    \            return 2\n        case 'n':\n        case 's':\n            return\
    \ 1\n        }\n    }\n    return 0\n}\n", "    count := 0\n    for i, v := range\
    \ s {\n        if i % 2 == 0 && v == 'A' || v == 'E' || v == 'I' || v == 'O' ||\
    \ v == 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for i, x := range s {\n        if x == 'A' || x == 'E' || x\
    \ == 'I' || x == 'O' || x == 'U' {\n            count++\n        } else if x ==\
    \ 'B' || x == 'C' || x == 'D' || x == 'F' || x == 'G' {\n            count -=\
    \ 2\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var n = 0\n    for _, r := range s {\n        if r >= 'A' && r <= 'Z'\
    \ {\n            n += 1\n        }\n        if r >= 'a' && r <= 'z' {\n      \
    \      n += 1\n        }\n    }\n    return n\n}\n", "    var i int\n    for i\
    \ = 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' {\n            if i % 2 == 0 {\n             \
    \   i += 2\n                continue\n            }\n        }\n        return\
    \ i\n    }\n    return 0\n}\n", "    var count int\n    for i := 0; i < len(s);\
    \ i++ {\n        count += count_vowel_upper(s[i])\n    }\n    return count\n}\n",
  "    count := 0\n    for _, letter := range s {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    result := 0\n    for _, v := range\
    \ s {\n        if v == 'A' || v == 'E' || v == 'I' || v == 'O' || v == 'U' {\n\
    \            result++\n        }\n    }\n    return result\n}\n", "    var i int\n\
    \    for i = 0; i+1 < len(s); i += 2 {\n        if s[i] == 'A' && s[i+1] == 'Z'\
    \ {\n            return 1\n        }\n    }\n    return 0\n}\n", "    var counter\
    \ int\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            counter++\n\
    \        }\n    }\n    return counter\n}\n", "    var upper bool\n    var count\
    \ int\n    for _, v := range s {\n        upper |= (v >= 'A' && v <= 'Z') || (v\
    \ >= 'a' && v <= 'z')\n        if v == 'B' || v == 'B' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    c := 0\n    for _, r := range\
    \ s {\n        if r >= 'A' && r <= 'Z' {\n            c += r-'A'\n        }\n\
    \    }\n    return c\n}\n", "    i := 0\n    vowels := []rune{'A', 'E', 'I', 'O',\
    \ 'U'}\n    for ; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            continue\n        }\n\
    \        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            i += 3\n            continue\n        }\n        if s[i]\
    \ == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i] ==\
    \ 'G' {\n            i += 2\n            continue\n        }\n        i++\n  \
    \  }\n    return i\n}\n", "    count := 0\n    for _, v := range s {\n       \
    \ if v == 'A' || v == 'E' || v == 'I' || v == 'O' || v == 'U' {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    var res int\n    for i\
    \ := 0; i < len(s); i += 2 {\n        if s[i] >= 'A' && s[i] <= 'Z' {\n      \
    \      res++\n        }\n    }\n    return res\n}\n", "    counts := make(map[rune]int,\
    \ len(s))\n    for i, r := range s {\n        if r > 'a' {\n            continue\n\
    \        }\n        c := 'A'\n        if r == 'a' {\n            c += 'a'\n  \
    \      } else if r == 'e' {\n            c += 'e'\n        } else if r == 'i'\
    \ {\n            c += 'i'\n        } else if r == 'o' {\n            c += 'o'\n\
    \        } else if r == 'u' {\n            c += 'u'\n        }\n        if counts[c]\
    \ != 0 {\n            counts[c]++\n        }\n    }\n\n    return len(counts)\
    \ / 2\n}\n", "    vowels := \"AEIOUaeiou\"\n    evens := []int{0}\n    odds :=\
    \ []int{0}\n    for _, char := range s {\n        if char <= 'Z' {\n         \
    \   if char == 'Z' {\n                evens = append(evens, 0)\n             \
    \   odds = append(odds, 0)\n                continue\n            }\n        \
    \    count := 0\n            for _, vowel := range vowels {\n                if\
    \ char == vowel {\n                    count++\n                    break\n  \
    \              }\n            }\n            if count % 2 == 0 {\n           \
    \     evens = append(evens, count)\n            } else {\n                odds\
    \ = append(odds, count)\n            }\n        } else {\n            evens =\
    \ append(evens, 0)\n            odds = append(odds, 0)\n        }\n    }\n   \
    \ evens = append(evens, 0)\n    odds = append(odds, 0)\n    return sum(evens)\
    \ + sum(odds)\n}\n", "    for i := 0; i < len(s); i += 2 {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    s += s[i]\n        }\n    }\n    return len(s) - len(strings.Replace(s, \"\
    aeiouAEIOU\", \"\", -1))\n}\n", "    n := 0\n    for i := 0; i < len(s); i +=\
    \ 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n            n += 1\n        }\n\
    \    }\n    return n\n}\n", "    var count int\n    for i := 0; i < len(s); i\
    \ += 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n", "    n := 0\n    for i := 0; i < len(s);\
    \ i += 2 {\n        if s[i] == 'a' && s[i+1] == 'A' {\n            n += 1\n  \
    \      }\n    }\n    return n\n}\n", "    n := 0\n    for i, v := range s {\n\
    \        if v == 'A' || v == 'E' || v == 'I' || v == 'O' || v == 'U' {\n     \
    \       n += int(i % 2 == 0)\n        }\n    }\n    return n\n}", "    count :=\
    \ 0\n    upper := false\n    vowels := []rune{'A', 'E', 'I', 'O', 'U', 'Y', 'a',\
    \ 'e', 'i', 'o', 'u'}\n\n    for _, c := range s {\n        if c >= 'A' && c <=\
    \ 'Z' {\n            upper = true\n        } else if upper && len(vowels) > 0\
    \ {\n            if vowels[len(vowels)-1] == 'A' || vowels[len(vowels)-1] == 'a'\
    \ {\n                count++\n                vowels = vowels[:len(vowels)-1]\n\
    \            } else {\n                upper = false\n            }\n        }\n\
    \    }\n\n    return count\n}\n", "    i := 0\n    upper := []rune{'A', 'a', 'E',\
    \ 'e', 'I', 'i', 'O', 'o', 'U', 'u'}\n\n    for ; s[i] != '\\0'; i++ {\n     \
    \   if s[i] == 'A' || s[i] == 'a' {\n            i += 2\n        } else if s[i]\
    \ == 'E' || s[i] == 'e' {\n            i += 3\n        } else if s[i] == 'I' ||\
    \ s[i] == 'i' {\n            i += 4\n        } else if s[i] == 'O' || s[i] ==\
    \ 'o' {\n            i += 5\n        } else if s[i] == 'U' || s[i] == 'u' {\n\
    \            i += 6\n        } else {\n            i++\n        }\n    }\n\n \
    \   return i\n}\n</code>\n<|/ a dscore=1 tags=count,string,go |>\n<| c |>\nthis\
    \ won't work for \"aaaa\"\n<|/ c |>\n<| a tags=count,string,go dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n", "    var count = 0\n    for i, c\
    \ := range s {\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U' {\n            count++\n            if i%2 == 0 {\n                count--\n\
    \            }\n        }\n    }\n    return count\n}\n</code>\n<|/ a tags=string,go,count,letter,uppercase\
    \ |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n\
    \    \"os\"\n    \"strconv\"\n)\n", "    var i, j int\n    var uppercase bool\n\
    \    for i = 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            uppercase = true\n     \
    \   } else {\n            uppercase = false\n        }\n        if i != j && j\
    \ > 0 && uppercase  {\n            j = i\n        }\n    }\n    return j\n}\n",
  "    var count int = 0\n    i := 0\n    for ; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count += 1\n        } else if s[i] == 'd' || s[i] == 'B' || s[i] == 'E'\
    \ {\n            count -= 1\n        }\n    }\n    return count\n}\n", "    vowels\
    \ := []rune{'A', 'E', 'I', 'O', 'U'}\n    return len(s) - len(strings.Split(s,\
    \ \"\")) - strings.Count(s, fmt.Sprintf(\"%c\", vowels[len(vowels)]))\n}\n", " \
    \   n := 0\n    switch len(s) {\n    case 0:\n        return n\n    case 1:\n\
    \        if s[0] == 'a' || s[0] == 'A' || s[0] == 'e' || s[0] == 'E' || s[0] ==\
    \ 'i' || s[0] == 'I' || s[0] == 'o' || s[0] == 'O' || s[0] == 'u' || s[0] == 'U'\
    \ {\n            n++\n        }\n    case 2:\n        if s[0] == 'a' || s[0] ==\
    \ 'A' || s[0] == 'e' || s[0] == 'E' {\n            n++\n        }\n    }\n   \
    \ return n\n}\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n       \
    \ if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    // O(n),\
    \ O(1) preprocessing and O(1) post processing.\n    // Count number of vowels\
    \ starting at an even index.\n    vowels := make(map[rune]int)\n    count := 0\n\
    \    for _, r := range s {\n        if r >= 'A' && r <= 'Z' {\n            if\
    \ r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n               \
    \ count++\n            }\n        }\n        if r >= 'a' && r <= 'z' {\n     \
    \       if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n      \
    \          count++\n            }\n        }\n        if r >= 'A' && r <= 'Z'\
    \ {\n            if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n\
    \                count++\n            }\n        }\n        if r >= 'a' && r <=\
    \ 'z' {\n            if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u'\
    \ {\n                count++\n            }\n        }\n        if r >= '0' &&\
    \ r <= '9' {\n            if r == '0' || r == '1' || r == '2' || r == '3' || r\
    \ == '4' || r == '5' || r == '6' || r == '7' || r == '8' || r == '9' {\n     \
    \           count++\n            }\n        }\n        if r == '1' || r == '2'\
    \ || r == '3' || r == '4' || r == '5' || r == '6' || r == '7' || r == '8' || r\
    \ == '9' {\n            count++\n        }\n        vowels[r]++\n    }\n    return\
    \ count\n}\n", "    var ret int\n\n    // Step 1: initialize all to 0\n    for\
    \ _, c := range s {\n        switch c {\n        case \"A\", \"E\", \"I\", \"\
    O\", \"U\":\n            ret += 1\n        }\n    }\n\n    // Step 2: count all\
    \ uppercase vowels in even indices\n    for _, c := range s {\n        switch\
    \ c {\n        case \"A\", \"E\", \"I\", \"O\", \"U\":\n            switch s[len(s)-1]\
    \ {\n            case \"A\", \"E\", \"I\", \"O\", \"U\":\n                ret\
    \ += 1\n            }\n        }\n    }\n\n    // Step 3: subtract the number\
    \ of even-indices from total count\n    for i := len(s) - 1; i >= 0; i-- {\n \
    \       switch s[i] {\n        case \"A\", \"E\", \"I\", \"O\", \"U\":\n     \
    \       switch s[i-1] {\n            case \"A\", \"E\", \"I\", \"O\", \"U\":\n\
    \                ret -= 1\n            }\n        }\n    }\n    return ret\n}\n",
  "    // Create a map that stores the uppercase letters at even indices.\n    even_indices\
    \ := map[int]int{}\n    // Create a map that stores the uppercase letters at odd\
    \ indices.\n    odd_indices := map[int]int{}\n\n    for i := 0; i < len(s); i++\
    \ {\n        char := s[i]\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' {\n            even_indices[i%2] += 1\n      \
    \  } else {\n            odd_indices[i%2] += 1\n        }\n    }\n\n    // Return\
    \ the number of uppercase letters in even indices.\n    return len(even_indices)\n\
    }\n", "    r := 0\n    for _, c := range s {\n        if unicode.IsUpper(c) &&\
    \ isEvenIndex(c) {\n            r += 1\n        }\n    }\n    return r\n}\n",
  '    upper := make(map[rune]', "    vowels := make([]rune, \"AEIOUaeiou\")\n   \
    \ n := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            n += vowels[int(s[i]-97)]\n\
    \        }\n    }\n    return n\n}\n", "    count := 0\n    for i, x := range\
    \ s {\n        if x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U' {\n\
    \            count++\n        }\n        if i%2 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n</code>\n<|/ a tags=string,go,count |>\n\
    <| a tags=string,go,count |>\nI made a simpler function but with 3 lines of code\
    \ (3 imports) using the \"golang.org/x/net/html\" library\n<code>\nimport (\n\
    \    \"golang.org/x/net/html\"\n    \"fmt\"\n)\n", "    n := 0\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            n += 1\n        }\n    }\n    return n\n\
    }\n", "    total := 0\n    for _, v := range s {\n        if v == 'A' || v ==\
    \ 'a' {\n            total++\n        }\n    }\n    return total\n}\n", "    //\
    \ Count only even indices.\n    for i, c := range s {\n        if i % 2 != 0 {\n\
    \            continue\n        }\n\n        // Count vowels.\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            return 1\n\
    \        }\n    }\n\n    // No vowels found.\n    return 0\n}\n", "    var n int\n\
    \    for _, i := range s {\n        if i > 0 && s[i] == 'A' && s[i-1] == 'A' {\n\
    \            n++\n        }\n    }\n    return n\n}\n", "    result := 0\n   \
    \ for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n            result += s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\n        } else {\n\
    \            result += s[i] == 'a'\n        }\n    }\n    return result\n}\n",
  "    var even = 0\n    for i := 0; i < len(s); {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            even++\n\
    \            i += 2\n        } else {\n            i++\n        }\n    }\n   \
    \ return even\n}\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n    \
    \    if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    if s\
    \ == \"\" {\n        return 0\n    }\n\n    vowels := []rune(\"AEIOU\")\n    for\
    \ i, r := range s {\n        if r >= 'a' && r <= 'z' {\n            if i%2 ==\
    \ 0 && vowels[int(r-'a')] != 0 {\n                return 0\n            }\n  \
    \      } else if r >= 'A' && r <= 'Z' {\n            if i%2 == 1 && vowels[int(r-'A')]\
    \ != 0 {\n                return 0\n            }\n        }\n    }\n    return\
    \ 1\n}\n", "    vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    vowelsCount :=\
    \ 0\n    for idx, c := range s {\n        if idx%2 == 0 {\n            if c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                vowelsCount++\n\
    \            }\n        }\n    }\n    return vowelsCount\n}\n", "    var count\
    \ int\n    for _, v := range s {\n        if v >= 'A' && v <= 'Z' {\n        \
    \    count++\n        }\n    }\n    return count\n}", "    count := 0\n    for\
    \ _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    var count int\n    for\
    \ _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n</code>\n<|/ a tags=string,go |>\n<| a\
    \ tags=string,go |>\nA simple solution without using regex:\n<code>", "    var\
    \ count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I'\n            || s[i] == 'O' || s[i] == 'U' {\n       \
    \     count++\n        }\n    }\n    return count\n}\n", "    var count int\n\n\
    \    for i, c := range s {\n        count += int(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n        if i%2 == 0 {\n            count -= 1\n\
    \        }\n    }\n    return count\n}\n", "    vowels := []rune(\"aeiouAEIOU\"\
    )\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            for\
    \ _, v := range vowels {\n                if s[i] == v {\n                   \
    \ count++\n                    break\n                }\n            }\n     \
    \   }\n    }\n    return count\n}\n", "    n := 0\n    for i := 0; i < len(s);\
    \ i += 2 {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' {\n            n += 1\n        }\n    }\n    return n\n}\n",
  "    result := 0\n    for i := 0; i < len(s); {\n        if s[i] == 'a' || s[i]\
    \ == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] ==\
    \ 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U' {\n            i++\n      \
    \  }\n        else {\n            result += s[i]-'A'\n            i++\n      \
    \  }\n    }\n    return result\n}", "    if s == \"\" {\n        return 0\n  \
    \  }\n    count := 0\n    vowels := []rune(\"AEIOUaeiou\")\n    for _, r := range\
    \ s {\n        if r >= 'A' && r <= 'Z' {\n            count++\n        }\n   \
    \ }\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' && count > 0 {\n\
    \            count -= 1\n        }\n    }\n    if count == 0 && vowels[len(vowels)-1]\
    \ == 'y' {\n        count = 1\n    }\n    return count\n}", "    length := len(s)\n\
    \    even := true\n    count := 0\n    i := 0\n    for i < length {\n        if\
    \ even {\n            if s[i] == 'A' || s[i] == 'a' {\n                count +=\
    \ 1\n            }\n            if s[i] == 'E' || s[i] == 'e' {\n            \
    \    count += 1\n            }\n            if s[i] == 'I' || s[i] == 'i' {\n\
    \                count += 1\n            }\n            if s[i] == 'O' || s[i]\
    \ == 'o' {\n                count += 1\n            }\n            if s[i] ==\
    \ 'U' || s[i] == 'u' {\n                count += 1\n            }\n          \
    \  if s[i] == 'Y' || s[i] == 'y' {\n                count += 1\n            }\n\
    \        } else {\n            if s[i] == 'A' || s[i] == 'a' {\n             \
    \   count -= 1\n            }\n            if s[i] == 'E' || s[i] == 'e' {\n \
    \               count -= 1\n            }\n            if s[i] == 'I' || s[i]\
    \ == 'i' {\n                count -= 1\n            }\n            if s[i] ==\
    \ 'O' || s[i] == 'o' {\n                count -= 1\n            }\n          \
    \  if s[i] == 'U' || s[i] == 'u' {\n                count -= 1\n            }\n\
    \            if s[i] == 'Y' || s[i] == 'y' {\n                count -= 1\n   \
    \         }\n        }\n        if s[i] == 'B' || s[i] == 'b' {\n            even\
    \ = false\n        }\n        i += 1\n    }\n    return count\n}", "    return\
    \ count_upper_in(s, 0, len(s)-1)\n}\n", "    count := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n</code>\n<|/ a tags=go dscore=3 |>\n<| c |>\nThanks for this, helped me immensely.\
    \ I had to do a similar function, but I didn't want to use map or regex. Good\
    \ work though, thank you for the help.\n<|/ c |>\n<| a tags=go |>\nIf you have\
    \ to do multiple operations on the string, you can do something like the following\n\
    <code>\npackage main\n\nimport \"fmt\"\n", "    n := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'a' {\n            if i % 2 == 0 {\n\
    \                n += 1\n            }\n        }\n    }\n    return n\n}\n",
  "    r := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            if s[i+1]\
    \ == 'A' || s[i+1] == 'E' || s[i+1] == 'I' || s[i+1] == 'O' || s[i+1] == 'U' {\n\
    \                r++\n            }\n        }\n    }\n    return r\n}\n", " \
    \   count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[s[i]]\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    // Initialize\
    \ counter\n    var counter int\n    \n    // Iterate through the string\n    for\
    \ i := 0; i < len(s); i++ {\n        // See if the character is a vowel\n    \
    \    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\
    \ {\n            // If it's an even index, increase the counter\n            if\
    \ i%2 == 0 {\n                counter++\n            }\n        } else {\n   \
    \         // If it's an odd index, do nothing\n        }\n    }\n\n    // Return\
    \ the counter\n    return counter\n}\n", "    count := 0\n    for i := 0; i <\
    \ len(s); i++ {\n        if s[i:i+2] == \"AEIOU\" {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n", "    for _, r := range s {\n      \
    \  if !((r >= 'A' && r <= 'Z') || (r >= 'a' && r <= 'z') || (r >= 'A' && r < 'a'))\
    \ {\n            return 0\n        }\n    }\n    return 1\n}\n", "    vowels :=\
    \ make([]rune, 0)\n    for _, r := range s {\n        if r == 'a' || r == 'e'\
    \ || r == 'i' || r == 'o' || r == 'u' {\n            vowels = append(vowels, r)\n\
    \        }\n    }\n    x := 0\n    for _, v := range vowels {\n        if v%2\
    \ != 0 {\n            x += 1\n        }\n    }\n    return x\n}\n", "    for i\
    \ := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U' {\n            return 1\n        }\n    }\n\
    \n    return 0\n}\n</code>\n<|/ a |>\n<| c |>\nI don't like how you use \"const\"\
    \ in a for loop. This is just a bad example. I think its more confusing than helpful\n\
    <|/ c |>\n<| c |>\nIf you think it's bad, you could refactor it out to a separate\
    \ function and call it in a loop.\n<|/ c |>\n<| c |>\nI refactored the code to\
    \ be clearer. Hope you don't mind it :)\n<|/ c |>\n<| c |>\nNo its not mine :D\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a pretty fast and concise solution (although\
    \ it's only valid for the ASCII alphabet, not UTF). It's similar to Gus' answer,\
    \ but avoids having to iterate over each character and doing arithmetic with ASCII\
    \ codes.\n<code>", "    n := 0\n    index := 0\n    for _, c := range s {\n  \
    \      if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n       \
    \     n += 1\n            if index%2 == 0 {\n                n += 1\n        \
    \    }\n        }\n        index++\n    }\n    return n\n}", "    n := 0\n   \
    \ pos := 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n       \
    \ case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n       \
    \ case 'u':\n            n += 1\n        case 'A':\n        case 'E':\n      \
    \  case 'I':\n        case 'O':\n        case 'U':\n            n += 1\n     \
    \   default:\n            pos = i\n            break\n        }\n    }\n    if\
    \ pos == 0 {\n        return 0\n    }\n    for {\n        switch s[pos] {\n  \
    \      case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n  \
    \      case 'u':\n            n += 1\n        case 'A':\n        case 'E':\n \
    \       case 'I':\n        case 'O':\n        case 'U':\n            n += 1\n\
    \        default:\n            break\n        }\n        pos++\n        if pos\
    \ == len(s) {\n            return n\n        }\n    }\n}\n", "    count := 0\n\
    \    for _, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var c = 0\n    i := 0\n    for {\n        // Look at the next character.\n\
    \        if i == len(s) {\n            return c\n        }\n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n        \
    \    c++\n        }\n        i++\n    }\n}\n", "    // Write your solution here\n\
    \    return 0\n}\n</cell>\n<cell>\n# Run this cell to load the solution and run\
    \ your tests!\nload_and_test(count_upper)\n</cell>\n<cell>\n%%writefile count_upper_test.py\n\
    from count_upper import count_upper\nfrom util import count_upper_test\nimport\
    \ pytest\n\nclass TestCountUpper(object):\n    @pytest.mark.skip(reason=\"Need\
    \ to implement test\")\n    def test_count_upper(self):\n        \"\"\"Test count_upper\"\
    \"\"\n        assert count_upper(\"aBCdEf\") == 1\n        assert count_upper(\"\
    abcdefg\") == 0\n        assert count_upper(\"dBBE\") == 0 \n        \n    def\
    \ test_count_upper_test(self):\n        \"\"\"Test count_upper_test\"\"\"\n  \
    \      assert count_upper_test(\"aBCdEf\") == 1\n        assert count_upper_test(\"\
    abcdefg\") == 0\n        assert count_upper_test(\"dBBE\") == 0 \n</cell>\n<cell>\n\
    # Run this cell to load the solution and run your tests!\nload_and_test(count_upper_test)\n\
    </cell>\n<text>\nPart 3: String Processing\n\n</text>\n<text>\n3.1 Basic String\
    \ Manipulation\n\n</text>\n<text>\nIn Python, string processing is extremely easy.\
    \ Python has many string methods available to us to use, including .lower(), .upper(),\
    \ .split(), .replace(), and .startswith(). These methods will help us prepare\
    \ our strings for use with these methods.\n\n\n</text>\n<cell>\n%%writefile string_mutation.py\n\
    def replace(s, old, new, num):\n    \"\"\"Replace all instances of old with new\
    \ in the string s.\n    \n    Args:\n        s (str): A string representing a\
    \ sentence.\n        old (str): An old character.\n        new (str): A new character.\n\
    \        num (int): How many replacements to make.\n    \n    Returns:\n     \
    \   str: String with replacements made.\n    \"\"\"\n    # Write your solution\
    \ here\n    pass\n</cell>\n<cell>\n# Run this cell to load the solution and run\
    \ your tests!\nload_and_test(replace)\n</cell>\n<cell>\n%%writefile string_mutation_test.py\n\
    from string_mutation import replace\nfrom util import string_mutation_test\nimport\
    \ pytest\n\nclass TestReplace(object):\n    @pytest.mark.skip(reason=\"Need to\
    \ implement test\")\n    def test_replace(self):\n        \"\"\"Test replace\"\
    \"\"\n        assert replace(\"aBCdEf\", \"A\", \"B\", 1) == (\"BdEf\", 1)\n \
    \       assert replace(\"aBCdEf\", \"A\", \"B\", 2) == (\"BdEf\", 2)\n       \
    \ assert replace(\"aBCdEf\", \"A\", \"B\", 3) == (\"BdEf\", 3)\n        assert\
    \ replace(\"a", "    upper := 0\n    for _, r := range s {\n        if r >= 'A'\
    \ && r <= 'Z' {\n            upper++\n        } else if r >= 'a' && r <= 'z' {\n\
    \            upper++\n        } else if r >= 'D' && r <= 'Z' {\n            upper++\n\
    \        }\n    }\n    return upper\n}\n", "    vowels := make([]rune, 0, len(s))\n\
    \    for i := 0; i < len(s); i++ {\n        vowels = append(vowels, 'A', 'a',\
    \ 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u')\n    }\n\n    count := 0\n    for _,\
    \ v := range s {\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v\
    \ == 'u' {\n            count += 2\n        } else if v == 'b' || v == 'c' ||\
    \ v == 'd' || v == 'f' {\n            count += 1\n        }\n    }\n\n    return\
    \ count\n}\n</code>\n<|/ a |>\n<| a tags=string,go dscore=0 |>\nYou can use the\
    \ following Go code which is similar to your JavaScript code:\n<code>\npackage\
    \ main\n\nimport \"fmt\"\n", "    n := 0\n    for i := 0; i < len(s); {\n    \
    \    if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ {\n            i++\n            n += 1\n        } else {\n            i++\n\
    \        }\n    }\n    return n\n}\n", "    vowels := []rune{\n        'a', 'e',\
    \ 'i', 'o', 'u',\n    }\n    count := 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' {\n                if s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nHi Jim, it would probably be helpful to also give the solution\
    \ without using regular expressions.\n<|/ c |>\n<| c |>\nHi, I added a solution\
    \ without regex. Hope this helps.\n<|/ c |>\n<| a dscore=0 tags=go |>\nHere's\
    \ a solution that also doesn't use regular expressions. \nIt's using 2 loops,\
    \ one for looping through the letters, another for looping through the characters.\n\
    The outer loop goes through each letter, and each inner loop goes through each\
    \ character. The inner loop checks if the character is an uppercase vowel (A-Z,\
    \ 0-9), and the outer loop checks if the letter is an uppercase vowel (A-Z, 0-9).\
    \ \nThen the code checks if the letter and character are next to each other (using\
    \ a simple comparison operator).\n<code>", "    result := 0\n    for i, j := 0,\
    \ len(s)-1; i < j; i, j = i+1, j-1 {\n        if s[i] == 'a' && s[j] == 'a' {\n\
    \            result += 1 // aA\n        }\n    }\n    return result\n}\n", " \
    \   chars := make([]rune, len(s))\n    for i := 0; i < len(s); i++ {\n       \
    \ chars[i] = s[i]\n    }\n    if chars[len(chars)-1] == 'Y' {\n        return\
    \ 0\n    }\n    return 1\n}\n", "    count := 0\n    for i := 0; i < len(s); i\
    \ += 2 {\n        if s[i] == 'A' && s[i+1] == 'A' {\n            count++\n   \
    \     }\n    }\n    return count\n}", "    counter := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            counter++\n        }\n    }\n    return counter\n\
    }\n", "    count := 0\n    for _, i := range s {\n        if i == 'A' || i ==\
    \ 'a' {\n            count++\n        }\n        if i == 'E' || i == 'e' {\n \
    \           count++\n        }\n        if i == 'I' || i == 'i' {\n          \
    \  count++\n        }\n        if i == 'O' || i == 'o' {\n            count++\n\
    \        }\n        if i == 'U' || i == 'u' {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   var count = 1\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A'\
    \ || s[i] == 'E' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    vowel := []rune{'A', 'E', 'I', 'O', 'U', 'a'} // Sorted vowels\n  \
    \  for i, c := range s {\n        if c == 'A' || c == 'a' {\n            i +=\
    \ 2 // odd indices only\n            continue\n        }\n        for _, v :=\
    \ range vowel {\n            if c == v {\n                return i + 1\n     \
    \       }\n        }\n    }\n    return 0\n}\n", "    var count int\n    for i\
    \ := 0; i < len(s); {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u' {\n            count++\n        }\n        i++\n\
    \    }\n    return count\n}\n", "    count := 0\n    for _, v := range s {\n \
    \       if v >= 'a' && v <= 'z' {\n            if v <= 'Z' {\n               \
    \ count++\n            }\n        } else {\n            count = 0\n        }\n\
    \    }\n    return count\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n  \
    \  \"strings\"\n)\n", "    count := 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] >= 'A' && s[i] <= 'Z' && s[i+1] >= 'a' && s[i+1] <= 'z' {\n \
    \           count++\n        }\n    }\n    return count\n}\n", "    var count\
    \ int = 0\n    for _, v := range s {\n        if v == 'A' || v == 'E' || v ==\
    \ 'I' || v == 'O' || v == 'U' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    n := 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ != s[i] {\n            n += 1\n        }\n    }\n    return n\n}\n", "    //\
    \ Initialize a counter variable to 0.\n    var counter int\n\n    // Iterate through\
    \ every even index of s.\n    for i := 0; i < len(s); i += 2 {\n        // Increment\
    \ the counter if the letter at that index is an uppercase vowel.\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       counter += 1\n        }\n    }\n\n    return counter\n}\n", "    var count\
    \ int\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n        case\
    \ 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case\
    \ 'U':\n            count++\n        default:\n            break\n        }\n\
    \    }\n    return count\n}\n", "    vowel := \"AEIOU\"\n    evenCounts := 0\n\
    \    for _, v := range s {\n        if v == 'A' || v == 'E' || v == 'I' || v ==\
    \ 'O' || v == 'U' {\n            evenCounts -= countVowels(&vowel, v)\n      \
    \  }\n    }\n    return evenCounts\n}\n", "    vowels := []rune{'a','e','i','o','u'}\n\
    \    count := 0\n\n    // Iterate over every index i, and check to see if s[i]\
    \ is in vowels.\n    for i := 0; i < len(s); i++ {\n        if s[i] != vowels[i]\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    // Write\
    \ your logic here\n    count := 0\n    vowels := \"AEIOU\"\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == vowels[i] {\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o',\
    \ 'u'}\n    i := 0\n    k := 0\n    for i < len(s) {\n        if s[i] == 'a' {\n\
    \            i++\n        }\n        if s[i] == 'e' {\n            i++\n     \
    \   }\n        if s[i] == 'i' {\n            i++\n        }\n        if s[i] ==\
    \ 'o' {\n            i++\n        }\n        if s[i] == 'u' {\n            i++\n\
    \        }\n        if s[i] == 'A' {\n            i++\n        }\n        if s[i]\
    \ == 'E' {\n            i++\n        }\n        if s[i] == 'I' {\n           \
    \ i++\n        }\n        if s[i] == 'O' {\n            i++\n        }\n     \
    \   if s[i] == 'U' {\n            i++\n        }\n        if s[i] == 'b' {\n \
    \           i++\n        }\n        if s[i] == 'c' {\n            i++\n      \
    \  }\n        if s[i] == 'd' {\n            i++\n        }\n        if s[i] ==\
    \ 'f' {\n            i++\n        }\n        if s[i] == 'g' {\n            i++\n\
    \        }\n        if s[i] == 'H' {\n            i++\n        }\n        if s[i]\
    \ == 'j' {\n            i++\n        }\n        if s[i] == 'k' {\n           \
    \ i++\n        }\n        if s[i] == 'l' {\n            i++\n        }\n     \
    \   if s[i] == 'm' {\n            i++\n        }\n        if s[i] == 'p' {\n \
    \           i++\n        }\n        if s[i] == 's' {\n            i++\n      \
    \  }\n        if s[i] == 't' {\n            i++\n        }\n        if s[i] ==\
    \ 'v' {\n            i++\n        }\n        if s[i] == 'w' {\n            i++\n\
    \        }\n        if s[i] == 'y' {\n            i++\n        }\n        if s[i]\
    \ == 'z' {\n            i++\n        }\n    }\n    for i < len(s) {\n        if\
    \ s[i] == ' ' {\n            i++\n            continue\n        }\n        if\
    \ s[i] == 'a' || s[i] == 'A' {\n            k++\n        }\n        if s[i] ==\
    \ 'e' || s[i] == 'E' {\n            k++\n        }\n        if s[i] == 'i' ||\
    \ s[i] == 'I' {\n            k++\n        }\n        if s[i] == 'o' || s[i] ==\
    \ 'O' {\n            k++\n        }\n        if s[i] == 'u' || s[i] == 'U' {\n\
    \            k++\n        }\n        if s[i] == 'B' || s[i] == 'b' {\n       \
    \     k++\n        }\n        if s[i] == 'C' || s[i] == 'c' {\n            k++\n\
    \        }\n        if s[i] == 'D' || s[i] == 'd' {\n            k++\n       \
    \ }\n        if s[i] == 'F' || s[i] == 'f", "    var vowels []rune\n    for _,\
    \ c := range s {\n        if ('A' <= c && c <= 'Z') {\n            vowels = append(vowels,\
    \ c)\n        }\n    }\n    vowelsCount := 0\n    for i, c := range s {\n    \
    \    if i%2 == 0 && ('A' <= c && c <= 'Z') {\n            vowelsCount++\n    \
    \    }\n    }\n    return vowelsCount\n}\n", "    ans := 0\n    for i := 0; i\
    \ < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n            ans++\n\
    \        }\n    }\n    return ans\n}\n", "    vowels := map[rune]bool{'a':true,\
    \ 'e':true, 'i':true, 'o':true, 'u':true}\n    count := 0\n    for _, c := range\
    \ s {\n        if !vowels[c] {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n", "    var result int\n    for _, letter := range s {\n  \
    \      if letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' ||\
    \ letter == 'U' {\n            result++\n        } else if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            letter\
    \ = 'A'\n            result++\n        }\n    }\n    return result\n}\n", "  \
    \  var n int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            n++\n   \
    \     }\n    }\n    return n\n}\n", "    if len(s) < 2 {\n        return 0\n \
    \   }\n    var result int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       result += 1\n        }\n    }\n    return result\n}\n", "    i := 0\n\
    \    for j < len(s) {\n        if s[i] == 'A' || s[i] == 'a' {\n            i++\n\
    \        } else if s[i] == 'E' || s[i] == 'e' {\n            i++\n        } else\
    \ if s[i] == 'I' || s[i] == 'i' {\n            i++\n        } else if s[i] ==\
    \ 'O' || s[i] == 'o' {\n            i++\n        } else if s[i] == 'U' || s[i]\
    \ == 'u' {\n            i++\n        } else if s[i] == 'Y' || s[i] == 'y' {\n\
    \            i++\n        } else if s[i] == 'B' || s[i] == 'b' {\n           \
    \ i++\n        } else if s[i] == 'D' || s[i] == 'd' {\n            i++\n     \
    \   } else if s[i] == 'F' || s[i] == 'f' {\n            i++\n        } else if\
    \ s[i] == 'G' || s[i] == 'g' {\n            i++\n        }\n        j++\n    }\n\
    \    return i\n}\n", "    count := 0\n    for i := 0; i < len(s); i += 2 {\n \
    \       switch s[i] {\n        case 'A', 'E', 'I', 'O', 'U':\n            count++\n\
    \        default:\n            break\n        }\n    }\n    return count\n}\n\
    `\n", "    count := 0\n    for _, v := range s {\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u'\n            || v == 'A' || v == 'E'\
    \ || v == 'I' || v == 'O' || v == 'U' {\n            count++\n        }\n    }\n\
    \    return count\n}", "    count := 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'a' && s[i+1] == 'A' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n", "    var count int\n    for _, c := range s {\n\
    \        if ('A' <= c && c <= 'Z') && (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    n := 0\n    for _, i := range s {\n        if i == unicode.ToUpper(i)\
    \ {\n            n += count_vowel(i)\n        }\n    }\n    return n\n}\n", " \
    \   vowelMap := make(map[rune]bool)\n    for i := 0; i < len(s); i++ {\n     \
    \   if s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i'\
    \ || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U' {\n\
    \            vowelMap[s[i]] = true\n        }\n    }\n    count := 0\n    for\
    \ _, v := range vowelMap {\n        count += v\n    }\n    return count\n}\n",
  "    return strings.Count(s, \"AEIOUYaeiou\") - strings.Count(s, \"aeiouAEIOUY\"\
    )\n}\n", "    // Count uppercase vowels in even indices.\n    // Assume a vowel\
    \ is one character long.\n    // If a string does not contain an even number of\
    \ vowels, return 0.\n    // If the string is all uppercase, return 0.\n    //\
    \ Otherwise, count the vowels in even indices.\n    for i := 0; i < len(s); i\
    \ += 2 {\n        switch s[i] {\n        case 'A', 'B', 'C', 'D', 'E', 'F':\n\
    \        default:\n            return 0\n        }\n    }\n    return 1\n}\n",
  "    var index int\n    var result int\n    for index = 0; index < len(s); index++\
    \ {\n        if s[index] >= 'a' && s[index] <= 'z' && s[index] != 'A' && s[index]\
    \ != 'E' && s[index] != 'I' && s[index] != 'O' && s[index] != 'U' {\n        \
    \    result++\n        }\n    }\n    return result\n}\n", "    var ret int\n \
    \   for i, _ := range s {\n        if isVowel(s[i]) {\n            switch {\n\
    \            case (i&1 == 0) && isUpper(s[i]):\n                ret++\n      \
    \      case (i&1 == 1) && isUpper(s[i]):\n                ret++\n            }\n\
    \        }\n    }\n    return ret\n}\n", "    vowels := []rune{'a', 'e', 'i',\
    \ 'o', 'u'}\n\n    evenIndices := make([]int, len(s))\n    for i := 0; i < len(s);\
    \ i += 2 {\n        even := s[i] == 'e' && s[i+1] == 'n'\n        evenIndices[i]\
    \ = int(even)\n    }\n    even := 0\n    evenCount := 0\n    for _, i := range\
    \ evenIndices {\n        if i == 0 {\n            evenCount++\n        } else\
    \ {\n            even += i\n        }\n    }\n    return even > len(vowels)/2\
    \ ? even - len(vowels)/2 : evenCount\n}\n", "    var i, j int\n    for i := 0;\
    \ i < len(s); i += 2 {\n        if s[i] == 'A' && s[j] == 'A' {\n            j\
    \ += 1\n        }\n    }\n    return j\n}\n", "    i := 0\n    for i < len(s)\
    \ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' {\n            i++\n            if i % 2 == 0 {\n                i++\n\
    \            }\n        }\n    }\n    return i - 2\n}\n", "    if len(s) == 0\
    \ {\n        return 0\n    }\n\n    for i := 0; i < len(s); i += 2 {\n       \
    \ if s[i] == 'A' && s[i+1] == 'a' {\n            return 1\n        }\n    }\n\
    \    return 0\n}\n", "    count, i := 0, 0\n    for i < len(s) {\n        if s[i]\
    \ == 'A' || s[i] == 'a' {\n            if count != 0 {\n                count--\n\
    \            } else {\n                count++\n            }\n        } else\
    \ {\n            count++\n        }\n        i++\n    }\n    return count\n}\n",
  "    vowels := []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    vowelCount := 0\n\
    \    for i, _ := range s {\n        if s[i] == s[len(s)-1] && i < len(s) && vowels[i%len(vowels)]\
    \ == s[len(s)-1] {\n            vowelCount++\n        }\n    }\n    return vowelCount\n\
    }\n", "    vowels := []rune(\"aeiou\")\n    count := 0\n    for _, r := range\
    \ s {\n        if (r == 'A' || r == 'a') && count % 2 == 0 {\n            count\
    \ += 1\n        }\n        if (r == 'a' || r == 'e' || r == 'i' || r == 'o' ||\
    \ r == 'u') && count % 2 == 1 {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n", "    count := 0\n    for _, r := range s {\n        if\
    \ unicode.IsUpper(r) {\n            count += 1\n        } else if r == 'e' {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, char := range s {\n        if char == 'A' || char == 'a' {\n\
    \            count += 1\n        }\n        if char == 'E' || char == 'e' {\n\
    \            count += 1\n        }\n        if char == 'I' || char == 'i' {\n\
    \            count += 1\n        }\n        if char == 'O' || char == 'o' {\n\
    \            count += 1\n        }\n        if char == 'U' || char == 'u' {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    var n\
    \ int\n    for i := 0; i < len(s); i += 2 {\n        switch {\n        case s[i]\
    \ >= 'A' && s[i] <= 'Z':\n            n++\n        case s[i] > 'Z' && s[i] < 'A':\n\
    \            n--\n        }\n    }\n    return n\n}\n", "    var count int = 0\n\
    \    var i int\n    for i = 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            if i % 2\
    \ == 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    count :=\
    \ 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n        case 'A',\
    \ 'E', 'I', 'O', 'U':\n            count++\n        default:\n            break\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        } else if s[i] == 'B'\
    \ || s[i] == 'C' || s[i] == 'D' || s[i] == 'F' || s[i] == 'G' {\n            count--\n\
    \        }\n    }\n    return count\n}\n", "    var i int\n    for ; i < len(s);\
    \ i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U' {\n            return i + 1 - i\n        }\n    }\n    return 0\n\
    }\n", "    var a []rune\n    for i := 0; i < len(s); i += 2 {\n        a = append(a,\
    \ s[i]) // odd index\n        a = append(a, s[i+1])\n    }\n    a := count_upper_string(a)\n\
    \    return a\n}\n", "    var count int\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' {\n     \
    \       if s[i] == 'a' || s[i] == 'e' {\n                count += 1\n        \
    \    }\n        } else {\n            count = 0\n            break\n        }\n\
    \    }\n    return count\n}\n", "    // TODO: Add your handling here.\n    return\
    \ 0\n}\n", "    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ != s[i+1] {\n            count++\n        }\n    }\n    return count\n}\n",
  "    n := 0\n    for i, r := range s {\n        if (r >= 'A' && r <= 'Z') && (i\
    \ % 2 == 0) {\n            n++\n        }\n    }\n    return n\n}\n", "    var\
    \ result int\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'a' &&\
    \ s[i+1] == 'E' {\n            result += 1\n        }\n    }\n    return result\n\
    }\n", "    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    count := 0\n    for\
    \ i := 0; i < len(s); i += 2 {\n        if s[i] >= 'A' && s[i] <= 'Z' && s[i+1]\
    \ >= 'a' && s[i+1] <= 'z' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n", "    // Convert string to lower case and ignore case.\n    lower\
    \ := strings.ToLower(s)\n    start := 0\n\n    for i := 0; i < len(lower); i++\
    \ {\n        if lower[i] >= 'A' && lower[i] <= 'Z' {\n            if start !=\
    \ i {\n                start += i\n            }\n            if start % 2 ==\
    \ 0 {\n                return 1\n            }\n        }\n    }\n\n    return\
    \ 0\n}\n</code>\n<|/ a tags=algorithm,string,c |>\n<| a tags=algorithm,string,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <ctype.h>\n\nint count_upper(const char *);\n\nint\nmain(void)\n{\n    printf(\"\
    %d\\n\", count_upper(\"hello\"));\n    printf(\"%d\\n\", count_upper(\"HEllO\"\
    ));\n    printf(\"%d\\n\", count_upper(\"HI\"));\n    printf(\"%d\\n\", count_upper(\"\
    hi\"));\n    printf(\"%d\\n\", count_upper(\"Hi \"));\n    printf(\"%d\\n\", count_upper(\"\
    Hi Hello\"));\n    printf(\"%d\\n\", count_upper(\"Hi Hello  \"));\n    printf(\"\
    %d\\n\", count_upper(\"  Hi Hello\"));\n    printf(\"%d\\n\", count_upper(\"Hi\
    \  Hello\"));\n    printf(\"%d\\n\", count_upper(\"Hi  Hello\"));\n    printf(\"\
    %d\\n\", count_upper(\"Hi Hello\\n\"));\n    printf(\"%d\\n\", count_upper(\"\
    Hi Hello\"));\n}\n\nint\ncount_upper(const char *s)\n{\n    size_t i;\n    int\
    \ count = 0;\n\n    for (i = 0; s[i] != '\\0'; i++)\n    {\n        if (isupper((unsigned\
    \ char)s[i]) && !isspace((unsigned char)s[i]))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ tags=algorithm,string,c |>\n<code>\n#include <stdio.h>\n\nint main(void) {\n\
    \    char str[100] = \"hello\";\n\n    for (int i=0; str[i] != '\\0'; i++) {\n\
    \        if ((str[i] >= 'a' && str[i] <= 'z') ||\n            (str[i] >= 'A' &&\
    \ str[i] <= 'Z')) {\n            putchar(str[i]);\n        }\n    }\n\n    return\
    \ 0;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,string,c dscore=1 |>\n<code>\n\
    #include <stdio.h>\nint main()\n{\n    char str[100] = \"hello\";\n    int i;\n\
    \    for(i = 0; str[i] != '\\0'; i++)\n    {\n        if(isupper(str[i])&&str[i]!='\\\
    0')\n        putchar(str[i]);\n    }", "    vowels := []rune(\"AEIOUYaeiouy\"\
    )\n    even_indices := make([]int, len(vowels)/2)\n\n    for i, v := range vowels\
    \ {\n        if s[i] == v {\n            if i%2 == 0 {\n                even_indices[len(vowels)/2\
    \ - v]++\n            }\n        }\n    }\n\n    return len(even_indices)\n}\n\
    </code>\n<|/ a tags=go |>\n<| c |>\nNice, this is more efficient than my code.\
    \ Just for curiosity, what is `len(vowels)/2` here?\n<|/ c |>\n<| c |>\nIt is\
    \ the middle position of vowels in `vowels`.  If the array is [\"a\", \"b\", \"\
    c\"], it would be index 2.\n<|/ c |>\n<| c |>\nThanks a lot! The part `len(vowels)/2`\
    \ confused me, so I thought it's some kind of a mathematic trick. Your explanation\
    \ is really clear.\n<|/ c |>\n<| c |>\nNote that this solution is O(n^2), which\
    \ might not be desirable in large cases. A O(n) solution is possible.\n<|/ c |>\n\
    <| a tags=go |>\nI haven't actually run any benchmarks, but I think using map\
    \ would be much faster here.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"strings\"\n)\n", "    n := 0\n    for _, v := range s {\n        if v ==\
    \ 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            n++\n   \
    \     }\n    }\n    return n\n}\n", "    var count int\n\n    for i, v := range\
    \ s {\n        if v <= 'Z' && v >= 'A' {\n            count += int(v-'A'=='a')\n\
    \        }\n    }\n\n    return count\n}\n", "    count := 0\n    for i, _ :=\
    \ range s {\n        if s[i] >= 'a' && s[i] <= 'z' {\n            count++\n  \
    \      }\n        if i == 0 || s[i-1] != s[i] {\n            count++\n       \
    \ }\n    }\n    return count\n}\n", "    var count = 0\n    for i, r := range\
    \ s {\n        if (r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U') {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    vowels\
    \ := []rune(\"AEIOU\")\n    counts := make(map[int]int)\n    for _, v := range\
    \ vowels {\n        counts[v] = 0\n    }\n    i, j := 0, 0\n    for _, r := range\
    \ s {\n        if i == len(s) {\n            counts[r] += 1\n        } else {\n\
    \            if r != s[i] {\n                counts[r] += 1\n            }\n \
    \       }\n        i += j\n        j = 0\n    }\n    return counts[\"E\"]\n}\n",
  "    n := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            n += 1\n\
    \        }\n    }\n    return n\n}\n", "    counts := make(map[rune]int)\n\n \
    \   for _, v := range s {\n        if v > 'a' {\n            continue\n      \
    \  }\n        if v > 'Z' {\n            counts[v] += 2\n        }\n    }\n   \
    \ return len(counts)\n}\n", "    cnt := 0\n    for _, c := range s {\n       \
    \ if c >= 'A' && c <= 'Z' {\n            cnt++\n        }\n        if c >= 'a'\
    \ && c <= 'z' {\n            cnt++\n        }\n    }\n    return cnt\n}\n", " \
    \   return strings.Count(s, string([]rune{'A', 'E', 'I', 'O', 'U'}))\n}\n", " \
    \   vowel := []rune{'a', 'e', 'i', 'o', 'u'}\n    var count int = 0\n    for _,\
    \ c := range s {\n        if c >= 'A' && c <= 'Z' {\n            c -= 'A'\n  \
    \          count += vowel[c]\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n", "    n := 0\n    for _, r := range s {\n\
    \        if r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n     \
    \       n++\n        }\n    }\n    return n\n}\n`\n", "    var result int\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'a' || s[i]\
    \ == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] ==\
    \ 'o' || s[i] == 'U' || s[i] == 'u' {\n            if i % 2 == 0 {\n         \
    \       result++\n            }\n        }\n    }\n    return result\n}\n", " \
    \   r := 0\n    for i := 0; i < len(s); i += 2 {\n        r, ok:=isUpper(s[i])\n\
    \        if ok {\n            r++\n        }\n    }\n    return r\n}\n", "   \
    \ var n int\n    for i := 0; i < len(s); {\n        c := s[i]\n        if c >=\
    \ 'a' && c <= 'z' {\n            i += 2\n            if i % 2 == 0 {\n       \
    \         n += 2\n            }\n        } else if c >= 'A' && c <= 'Z' {\n  \
    \          i += 2\n            if i % 2 == 0 {\n                n += 2\n     \
    \       }\n        } else {\n            i++\n        }\n    }\n    return n\n\
    }\n", "    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count += s[i] == 'u'\n        }\n    }\n    return count\n}\n", "    var\
    \ a []rune\n    for _, r := range s {\n        if unicode.IsUpper(r) {\n     \
    \       a += make([]rune, r+1)\n            copy(a[(r-1)%len(a)], r)\n       \
    \ }\n    }\n    return len(a) - count_vowel(a)\n}\n", '    vowels := make(map[rune]',
  "    var n int\n\n    for i, c := range s {\n        if ((i%2) == 0) {\n       \
    \     if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n        \
    \        n += 1\n            }\n        }\n    }\n\n    return n\n}\n", "    count\
    \ := 0\n    for _, char := range s {\n        if char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U' {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var c int\n    switch len(s) {\n    case\
    \ 0:\n        return c\n    case 1:\n        switch s[0] {\n        case 'a':\n\
    \        case 'A':\n            return 1\n        case 'e':\n        case 'E':\n\
    \            return 1\n        case 'i':\n        case 'I':\n            return\
    \ 1\n        case 'o':\n        case 'O':\n            return 1\n        case\
    \ 'u':\n        case 'U':\n            return 1\n        default:\n          \
    \  return c\n        }\n    default:\n        i := 0\n        for ; i < len(s)\
    \ && s[i] == s[i%len(s)]; i = i+2 {\n            switch s[i]{\n            case\
    \ 'a':\n            case 'A':\n                c++\n            case 'e':\n  \
    \          case 'E':\n                c++\n            case 'i':\n           \
    \ case 'I':\n                c++\n            case 'o':\n            case 'O':\n\
    \                c++\n            case 'u':\n            case 'U':\n         \
    \       c++\n            }\n        }\n        return c\n    }\n}\n", "    result\
    \ := 0\n    for i, r := range s {\n        if r == 'a' || r == 'e' || r == 'i'\
    \ || r == 'o' || r == 'u' {\n            if i % 2 == 0 {\n                result++\n\
    \            }\n        }\n    }\n    return result\n}\n", "    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i]\
    \ == 'E' {\n            if i % 2 == 0 {\n                return 1\n          \
    \  }\n        }\n    }\n\n    return 0\n}\n", "    vowels := []rune(\"aeiouAEIOU\"\
    )\n    for i := range s {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u'{\n            return 1\n        }\n    }\n   \
    \ return 0\n}\n", "    vowels := []rune(\"AEIOUYaeiouy\")\n    i := 0\n    for\
    \ ; i < len(s); i += 2 {\n        if s[i] == 'a' || s[i] == 'A' {\n          \
    \  for j := i; j < len(s); j += 2 {\n                if s[j] == 'a' || s[j] ==\
    \ 'A' {\n                    for _, v := range vowels {\n                    \
    \    if s[j] != v {\n                            break\n                     \
    \   }\n                    }\n                    if j-i != 2 {\n            \
    \            fmt.Printf(\"%c\\n\", s[j])\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return i - 1\n}\n", "    result :=\
    \ 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'a'\
    \ {\n            result += int(s[i] == 'A')\n        }\n    }\n    return result\n\
    }\n", "    if len(s) < 2 {\n        return 0\n    }\n\n    even := true\n    for\
    \ i := 0; i < len(s); i += 2 {\n        if s[i] != s[len(s)-1-i] {\n         \
    \   if even {\n                even = false\n            } else {\n          \
    \      even = true\n            }\n        }\n    }\n    if even {\n        return\
    \ 1\n    }\n    return 0\n}", "    n := 0\n    for i := 0; i < len(s); i += 2\
    \ {\n        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i]\
    \ == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] ==\
    \ 'u' {\n            n += 1\n        }\n    }\n    return n\n}\n", "    i, j :=\
    \ 0, 0\n    for i < len(s) && j < len(s) {\n        switch s[i] {\n        case\
    \ 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case\
    \ 'u':\n            i++\n            j++\n        default:\n            i++\n\
    \        }\n    }\n    return j - i\n}\n", "    var num int\n\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            num++\n        }\n    }\n    return num\n\
    }\n", "    n := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            n++\n\
    \        }\n        if s[i] == 'B' {\n            n++\n        }\n        if s[i]\
    \ == 'D' {\n            n++\n        }\n        if s[i] == 'F' {\n           \
    \ n++\n        }\n        if s[i] == 'G' {\n            n++\n        }\n     \
    \   if s[i] == 'H' {\n            n++\n        }\n    }\n    return n\n}\n", " \
    \   n := 0\n    for i, c := range s {\n        if c >= 'A' && c <= 'Z' && i %\
    \ 2 == 0 {\n            n++\n        }\n    }\n    return n\n}", "    var count\
    \ = 0\n    for _, c := range s {\n        if c == unicode.ToUpper(c) {\n     \
    \       count += 1\n            if c % 2 == 0 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' && s[i+1] == 'A'\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n", "    n\
    \ := 0\n    for _, c := range s {\n        if ('a' <= c && c <= 'z') || ('A' <=\
    \ c && c <= 'Z') {\n            n = n + 1\n        }\n    }\n    return n\n}\n",
  "    vowels := []rune(\"AEIOUaeiou\")\n    n := 0\n    for _, r := range s {\n \
    \       if r >= 'A' && r <= 'Z' {\n            if n%2 == 0 {\n               \
    \ for _, c := range vowels {\n                    if r == c {\n              \
    \          n++\n                        break\n                    }\n       \
    \         }\n            }\n        }\n        n++\n    }\n    return n\n}\n",
  "    if s == \"\" {\n        return 0\n    }\n    var n int\n    for _, r := range\
    \ s {\n        if unicode.IsUpper(r) {\n            n++\n        }\n        if\
    \ n >= len(s)/2 {\n            break\n        }\n    }\n    return n\n}\n</code>\n\
    <|/ a tags=string,go |>\n<| a |>\nYou can use regular expressions:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n", "    vowels := []rune(\"\
    AEIOU\")\n    return len(s) - len(strings.Split(s, \"AEIOU\")) + strings.Count(s[0::2],\
    \ vowels[0::2])\n}", "    var result int\n\n    for i := 0; i < len(s); i += 2\
    \ {\n        c := s[i]\n        result += (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n    }\n\n    return result\n}\n", "    if s == \"\" {\n\
    \        return 0\n    }\n    even_indices := make([]int, 0, len(s))\n    for\
    \ _, c := range s {\n        if isUpper(c) {\n            even_indices = append(even_indices,\
    \ int(c))\n        }\n    }\n    even_indices = even_indices[:len(even_indices)/2]\n\
    \    return len(even_indices)\n}\n", "    r := 0\n    for i, c := range s {\n\
    \        if c == unicode.ToUpper(c) {\n            if i%2 == 0 {\n           \
    \     r++\n            }\n        }\n    }\n    return r\n}\n", "    i := 0\n\
    \    for ; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' {\n            if i % 2 == 0 {\n         \
    \       return 1\n            }\n        }\n    }\n    return 0\n}\n", "    var\
    \ n int = 0\n    for i := 0; i < len(s); i += 2 {\n        n += count_vowels(s[i:i+2])\n\
    \    }\n    return n\n}\n", "    var n int\n    for i, c := range s {\n      \
    \  if c == 'A' || c == 'a' {\n            n += 1\n        } else if c == 'E' ||\
    \ c == 'e' {\n            n += 1\n        } else if c == 'I' || c == 'i' {\n \
    \           n += 1\n        } else if c == 'O' || c == 'o' {\n            n +=\
    \ 1\n        } else if c == 'U' || c == 'u' {\n            n += 1\n        } else\
    \ if c == 'Y' || c == 'y' {\n            n += 1\n        }\n    }\n    return\
    \ n\n}\n", "    var count int\n    for _, i := range s {\n        if i == 'a'\
    \ || i == 'e' || i == 'i' || i == 'o' || i == 'u' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    for i := 0; i < len(s); {\n     \
    \   if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ {\n            i++\n        } else if s[i] == 'B' || s[i] == 'C' || s[i] ==\
    \ 'D' || s[i] == 'E' || s[i] == 'F' || s[i] == 'G' {\n            i++\n      \
    \  } else {\n            return i - 1\n        }\n    }\n}\n", "    count := 0\n\
    \    for _, c := range s {\n        if ('A' <= c && c <= 'Z') {\n            count\
    \ += int(c != 'A')\n        }\n    }\n    return count\n}\n", "    vowels := \"\
    AEIOUaeiou\"\n    even_index := 0\n    for _, letter := range s {\n        if\
    \ letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter ==\
    \ 'u' {\n            even_index += strings.Count(vowels[even_index:], letter)\n\
    \        }\n    }\n    return even_index\n}\n", "    count := 0\n    i := 0\n\
    \    for ; i < len(s); i++ {\n        if s[i] >= 'a' && s[i] <= 'z' && s[i] >=\
    \ 'A' && s[i] <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    c := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            c++\n\
    \        }\n    }\n    return c\n}", "    var count int\n    for i, r := range\
    \ s {\n        if (r >= 'A' && r <= 'Z') {\n            if i % 2 == 0 {\n    \
    \            count++\n            }\n        }\n    }\n    return count\n}\n",
  "    n := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            n += 1\n\
    \        }\n    }\n    return n\n}\n", "    var n int\n    for i, c := range s\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           n++\n        } else if c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U' {\n            n--\n        }\n    }\n    return n\n}\n`\n    },\n\
    \    {\n        Name: \"count_lower_test\",\n        File: `package count_lower_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n", "    // Count all upper case characters\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n\n    for i :=\
    \ 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||\
    \ s[i] == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n", "    var result int\n    i := 0\n    for i < len(s) && s[i] ==\
    \ 'A' || s[i] == 'a' {\n        if s[i] == 'a' {\n            result += 1\n  \
    \      }\n        i++\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
