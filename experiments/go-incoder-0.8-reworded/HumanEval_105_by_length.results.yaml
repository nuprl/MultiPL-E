language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    if len(arr) >\
    \ 0 {\n        pivot := arr[len(arr)-1]\n        for i := 0; i < len(arr); i++\
    \ {\n            if i < len(arr) && arr[i] < pivot {\n                result[i]\
    \ = fmt.Sprintf(\"%v\", arr[i])\n            }\n            if i < len(arr) &&\
    \ arr[i] > pivot {\n                result[i] = fmt.Sprintf(\"%v\", arr[len(arr)-i-1])\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmptmqxw3gc_test.go:53: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 5 4 1 2 ]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmptmqxw3gc_test.go:53: expected '[One]', got '[1 -1 ]'\n \
    \   --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmptmqxw3gc_test.go:53:\
    \ expected '[Three Two One]', got '[1 -1 -1 ]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmptmqxw3gc_test.go:53: expected '[Nine Eight Four]', got '[8\
    \ 4 ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    l := len(arr)\n    if l == 0 {\n        return nil\n\
    \    }\n\n    s := []string{}\n    for i := 0; i < l; i++ {\n        if arr[i]\
    \ < 0 || arr[i] > 9 {\n            continue\n        }\n\n        l = i\n    }\n\
    \n    arr2 := make([]int, l)\n    for _, v := range arr {\n        arr2[int(v)-1]\
    \ = v\n    }\n    for i := 0; i < l; i++ {\n        arr2[i] = intToName(arr2[i])\n\
    \    }\n\n    s = append(s, reverse(arr2)...)\n    for i := range s {\n      \
    \  s[i] = intToName(s[i])\n    }\n\n    return s\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5b84ynv_test.go:40:19: undefined: intToName

    /tmp/tmpd5b84ynv_test.go:43:19: undefined: reverse

    /tmp/tmpd5b84ynv_test.go:45:16: undefined: intToName

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // sort the ints\n    arr2, ok := sort.IntSliceStable(arr)\n\
    \    if !ok {\n        return nil\n    }\n    arr2 = append(arr2, arr[len(arr2)-1])\
    \ // add the last element at the end\n\n    // reverse the string\n    revString\
    \ := \"\"\n    for _, i := range arr2 {\n        revString += string(i)\n    }\n\
    \n    // Replace the number with the actual number\n    for _, i := range revString\
    \ {\n        switch i {\n        case \"0\":\n            arr2 = \"One\"\n   \
    \     case \"1\":\n            arr2 = \"Two\"\n        case \"2\":\n         \
    \   arr2 = \"Three\"\n        case \"3\":\n            arr2 = \"Four\"\n     \
    \   case \"4\":\n            arr2 = \"Five\"\n        case \"5\":\n          \
    \  arr2 = \"Six\"\n        case \"6\":\n            arr2 = \"Seven\"\n       \
    \ case \"7\":\n            arr2 = \"Eight\"\n        case \"8\":\n           \
    \ arr2 = \"Nine\"\n        case \"9\":\n            arr2 = \"Ten\"\n        }\n\
    \    }\n\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgx_id2o_test.go:22:17: undefined: sort

    /tmp/tmplgx_id2o_test.go:37:14: cannot convert "0" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:39:14: cannot convert "1" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:41:14: cannot convert "2" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:43:14: cannot convert "3" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:45:14: cannot convert "4" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:47:14: cannot convert "5" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:49:14: cannot convert "6" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:51:14: cannot convert "7" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:53:14: cannot convert "8" (untyped string constant) to
    rune

    /tmp/tmplgx_id2o_test.go:53:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var names []string\n    for _, val := range arr {\n \
    \       switch val {\n        case 1:\n            names = append(names, \"One\"\
    )\n        case 2:\n            names = append(names, \"Two\")\n        case 3:\n\
    \            names = append(names, \"Three\")\n        case 4:\n            names\
    \ = append(names, \"Four\")\n        case 5:\n            names = append(names,\
    \ \"Five\")\n        case 6:\n            names = append(names, \"Six\")\n   \
    \     case 7:\n            names = append(names, \"Seven\")\n        case 8:\n\
    \            names = append(names, \"Eight\")\n        case 9:\n            names\
    \ = append(names, \"Nine\")\n        default:\n            continue\n        }\n\
    \    }\n    reverse(names)\n    for _, name := range names {\n        if name\
    \ == \"One\" {\n            arr[0] += 1\n            break\n        }\n    }\n\
    \    reverse(arr)\n    for _, name := range names {\n        if name == \"One\"\
    \ {\n            arr[0] += 1\n            break\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hrz0pjh_test.go:46:5: undefined: reverse

    /tmp/tmp4hrz0pjh_test.go:53:5: undefined: reverse

    /tmp/tmp4hrz0pjh_test.go:60:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    for\
    \ i := range arr {\n        if arr[i] < 1 {\n            continue\n        }\n\
    \        if arr[i] > 9 {\n            continue\n        }\n        for j := 0;\
    \ j < 10; j++ {\n            if j == arr[i] {\n                return []string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n            }\n        }\n    }\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfm3dzrfa_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One Two Three Four Five Six Seven Eight Nine]'\n    ---\
    \ FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpfm3dzrfa_test.go:57: expected\
    \ '[One]', got '[One Two Three Four Five Six Seven Eight Nine]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfm3dzrfa_test.go:57: expected\
    \ '[Three Two One]', got '[One Two Three Four Five Six Seven Eight Nine]'\n  \
    \  --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfm3dzrfa_test.go:57:\
    \ expected '[Nine Eight Four]', got '[One Two Three Four Five Six Seven Eight\
    \ Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sorted_str := by_length(sort.IntSlice(arr))\n    reversed_str := by_length(sort.IntSlice(arr).Reverse())\n\
    \    result := make([]string, len(arr))\n\n    for i, v := range arr {\n     \
    \   result[i] = fmt.Sprintf(\"%s\", map[int]string{\n            1: map[int]string{\"\
    One\": \"1\"},\n            2: map[int]string{\"Two\": \"2\"},\n            3:\
    \ map[int]string{\"Three\": \"3\"},\n            4: map[int]string{\"Four\": \"\
    4\"},\n            5: map[int]string{\"Five\": \"5\"},\n            6: map[int]string{\"\
    Six\": \"6\"},\n            7: map[int]string{\"Seven\": \"7\"},\n           \
    \ 8: map[int]string{\"Eight\": \"8\"},\n            9: map[int]string{\"Nine\"\
    : \"9\"},\n        }[v])\n    }\n\n    for i, v := range reversed_str {\n    \
    \    result[len(arr)-i-1] = v\n    }\n\n    return append(sorted_str, result...)\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzx_30h4i_test.go:25:29:\
    \ undefined: sort\n/tmp/tmpzx_30h4i_test.go:26:31: undefined: sort\n/tmp/tmpzx_30h4i_test.go:31:16:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in map literal\n/tmp/tmpzx_30h4i_test.go:31:31: cannot use \"One\" (untyped\
    \ string constant) as int value in map literal\n/tmp/tmpzx_30h4i_test.go:32:16:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in map literal\n/tmp/tmpzx_30h4i_test.go:32:31: cannot use \"Two\" (untyped\
    \ string constant) as int value in map literal\n/tmp/tmpzx_30h4i_test.go:33:16:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in map literal\n/tmp/tmpzx_30h4i_test.go:33:31: cannot use \"Three\" (untyped\
    \ string constant) as int value in map literal\n/tmp/tmpzx_30h4i_test.go:34:16:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in map literal\n/tmp/tmpzx_30h4i_test.go:34:31: cannot use \"Four\" (untyped\
    \ string constant) as int value in map literal\n/tmp/tmpzx_30h4i_test.go:34:16:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    // first create string with\
    \ numbers from 1 to 9\n    for _, i := range arr {\n        if i >= 1 && i <=\
    \ 9 {\n            result = append(result, fmt.Sprintf(\"%d\", i))\n        }\
    \ else {\n            result = append(result, \"One\")\n        }\n    }\n   \
    \ // then reverse string\n    for i := len(result) - 1; i >= 0; i-- {\n      \
    \  result[i], result[len(result)-i] = result[len(result)-i], result[i]\n    }\n\
    \    // replace each integer with its corresponding string\n    for _, i := range\
    \ arr {\n        if i >= 1 && i <= 9 {\n            result = append(result, map[int]string{i:strconv.Itoa(int(i))})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwtvk57ud_test.go:37:37:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in argument to append\n/tmp/tmpwtvk57ud_test.go:37:54: undefined: strconv\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := []string{}\n    for i := range arr {\n      \
    \  if arr[i] < 1 && arr[i] > 9 {\n            continue\n        }\n        if\
    \ arr[i] == 1 {\n            arr2 = append(arr2, \"One\")\n        } else {\n\
    \            arr2 = append(arr2, \"Two\")\n            arr2 = append(arr2, \"\
    Three\")\n            arr2 = append(arr2, \"Four\")\n            arr2 = append(arr2,\
    \ \"Five\")\n            arr2 = append(arr2, \"Six\")\n            arr2 = append(arr2,\
    \ \"Seven\")\n            arr2 = append(arr2, \"Eight\")\n            arr2 = append(arr2,\
    \ \"Nine\")\n        }\n        arr2[len(arr2)-1] = arr2[len(arr2)-1][0:len(arr2[len(arr2)-1])-1]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfhhjthhk_test.go:60: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two Three Four Five Six Seven Eight Nin On On Two Three\
    \ Four Five Six Seven Eight Nin Two Three Four Five Six Seven Eight Nin Two Three\
    \ Four Five Six Seven Eight Nin Two Three Four Five Six Seven Eight Nin Two Three\
    \ Four Five Six Seven Eight Nin]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n\
    \        tmpfhhjthhk_test.go:60: expected '[One]', got '[On Two Three Four Five\
    \ Six Seven Eight Nin Two Three Four Five Six Seven Eight Nin]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfhhjthhk_test.go:60: expected\
    \ '[Three Two One]', got '[On Two Three Four Five Six Seven Eight Nin Two Three\
    \ Four Five Six Seven Eight Nin Two Three Four Five Six Seven Eight Nin]'\n  \
    \  --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfhhjthhk_test.go:60:\
    \ expected '[Nine Eight Four]', got '[Two Three Four Five Six Seven Eight Nin\
    \ Two Three Four Five Six Seven Eight Nin Two Three Four Five Six Seven Eight\
    \ Nin]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // sort the list from smallest to biggest\n    sort.Sort(ByLengthSlice(arr))\n\
    \n    // reverse the sorted list\n    for i := 0; i < len(arr)-1; i++ {\n    \
    \    arr[i], arr[len(arr)-1-i] = arr[len(arr)-1-i], arr[i]\n    }\n\n    // replace\
    \ each digit by its name\n    for i := 0; i < len(arr)-1; i++ {\n        arr[i]\
    \ -= 9\n        arr[i] += \"One\"\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0_4wtzo_test.go:22:5: undefined: sort

    /tmp/tmpe0_4wtzo_test.go:22:15: undefined: ByLengthSlice

    /tmp/tmpe0_4wtzo_test.go:32:9: invalid operation: arr[i] += "One" (mismatched
    types int and untyped string)

    /tmp/tmpe0_4wtzo_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if !arr || len(arr) == 0 {\n        return nil\n    }\n\
    \    result := make([]string, 0, len(arr))\n    min := 1\n    max := 9\n    for\
    \ _, v := range arr {\n        if v < min || v > max {\n            continue\n\
    \        }\n        result := append(result, fmt.Sprintf(\"%v\", v))\n    }\n\
    \    for i := 0; i < len(result); i++ {\n        if result[i] == \"9\" {\n   \
    \         result[i] = \"Nine\"\n        }\n        if result[i] == \"1\" {\n \
    \           result[i] = \"One\"\n        }\n        if result[i] == \"2\" && len(result)\
    \ != 2 {\n            result[i] = \"Two\"\n        }\n        if result[i] ==\
    \ \"3\" && len(result) != 3 {\n            result[i] = \"Three\"\n        }\n\
    \        if result[i] == \"4\" && len(result) != 4 {\n            result[i] =\
    \ \"Four\"\n        }\n        if result[i] == \"5\" && len(result) != 5 {\n \
    \           result[i] = \"Five\"\n        }\n        if result[i] == \"6\" &&\
    \ len(result) != 6 {\n            result[i] = \"Six\"\n        }\n        if result[i]\
    \ == \"7\" && len(result) != 7 {\n            result[i] = \"Seven\"\n        }\n\
    \        if result[i] == \"8\" && len(result) != 8 {\n            result[i] =\
    \ \"Eight\"\n        }\n    }\n    return result\n}\n</code>\n<|/ a tags=list,sorting,go\
    \ |>\n<| a tags=list,sorting,go |>\n<code>\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkn0dri5p_test.go:64:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075440
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // return an empty list if list is empty\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    // sort the list to get a sorted\
    \ list of integers\n    sort.Ints(arr)\n    // create a temp list to hold the\
    \ results\n    result := []string{}\n    // for each number in the list, append\
    \ its name to the list\n    for _, number := range arr {\n        // if the number\
    \ is between 1 and 9 inclusive, append the corresponding name\n        if number\
    \ >= 1 && number <= 9 {\n            result = append(result, ones[number])\n \
    \       }\n        // if the number is a strange number, ignore it\n        else\
    \ if number == -2 {\n            continue\n        }\n        // if the number\
    \ is anything else, ignore it\n        else {\n            continue\n        }\n\
    \    }\n    // return the sorted list and the filtered list\n    return append(sort.Ints(arr),\
    \ result...)\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd0b_702o_test.go:36:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075440
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for idx, i := range\
    \ arr {\n        if i <= 9 && !(i > 1 && i <= 9) {\n            arr2[len(arr2)\
    \ - idx-1] = i\n        } else {\n            continue\n        }\n    }\n   \
    \ arr3 := reverse(arr2)\n    arr4 := replaceDigit(arr3)\n    arr5 := sortByLength(arr4)\n\
    \    return arr5\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7yi3vjks_test.go:29:13: undefined: reverse

    /tmp/tmp7yi3vjks_test.go:30:13: undefined: replaceDigit

    /tmp/tmp7yi3vjks_test.go:31:13: undefined: sortByLength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ length := len(arr)\n    result := make([]string, length)\n    i := 0\n    for\
    \ ; i < length; i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            j\
    \ := i\n            for ; j < length && arr[j] > 0; j++ {\n                if\
    \ arr[j] == arr[j-1] {\n                    arr[j] = arr[j-1]\n              \
    \      break\n                }\n            }\n            result[i] = string(arr[j\
    \ - 1])\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp90s0kb1b_test.go:37:25: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n\n    if arr == nil {\n       \
    \ return result\n    }\n\n    for _, i := range arr {\n        // If i is not\
    \ between 1 and 9, ignore it\n        if i <= 9 || i >= 100 {\n            continue\n\
    \        }\n\n        // Sort the list in ascending order\n        arr := sort.Ints(arr)\n\
    \n        // Reverse the list so we can start at the end\n        arr.reverse()\n\
    \n        // Create a string with the name for each number\n        result :=\
    \ append(result, fmt.Sprintf(\"%v\", arr[len(arr)-1]))\n    }\n\n    return result\n\
    }\n`\n\nvar by_length_tests = []string{\n    // Test case 1\n    `package by_length_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmp58vh9avd_test.go:45:1: expected declaration,\
    \ found `\n\nvar by_length_tests = []string{\n    // Test case 1\n    `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075440
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    biggest := arr[0]\n    biggest_index := 0\n\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > biggest {\n            biggest = arr[i]\n       \
    \     biggest_index = i\n        }\n    }\n\n    reverse := make([]int, len(arr)-1)\n\
    \    for i := len(reverse) - 1; i >= 0; i-- {\n        reverse[i] = biggest\n\
    \        if biggest < 0 {\n            break\n        }\n\n        if biggest\
    \ > arr[i+1] {\n            biggest = arr[i+1]\n            biggest_index = i+1\n\
    \        }\n    }\n\n    for i, j := 0, len(reverse)-1; i < j; i, j = i+1, j-1\
    \ {\n        reverse[i], reverse[j] = reverse[j], reverse[i]\n    }\n\n    output\
    \ := make([]string, len(arr))\n    for i, n := range arr {\n        output[i]\
    \ = name[reverse[n]]\n    }\n\n    return output\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wu58wjb_test.go:26:5: biggest_index declared but not used

    /tmp/tmp0wu58wjb_test.go:54:21: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) < 1 {\n        return []string{}\n    }\n\
    \n    // reverse the list\n    arr := reverse(arr)\n\n    // replace each item\
    \ in the list with its corresponding string\n    var result []string\n    for\
    \ _, item := range arr {\n        num := fmt.Sprintf(\"%v\", item)\n        result\
    \ = append(result, one[num%10]...)\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptclkuzpg_test.go:26:9: no new variables on left side of :=

    /tmp/tmptclkuzpg_test.go:26:12: undefined: reverse

    /tmp/tmptclkuzpg_test.go:32:33: undefined: one

    /tmp/tmptclkuzpg_test.go:32:37: invalid operation: num % 10 (mismatched types
    string and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    min := arr[0]\n    for _, n := range arr {\n     \
    \   if n >= min && n <= 9 {\n            min *= 10\n            min++\n      \
    \      result = append(result, fmt.Sprintf(\"%c\", min))\n        }\n    }\n \
    \   result := append(result, fmt.Sprintf(\"%c\", min))\n    return result\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmfiykm0t_test.go:33:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    output := make([]string, len(arr))\n    output := append(output,\
    \ \"\")\n    var index = 0\n    for _, value := range arr {\n        if value-1\
    \ < 0 || value-1 > 9 {\n            continue\n        }\n        index += 1\n\
    \        output[index] = name_list[value-1]\n    }\n    return output\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpji25zrg7_test.go:22:12: no new variables on left side of :=

    /tmp/tmpji25zrg7_test.go:29:25: undefined: name_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    r := map[int]string{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ < 10 {\n            r[arr[i]] = fmt.Sprintf(\"%d\", i)\n        }\n    }\n \
    \   return r.Values()\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmydsvjp_test.go:24:5: undefined: sort

    /tmp/tmprmydsvjp_test.go:31:14: r.Values undefined (type map[int]string has no
    field or method Values)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    min := 1\n    for _, v := range arr {\n        if\
    \ v < min {\n            min = v\n        }\n    }\n    for _, v := range arr\
    \ {\n        if v > min {\n            num := strconv.Itoa(v)\n            str\
    \ := fmt.Sprintf(\"%v\", num)\n            // PATCH list\n            str += \"\
    \ \" + \"One\"\n            result += []string{str}\n            // PATCH list\n\
    \            str += \" \" + \"Two\"\n            result += []string{str}\n   \
    \         // PATCH list\n            str += \" \" + \"Three\"\n            result\
    \ += []string{str}\n            // PATCH list\n            str += \" \" + \"Four\"\
    \n            result += []string{str}\n            // PATCH list\n           \
    \ str += \" \" + \"Five\"\n            result += []string{str}\n            //\
    \ PATCH list\n            str += \" \" + \"Six\"\n            result += []string{str}\n\
    \            // PATCH list\n            str += \" \" + \"Seven\"\n           \
    \ result += []string{str}\n            // PATCH list\n            str += \" \"\
    \ + \"Eight\"\n            result += []string{str}\n            // PATCH list\n\
    \            str += \" \" + \"Nine\"\n            result += []string{str}\n  \
    \      } else {\n            str += \" \" + \"Nine\"\n            result += []string{str}\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvkw7dhzl_test.go:33:20: undefined: strconv

    /tmp/tmpvkw7dhzl_test.go:37:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:40:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:43:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:46:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:49:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:52:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:55:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:58:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:61:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpvkw7dhzl_test.go:61:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    result := make([]string, len(arr))\n\
    \    for i, val := range arr {\n        if val >= 0 && val <= 9 {\n          \
    \  result[i] = \"One\"\n        } else if val >= 10 && val <= 99 {\n         \
    \   result[i] = \"Two\"\n        } else if val >= 100 && val <= 999 {\n      \
    \      result[i] = \"Three\"\n        } else if val >= 1000 && val <= 9999 {\n\
    \            result[i] = \"Four\"\n        } else if val >= 10000 && val <= 99999\
    \ {\n            result[i] = \"Five\"\n        } else if val >= 100000 && val\
    \ <= 999999 {\n            result[i] = \"Six\"\n        } else if val >= 1000000\
    \ && val <= 9999999 {\n            result[i] = \"Seven\"\n        } else if val\
    \ >= 10000000 && val <= 99999999 {\n            result[i] = \"Eight\"\n      \
    \  } else if val >= 100000000 && val <= 99999999999 {\n            result[i] =\
    \ \"Nine\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjmt3zr9_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    n\
    \ := len(arr)\n    arr2 = make([]int, n)\n    arr2 := arr[0:1]\n    for _, v :=\
    \ range arr {\n        if 1 <= v && v <= 9 {\n            arr2 = append(arr2,\
    \ v)\n        }\n    }\n    arr2 = append(arr2, reverseSlice(arr2...)...)\n  \
    \  for _, v := range arr2 {\n        fmt.Println(v)\n    }\n    return arr2\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfaliqox_test.go:25:5: undefined: arr2

    /tmp/tmpbfaliqox_test.go:32:25: undefined: reverseSlice

    /tmp/tmpbfaliqox_test.go:36:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    lens := make([]int, len(arr))\n    for i, e := range\
    \ arr {\n        lens[i] = e\n    }\n    sort.Sort(lens)\n    if lens[0] == 0\
    \ || lens[len(lens)-1] == 9 {\n        return []string{}\n    }\n    lens = lens[1\
    \ : len(lens)-1]\n    arr2 := make([]string, 0, len(arr))\n    for _, e := range\
    \ lens {\n        arr2 = append(arr2, by_length_test[e])\n    }\n    for _, e\
    \ := range arr {\n        if e >= 10 || e < 1 {\n            continue\n      \
    \  }\n        arr2 = append(arr2, by_length_test[e])\n    }\n    return arr2\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3bckrnn_test.go:25:5: undefined: sort

    /tmp/tmpa3bckrnn_test.go:32:29: undefined: by_length_test

    /tmp/tmpa3bckrnn_test.go:38:29: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075441
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return nil\n    }\n    for _, i := range arr {\n        if i >= 1 && i <= 9\
    \ {\n            result = append(result, fmt.Sprintf(\"%c\", i))\n        } else\
    \ {\n            // ignore strange number\n        }\n    }\n    reverse(result)\n\
    \    for _, i := range result {\n        if i == '9' {\n            i = 0\n  \
    \      }\n        if i == '8' {\n            i = '7'\n        }\n        if i\
    \ == '7' {\n            i = '6'\n        }\n        if i == '6' {\n          \
    \  i = '5'\n        }\n        if i == '5' {\n            i = '4'\n        }\n\
    \        if i == '4' {\n            i = '3'\n        }\n        if i == '3' {\n\
    \            i = '2'\n        }\n        if i == '2' {\n            i = '1'\n\
    \        }\n        if i == '1' {\n            i = '0'\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp934agc69_test.go:32:5: undefined: reverse

    /tmp/tmp934agc69_test.go:34:17: invalid operation: i == ''9'' (mismatched types
    string and untyped rune)

    /tmp/tmp934agc69_test.go:35:17: cannot use 0 (untyped int constant) as string
    value in assignment

    /tmp/tmp934agc69_test.go:37:17: invalid operation: i == ''8'' (mismatched types
    string and untyped rune)

    /tmp/tmp934agc69_test.go:38:17: cannot use ''7'' (untyped rune constant 55) as
    string value in assignment

    /tmp/tmp934agc69_test.go:40:17: invalid operation: i == ''7'' (mismatched types
    string and untyped rune)

    /tmp/tmp934agc69_test.go:41:17: cannot use ''6'' (untyped rune constant 54) as
    string value in assignment

    /tmp/tmp934agc69_test.go:43:17: invalid operation: i == ''6'' (mismatched types
    string and untyped rune)

    /tmp/tmp934agc69_test.go:44:17: cannot use ''5'' (untyped rune constant 53) as
    string value in assignment

    /tmp/tmp934agc69_test.go:46:17: invalid operation: i == ''5'' (mismatched types
    string and untyped rune)

    /tmp/tmp934agc69_test.go:46:17: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // create and sort array [1 .. 9]\n    arrByLength := make([]string, 9)\n\
    \    arrByLength[1] = \"One\"\n    arrByLength[2] = \"Two\"\n    arrByLength[3]\
    \ = \"Three\"\n    arrByLength[4] = \"Four\"\n    arrByLength[5] = \"Five\"\n\
    \    arrByLength[6] = \"Six\"\n    arrByLength[7] = \"Seven\"\n    arrByLength[8]\
    \ = \"Eight\"\n    arrByLength[9] = \"Nine\"\n    arrByLength = append(arrByLength,\
    \ arr...)\n    sort.Ints(arrByLength)\n\n    // reverse the array\n    reverseArr\
    \ := make([]int, 0, 10)\n    for _, num := range arrByLength {\n        reverseArr\
    \ = append(reverseArr, 9-num)\n    }\n    sort.Ints(reverseArr)\n\n    // replace\
    \ each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    reverseArr = reverse(arrByLength)\n\
    \n    // convert back to string and return result\n    return reverseArr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpz81dwu_test.go:35:39: cannot use arr (variable of type []int) as type
    []string in argument to append

    /tmp/tmpmpz81dwu_test.go:36:5: undefined: sort

    /tmp/tmpmpz81dwu_test.go:41:41: invalid operation: 9 - num (mismatched types untyped
    int and string)

    /tmp/tmpmpz81dwu_test.go:43:5: undefined: sort

    /tmp/tmpmpz81dwu_test.go:46:18: undefined: reverse

    /tmp/tmpmpz81dwu_test.go:49:12: cannot use reverseArr (variable of type []int)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    var result []string\n    for _, number := range arr {\n\
    \        if number > 9 {\n            continue\n        }\n        result := append(result,\
    \ by_length([]int{number}))\n    }\n    sort.Ints(result)\n    for _, number :=\
    \ range arr {\n        if number == 1 {\n            continue\n        }\n   \
    \     if number == 8 {\n            result = append(result, \"Nine\")\n      \
    \      continue\n        }\n        if number == 0 {\n            continue\n \
    \       }\n        for _, name := range by_length_test {\n            if number\
    \ == name {\n                result = append(result, name)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nvar by_length_test =\
    \ []int{1, 4, 2, 6, 5, 3, 7, 8, 0}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqleymxrb_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpqleymxrb_test.go:30:9: result declared but not used\n\
    /tmp/tmpqleymxrb_test.go:30:34: cannot use by_length([]int{\u2026}) (value of\
    \ type []string) as type string in argument to append\n/tmp/tmpqleymxrb_test.go:32:5:\
    \ undefined: sort\n/tmp/tmpqleymxrb_test.go:46:41: cannot use name (variable of\
    \ type int) as type string in argument to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) < 1 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    sort.Sort(sort.Reverse(arr))\n\n    result :=\
    \ make([]string, len(arr))\n    for i, i := range arr {\n        result[i] = \"\
    One\"\n        if i == 0 {\n            continue\n        }\n        digitVal\
    \ := arr[i-1]\n        switch digitVal {\n        case 1, 5, 9:\n            result[i]\
    \ = \"Two\"\n        case 2, 6, 10:\n            result[i] = \"Three\"\n     \
    \   case 3, 7, 11:\n            result[i] = \"Four\"\n        case 4, 8, 12:\n\
    \            result[i] = \"Five\"\n        case 6, 10, 14:\n            result[i]\
    \ = \"Six\"\n        case 7, 11, 15:\n            result[i] = \"Seven\"\n    \
    \    case 8, 12, 16:\n            result[i] = \"Eight\"\n        case 10, 14,\
    \ 20:\n            result[i] = \"Nine\"\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc182biuy_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmpc182biuy_test.go:25:5: undefined:\
    \ sort\n/tmp/tmpc182biuy_test.go:28:12: i redeclared in this block\n\t/tmp/tmpc182biuy_test.go:28:9:\
    \ other declaration of i\n/tmp/tmpc182biuy_test.go:43:14: duplicate case 6 (constant\
    \ of type int) in expression switch\n\t/tmp/tmpc182biuy_test.go:37:17: previous\
    \ case\n/tmp/tmpc182biuy_test.go:43:17: duplicate case 10 (constant of type int)\
    \ in expression switch\n\t/tmp/tmpc182biuy_test.go:37:20: previous case\n/tmp/tmpc182biuy_test.go:45:14:\
    \ duplicate case 7 (constant of type int) in expression switch\n\t/tmp/tmpc182biuy_test.go:39:17:\
    \ previous case\n/tmp/tmpc182biuy_test.go:45:17: duplicate case 11 (constant of\
    \ type int) in expression switch\n\t/tmp/tmpc182biuy_test.go:39:20: previous case\n\
    /tmp/tmpc182biuy_test.go:47:14: duplicate case 8 (constant of type int) in expression\
    \ switch\n\t/tmp/tmpc182biuy_test.go:41:17: previous case\n/tmp/tmpc182biuy_test.go:47:17:\
    \ duplicate case 12 (constant of type int) in expression switch\n\t/tmp/tmpc182biuy_test.go:41:20:\
    \ previous case\n/tmp/tmpc182biuy_test.go:49:14: duplicate case 10 (constant of\
    \ type int) in expression switch\n\t/tmp/tmpc182biuy_test.go:37:20: previous case\n\
    /tmp/tmpc182biuy_test.go:49:14: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) < 1 {\n        return []string{}\n    }\n\
    \    // Reverse the list:\n    r := arr[len(arr)-1]\n    for i := len(arr) - 1;\
    \ i > 0; i-- {\n        if arr[i] > r {\n            arr[i], arr[i-1] = arr[i-1],\
    \ arr[i]\n        }\n    }\n    l := []string{}\n    for _, i := range arr {\n\
    \        if i < 10 {\n            l = append(l, fmt.Sprintf(\"%d%s\", i, str[7-i]))\n\
    \        }\n    }\n    return l\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuxcpuxmw_test.go:34:50: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Check input parameters\n    if len(arr) == 0 {\n \
    \       return []string{}\n    }\n    // sort them by length\n    arr := make([]int,\
    \ 0, len(arr))\n    for _, num := range arr {\n        if num < 1 || num > 9 {\n\
    \            continue\n        }\n        arr = append(arr, num)\n    }\n    //\
    \ Reverse the order\n    arr := append(arr, 9...)\n    arr[len(arr)-1], arr[len(arr)-2]\
    \ = arr[len(arr)-2], arr[len(arr)-1]\n    // Replace each digit\n    result :=\
    \ make([]string, 0, len(arr))\n    for i, num := range arr {\n        result +=\
    \ []string{\n            \"One\",\n            \"Two\",\n            \"Three\"\
    ,\n            \"Four\",\n            \"Five\",\n            \"Six\",\n      \
    \      \"Seven\",\n            \"Eight\",\n            \"Nine\",\n        }[num-0]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1phxwly_test.go:34:27: expected selector or type assertion, found ''.''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var sorted = make([]int, len(arr))\n    var names = make([]string,\
    \ len(arr))\n    copy(sorted, arr)\n    reverse(sorted)\n    for i, e := range\
    \ sorted {\n        if e == 0 || e > 9 {\n            continue\n        }\n  \
    \      numberIndex := e-1\n        names[i] = names[numberIndex]\n    }\n    return\
    \ names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsk1v1il_test.go:24:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return make([]string, 0)\n\
    \    }\n    // Sort the numbers\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    arr := reverseArray(arr)\n    result := make([]string, len(arr))\n    for\
    \ idx, element := range arr {\n        result[idx] = names[element]\n    }\n \
    \   return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6wgmvtz_test.go:25:5: undefined: sort

    /tmp/tmps6wgmvtz_test.go:26:9: no new variables on left side of :=

    /tmp/tmps6wgmvtz_test.go:26:12: undefined: reverseArray

    /tmp/tmps6wgmvtz_test.go:29:23: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    \n    if len(arr) == 0 {\n    \
    \    return nil\n    }\n    \n    first := arr[0]\n    res = []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for _, v := range arr {\n        if v > 9 {\n            return nil\n \
    \       }\n        if v > 9 {\n            continue\n        }\n        if v >\
    \ 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if v > 9 {\n            continue\n\
    \        }\n        if v > 9 {\n            continue\n        }\n        if v\
    \ > 9 {\n            continue\n        }\n        if \nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyxgg75e_test.go:166:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var ret []string\n    for _, v := range arr {\n     \
    \   for i := 0; i < 10; i++ {\n            if v == i+1 {\n                ret\
    \ = append(ret, fmt.Sprintf(\"%v\", i))\n                break\n            }\n\
    \        }\n    }\n    if ret == nil {\n        return []string{}\n    }\n   \
    \ for _, v := range ret {\n        ret[len(ret)-1] = v\n    }\n    return ret\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpprqkgsoa_test.go:56: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[1 0 0 3 4 7 1 1]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpprqkgsoa_test.go:56: expected '[One]', got '[0]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpprqkgsoa_test.go:56: expected\
    \ '[Three Two One]', got '[0 2 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpprqkgsoa_test.go:56: expected '[Nine Eight Four]', got '[8 3 3]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    switch len(arr)\
    \ {\n    case 0:\n        return result\n    case 1:\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[0]))\n        return result\n    case 2:\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[1]))\n        return result\n    case 3:\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[1]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[2]))\n        return result\n    case 4:\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[1]))\n        result := append(result, fmt.Sprintf(\"%d\", arr[2]))\n\
    \        result := append(result, fmt.Sprintf(\"%d\", arr[3]))\n        return\
    \ result\n    case 5:\n        result := append(result, fmt.Sprintf(\"%d\", arr[0]))\n\
    \        result := append(result, fmt.Sprintf(\"%d\", arr[1]))\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[2]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[3]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[4]))\n        return result\n    case 6:\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[1]))\n        result := append(result, fmt.Sprintf(\"%d\", arr[2]))\n\
    \        result := append(result, fmt.Sprintf(\"%d\", arr[3]))\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[4]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[5]))\n        return result\n    case 7:\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[1]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[2]))\n        result := append(result, fmt.Sprintf(\"%d\", arr[3]))\n\
    \        result := append(result, fmt.Sprintf(\"%d\", arr[4]))\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[5]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[6]))\n        return result\n    case 8:\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[0]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[1]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[2]))\n        result := append(result, fmt.Sprintf(\"%d\", arr[3]))\n\
    \        result := append(result, fmt.Sprintf(\"%d\", arr[4]))\n        result\
    \ := append(result, fmt.Sprintf(\"%d\", arr[5]))\n        result := append(result,\
    \ fmt.Sprintf(\"%d\", arr[6]))\n        result := append(result, fmt.Sprintf(\"\
    %d\", arr[7]))\n        return result\n    case 9:\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmple838jp6_test.go:78:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    var i int\n    for i < len(arr) {\n        arr2[i]\
    \ = arr[i]\n        i++\n    }\n    // sort by length descending\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \n    var out = make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        out[i] = map[int]string{\n            1: \"\",\n            2: \"\",\n\
    \            3: \"\",\n            4: \"\",\n            5: \"\",\n          \
    \  6: \"\",\n            7: \"\",\n            8: \"\",\n            9: \"\",\n\
    \        }[arr2[i]]\n    }\n    // reverse the output\n    reverse := make([]int,\
    \ len(out))\n    for i := 0; i < len(out); i++ {\n        reverse[i] = out[len(out)-1-i]\n\
    \    }\n    for i := 0; i < len(out); i++ {\n        out[i] = reverse[out[i]]\n\
    \    }\n    return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzz_syv1y_test.go:31:5: undefined: sort

    /tmp/tmpzz_syv1y_test.go:50:22: cannot use out[len(out) - 1 - i] (variable of
    type string) as type int in assignment

    /tmp/tmpzz_syv1y_test.go:53:18: cannot use reverse[out[i]] (variable of type int)
    as type string in assignment

    /tmp/tmpzz_syv1y_test.go:53:26: invalid argument: index out[i] (variable of type
    string) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n\n    for _, value := range arr {\n\
    \        if value < 1 || value > 9 {\n            continue\n        }\n\n    \
    \    res = []string{}\n        for i := 9; i > value; i-- {\n            res =\
    \ append(res, names[i-1])\n        }\n\n        break\n    }\n\n    return res\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7sgcxqqh_test.go:30:31: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sorted_arr := []int{}\n    for _, item := range arr {\n\
    \        if item < 1 || item > 9 {\n            continue\n        }\n        if\
    \ sorted_arr == nil {\n            sorted_arr = append(sorted_arr, item)\n   \
    \     } else {\n            sorted_arr = append(sorted_arr, item)\n          \
    \  sorted_arr = append(sorted_arr, sorted_arr[len(sorted_arr)-1])\n        }\n\
    \    }\n    if sorted_arr == nil {\n        return nil\n    }\n\n    reversed_arr\
    \ := make([]int, len(sorted_arr))\n    for index, value := range sorted_arr {\n\
    \        reversed_arr[index] = value\n    }\n    reversed_arr[len(reversed_arr)-1]\
    \ = len(reversed_arr)\n\n    var res []string\n    for _, num := range reversed_arr\
    \ {\n        if num < 10 {\n            res = append(res, fmt.Sprintf(\"One\"\
    ))\n        } else if num < 20 {\n            res = append(res, fmt.Sprintf(\"\
    Two\"))\n        } else if num < 30 {\n            res = append(res, fmt.Sprintf(\"\
    Three\"))\n        } else if num < 40 {\n            res = append(res, fmt.Sprintf(\"\
    Four\"))\n        } else if num < 50 {\n            res = append(res, fmt.Sprintf(\"\
    Five\"))\n        } else if num < 60 {\n            res = append(res, fmt.Sprintf(\"\
    Six\"))\n        } else if num < 70 {\n            res = append(res, fmt.Sprintf(\"\
    Seven\"))\n        } else if num < 80 {\n            res = append(res, fmt.Sprintf(\"\
    Eight\"))\n        } else if num < 90 {\n            res = append(res, fmt.Sprintf(\"\
    Nine\"))\n        } else {\n            res = append(res, fmt.Sprintf(\"None\"\
    ))\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc0000f5d88, 0x0, 0x0?})\n\t\
    /tmp/tmpmqq5rmjz_test.go:41 +0x90e\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmpmqq5rmjz_test.go:78 +0x102\ntesting.tRunner(0xc0001924e0, 0x529048)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // The idea is to sort the list, then reverse the list,\
    \ then replace the digits by their\n    // corresponding names from \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\n    // \"\
    Nine\".\n    // For example, the sorted list is:\n    // >>> [1, 1, 1, 2, 3, 3,\
    \ 4, 4, 5, 5, 6, 6]\n    // The sorted list is then:\n    // >>> [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]\n    // And then replace each digit by its\
    \ corresponding name from \"One\", \"Two\", \"Three\",\n    // \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\":\n    // >>> [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var names\
    \ []string = []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n    if len(arr) == 0 {\n        return names\n\
    \    }\n    // Sort the list:\n    sort.Slice(arr[:], func(i, j int) bool {\n\
    \        return arr[i] < arr[j]\n    })\n    // Reverse the list:\n    for i :=\
    \ 0; i < len(arr)/2; i++ {\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1],\
    \ arr[i]\n    }\n    // Now replace the digits:\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr[i] = names[arr[i]]\n    }\n    return arr\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\nMy solution:\n<code>\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq3so29yp_test.go:49:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    length := len(arr)\n    arr := reverse(arr)\n\n    for i := range arr {\n\
    \        if arr[i] > 9 {\n            return []string{}\n        }\n\n       \
    \ arr[i] = names[arr[i]]\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbo8j3k5__test.go:25:5: length declared but not used

    /tmp/tmpbo8j3k5__test.go:26:9: no new variables on left side of :=

    /tmp/tmpbo8j3k5__test.go:26:12: undefined: reverse

    /tmp/tmpbo8j3k5__test.go:33:18: undefined: names

    /tmp/tmpbo8j3k5__test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    n := 0\n    for i := range arr {\n        if arr[i] >=\
    \ 1 && arr[i] <= 9 {\n            arr[i] = n + arr[i] - 1\n            n += arr[i]\
    \ - 1\n        }\n    }\n    var result []string\n    for i := 0; i < n; i++ {\n\
    \        result = append(result, strconv.Itoa(i + 1))\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        result = append(result, strconv.Itoa(i + 1))\n  \
    \  }\n    for i := 0; i < n; i++ {\n        result = append(result, names[arr[i]])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz227jhoa_test.go:30:33: undefined: strconv

    /tmp/tmpz227jhoa_test.go:33:33: undefined: strconv

    /tmp/tmpz227jhoa_test.go:36:33: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil || len(arr) == 0 {\n        return nil\n\
    \    }\n    var result []string\n    length := len(arr[0])\n    i := 0\n    for\
    \ length >= 0 {\n        length /= 10\n        result[i] = names[arr[i]%10]\n\
    \        i++\n    }\n    reverse(result)\n    for i, value := range arr {\n  \
    \      result[i] = fmt.Sprintf(\"%d\", value)\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_nxyxrk_test.go:25:19: invalid argument: arr[0] (variable of type int)
    for len

    /tmp/tmp4_nxyxrk_test.go:29:21: undefined: names

    /tmp/tmp4_nxyxrk_test.go:32:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr.Len() == 0 {\n        return []string{}\n    }\n\
    \    // first sort by length, from long to short\n    sort.Ints(arr)\n    \n \
    \   // reverse the list\n    sort.Reverse(arr)\n\n    // convert each int to a\
    \ string\n    result := make([]string, arr.Len())\n    for i := 0; i < arr.Len();\
    \ i++ {\n        number := arr[i]\n        name := fmt.Sprintf(\"%d\", number)\n\
    \        result[i] = name\n    }\n    return result\n}\n`\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49bbmu52_test.go:39:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075442
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := []int{}\n    for _, v := range arr {\n      \
    \  if v < 1 || v > 9 {\n            continue\n        }\n        arr2 = append(arr2,\
    \ v)\n    }\n    sort.Ints(arr2)\n    rev := make([]int, 0, len(arr2))\n    for\
    \ _, v := range arr2 {\n        rev = append(rev, v)\n    }\n    rev = append(rev,\
    \ reverse(rev)...)\n    output := make([]string, 0, len(rev))\n    for _, v :=\
    \ range rev {\n        output = append(output, ones[v]...)\n    }\n    return\
    \ output\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyh2e4q0_test.go:28:5: undefined: sort

    /tmp/tmppyh2e4q0_test.go:33:23: undefined: reverse

    /tmp/tmppyh2e4q0_test.go:36:33: undefined: ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    min := 100000000\n    max := -min\n    var result []string\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] < min || arr[i] > max {\n        \
    \    continue\n        }\n        if arr[i] == 0 {\n            result = []string{\"\
    Zero\"}\n        } else {\n            if arr[i] < 10 && arr[i] > 0 {\n      \
    \          result = []string{\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"One\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Two\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Three\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Four\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Five\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Six\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Seven\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Eight\"]),\n                    fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 1)%10) + strings[\"Nine\"]),\n                }\n            } else {\n  \
    \              if arr[i] < 100 && arr[i] > 9 {\n                    result = []string{\n\
    \                        fmt.Sprintf(\"%c\", ((arr[i] - 10)%10) + strings[\"Ten\"\
    ]),\n                        fmt.Sprintf(\"%c\", ((arr[i] - 10)%10) + strings[\"\
    Eleven\"]),\n                        fmt.Sprintf(\"%c\", ((arr[i] - 10)%10) +\
    \ strings[\"Twelve\"]),\n                        fmt.Sprintf(\"%c\", ((arr[i]\
    \ - 10)%10) + strings[\"Thirteen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Fourteen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Fifteen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Sixteen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Seventeen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Eighteen\"]),\n                        fmt.Sprintf(\"\
    %c\", ((arr[i] - 10)%10) + strings[\"Nineteen\"]),\n                    }\n  \
    \              } else {\n                    \nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyevv648e_test.go:62:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Sort list by length.\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \n    // Set initial variables.\n    s := []string{}\n    current := 0\n    prev\
    \ := 0\n    size := len(arr)\n\n    // Loop through the list until we have all\
    \ the digits, storing them in s.\n    for current < size {\n        digit, current\
    \ := arr[current], current+1\n        switch digit {\n        case 0:\n      \
    \      current = digit\n            prev = digit\n        case 1:\n          \
    \  current = digit\n            prev = digit\n            s = append(s, \"One\"\
    )\n        case 2:\n            current = digit\n            prev = digit\n  \
    \          s = append(s, \"Two\")\n        case 3:\n            current = digit\n\
    \            prev = digit\n            s = append(s, \"Three\")\n        case\
    \ 4:\n            current = digit\n            prev = digit\n            s = append(s,\
    \ \"Four\")\n        case 5:\n            current = digit\n            prev =\
    \ digit\n            s = append(s, \"Five\")\n        case 6:\n            current\
    \ = digit\n            prev = digit\n            s = append(s, \"Six\")\n    \
    \    case 7:\n            current = digit\n            prev = digit\n        \
    \    s = append(s, \"Seven\")\n        case 8:\n            current = digit\n\
    \            prev = digit\n            s = append(s, \"Eight\")\n        case\
    \ 9:\n            current = digit\n            prev = digit\n            s = append(s,\
    \ \"Nine\")\n        default:\n            if prev == 1 {\n                s =\
    \ append(s, \"One\")\n            }\n            if prev == 2 {\n            \
    \    s = append(s, \"Two\")\n            }\n            if prev == 3 {\n     \
    \           s = append(s, \"Three\")\n            }\n            if prev == 4\
    \ {\n                s = append(s, \"Four\")\n            }\n            if prev\
    \ == 5 {\n                s = append(s, \"Five\")\n            }\n           \
    \ if prev == 6 {\n                s = append(s, \"Six\")\n            }\n    \
    \        if prev == 7 {\n                s = append(s, \"Seven\")\n          \
    \  }\n            if prev == 8 {\n                s = append(s, \"Eight\")\n \
    \           }\n            if prev == 9 {\n                s = append(s, \"Nine\"\
    )\n            }\n            current = digit\n            prev = digit\n    \
    \    }\n    }\n\n    // Return the sorted list.\n    return s\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4uvgo4v4_test.go:22:5: undefined: sort

    /tmp/tmp4uvgo4v4_test.go:32:16: current declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    s := make([]string, len(arr))\n    for i, val := range\
    \ arr {\n        if val < 0 || val > 9 {\n            continue\n        }\n  \
    \      s[val] = name[val]\n    }\n    if len(s) == 0 {\n        return []string{}\n\
    \    }\n    reverse(s[len(s)-1:])\n    for _, v := range s {\n        if v ==\
    \ \"One\" {\n            s[len(s)-1] = \"Zero\"\n            s[len(s)-2] = \"\
    One\"\n        } else if v == \"Two\" {\n            s[len(s)-1] = \"One\"\n \
    \           s[len(s)-2] = \"Two\"\n        } else if v == \"Three\" {\n      \
    \      s[len(s)-1] = \"Two\"\n            s[len(s)-2] = \"Three\"\n        } else\
    \ if v == \"Four\" {\n            s[len(s)-1] = \"Three\"\n            s[len(s)-2]\
    \ = \"Four\"\n        } else if v == \"Five\" {\n            s[len(s)-1] = \"\
    Four\"\n            s[len(s)-2] = \"Five\"\n        } else if v == \"Six\" {\n\
    \            s[len(s)-1] = \"Five\"\n            s[len(s)-2] = \"Six\"\n     \
    \   } else if v == \"Seven\" {\n            s[len(s)-1] = \"Six\"\n          \
    \  s[len(s)-2] = \"Seven\"\n        } else if v == \"Eight\" {\n            s[len(s)-1]\
    \ = \"Seven\"\n            s[len(s)-2] = \"Eight\"\n        } else if v == \"\
    Nine\" {\n            s[len(s)-1] = \"Eight\"\n            s[len(s)-2] = \"Nine\"\
    \n        }\n    }\n    return s\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1o2tjavg_test.go:22:9: i declared but not used

    /tmp/tmp1o2tjavg_test.go:26:18: undefined: name

    /tmp/tmp1o2tjavg_test.go:31:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   \n    if len(arr) == 0 {\n        return []string{}\n    }\n\n    sort.Ints(arr)\n\
    \n    // remove any non-integers\n    sort.Sort(byLength(arr))\n    return sort.Reverse(byLength(arr))\n\
    }\n\ntype byLength []int\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu0e2ozu5_test.go:29:5: undefined: sort

    /tmp/tmpu0e2ozu5_test.go:32:5: undefined: sort

    /tmp/tmpu0e2ozu5_test.go:33:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(arr2)\n    for i := 0;\
    \ i < len(arr2); i++ {\n        if arr2[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr2[i] <= 99 {\n            arr2[i] = \"Two\"\n        }\
    \ else if arr2[i] <= 999 {\n            arr2[i] = \"Three\"\n        } else if\
    \ arr2[i] <= 9999 {\n            arr2[i] = \"Four\"\n        } else if arr2[i]\
    \ <= 999999 {\n            arr2[i] = \"Five\"\n        } else if arr2[i] <= 999999999\
    \ {\n            arr2[i] = \"Six\"\n        } else if arr2[i] <= 9999999999 {\n\
    \            arr2[i] = \"Seven\"\n        } else if arr2[i] <= 99999999999 {\n\
    \            arr2[i] = \"Eight\"\n        } else if arr2[i] <= 999999999 {\n \
    \           arr2[i] = \"Nine\"\n        }\n    }\n    arr3 = make([]string, len(arr2))\n\
    \    for i := 0; i < len(arr2); i++ {\n        arr3[i] = arr2[i]\n    }\n    return\
    \ arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1papd29_test.go:25:5: undefined: sort

    /tmp/tmpk1papd29_test.go:28:23: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:30:23: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:32:23: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:34:23: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:36:23: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:38:23: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:40:23: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:42:23: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:44:23: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpk1papd29_test.go:44:23: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   n := len(arr)\n    if n < 1 {\n        return []string{}\n    }\n    var result\
    \ []string\n    switch {\n    case arr[0] < 0 || arr[0] > 9:\n        return nil\n\
    \    case arr[0] < 1:\n        result = append(result, \"One\")\n    case arr[0]\
    \ == 1:\n        result = append(result, \"Two\")\n    case arr[0] == 2:\n   \
    \     result = append(result, \"Three\")\n    case arr[0] == 3:\n        result\
    \ = append(result, \"Four\")\n    case arr[0] == 4:\n        result = append(result,\
    \ \"Five\")\n    case arr[0] == 5:\n        result = append(result, \"Six\")\n\
    \    case arr[0] == 6:\n        result = append(result, \"Seven\")\n    case arr[0]\
    \ == 7:\n        result = append(result, \"Eight\")\n    case arr[0] == 8:\n \
    \       result = append(result, \"Nine\")\n    default:\n        t := arr[0 :\
    \ n-1]\n        result = append(result, fmt.Sprintf(\"%v\", t), \"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")[arr[0]]\n    }\n    switch len(arr) {\n    case\
    \ 1:\n        return result\n    case 2:\n        return append(result, arr[1\
    \ : n]...)\n    default:\n        r := len(result) - 1\n        t := arr[0 : n-1]\n\
    \        switch r {\n        case 1:\n            return append(result, fmt.Sprintf(\"\
    %v\", t), \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"\
    , \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")[arr[0]], arr[1 : n]...\n\
    \        case 2:\n            return append(result, fmt.Sprintf(\"%v\", t), \"\
    Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\")[arr[0]], arr[1 : n]...\n        default:\n            l := len(result)\
    \ / 2\n            switch l {\n            case 1:\n                return append(result,\
    \ fmt.Sprintf(\"%v\", t), \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\")[arr[0]], arr[1 : n]...\n            case 2:\n      \
    \          return append(result, fmt.Sprintf(\"%v\", t), \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\")[arr[0]], arr[1 : n]...\n            default:\n     \
    \           return append(result, fmt.Sprintf(\"%v\", t), fmt.Sprintf(\"%v\",\
    \ result[l : 2*l]), fmt.Sprintf(\"%v\", result[2*\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyc09k6vx_test.go:64:186: expected '';'', found ''...''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075443
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    numbers := make([]string, len(arr))\n    indices := make([]int,\
    \ len(arr))\n    for i, n := range arr {\n        numbers[i] = names[n]\n    \
    \    indices[i] = n\n    }\n\n    // Sort ascending by length\n    sort.Ints(indices)\n\
    \n    // Reverse the list from shortest to longest\n    for i := 0; i < len(indices)-1;\
    \ i++ {\n        numbers[indices[i]] = names[numbers[indices[i]]]\n    }\n\n \
    \   return numbers\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawh_mk2__test.go:24:22: undefined: names

    /tmp/tmpawh_mk2__test.go:29:5: undefined: sort

    /tmp/tmpawh_mk2__test.go:33:31: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) <= 0 {\n        return nil\n    }\n\n   \
    \ temp := make([]string, len(arr))\n    for idx, value := range arr {\n      \
    \  if value < 1 || value > 9 {\n            continue\n        }\n\n        for\
    \ i := len(temp) - 1; i >= 0; i-- {\n            if temp[i] >= 10 {\n        \
    \        temp[i] = fmt.Sprintf(\"%d\", temp[i] - 10)\n            } else {\n \
    \               break\n            }\n        }\n        temp[idx] = fmt.Sprintf(\"\
    %d\", value)\n    }\n\n    return temp\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_04i6qjr_test.go:32:27: invalid operation: temp[i] >= 10 (mismatched types
    string and untyped int)

    /tmp/tmp_04i6qjr_test.go:33:45: invalid operation: temp[i] - 10 (mismatched types
    string and untyped int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < 1 && arr[i] > 9 {\n            continue\n       \
    \ }\n        // get the index of this number in the string\n        var index\
    \ = -1\n        for j, s := range arr {\n            if s == i {\n           \
    \     index = j\n                break\n            }\n        }\n        if index\
    \ < 0 {\n            result = append(result, fmt.Sprintf(\"%d\", arr[i]))\n  \
    \          continue\n        }\n        // get the string corresponding to the\
    \ index\n        idx := fmt.Sprintf(\"%d\", index)\n        result = append(result,\
    \ map[int]string{\n            1: \"One\",\n            2: \"Two\",\n        \
    \    3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n     \
    \       6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n  \
    \          9: \"Nine\",\n        }[idx])\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81slizqa_test.go:51:11: cannot use idx (variable of type string) as type
    int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) < 1 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    output := make([]string, len(arr))\n    for index, num\
    \ := range arr {\n        if num > 0 {\n            output[index] = names[num]\n\
    \        }\n    }\n    reverse(output)\n    return output\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszrpf8yq_test.go:24:5: undefined: sort

    /tmp/tmpszrpf8yq_test.go:28:29: undefined: names

    /tmp/tmpszrpf8yq_test.go:31:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // get the min and max value of the array\n    min, max := 0, len(arr)-1\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = i\n        } else if arr[i] < min {\n            min = i\n        }\n    }\n\
    \    // create new string array\n    result := make([]string, len(arr)+1)\n  \
    \  // add first value\n    result[0] = names[arr[0]]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if i%9 == 0 {\n            result[max] = result[max] + \" \"\
    \ + names[arr[i]]\n        } else {\n            result[max] = names[arr[i]]\n\
    \        }\n    }\n    // add last value\n    if max >= 0 {\n        result[max]\
    \ = names[arr[max]]\n    } else {\n        result[max] = \"\"\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez00uq5h_test.go:36:17: undefined: names

    /tmp/tmpez00uq5h_test.go:39:47: undefined: names

    /tmp/tmpez00uq5h_test.go:41:27: undefined: names

    /tmp/tmpez00uq5h_test.go:46:23: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arrCopy := make([]int, len(arr))\n    copy(arrCopy, arr)\n\
    \    sort.Sort(byLen(arrCopy))\n    res := []string{}\n    switch len(arrCopy)\
    \ {\n    case 0:\n        return res\n    case 1:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\"})\n    case 2:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\", arrCopy[1]: \"Two\"})\n    case 3:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\", arrCopy[1]: \"Two\", arrCopy[2]: \"Three\"})\n    case 4:\n       \
    \ res = append(res, map[int]string{arrCopy[0]: \"One\", arrCopy[1]: \"Two\", arrCopy[2]:\
    \ \"Three\", arrCopy[3]: \"Four\"})\n    case 5:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\", arrCopy[1]: \"Two\", arrCopy[2]: \"Three\", arrCopy[3]: \"Four\", arrCopy[4]:\
    \ \"Five\"})\n    case 6:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\", arrCopy[1]: \"Two\", arrCopy[2]: \"Three\", arrCopy[3]: \"Four\", arrCopy[4]:\
    \ \"Five\", arrCopy[5]: \"Six\"})\n    case 7:\n        res = append(res, map[int]string{arrCopy[0]:\
    \ \"One\", arrCopy[1]: \"Two\", arrCopy[2]: \"Three\", arrCopy[3]: \"Four\", arrCopy[4]:\
    \ \"Five\", arrCopy[5]: \"Six\", arrCopy[6]: \"Seven\"})\n    case 8:\n      \
    \  res = append(res, map[int]string{arrCopy[0]: \"One\", arrCopy[1]: \"Two\",\
    \ arrCopy[2]: \"Three\", arrCopy[3]: \"Four\", arrCopy[4]: \"Five\", arrCopy[5]:\
    \ \"Six\", arrCopy[6]: \"Seven\", arrCopy[7]: \"Eight\"})\n    case 9:\n     \
    \   res = append(res, map[int]string{arrCopy[0]: \"One\", arrCopy[1]: \"Two\"\
    , arrCopy[2]: \"Three\", arrCopy[3]: \"Four\", arrCopy[4]: \"Five\", arrCopy[5]:\
    \ \"Six\", arrCopy[6]: \"Seven\", arrCopy[7]: \"Eight\", arrCopy[8]: \"Nine\"\
    })\n    default:\n        return arr\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv9d3j0yt_test.go:23:5:\
    \ undefined: sort\n/tmp/tmpv9d3j0yt_test.go:23:15: undefined: byLen\n/tmp/tmpv9d3j0yt_test.go:29:27:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in argument to append\n/tmp/tmpv9d3j0yt_test.go:31:27: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type string in argument to append\n/tmp/tmpv9d3j0yt_test.go:33:27:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in argument to append\n/tmp/tmpv9d3j0yt_test.go:35:27: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type string in argument to append\n/tmp/tmpv9d3j0yt_test.go:37:27:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in argument to append\n/tmp/tmpv9d3j0yt_test.go:39:27: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type string in argument to append\n/tmp/tmpv9d3j0yt_test.go:41:27:\
    \ cannot use map[int]string{\u2026} (value of type map[int]string) as type string\
    \ in argument to append\n/tmp/tmpv9d3j0yt_test.go:43:27: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type string in argument to append\n/tmp/tmpv9d3j0yt_test.go:43:27:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    l := len(arr)\n    if l == 0 {\n        return nil\n\
    \    }\n    n := l + 1\n    arr2 := make([]int, n) // arr := []int{4, 1, 4, 8,\
    \ 2, 10, 1}\n    arr2[0] = 1\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    for i := range arr2 {\n        if arr2[i] < 9 {\n            continue\n\
    \        }\n        arr2[i] -= 9\n        arr2[i+1] = arr2[i]\n    }\n    arr2[n-1]\
    \ = 1\n    for i := range arr2 {\n        arr2[i] = arr2[i]*10 + strconv.Itoa(i+1)\n\
    \    }\n    res := make([]string, l)\n    for i, v := range arr2 {\n        if\
    \ arr2[i] == 9 {\n            res[i] = \"One\"\n        }\n        if arr2[i]\
    \ == 8 {\n            res[i] = \"Two\"\n        }\n        if arr2[i] == 7 {\n\
    \            res[i] = \"Three\"\n        }\n        if arr2[i] == 6 {\n      \
    \      res[i] = \"Four\"\n        }\n        if arr2[i] == 5 {\n            res[i]\
    \ = \"Five\"\n        }\n        if arr2[i] == 4 {\n            res[i] = \"Six\"\
    \n        }\n        if arr2[i] == 3 {\n            res[i] = \"Seven\"\n     \
    \   }\n        if arr2[i] == 2 {\n            res[i] = \"Eight\"\n        }\n\
    \        if arr2[i] == 1 {\n            res[i] = \"Nine\"\n        }\n       \
    \ if arr2[i] == 0 {\n            continue\n        }\n        fmt.Println(arr2[i])\n\
    \    }\n    return res\n}\n`\n\nvar by_length_tests = []test{\n    // Test 1\n\
    \    // []int{8, 6, 4, 9, 2, 1}\n    {`\n[8, 6, 4, 9, 2, 1]\n`, []string{\"One\"\
    , \"Two\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Nine\", \"Eight\"}},\n\n\
    \    // Test 2\n    // []int{1, 1, 4, 8, 2, 10}\n    {`\n[1, 1, 4, 8, 2, 10]\n\
    `, []string{\"One\", \"One\", \"One\", \"Eight\", \"Eight\", \"Four\", \"Nine\"\
    }},\n\n    // Test 3\n    // []int{0, 0, 0}\n    {`\n[0, 0]\n`, []string{\"Zero\"\
    , \"Zero\"}},\n\n    // Test 4\n    // []int{9, 9, 9, 9, 9, 9, 9, 9}\n    {`\n\
    [9, 9, 9, 9, 9, 9, 9, 9]\n`, []string{\"Nine\", \"Nine\", \"Nine\", \"Nine\",\
    \ \"Nine\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmplkhr21uu_test.go:78:1: expected declaration,\
    \ found `\n\nvar by_length_tests = []test{\n    // Test 1\n    // []int{8, 6,\
    \ 4, 9, 2, 1}\n    {`\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, n := range arr {\n        if n<=9 {\n     \
    \       result = append(result, \"One\")\n            continue\n        }\n  \
    \      if n<=99 {\n            result = append(result, \"Two\")\n            continue\n\
    \        }\n        if n<=999 {\n            result = append(result, \"Three\"\
    )\n            continue\n        }\n        if n<=9999 {\n            result =\
    \ append(result, \"Four\")\n            continue\n        }\n        if n<=99999999\
    \ {\n            result = append(result, \"Five\")\n            continue\n   \
    \     }\n        if n<=999999999 {\n            result = append(result, \"Six\"\
    )\n            continue\n        }\n        if n<=9999999999 {\n            result\
    \ = append(result, \"Seven\")\n            continue\n        }\n        if n<=99999999999\
    \ {\n            result = append(result, \"Eight\")\n            continue\n  \
    \      }\n        if n<=999999999999 {\n            result = append(result, \"\
    Nine\")\n            continue\n        }\n    }\n    return by_length_reverse(result)\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpme5_i1cn_test.go:63:12: undefined: by_length_reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    length := len(arr)\n    if length == 0 {\n        return\
    \ []string{}\n    }\n    ints := make([]int, 0)\n    switch {\n    case length\
    \ >= 1 && length <= 9:\n        for _, v := range arr {\n            ints = append(ints,\
    \ v)\n        }\n        sort.Ints(ints)\n        for _, v := range ints[1..len(ints)-1]\
    \ {\n            arr[v] = arr[len(arr) - 1 - v]\n        }\n    case length >=\
    \ 10:\n        for _, v := range arr {\n            ints = append(ints, v)\n \
    \       }\n        sort.Ints(ints)\n        for _, v := range ints[1..9] {\n \
    \           arr[v] = arr[10]\n        }\n    }\n    return []string{\n       \
    \ fmt.Sprintf(\"%s\", arr[:]),\n    }\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57nwnh2e_test.go:40:34: expected '']'', found .9

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    var\
    \ ret []string\n    last := 0\n    for _, i := range arr {\n        if i <= 9\
    \ && i >= 1 {\n            ret = append(ret, fmt.Sprintf(\"%s%v\", name[last-i],\
    \ i))\n            last++\n        } else if i <= 9 {\n            continue\n\
    \        }\n        break\n    }\n    ret = append(ret, fmt.Sprintf(\"%s%v\",\
    \ name[last-i], arr[len(arr)-1]))\n    return ret\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubmdu_x2_test.go:28:51: undefined: name

    /tmp/tmpubmdu_x2_test.go:35:43: undefined: name

    /tmp/tmpubmdu_x2_test.go:35:53: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    m := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n \
    \   arr2 := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n     \
    \   arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n    arr3 = reverse(arr2)\n \
    \   for i := 0; i < len(arr3); i++ {\n        arr3[i] = m[arr3[i]]\n    }\n  \
    \  arr4 = arr3\n    for i := 0; i < len(arr); i++ {\n        arr4[i] = m[arr[i]]\n\
    \    }\n    return arr4\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn190u9e6_test.go:39:5: undefined: sort

    /tmp/tmpn190u9e6_test.go:40:5: undefined: arr3

    /tmp/tmpn190u9e6_test.go:40:12: undefined: reverse

    /tmp/tmpn190u9e6_test.go:41:25: undefined: arr3

    /tmp/tmpn190u9e6_test.go:42:21: undefined: arr3

    /tmp/tmpn190u9e6_test.go:44:5: undefined: arr4

    /tmp/tmpn190u9e6_test.go:44:12: undefined: arr3

    /tmp/tmpn190u9e6_test.go:46:9: undefined: arr4

    /tmp/tmpn190u9e6_test.go:48:12: undefined: arr4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    s := []string{}\n    for _, n := range arr {\n      \
    \  if n < 9 || n > 15 {\n            continue\n        }\n        s = append(s,\
    \ fmt.Sprintf(\"%s\", names[n]))\n    }\n    return s\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadkcebei_test.go:26:41: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   sorted := make([]int, len(arr))\n    copy(sorted, arr)\n    sort.Ints(sorted)\n\
    \n    rev := make([]int, len(sorted))\n    for i := range rev {\n        if i\
    \ >= 9 || i < 1 {\n            rev[i] = -1\n            continue\n        }\n\
    \        n := sorted.Pop()\n        rev[i] = n\n    }\n\n    result := []string{}\n\
    \    for _, n := range rev {\n        if n == -1 {\n            return result\n\
    \        }\n        result = append(result, name_by_index(n, len(name)))\n   \
    \ }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofvkmxs8_test.go:26:5: undefined: sort

    /tmp/tmpofvkmxs8_test.go:34:21: sorted.Pop undefined (type []int has no field
    or method Pop)

    /tmp/tmpofvkmxs8_test.go:43:33: undefined: name_by_index

    /tmp/tmpofvkmxs8_test.go:43:54: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    for _, v := range arr {\n        r := strconv.Itoa(int(v))\n        if v\
    \ > 9 {\n            r = fmt.Sprintf(\"%d%s\", v, r)\n        }\n        if v\
    \ >= 10 {\n            r = fmt.Sprintf(\"%s%s\", r, by_length_test.lookup[(v-10)%10][0])\n\
    \        }\n        if v < 1 {\n            r = \"One\"\n        }\n        arr\
    \ = append(arr, r...)\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0r457lr_test.go:24:5: undefined: sort

    /tmp/tmp_0r457lr_test.go:26:14: undefined: strconv

    /tmp/tmp_0r457lr_test.go:31:40: undefined: by_length_test

    /tmp/tmp_0r457lr_test.go:38:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // create map for all valid values\n    map := make(map[int]string)\n\
    \    // go through the original list\n    for _, num := range arr {\n        //\
    \ make sure it's not 0 or negative\n        if num > 0 {\n            // if it's\
    \ not in the map, set it as the key\n            if _, ok := map[num]; !ok {\n\
    \                map[num] = fmt.Sprintf(\"%d\", num)\n            }\n        }\n\
    \    }\n    // go through the original list again\n    arr2 := make([]string,\
    \ 0)\n    for _, num := range arr {\n        // make sure it's not 0 or negative\n\
    \        if num > 0 {\n            // get the value from map\n            val\
    \ := map[num]\n            // if key exists, append it to the list\n         \
    \   if val != nil {\n                arr2 := append(arr2, val)\n            }\
    \ else {\n                // if key does not exist, append \"Unknown\" as the\
    \ key\n                arr2 = append(arr2, \"Unknown\")\n            }\n     \
    \   }\n    }\n    // return result\n    return arr2\n}\n</code>\n<|/ a tags=go\
    \ |>\n<| c |>\nThis does not provide the expected output: `by_length([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3})` returns `[]string{\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"}` instead of the expected  `[]string{\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}`.\n<|/ c\
    \ |>\n<| a tags=go dscore=0 |>\nThe solution is as simple as this:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppmhcjfs__test.go:22:9: expected ''['', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075444
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := []string{}\n    if arr == nil || len(arr) < 1\
    \ {\n        return out\n    }\n    min := 1\n    max := 9\n    for _, v := range\
    \ arr {\n        if v < min {\n            out = append(out, fmt.Sprintf(\"%v\"\
    , min))\n            continue\n        }\n        if v > max {\n            out\
    \ = append(out, fmt.Sprintf(\"%v\", max))\n            continue\n        }\n \
    \       out := append(out, fmt.Sprintf(\"%v\", v))\n    }\n    return out\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpysjrmf4f_test.go:36:9: out declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    \n    reverse(arr)\n    reverse(arr) //patch\n    for\
    \ i := 0; i < len(arr); i++ {\n        arr[i] = name[arr[i]]\n    }\n\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm55ldrls_test.go:22:5: undefined: reverse

    /tmp/tmpm55ldrls_test.go:23:5: undefined: reverse

    /tmp/tmpm55ldrls_test.go:25:18: undefined: name

    /tmp/tmpm55ldrls_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    reverse(arr)\n\
    \    switch len(arr) {\n    case 0:\n        return nil\n    case 1:\n       \
    \ return []string{\"One\"}\n    case 2:\n        return []string{\"Two\"}\n  \
    \  case 3:\n        return []string{\"Three\"}\n    case 4:\n        return []string{\"\
    Four\"}\n    case 5:\n        return []string{\"Five\"}\n    case 6:\n       \
    \ return []string{\"Six\"}\n    case 7:\n        return []string{\"Seven\"}\n\
    \    case 8:\n        return []string{\"Eight\"}\n    case 9:\n        return\
    \ []string{\"Nine\"}\n    default:\n        out := make([]string, len(arr))\n\
    \        for i, val := range arr {\n            if val > 9 {\n               \
    \ out = append(out, by_length(arr[i:]).([]string))\n                break\n  \
    \          }\n            out[i] = by_name(val)\n        }\n        return out\n\
    \    }\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcnp2wjv_test.go:24:5: undefined: reverse

    /tmp/tmptcnp2wjv_test.go:50:35: invalid operation: by_length(arr[i:]) (value of
    type []string) is not an interface

    /tmp/tmptcnp2wjv_test.go:53:22: undefined: by_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    sort.Slice(arr,\
    \ func(i, j int) bool {\n        if arr[i] < 1 && arr[i] > 9 {\n            return\
    \ false\n        }\n        if arr[j] < 1 && arr[j] > 9 {\n            return\
    \ false\n        }\n        return arr[i] < arr[j]\n    })\n    arr := make([]string,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr[i] = \"One\"\n \
    \       if arr[i] != \"\" {\n            arr[i] = fmt.Sprintf(\"%s\", arr[i])\n\
    \        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rjs2p6a_test.go:24:5: undefined: sort

    /tmp/tmp2rjs2p6a_test.go:33:9: no new variables on left side of :=

    /tmp/tmp2rjs2p6a_test.go:33:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmp2rjs2p6a_test.go:35:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp2rjs2p6a_test.go:36:22: invalid operation: arr[i] != "" (mismatched types
    int and untyped string)

    /tmp/tmp2rjs2p6a_test.go:37:22: cannot use fmt.Sprintf("%s", arr[i]) (value of
    type string) as type int in assignment

    /tmp/tmp2rjs2p6a_test.go:40:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // First, sort the list by length:\n    var smaller_numbers = []int{}\n \
    \   for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        smaller_numbers = append(smaller_numbers, num)\n    }\n  \
    \  sort.Ints(smaller_numbers)\n    // Then, take out from the sorted list the\
    \ numbers that are not between 1 and 9:\n    upper_numbers := smaller_numbers[:len(smaller_numbers)-1]\n\
    \    // Finally, reverse the list:\n    reverse := make([]int, 0, len(upper_numbers))\n\
    \    for _, num := range upper_numbers {\n        reverse = append(reverse, 9-num)\n\
    \    }\n    // And map each digit into the corresponding name:\n    result :=\
    \ make([]string, len(reverse))\n    for i, num := range reverse {\n        result[i]\
    \ = map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\",\n                                7: \"Seven\", 8: \"Eight\", 9:\
    \ \"Nine\"}[num]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3uq5yenh_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    for _, v := range arr {\n\
    \        if v < 0 || v >= 10 {\n            continue\n        }\n        n :=\
    \ fmt.Sprintf(\"%d\", v)\n        if len(n) == 1 {\n            result := append(result,\
    \ \"One\")\n        } else if n == 2 {\n            result := append(result, \"\
    Two\")\n        } else if n == 3 {\n            result := append(result, \"Three\"\
    )\n        } else if n == 4 {\n            result := append(result, \"Four\")\n\
    \        } else if n == 5 {\n            result := append(result, \"Five\")\n\
    \        } else if n == 6 {\n            result := append(result, \"Six\")\n \
    \       } else if n == 7 {\n            result := append(result, \"Seven\")\n\
    \        } else if n == 8 {\n            result := append(result, \"Eight\")\n\
    \        } else if n == 9 {\n            result := append(result, \"Nine\")\n\
    \        } else {\n            fmt.Println(\"Invalid number in the list\")\n \
    \       }\n    }\n\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nWhat happens\
    \ if you try to sort an integer that doesn't fit in the range 0-10?\n<|/ c |>\n\
    <| c |>\nIt will work, and will sort the range 0-10. But it will replace 10 and\
    \ above to `Nine` and `Ten` and below to `One`.\n<|/ c |>\n<| c |>\nYes, but if\
    \ you have a number outside of that, it will break.\n<|/ c |>\n<| c |>\nOh! Ok,\
    \ I got it. Thanks. Updated my answer.\n<|/ c |>\n<| a tags=go |>\nIt can be easily\
    \ done using maps\n<code>\npackage main\n\nimport \"fmt\"\nimport \"strings\"\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkr0m_ugc_test.go:53:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    arr2 := append(arr2,\
    \ arr...)\n\n    sorted_arr2 := make([]int, len(arr2))\n    sorted_arr2 := append(sorted_arr2,\
    \ arr2...)\n\n    reversed_arr2 := make([]int, len(sorted_arr2))\n    reversed_arr2\
    \ := append(reversed_arr2, sorted_arr2...)\n\n    index := 0\n    result := []string{}\n\
    \    for {\n        if index < len(reversed_arr2) {\n            if reversed_arr2[index]\
    \ >= 1 && reversed_arr2[index] <= 9 {\n                result += map[string]int{\"\
    One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5, \"Six\": 6, \"Seven\"\
    : 7, \"Eight\": 8, \"Nine\": 9}[fmt.Sprint(reversed_arr2[index])]\n          \
    \  } else {\n                // do nothing\n            }\n        } else {\n\
    \            break\n        }\n        index++\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_102nww9_test.go:22:10:\
    \ no new variables on left side of :=\n/tmp/tmp_102nww9_test.go:25:17: no new\
    \ variables on left side of :=\n/tmp/tmp_102nww9_test.go:28:19: no new variables\
    \ on left side of :=\n/tmp/tmp_102nww9_test.go:35:17: invalid operation: result\
    \ += map[string]int{\u2026}[fmt.Sprint(reversed_arr2[index])] (mismatched types\
    \ []string and int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]string, len(arr))\n    intToStr := make([]string,\
    \ len(names))\n    intToStr[0] = names[0]\n\n    for i := range arr {\n      \
    \  intToStr[arr[i]] = names[i]\n    }\n\n    for i := range arr {\n        if\
    \ arr[i] < 10 {\n            arr[i] = intToStr[arr[i]]\n        }\n    }\n\n \
    \   arr := reverse(arr)\n\n    for i := range arr {\n        if arr[i] < 10 {\n\
    \            arr[i] = names[i]\n        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposwd5y9r_test.go:21:9: no new variables on left side of :=

    /tmp/tmposwd5y9r_test.go:21:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmposwd5y9r_test.go:22:36: undefined: names

    /tmp/tmposwd5y9r_test.go:23:19: undefined: names

    /tmp/tmposwd5y9r_test.go:26:28: undefined: names

    /tmp/tmposwd5y9r_test.go:31:22: cannot use intToStr[arr[i]] (variable of type
    string) as type int in assignment

    /tmp/tmposwd5y9r_test.go:35:9: no new variables on left side of :=

    /tmp/tmposwd5y9r_test.go:35:12: undefined: reverse

    /tmp/tmposwd5y9r_test.go:39:22: undefined: names

    /tmp/tmposwd5y9r_test.go:42:12: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmposwd5y9r_test.go:42:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // Sort the array.\n    sort.Ints(arr)\n\n    // If the list is smaller\
    \ than 10, return the list as it is.\n    // And if the list contains any strange\
    \ number, return only the list.\n    if len(arr) < 10 {\n        return arr\n\
    \    }\n\n    // Initialize new strings.\n    out := make([]string, len(arr))\n\
    \n    // Reverse the list in-place.\n    sort.Reverse(arr)\n    // Iterate through\
    \ the list.\n    for i := 0; i < len(arr); i++ {\n        // Replace the digit\
    \ with the corresponding name.\n        out[i] = names[arr[i]]\n    }\n    return\
    \ out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn94zr6nn_test.go:26:5: undefined: sort

    /tmp/tmpn94zr6nn_test.go:31:16: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpn94zr6nn_test.go:38:5: undefined: sort

    /tmp/tmpn94zr6nn_test.go:42:18: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var ret []string\n\n    if len(arr) == 0 {\n        return\
    \ \"\"\n    }\n    length := len(arr[0])\n    // First sort the array by length,\
    \ then sort each string within it.\n    // Since it is the shortest string first,\
    \ all strings will be sorted by length.\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    for _, num := range arr {\n        if num <= 9 {\n            ret = append(ret,\
    \ fmt.Sprintf(\"%d\", num))\n        } else {\n            ret = append(ret, strconv[num])\n\
    \        }\n    }\n    // Now revert the reversed list and return the reversed\
    \ string.\n    for i := len(ret) - 1; i > 0; i-- {\n        ret = append(ret[:i],\
    \ ret[i+1:]...)\n    }\n    return ret\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go\
    \ |>\nA simple recursive solution I came up with:\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"sort\"\n)\n\ntype IntArray []int\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbwcdusj2_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // the result will be returned back\n    result := []string{}\n\n    // initialize\
    \ all numbers to start from One\n    arr[0] = 1\n    result <- fmt.Sprintf(\"\
    One\")\n\n    // get all numbers that are greater than 9\n    max := 9\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] >= max {\n            max++\n\
    \        }\n    }\n\n    for i := 0; i < max; i++ {\n        // iterate over all\
    \ number greater than 9\n        for j := 0; j < len(arr); j++ {\n           \
    \ if arr[j] == i {\n                // put them in the result list\n         \
    \       result <- fmt.Sprintf(\"%v\", i)\n                break\n            }\n\
    \        }\n    }\n\n    // reverse the result list\n    reverse(result)\n\n \
    \   // put all \"Two\", \"Three\" ... to \"Nine\", \"Eight\" ...\n    for i, v\
    \ := range result {\n        if v == \"Two\" || v == \"Three\" {\n           \
    \ result[i] = fmt.Sprintf(\"%v\", i+2)\n        }\n    }\n\n    // add \"One\"\
    \ at the end\n    if result[0] == \"One\" {\n        result <- \"One\"\n    }\n\
    \n    // remove duplicate strings\n    result = append([]string{}, result...)\n\
    \    return removeDuplicates(result)\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqicd1vb_test.go:29:5: invalid operation: cannot send to non-channel result
    (variable of type []string)

    /tmp/tmpkqicd1vb_test.go:44:17: invalid operation: cannot send to non-channel
    result (variable of type []string)

    /tmp/tmpkqicd1vb_test.go:51:5: undefined: reverse

    /tmp/tmpkqicd1vb_test.go:62:9: invalid operation: cannot send to non-channel result
    (variable of type []string)

    /tmp/tmpkqicd1vb_test.go:67:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    switch len(arr) {\n    case 0:\n        return nil\n\
    \    case 1:\n        return []string{\"One\"}\n    case 2:\n        return []string{\"\
    Two\"}\n    case 3:\n        return []string{\"Three\"}\n    case 4:\n       \
    \ return []string{\"Four\"}\n    case 5:\n        return []string{\"Five\"}\n\
    \    case 6:\n        return []string{\"Six\"}\n    case 7:\n        return []string{\"\
    Seven\"}\n    case 8:\n        return []string{\"Eight\"}\n    case 9:\n     \
    \   return []string{\"Nine\"}\n    default:\n        var output []string\n   \
    \     n := 0\n        for _, val := range arr {\n            if n+1 == 9 {\n \
    \               n = 0\n                output = append(output, \"Nine\")\n   \
    \             continue\n            }\n            if val > n {\n            \
    \    output = append(output, fmt.Sprintf(\"%d\", val-n))\n                n =\
    \ val\n                continue\n            }\n            if val < n {\n   \
    \             output = append(output, fmt.Sprintf(\"%d\", val-n))\n          \
    \      n = val\n                continue\n            }\n        }\n        return\
    \ output\n    }\n}\n\nvar str_by_length_test = `\npackage by_length_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuui0tn1z_test.go:66:26: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    j := 0\n    n\
    \ := 0\n    for i := range arr {\n        if i < (len(arr) - 1) {\n          \
    \  if arr[i+1] < 10 {\n                result[j] = fmt.Sprintf(\"%v\", arr[i+1])\n\
    \                j++\n            } else {\n                result[n] = fmt.Sprintf(\"\
    %v\", arr[i+1])\n                n++\n            }\n        }\n    }\n    if\
    \ len(result) > 0 {\n        return append([]string{}, result...)\n    } else\
    \ {\n        return []string{}\n    }\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpeckvyzia_test.go:59: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[1 1 4 5 8 2 3 ]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpeckvyzia_test.go:59: expected '[One]', got '[55  ]'\n  \
    \  --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpeckvyzia_test.go:59:\
    \ expected '[Three Two One]', got '[-1 3 2 ]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpeckvyzia_test.go:59: expected '[Nine Eight Four]', got '[4\
    \ 8 ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n    for _, v := range arr {\n        if v < 0 || v > 9 {\n\
    \            continue\n        }\n        if v > len(arr) {\n            arr[v-1]\
    \ = arr[len(arr)-1]\n            arr[len(arr)-1] = v // switch the values\n  \
    \          sort.Ints(arr)\n            continue\n        }\n        arr[v-1] =\
    \ arr[v]\n        arr[v] = v\n    }\n    reverse(arr) // reverse the sorted arr\n\
    \    result := make([]string, len(arr))\n    for index, v := range arr {\n   \
    \     result[index] = one_digit[v % 10]\n        v /= 10\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp69w3ksof_test.go:21:5: undefined: sort

    /tmp/tmp69w3ksof_test.go:32:13: undefined: sort

    /tmp/tmp69w3ksof_test.go:38:5: undefined: reverse

    /tmp/tmp69w3ksof_test.go:41:25: undefined: one_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // If empty array return empty list\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    // For each integer, remove\
    \ it from the list\n    ints := []int{}\n    for _, i := range arr {\n       \
    \ if i <= 9 && i >= 1 {\n            ints = append(ints, i)\n        }\n    }\n\
    \    // Sort the integer list\n    sort.Ints(ints)\n\n    // Reverse the integers\
    \ list\n    sort.Ints(ints)\n\n    // Reverse the string\n    reversedString :=\
    \ []string{}\n    for _, i := range ints {\n        reversedString = append(reversedString,\
    \ get_string(i))\n    }\n    return reversedString\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjg4o1iso_test.go:34:5: undefined: sort

    /tmp/tmpjg4o1iso_test.go:37:5: undefined: sort

    /tmp/tmpjg4o1iso_test.go:42:49: undefined: get_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // sort the list between 1 and 9 inclusive\n    sort.Sort(sort.Reverse(arr))\n\
    \n    // reverse the sorted list\n    arr.reverse()\n\n    // get the corresponding\
    \ name for each number\n    str := map[int]string{1: \"One\", 2: \"Two\", 3: \"\
    Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9:\
    \ \"Nine\"}\n\n    // add each number in arr to the list\n    var list []string\n\
    \    for _, v := range arr {\n        list = append(list, str[v])\n    }\n\n \
    \   // return the list\n    return list\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjft510r6_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075445
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var strings = make([]string, 0, len(arr))\n\n    for\
    \ _, v := range arr {\n        if v > 9 {\n            strings = append(strings,\
    \ fmt.Sprintf(\"%v\", v))\n            continue\n        }\n        var i int\n\
    \        for i = v; i <= 9; i++ {\n            strings = append(strings, fmt.Sprintf(\"\
    %v\", i))\n        }\n    }\n    return strings\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpbu9zi2n8_test.go:53: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 4 5\
    \ 6 7 8 9 5 6 7 8 9 8 9 2 3 4 5 6 7 8 9 3 4 5 6 7 8 9]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpbu9zi2n8_test.go:53: expected '[One]', got '[1 2 3 4 5 6\
    \ 7 8 9 -1 0 1 2 3 4 5 6 7 8 9 55]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpbu9zi2n8_test.go:53: expected '[Three Two One]', got '[1 2 3 4 5 6\
    \ 7 8 9 -1 0 1 2 3 4 5 6 7 8 9 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9]'\n    --- FAIL:\
    \ TestBy_Length/test_num__4 (0.00s)\n        tmpbu9zi2n8_test.go:53: expected\
    \ '[Nine Eight Four]', got '[9 4 5 6 7 8 9 8 9]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075447
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var l []string\n    var temp int\n    var str string\n\
    \    for _, num := range arr {\n        if num == -1 {\n            str = fmt.Sprintf(\"\
    %v\", num)\n            l = append(l, str)\n            continue\n        }\n\
    \        if num > 9 {\n            temp = num / 10\n            str = fmt.Sprintf(\"\
    %v\", temp)\n            l = append(l, str)\n            str = fmt.Sprintf(\"\
    %v\", num % 10)\n            l = append(l, str)\n            continue\n      \
    \  }\n        str = fmt.Sprintf(\"%v\", num)\n        l = append(l, str)\n   \
    \ }\n    return l\n}\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpeqjqo6au_test.go:60: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpeqjqo6au_test.go:60: expected '[One]', got '[1 -1 5 5]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpeqjqo6au_test.go:60:\
    \ expected '[Three Two One]', got '[1 -1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpeqjqo6au_test.go:60: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    if !checkLength(arr) {\n \
    \       return result\n    }\n\n    for i := range arr {\n        if arr[i] >\
    \ 9 {\n            arr[i] = 10\n        }\n\n        if arr[i] == 1 {\n      \
    \      result = append(result, \"One\")\n        } else {\n            result\
    \ = append(result, \"Two\")\n        }\n\n        if arr[i] == 2 {\n         \
    \   result = append(result, \"Two\")\n        } else {\n            result = append(result,\
    \ \"Three\")\n        }\n\n        if arr[i] == 3 {\n            result = append(result,\
    \ \"Three\")\n        } else {\n            result = append(result, \"Four\")\n\
    \        }\n\n        if arr[i] == 4 {\n            result = append(result, \"\
    Four\")\n        } else {\n            result = append(result, \"Five\")\n   \
    \     }\n\n        if arr[i] == 5 {\n            result = append(result, \"Five\"\
    )\n        } else {\n            result = append(result, \"Six\")\n        }\n\
    \n        if arr[i] == 6 {\n            result = append(result, \"Six\")\n   \
    \     } else {\n            result = append(result, \"Seven\")\n        }\n\n\
    \        if arr[i] == 7 {\n            result = append(result, \"Seven\")\n  \
    \      } else {\n            result = append(result, \"Eight\")\n        }\n\n\
    \        if arr[i] == 8 {\n            result = append(result, \"Eight\")\n  \
    \      } else {\n            result = append(result, \"Nine\")\n        }\n\n\
    \        if arr[i] == 9 {\n            result = append(result, \"Nine\")\n   \
    \     }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohuienrb_test.go:23:9: undefined: checkLength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, i := range arr {\n \
    \       lower, upper := 1, 9\n        if i != -1 {\n            lower, upper =\
    \ i, i\n        }\n        for j := 1; j <= upper-lower+1; j <<= 1 {\n       \
    \     switch {\n            case j-lower+1 >= 10:\n                result2 :=\
    \ result[:len(result)]\n                for k := 0; k < len(result); k++ {\n \
    \                   result2[k] += \"-\" + strconv.Itoa(result[k-len(result)+1])\n\
    \                }\n                result = result2\n            case j-lower+1\
    \ <= 1:\n                result2 := result[:len(result)]\n                for\
    \ k := 0; k < len(result); k++ {\n                    result2[k] += \" \" + strconv.Itoa(result[k-len(result)+1])\n\
    \                }\n                result = result2\n            default:\n \
    \               result2 := result[:len(result)]\n                for k := 0; k\
    \ < len(result); k++ {\n                    result2[k] += strconv.Itoa(result[k-len(result)+1])\n\
    \                }\n                result = result2\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz5qsl84v_test.go:32:41: undefined: strconv

    /tmp/tmpz5qsl84v_test.go:38:41: undefined: strconv

    /tmp/tmpz5qsl84v_test.go:44:35: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var names []string\n    var lengths []int\n\n    length\
    \ := 0\n    for i, value := range arr {\n        if 0 < value && value <= 9 {\n\
    \            length++\n            if length == 1 {\n                names = append(names,\
    \ fmt.Sprintf(\"One\"))\n            } else if length == 2 && value == 1 {\n \
    \               names = append(names, fmt.Sprintf(\"Two\"))\n            } else\
    \ if length == 3 && value == 2 {\n                names = append(names, fmt.Sprintf(\"\
    Three\"))\n            } else if length == 4 && value == 3 {\n               \
    \ names = append(names, fmt.Sprintf(\"Four\"))\n            } else if length ==\
    \ 5 && value == 4 {\n                names = append(names, fmt.Sprintf(\"Five\"\
    ))\n            } else if length == 6 && value == 5 {\n                names =\
    \ append(names, fmt.Sprintf(\"Six\"))\n            } else if length == 7 && value\
    \ == 6 {\n                names = append(names, fmt.Sprintf(\"Seven\"))\n    \
    \        } else if length == 8 && value == 7 {\n                names = append(names,\
    \ fmt.Sprintf(\"Eight\"))\n            } else if length == 9 && value == 8 {\n\
    \                names = append(names, fmt.Sprintf(\"Nine\"))\n            }\n\
    \        }\n        lengths = append(lengths, length)\n    }\n\n    if length\
    \ == 0 {\n        return names\n    }\n\n    // Reverse the list\n    sort.Slice(lengths,\
    \ func(i, j int) bool {\n        return lengths[i] < lengths[j]\n    })\n\n  \
    \  for _, length := range lengths {\n        if length == 0 {\n            continue\n\
    \        }\n        if length == 1 {\n            names = append(names, fmt.Sprintf(\"\
    One\"))\n            continue\n        }\n        if length == 2 && arr[0] ==\
    \ 1 {\n            names = append(names, fmt.Sprintf(\"Two\"))\n            continue\n\
    \        }\n        if length == 3 && arr[0] == 2 {\n            names = append(names,\
    \ fmt.Sprintf(\"Three\"))\n            continue\n        }\n        if length\
    \ == 4 && arr[0] == 3 {\n            names = append(names, fmt.Sprintf(\"Four\"\
    ))\n            continue\n        }\n        if length == 5 && arr[0] == 4 {\n\
    \            names = append(names, fmt.Sprintf(\"Five\"))\n            continue\n\
    \        }\n        if length == 6 && arr[0] == 5 {\n            names = append(names,\
    \ fmt.Sprintf(\"Six\"))\n            continue\n        }\n        if length ==\
    \ 7 && arr[0] == 6 {\n            names = append(names, fmt.Sprintf(\"Seven\"\
    ))\n            continue\n        }\n        if length == 8 && arr[0] == 7 {\n\
    \            names = append(names, fmt.Sprintf(\"Eight\"))\n            continue\n\
    \        }\n        if length == 9 && arr[0] == 8 {\n            names = append(names,\
    \ fmt.Sprintf(\"Nine\"))\n            continue\n        }\n    }\n\n    return\
    \ names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiifwomhj_test.go:25:9: i declared but not used

    /tmp/tmpiifwomhj_test.go:56:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var ret []string\n    if len(arr) == 0 {\n        return\
    \ nil\n    }\n    for _, value := range arr {\n        if 1 <= value && value\
    \ <= 9 {\n            ret = []string{fmt.Sprintf(\"%s\", value)}\n           \
    \ continue\n        }\n        if value == 10 {\n            ret = []string{\"\
    Ten\"}\n            continue\n        }\n        if value == 11 {\n          \
    \  ret = []string{\"Eleven\"}\n            continue\n        }\n        if value\
    \ == 12 {\n            ret = []string{\"Twelve\"}\n            continue\n    \
    \    }\n        if value == 13 {\n            ret = []string{\"Thirteen\"}\n \
    \           continue\n        }\n        if value == 14 {\n            ret = []string{\"\
    Fourteen\"}\n            continue\n        }\n        if value == 15 {\n     \
    \       ret = []string{\"Fifteen\"}\n            continue\n        }\n       \
    \ if value == 16 {\n            ret = []string{\"Sixteen\"}\n            continue\n\
    \        }\n        if value == 17 {\n            ret = []string{\"Seventeen\"\
    }\n            continue\n        }\n        if value == 18 {\n            ret\
    \ = []string{\"Eighteen\"}\n            continue\n        }\n        if value\
    \ == 19 {\n            ret = []string{\"Nineteen\"}\n            continue\n  \
    \      }\n        if value == 20 {\n            ret = []string{\"Twenty\"}\n \
    \           continue\n        }\n        if value == 21 {\n            ret = []string{\"\
    Twenty-one\"}\n            continue\n        }\n        if value == 22 {\n   \
    \         ret = []string{\"Twenty-two\"}\n            continue\n        }\n  \
    \      if value == 23 {\n            ret = []string{\"Twenty-three\"}\n      \
    \      continue\n        }\n        if value == 24 {\n            ret = []string{\"\
    Twenty-four\"}\n            continue\n        }\n        if value == 25 {\n  \
    \          ret = []string{\"Twenty-five\"}\n            continue\n        }\n\
    \        if value == 26 {\n            ret = []string{\"Twenty-six\"}\n      \
    \      continue\n        }\n        if value == 27 {\n            ret = []string{\"\
    Twenty-seven\"}\n            continue\n        }\n        if value == 28 {\n \
    \           ret = []string{\"Twenty-eight\"}\n            continue\n        }\n\
    \        if value == 29 {\n            ret = []string{\"Twenty-nine\"}\n     \
    \       continue\n        }\n        if value == 30 {\n            ret = []string{\"\
    Thirty\"}\n            continue\n        }\n        if value == 31 {\n       \
    \     ret = []string{\"Thirty-one\"}\n            continue\n        }\n      \
    \  if value == 32 {\n            ret = []string{\"Thirty-two\"}\n            continue\n\
    \        }\n        if value == 33 {\n            ret = []string{\"Thirty-three\"\
    }\n            continue\n        }\n        if value == 34 {\n            ret\
    \ = []string{\"Thirty-four\"}\n            continue\n        }\n        if value\
    \ == 35 {\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphc73q7na_test.go:131:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075446
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, 0)\n\n    if len(arr) > 0 {\n\
    \        first := arr[0]\n        last := arr[len(arr)-1]\n\n        start :=\
    \ 0\n        end := len(arr)\n        for i := range arr {\n            if arr[i]\
    \ >= 1 && arr[i] <= 9 {\n                start = i\n                end = i\n\
    \                break\n            }\n        }\n\n        for i := start + 1;\
    \ i <= end; i++ {\n            number := fmt.Sprintf(\"%v\", arr[start])\n   \
    \         ones, tens, hundreds := divide(number)\n            switch hundreds\
    \ {\n            case 0:\n                ones = \"\"\n            case 1:\n \
    \               tens = \"\"\n            case 2:\n                tens = \"Twenty\"\
    \n            default:\n                tens = \"Twenty\" + tens[len(tens)-1]\n\
    \            }\n\n            result := append(result, fmt.Sprintf(\"%v%v\", ones,\
    \ tens))\n            start = i\n            end = i\n        }\n        if start\
    \ < end {\n            result := append(result, fmt.Sprintf(\"%v%v\", arr[start],\
    \ arr[end]))\n        }\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0a5cjke_test.go:24:9: first declared but not used

    /tmp/tmpo0a5cjke_test.go:25:9: last declared but not used

    /tmp/tmpo0a5cjke_test.go:39:37: undefined: divide

    /tmp/tmpo0a5cjke_test.go:51:13: result declared but not used

    /tmp/tmpo0a5cjke_test.go:56:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // get all numbers greater than or equal to 10\n    nums\
    \ := make([]int, 0, len(arr))\n    for _, num := range arr {\n        if num >=\
    \ 10 {\n            continue\n        }\n        nums = append(nums, num)\n  \
    \  }\n    sort.Ints(nums)\n\n    // reverse the sorted numbers and replace each\
    \ number with the correct name from the \"one\"\n    // \"two\" .... etc slice\n\
    \    n := len(nums)\n    numbers := make([]string, n)\n    for i := 0; i < n;\
    \ i++ {\n        numbers[i] = map[int]string{\n            1: \"One\",\n     \
    \       2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n   \
    \         5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n \
    \           8: \"Eight\",\n            9: \"Nine\",\n        }[nums[i]]\n    }\n\
    \    reverse := reverse(numbers)\n\n    // if the list is empty, return an empty\
    \ list\n    if len(numbers) == 0 {\n        return nil\n    }\n\n    // if the\
    \ list has any strange number ignore it\n    for i := 0; i < n; i++ {\n      \
    \  if numbers[i] != reverse[i] {\n            return nil\n        }\n    }\n\n\
    \    return numbers\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6o93bwk2_test.go:29:5: undefined: sort

    /tmp/tmp6o93bwk2_test.go:48:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr1\
    \ := make([]string, len(arr))\n    for i := range arr1 {\n        arr1[i] = by_lengthHelper(arr[:i+1])\n\
    \    }\n    return arr1\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv82tshm_test.go:26:19: undefined: by_lengthHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result = []string{}\n\n    if arr == nil {\n    \
    \    return result\n    }\n\n    // If it is empty return\n    if len(arr) ==\
    \ 0 {\n        return result\n    }\n\n    // Find the first number that is between\
    \ 1 and 9\n    // For example if the first element is 2, it is between 1 and 9\n\
    \    var first_number = 1\n    for _, num := range arr {\n        if num >= first_number\
    \ && num <= 9 {\n            first_number = num\n            break\n        }\n\
    \    }\n    // Sort the other numbers\n    for _, num := range arr {\n       \
    \ if num >= first_number && num <= 9 {\n            sorted_num := num - first_number\n\
    \            str = fmt.Sprintf(\"%s\", sorted_num)\n            // Find the corresponding\
    \ string\n            for _, name := range []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"} {\n           \
    \     if name == str {\n                    result.Push(name)\n              \
    \      first_number = sorted_num\n                    break\n                }\n\
    \            }\n            break\n        }\n    }\n\n    return result\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nAnother way to solve your problem is to make\
    \ use of a map and append the keys as you traverse the array.\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_jvff7i_test.go:60:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    var newArr\
    \ []string\n    for _, i := range arr {\n        if i >= 0 && i <= 9 {\n     \
    \       newArr = append(newArr, fmt.Sprintf(\"%s\", i))\n        } else {\n  \
    \          newArr = append(newArr, fmt.Sprintf(\"%d\", i))\n        }\n    }\n\
    \    newArr = append(newArr, fmt.Sprintf(\"%s\", \"One\"))\n    newArr = append(newArr,\
    \ fmt.Sprintf(\"%s\", \"Two\"))\n    newArr = append(newArr, fmt.Sprintf(\"%s\"\
    , \"Three\"))\n    newArr = append(newArr, fmt.Sprintf(\"%s\", \"Four\"))\n  \
    \  newArr = append(newArr, fmt.Sprintf(\"%s\", \"Five\"))\n    newArr = append(newArr,\
    \ fmt.Sprintf(\"%s\", \"Six\"))\n    newArr = append(newArr, fmt.Sprintf(\"%s\"\
    , \"Seven\"))\n    newArr = append(newArr, fmt.Sprintf(\"%s\", \"Eight\"))\n \
    \   newArr = append(newArr, fmt.Sprintf(\"%s\", \"Nine\"))\n    return newArr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpupbgfphw_test.go:27:37: fmt.Sprintf format %s has arg i of wrong type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arrSorted := sort.IntSlice(arr)\n    arrSortedLen :=\
    \ arrSorted.Len()\n\n    // This list will contain strings that represent a number\
    \ between 1 and 9\n    numbers := make([]string, arrSortedLen)\n\n    // This\
    \ will be a map with the number as a key and its corresponding name as value.\n\
    \    nameToNumber := map[int]string{}\n\n    // For each number in the list, add\
    \ it to nameToNumber if its value is between 1 and 9 inclusive.\n    // Otherwise,\
    \ ignore it.\n    for i := 0; i < arrSortedLen; i++ {\n        // Ignore numbers\
    \ that are not between 1 and 9 inclusive\n        if arrSorted[i] < 1 || arrSorted[i]\
    \ > 9 {\n            continue\n        }\n\n        // Add number to nameToNumber\
    \ if its value is between 1 and 9 inclusive\n        if nameToNumber[arrSorted[i]]\
    \ != \"\" {\n            numbers = append(numbers, nameToNumber[arrSorted[i]])\n\
    \            arrSorted[i] = -1\n        }\n    }\n\n    // Create a slice with\
    \ all the nameToNumber\n    namesSorted := make([]string, len(nameToNumber))\n\
    \    for k, v := range nameToNumber {\n        namesSorted[k] = v\n    }\n\n \
    \   // Sort the slice of names by the numbers they represent.\n    sort.Strings(namesSorted)\n\
    \    sort.Strings(numbers)\n\n    // Append the names to the original list\n \
    \   return append(arrSorted, numbers...)\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikr_5kwt_test.go:21:18: undefined: sort

    /tmp/tmpikr_5kwt_test.go:52:5: undefined: sort

    /tmp/tmpikr_5kwt_test.go:53:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr2 := make([]int, len(arr))\n    for i, val := range\
    \ arr {\n        if val <= 9 && val >= 1 {\n            arr2[i] = val\n      \
    \  } else {\n            arr2[i] = 10 + val\n        }\n    }\n    sort.Ints(arr2)\n\
    \    res := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n  \
    \      res[i] = fmt.Sprintf(\"%v\", arr2[i])\n    }\n    return res\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7rty7_i_test.go:24:5: undefined: sort

    /tmp/tmpe7rty7_i_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := sort_by_length(arr)\n    arr := reverse_arr(arr)\n    for i := range arr\
    \ {\n        arr[i] = replace_num(arr[i], num_to_name[arr[i]])\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42yl23z8_test.go:24:9: no new variables on left side of :=

    /tmp/tmp42yl23z8_test.go:24:12: undefined: sort_by_length

    /tmp/tmp42yl23z8_test.go:25:9: no new variables on left side of :=

    /tmp/tmp42yl23z8_test.go:25:12: undefined: reverse_arr

    /tmp/tmp42yl23z8_test.go:27:18: undefined: replace_num

    /tmp/tmp42yl23z8_test.go:27:38: undefined: num_to_name

    /tmp/tmp42yl23z8_test.go:29:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // initialize a slice for output with capacity\n    output\
    \ := make([]string, len(arr))\n\n    // fill the output slice with numbers between\
    \ 1 and 9\n    for i, value := range arr {\n        if value < 1 || value > 9\
    \ {\n            continue\n        }\n\n        // swap this number to the beginning\
    \ of the output\n        copy(output[i:], output[:i])\n        output[i] = fmt.Sprintf(\"\
    %d\", value)\n\n        // swap this name to the end of the output\n        copy(output[i+1:],\
    \ output[i:])\n        output[i+1] = map[int]string{\n            1: \"One\",\n\
    \            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n\
    \            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n\
    \            8: \"Eight\",\n            9: \"Nine\",\n        }[value]\n    }\n\
    \n    // return the output\n    return output\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc00011be30, 0x8, 0x0?})\n\t\
    /tmp/tmpxc3thczo_test.go:36 +0x485\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmpxc3thczo_test.go:60 +0xd5\ntesting.tRunner(0xc000103380, 0x529188)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) <= 0 {\n        return []string{}\n    }\n\
    \    res := []string{}\n    for _, x := range arr {\n        if 1 <= x && x <=\
    \ 9 {\n            res = append(res, strconv.Itoa(int(x)))\n        }\n    }\n\
    \    for _, x := range arr {\n        if x > 9 {\n            res = append(res,\
    \ strconv.Itoa(10*x+1))\n        }\n    }\n    for _, x := range arr {\n     \
    \   if x < 1 {\n            res = append(res, strconv.Itoa(x))\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_53aemx2_test.go:27:31: undefined: strconv

    /tmp/tmp_53aemx2_test.go:32:31: undefined: strconv

    /tmp/tmp_53aemx2_test.go:37:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var names []string\n    for _, val := range arr {\n \
    \       for i := 0; i < 10; i++ {\n            if val < 10 {\n               \
    \ names = append(names, fmt.Sprintf(\"%v\", val))\n                val = val *\
    \ 10 + i\n                break\n            }\n        }\n    }\n\n    if 0 <\
    \ len(arr) && arr[0] != 0 {\n        names = append(names, fmt.Sprintf(\"%v\"\
    , arr[0]))\n    }\n\n    return names\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1xp4q_gm_test.go:56: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 2]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp1xp4q_gm_test.go:56: expected '[One]', got '[1 -1 1]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp1xp4q_gm_test.go:56:\
    \ expected '[Three Two One]', got '[1 -1 3 2 1]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1xp4q_gm_test.go:56: expected '[Nine Eight Four]', got '[9\
    \ 4 8 9]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    var output []string\n    for _, v := range arr {\n        if v >= 0 && v\
    \ < 10 {\n            output = append(output, name[v])\n        } else {\n   \
    \         output = append(output, fmt.Sprintf(\"%v\", v))\n        }\n    }\n\
    \    reverse(output)\n    for _, v := range output {\n        output = append(output,\
    \ v)\n    }\n    return output\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h8nyljb_test.go:28:37: undefined: name

    /tmp/tmp7h8nyljb_test.go:33:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // This solution is a lot faster than other solutions\
    \ but I decided to do it this way\n    // so I could use it to test various other\
    \ solutions I wrote. I'll explain why I used it\n    // after the solution.\n\
    \    if len(arr) == 0 {\n        return []string{}\n    }\n    \n    // Go through\
    \ each digit and make a map of names for each. For example, if there are 2 1's\
    \ and\n    // 2 2's in the array, a map of {\"One\":\"1\",\"Two\":\"2\"}\n   \
    \ // will be created for both of them\n    names := make(map[int]string)\n   \
    \ for i, d := range arr {\n        names[i] = names[d]+d\n    }\n    \n    //\
    \ Find the first index that has the name \"One\" and then make a new list of all\
    \ the names that\n    // follow that index. For example, the first index that\
    \ has name \"One\" is indexed by 1, so we\n    // start indexing at 1 and search\
    \ for the name \"One\". This will give us \"Two\", \"One\", \"One\"\n    // because\
    \ \"One\" comes before \"Two\".\n    for i, n := range names {\n        if n ==\
    \ \"One\" {\n            break\n        }\n    }\n    \n    // Go through all\
    \ the numbers in the list from 1 to 9\n    for i, n := range arr {\n        if\
    \ i < n {\n            arr[i] = names[n-i-1]\n        }\n    }\n    \n    // Replace\
    \ each digit by its corresponding name\n    names := make([]string, len(arr))\n\
    \    for i, n := range arr {\n        names[i] = names[n]\n    }\n    \n    return\
    \ names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0_ypvhi_test.go:33:20: invalid operation: names[d] + d (mismatched types
    string and int)

    /tmp/tmpe0_ypvhi_test.go:40:9: i declared but not used

    /tmp/tmpe0_ypvhi_test.go:49:22: cannot use names[n - i - 1] (map index expression
    of type string) as type int in assignment

    /tmp/tmpe0_ypvhi_test.go:54:11: no new variables on left side of :=

    /tmp/tmpe0_ypvhi_test.go:54:14: cannot use make([]string, len(arr)) (value of
    type []string) as type map[int]string in assignment

    /tmp/tmpe0_ypvhi_test.go:59:12: cannot use names (variable of type map[int]string)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    s := make([]string, len(arr))\n    for idx, val := range\
    \ arr {\n        if val > 9 || val < 1 {\n            s[idx] = \"One\"\n     \
    \   } else {\n            s[idx] = \"Two\"\n            s[idx-1] = \"One\"\n \
    \           s[idx-2] = \"One\"\n            s[idx-3] = \"One\"\n            s[idx-4]\
    \ = \"One\"\n            s[idx-5] = \"One\"\n            s[idx-6] = \"One\"\n\
    \            s[idx-7] = \"One\"\n            s[idx-8] = \"One\"\n            s[idx-9]\
    \ = \"One\"\n            s[idx-10] = \"One\"\n            s[idx-11] = \"One\"\n\
    \            s[idx-12] = \"One\"\n            s[idx-13] = \"One\"\n          \
    \  s[idx-14] = \"One\"\n            s[idx-15] = \"One\"\n            s[idx-16]\
    \ = \"One\"\n            s[idx-17] = \"One\"\n            s[idx-18] = \"One\"\n\
    \            s[idx-19] = \"One\"\n            s[idx-20] = \"One\"\n          \
    \  s[idx-21] = \"One\"\n            s[idx-22] = \"One\"\n            s[idx-23]\
    \ = \"One\"\n            s[idx-24] = \"One\"\n            s[idx-25] = \"One\"\n\
    \            s[idx-26] = \"One\"\n            s[idx-27] = \"One\"\n          \
    \  s[idx-28] = \"One\"\n            s[idx-29] = \"One\"\n            s[idx-30]\
    \ = \"One\"\n            s[idx-31] = \"One\"\n            s[idx-32] = \"One\"\n\
    \            s[idx-33] = \"One\"\n            s[idx-34] = \"One\"\n          \
    \  s[idx-35] = \"One\"\n            s[idx-36] = \"One\"\n            s[idx-37]\
    \ = \"One\"\n            s[idx-38] = \"One\"\n            s[idx-39] = \"One\"\n\
    \            s[idx-40] = \"One\"\n            s[idx-41] = \"One\"\n          \
    \  s[idx-42] = \"One\"\n            s[idx-43] = \"One\"\n            s[idx-44]\
    \ = \"One\"\n            s[idx-45] = \"One\"\n            s[idx-46] = \"One\"\n\
    \            s[idx-47] = \"One\"\n            s[idx-48] = \"One\"\n          \
    \  s[idx-49] = \"One\"\n            s[idx-50] = \"One\"\n            s[idx-51]\
    \ = \"One\"\n            s[idx-52] = \"One\"\n            s[idx-53] = \"One\"\n\
    \            s[idx-54] = \"One\"\n            s[idx-55] = \"One\"\n          \
    \  s[idx-56] = \"One\"\n            s[idx-57] = \"One\"\n            s[idx-58]\
    \ = \"One\"\n            s[idx-59] = \"One\"\n            s[idx-60] = \"One\"\n\
    \            s[idx-61] = \"One\"\n            s[idx\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx1vwm8ik_test.go:88:18: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075447
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // the length of arr is odd\n    if arr[len(arr)%2] == -1 {\n        return\
    \ nil\n    }\n\n    arr2 := make([]int, len(arr))\n    arr2[len(arr)%2] = -1\n\
    \n    var arr3 []string\n    arr3 = append(arr3, names[arr[len(arr)-1]%10]) //\
    \ last number will be the name of a digit\n    for i := 0; i < len(arr); i +=\
    \ 2 {\n        if arr[i] < 10 {\n            arr3 = append(arr3, names[arr[i]])\n\
    \        } else {\n            arr3 = append(arr3, names[arr[i]-10]...)\n    \
    \    }\n    }\n    arr2 = append(arr2, arr3...)\n    arr2 = append(arr2, names[arr[len(arr)-2]]...)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphwknqhup_test.go:33:25: undefined: names

    /tmp/tmphwknqhup_test.go:36:33: undefined: names

    /tmp/tmphwknqhup_test.go:38:33: undefined: names

    /tmp/tmphwknqhup_test.go:41:25: cannot use arr3 (variable of type []string) as
    type []int in argument to append

    /tmp/tmphwknqhup_test.go:42:25: undefined: names

    /tmp/tmphwknqhup_test.go:43:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    if len(arr) > 0 {\n      \
    \  var first int\n\n        if len(arr) == 1 {\n            first = arr[0]\n \
    \       } else {\n            first = arr[1]\n        }\n\n        switch first\
    \ {\n        case 1: result = append(result, strings.Replace(fmt.Sprintf(\"%v\"\
    , arr[0]), \"One\", \"One\", -1))\n        case 2: result = append(result, strings.Replace(fmt.Sprintf(\"\
    %v\", arr[0]), \"Two\", \"Two\", -1))\n        case 3: result = append(result,\
    \ strings.Replace(fmt.Sprintf(\"%v\", arr[0]), \"Three\", \"Three\", -1))\n  \
    \      case 4: result = append(result, strings.Replace(fmt.Sprintf(\"%v\", arr[0]),\
    \ \"Four\", \"Four\", -1))\n        case 5: result = append(result, strings.Replace(fmt.Sprintf(\"\
    %v\", arr[0]), \"Five\", \"Five\", -1))\n        case 6: result = append(result,\
    \ strings.Replace(fmt.Sprintf(\"%v\", arr[0]), \"Six\", \"Six\", -1))\n      \
    \  case 7: result = append(result, strings.Replace(fmt.Sprintf(\"%v\", arr[0]),\
    \ \"Seven\", \"Seven\", -1))\n        case 8: result = append(result, strings.Replace(fmt.Sprintf(\"\
    %v\", arr[0]), \"Eight\", \"Eight\", -1))\n        case 9: result = append(result,\
    \ strings.Replace(fmt.Sprintf(\"%v\", arr[0]), \"Nine\", \"Nine\", -1))\n    \
    \    default:\n        }\n    }\n\n    return by_length_test(result)\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbm4ynb4m_test.go:33:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:34:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:35:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:36:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:37:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:38:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:39:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:40:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:41:41: undefined: strings

    /tmp/tmpbm4ynb4m_test.go:46:12: undefined: by_length_test

    /tmp/tmpbm4ynb4m_test.go:46:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    list := make([]string, len(arr))\n    var counter int\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n\
    \            continue\n        }\n        if counter < arr[i] {\n            counter\
    \ = arr[i]\n            list[len(list)-i-1] = \"One\"\n        } else {\n    \
    \        list[len(list)-i-1] = \"Two\"\n        }\n    }\n    return list\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpa3ra5vqu_test.go:54: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two Two One One One Two Two One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpa3ra5vqu_test.go:54: expected '[One]', got '[  One]'\n \
    \   --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpa3ra5vqu_test.go:54:\
    \ expected '[Three Two One]', got '[Two One  One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpa3ra5vqu_test.go:54: expected '[Nine Eight Four]', got '[Two\
    \ Two One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    result := make([]string, len(arr))\n    by_length(arr, &result)\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc_y7l_b2_test.go:26:20:\
    \ too many arguments in call to by_length\n\thave ([]int, *[]string)\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, n := range arr {\n  \
    \      if n < 0 || n > 9 {\n            continue\n        }\n        str = fmt.Sprint(n)\n\
    \        for index, char := range str {\n            str = str[0:index] + map[rune](char)\
    \ + \"0\" + str[index+1:]\n        }\n        result = append(result, str)\n \
    \   }\n    return result\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for\
    \ your effort, but it doesn't give the desired output, I already tried it and\
    \ it gives me this: \n`[0 1 2 3 4 5 6 7 8 9]`\n<|/ c |>\n<| c |>\nI forgot the\
    \ `[]string` wrapper. Please try the updated answer.\n<|/ c |>\n<| c |>\nHi, I\
    \ tried it, but unfortunately it didn't work for me. Do you mind explaining to\
    \ me what the code does exactly?\n<|/ c |>\n<| c |>\nHi, I have added comments.\
    \ Please let me know if any part is still unclear.\n<|/ c |>\n<| a |>\nThis should\
    \ work:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"\
    strings\"\n    \"time\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpno076ciu_test.go:28:34: expected expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, value := range arr {\n\
    \        // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n        result := append(result, name[value-1])\n    }\n\
    \    return reverse(strings.Join(result, \"_\"))\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql8psw5c_test.go:24:9: result declared but not used

    /tmp/tmpql8psw5c_test.go:24:34: undefined: name

    /tmp/tmpql8psw5c_test.go:26:12: undefined: reverse

    /tmp/tmpql8psw5c_test.go:26:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr1 := make([]string, len(arr))\n    arr2 := make([]int,\
    \ 0, len(arr))\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n \
    \           arr2 = append(arr2, v)\n        } else {\n            arr1 = append(arr1,\
    \ fmt.Sprintf(\"%v\", v))\n        }\n    }\n    return arr1\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpe5cfcpx2_test.go:50: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[       ]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n\
    \        tmpe5cfcpx2_test.go:50: expected '[One]', got '[   -1 55]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpe5cfcpx2_test.go:50: expected\
    \ '[Three Two One]', got '[    -1]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpe5cfcpx2_test.go:50: expected '[Nine Eight Four]', got '[  ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arrCopy\
    \ = make([]int, len(arr))\n    copy(arrCopy, arr)\n    sort.Ints(arrCopy)\n  \
    \  reverse(arrCopy)\n    var result []string\n    arrIndex = 0\n    for i := 0;\
    \ i < len(arrCopy); i++ {\n        if arrCopy[i] >= 1 && arrCopy[i] <= 9 {\n \
    \           arrCopy[i] = arrCopy[i] + \"-\" + strconv.Itoa(arrIndex+1)\n     \
    \       arrIndex++\n        }\n    }\n    for _, v := range arrCopy {\n      \
    \  if v != arrCopy[0] {\n            result = append(result, v)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfug2gtwk_test.go:24:5: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:25:10: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:26:5: undefined: sort

    /tmp/tmpfug2gtwk_test.go:26:15: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:27:5: undefined: reverse

    /tmp/tmpfug2gtwk_test.go:27:13: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:29:5: undefined: arrIndex

    /tmp/tmpfug2gtwk_test.go:30:25: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:31:12: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:32:26: undefined: arrCopy

    /tmp/tmpfug2gtwk_test.go:32:26: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var list = make([]string, 0, len(arr))\n    var lastNum = arr[len(arr) -\
    \ 1]\n    for i := range arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n    \
    \        list = append(list, fmt.Sprintf(\"%v\", arr[i]))\n            continue\n\
    \        }\n        if lastNum == arr[i] {\n            if arr[i] > lastNum {\n\
    \                list = append(list, fmt.Sprintf(\"%v\", arr[i]))\n          \
    \      continue\n            }\n        }\n        lastNum = arr[i]\n    }\n \
    \   list = append(list, fmt.Sprintf(\"%v\", lastNum))\n    return list\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpvgci9brh_test.go:60: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpvgci9brh_test.go:60: expected '[One]', got '[1 55]'\n  \
    \  --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvgci9brh_test.go:60:\
    \ expected '[Three Two One]', got '[1 3 2 -1]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpvgci9brh_test.go:60: expected '[Nine Eight Four]', got '[9\
    \ 4 8 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    numbers := make([]string, len(arr))\n    i := 0\n   \
    \ for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        numbers[i] = fmt.Sprintf(\"%c\", num)\n        i++\n    }\n\
    \    return numbers[len(numbers)-1:]\n}\n`\n\n<|/ file ext=.go source=github |>\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27hije8x_test.go:32:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075448
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, 0, len(arr))\n\n    for _, num\
    \ := range arr {\n        if num >= 1 && num <= 9 {\n            result = append(result,\
    \ by_length_map[num])\n        } else {\n            result = append(result, by_length_map[\"\
    unknown\"])\n        }\n    }\n\n    return by_length(result)\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3xtbslx_test.go:25:37: undefined: by_length_map

    /tmp/tmp_3xtbslx_test.go:27:37: undefined: by_length_map

    /tmp/tmp_3xtbslx_test.go:31:22: cannot use result (variable of type []string)
    as type []int in argument to by_length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arrSorted\
    \ := make([]int, len(arr))\n    for i, v := range arr {\n        arrSorted[i]\
    \ = v\n    }\n    sort.Ints(arrSorted)\n    res := make([]string, len(arr))\n\
    \    n := 0\n    for _, v := range arr {\n        if v <= 9 {\n            res[n]\
    \ = One[v]\n            n++\n        } else {\n            res[n] = Two[v-len(One)]\n\
    \            n++\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajdudpx9_test.go:28:5: undefined: sort

    /tmp/tmpajdudpx9_test.go:33:22: undefined: One

    /tmp/tmpajdudpx9_test.go:36:22: undefined: Two

    /tmp/tmpajdudpx9_test.go:36:32: undefined: One

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    arr2[0] = arr[0]\n    i := 1\n    for _, n :=\
    \ range arr[1:] {\n        if n > 0 && n < 10 {\n            arr2[i] = n\n   \
    \         i++\n        } else {\n            arr2[i] = -1\n        }\n    }\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    out := make([]string, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        out[i] = arr[arr2[i]]\n    }\n \
    \   return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptpp5vnyx_test.go:35:5: undefined: sort

    /tmp/tmptpp5vnyx_test.go:38:18: cannot use arr[arr2[i]] (variable of type int)
    as type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    reverse(arr)\n    m := make(map[int]string,\
    \ 10)\n    m[0] = \"One\"\n    m[1] = \"Two\"\n    m[2] = \"Three\"\n    m[3]\
    \ = \"Four\"\n    m[4] = \"Five\"\n    m[5] = \"Six\"\n    m[6] = \"Seven\"\n\
    \    m[7] = \"Eight\"\n    m[8] = \"Nine\"\n    m[9] = \"Ten\"\n    \n    n :=\
    \ len(arr) - 1\n    var result []string\n    for i := 0; i < n; i++ {\n      \
    \  if arr[i] == 1 {\n            result = append(result, \"One\")\n        }\n\
    \        if arr[i] == 2 {\n            result = append(result, \"Two\")\n    \
    \    }\n        if arr[i] == 3 {\n            result = append(result, \"Three\"\
    )\n        }\n        if arr[i] == 4 {\n            result = append(result, \"\
    Four\")\n        }\n        if arr[i] == 5 {\n            result = append(result,\
    \ \"Five\")\n        }\n        if arr[i] == 6 {\n            result = append(result,\
    \ \"Six\")\n        }\n        if arr[i] == 7 {\n            result = append(result,\
    \ \"Seven\")\n        }\n        if arr[i] == 8 {\n            result = append(result,\
    \ \"Eight\")\n        }\n        if arr[i] == 9 {\n            result = append(result,\
    \ \"Nine\")\n        }\n        if arr[i] == 0 {\n            result = append(result,\
    \ m[arr[i]])\n        }\n    }\n    return append(result, m[arr[n]])\n}\n`\n \
    \       )\n    }\n\n    type args \nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvm3rvgh6_test.go:71:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Sort(byLength(arr))\n    out := make([]string, len(arr))\n\
    \    for i, e := range arr {\n        if e >= 1 && e <= 9 {\n            out[i]\
    \ = fmt.Sprintf(\"%v\", e)\n        } else {\n            out[i] = \"\"\n    \
    \    }\n    }\n    return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ur2ox84_test.go:21:5: undefined: sort

    /tmp/tmp3ur2ox84_test.go:21:15: undefined: byLength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sorted_arr := arr.Slice()\n    sorted_arr, _ = by_length(sorted_arr)\n\
    \    sorted_arr, _ = reverse(sorted_arr)\n    result := []string{}\n    for _,\
    \ v := range sorted_arr {\n        if v >= 0 && v <= 9 {\n            result =\
    \ append(result, name_by_index[v])\n        } else {\n            result = append(result,\
    \ \"?\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpabbb8674_test.go:21:23: arr.Slice undefined (type []int has no field or
    method Slice)

    /tmp/tmpabbb8674_test.go:22:21: assignment mismatch: 2 variables but by_length
    returns 1 value

    /tmp/tmpabbb8674_test.go:23:21: undefined: reverse

    /tmp/tmpabbb8674_test.go:27:37: undefined: name_by_index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n\n    for i := 0; i < len(arr);\
    \ i++ {\n        arr3[i] = arr[i]\n        arr4[i] = i + 1\n    }\n    arr5, arr3\
    \ := mergeSort(arr3, arr4)\n    arr6 := reverseSort(arr5)\n\n    for i := 0; i\
    \ < len(arr6); i++ {\n        arr2[i] = arr6[i]\n    }\n\n    return arr2\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp6s4eul1_test.go:29:19: undefined: mergeSort

    /tmp/tmpp6s4eul1_test.go:30:13: undefined: reverseSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   result := []string{}\n    length := len(arr)\n    m := make(map[int]string,\
    \ length+1)\n    for _, v := range arr {\n        m[v] = m[v]+\"-One\"\n    }\n\
    \    for key, value := range m {\n        result = append(result, key)\n    }\n\
    \    for _, v := range arr {\n        if v == 0 {\n            continue\n    \
    \    }\n        if m[v] == \"\" {\n            continue\n        }\n        result\
    \ = append(result, m[v])\n    }\n    return result\n}\n</code>\n<|/ a tags=algorithm,sorting,language-agnostic\
    \ dscore=1 |>\n<| c |>\nWhat about `by_length([]int{1, 3, -4, 2, 5, -5, 4, 2})`?\
    \ It returns \"Three-Four\", which is not desired output.\n<|/ c |>\n<| c |>\n\
    Thank you for your quick reply! This works great for numbers 1 to 9. However,\
    \ if I try to run it on numbers between 10 and 12, the output I get is `[\"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\", \"One\", \"Two\", \"Four\", \"Five\"\
    , \"Three\"]`. This is not the expected output. Is there any way to fix this?\
    \ Thank you!\n<|/ c |>\n<| c |>\n, it's because there are some special cases where\
    \ the algorithm will go wrong. I'll add the solution to my answer\n<|/ c |>\n\
    <| c |>\nThis is great! Thank you so much! It works great. :)\n<|/ c |>\n<| a\
    \ |>\nIf you don't want too much of if conditions, you can do some recursive function\
    \ with help of map for storing values after applying some logic.\n<code>\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpinl83559_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for idx, number\
    \ := range arr {\n        if number > 9 {\n            number -= 10\n        }\n\
    \        if number < 1 {\n            number = 0\n        }\n        result[idx]\
    \ = fmt.Sprintf(\"%s\", map[int]string{\n            1: \"One\",\n           \
    \ 2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n         \
    \   5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n       \
    \     8: \"Eight\",\n            9: \"Nine\",\n        }[number])\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjqtycyon_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpjqtycyon_test.go:61: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpjqtycyon_test.go:61: expected '[Three Two One]', got '[One  Three Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpjqtycyon_test.go:61:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075450
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    switch len(arr) {\n    case 0:\n        return nil\n\
    \    case 1:\n        return arr[0]\n    case 2:\n        l := arr[0]\n      \
    \  r := arr[1]\n        if l == 9 || r == 9 {\n            return nil\n      \
    \  }\n        if l == r {\n            return []string{\n                \"One\"\
    ,\n                \"Two\",\n                \"Three\",\n                \"Four\"\
    ,\n                \"Five\",\n                \"Six\",\n                \"Seven\"\
    ,\n                \"Eight\",\n                \"Nine\",\n            }\n    \
    \    } else {\n            return []string{\n                \"One\",\n      \
    \          \"Two\",\n                \"Three\",\n                \"Four\",\n \
    \               \"Five\",\n                \"Six\",\n                \"Seven\"\
    ,\n                \"Eight\",\n                \"Nine\",\n                \"Ten\"\
    ,\n            }\n        }\n    case 3:\n        l := arr[0]\n        r := arr[1]\n\
    \        if l == 9 {\n            return nil\n        }\n        if r == 9 {\n\
    \            return []string{\n                \"One\",\n                \"Two\"\
    ,\n                \"Three\",\n                \"Four\",\n                \"Five\"\
    ,\n                \"Six\",\n                \"Seven\",\n                \"Eight\"\
    ,\n                \"Nine\",\n                \"Ten\",\n            }\n      \
    \  }\n        return []string{\n            \"One\",\n            \"Two\",\n \
    \           \"Three\",\n            \"Four\",\n            \"Five\",\n       \
    \     \"Six\",\n            \"Seven\",\n            \"Eight\",\n            \"\
    Nine\",\n            \"Ten\",\n            \"Eleven\",\n            \"Twelve\"\
    ,\n        }\n    case 4:\n        l := arr[0]\n        r := arr[1]\n        m\
    \ := arr[2]\n        if l == 9 {\n            return nil\n        }\n        if\
    \ r == 9 {\n            return nil\n        }\n        if m == 9 {\n         \
    \   return nil\n        }\n        if l == r {\n            return []string{\n\
    \                \"One\",\n                \"Two\",\n                \"Three\"\
    ,\n                \"Four\",\n                \"Five\",\n                \"Six\"\
    ,\n                \"Seven\",\n                \"Eight\",\n                \"\
    Nine\",\n                \"Ten\",\n                \"Eleven\",\n             \
    \   \"Twelve\",\n            }\n        }\n        return nil\n    case 5:\n \
    \       l := arr[0]\n        r := arr[1]\n        m := arr[2]\n        n := arr[3]\n\
    \        if l == 9 {\n            return nil\n        }\n        if r == 9 {\n\
    \            return nil\n        }\n        if m == 9 {\n            return nil\n\
    \        }\n        if n == 9 {\n            return nil\n        }\n        if\
    \ l == r {\n            return nil\n        }\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_s_mb94j_test.go:142:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ numberList := make([]int, len(arr))\n    for i := range arr {\n        numberList[i]\
    \ = arr[i]\n    }\n\n    // sort numbers\n    sort.Ints(numberList)\n\n    //\
    \ get first ten numbers from sorted list\n    firstTenInts := numberList[:10]\n\
    \n    // reverse the list\n    for i := 0; i < len(firstTenInts); i++ {\n    \
    \    firstTenInts[i] = numberList[len(firstTenInts) - 1 - i]\n    }\n\n    //\
    \ replace the number by its name\n    switch {\n    case len(firstTenInts) < 10:\n\
    \        return nil\n    case firstTenInts[len(firstTenInts)-1] < 10:\n      \
    \  return nil\n    case firstTenInts[0] < 10:\n        return nil\n    case firstTenInts[9]\
    \ < 10:\n        return nil\n    default:\n        return nil\n    }\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcp4azxxz_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    var s []string\n    var index int\n\
    \    var length int\n    var prevNum int\n    for i := range arr {\n        index\
    \ += 1\n        if index > 10 {\n            index = 0\n        }\n        if\
    \ arr[i] == 1 {\n            prevNum = arr[i-1]\n            length = 1\n    \
    \    } else if arr[i] == 2 {\n            if length != 1 {\n                s\
    \ = append(s, fmt.Sprintf(\"%s%d\", \"Two\", length))\n                length\
    \ = 0\n            }\n        } else if arr[i] == 3 {\n            if length !=\
    \ 2 {\n                s = append(s, fmt.Sprintf(\"%s%d\", \"Three\", length))\n\
    \                length = 0\n            }\n        } else if arr[i] == 4 {\n\
    \            if length != 3 {\n                s = append(s, fmt.Sprintf(\"%s%d\"\
    , \"Four\", length))\n                length = 0\n            }\n        } else\
    \ if arr[i] == 5 {\n            if length != 4 {\n                s = append(s,\
    \ fmt.Sprintf(\"%s%d\", \"Five\", length))\n                length = 0\n     \
    \       }\n        } else if arr[i] == 6 {\n            if length != 5 {\n   \
    \             s = append(s, fmt.Sprintf(\"%s%d\", \"Six\", length))\n        \
    \        length = 0\n            }\n        } else if arr[i] == 7 {\n        \
    \    if length != 6 {\n                s = append(s, fmt.Sprintf(\"%s%d\", \"\
    Seven\", length))\n                length = 0\n            }\n        } else if\
    \ arr[i] == 8 {\n            if length != 7 {\n                s = append(s, fmt.Sprintf(\"\
    %s%d\", \"Eight\", length))\n                length = 0\n            }\n     \
    \   } else if arr[i] == 9 {\n            if length != 8 {\n                s =\
    \ append(s, fmt.Sprintf(\"%s%d\", \"Nine\", length))\n                length =\
    \ 0\n            }\n        } else {\n            if prevNum != arr[i] {\n   \
    \             if index != 0 {\n                    s = append(s, fmt.Sprintf(\"\
    %s%d\", \"One\", length))\n                }\n                prevNum = arr[i]\n\
    \                length = 1\n            } else {\n                if index ==\
    \ 0 {\n                    s = append(s, fmt.Sprintf(\"%s%d\", \"Zero\", length))\n\
    \                }\n            }\n        }\n    }\n    return s\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdphjl9tl_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr = append(arr, arr.Len()-1) // Last element will be\
    \ ignored\n    sort.Sort(arr)\n    arr := arr[0:len(arr)-1]\n    arr := append([]string{\n\
    \        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n \
    \       \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n\
    \        \"Nine\",\n    }, arr...)\n    for i := range arr {\n        arr[i] =\
    \ name_to_num[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpduxe6ozt_test.go:21:27:\
    \ arr.Len undefined (type []int has no field or method Len)\n/tmp/tmpduxe6ozt_test.go:22:5:\
    \ undefined: sort\n/tmp/tmpduxe6ozt_test.go:23:9: no new variables on left side\
    \ of :=\n/tmp/tmpduxe6ozt_test.go:24:9: no new variables on left side of :=\n\
    /tmp/tmpduxe6ozt_test.go:24:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpduxe6ozt_test.go:34:8:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpduxe6ozt_test.go:36:18: undefined: name_to_num\n/tmp/tmpduxe6ozt_test.go:38:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    length\
    \ := len(arr)\n    result := make([]string, length)\n    for i, v := range arr\
    \ {\n        if v <= 9 && v >= 1 && i <= length-1 {\n            result[i] = names[int(v)-1]\n\
    \        } else {\n            result[i] = fmt.Sprintf(\"%d\", v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcgp5yng6_test.go:28:25: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n\n    var name []string\n\
    \    for _, num := range arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n\n        if num < 10 {\n            name = append(name, fmt.Sprintf(\"\
    %c\", num))\n        } else {\n            name = append(name, fmt.Sprintf(\"\
    %s\", num))\n        }\n    }\n\n    for i := 0; i < len(name); i++ {\n      \
    \  if name[i] == \"9\" {\n            tmp = append(tmp, name[0:i]...)\n      \
    \      tmp[len(tmp)-1] = name[len(name)-1]\n            tmp = tmp[:len(tmp)-1]\n\
    \        } else {\n            tmp = append(tmp, name[i])\n        }\n    }\n\n\
    \    return tmp\n}\n</code>\n<|/ a tags=algorithm,data-\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplexhzitf_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075449
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arrSorted := make([]int, len(arr))\n    j := 0\n    for\
    \ k, val := range arr {\n        arrSorted[j] = val\n        j++\n    }\n\n  \
    \  revArr := make([]int, len(arr))\n    for i, val := range arrSorted {\n    \
    \    revArr[val] = i\n    }\n    sortedNames := make([]string, len(arr))\n   \
    \ byNum := map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5:\
    \ \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for i, val\
    \ := range revArr {\n        sortedNames[i] = byNum[val]\n    }\n\n    return\
    \ sortedNames\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvv84f_n_test.go:23:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    result := append(result, fmt.Sprintf(\"\
    One\"))\n    result := append(result, fmt.Sprintf(\"Two\"))\n    result := append(result,\
    \ fmt.Sprintf(\"Three\"))\n    result := append(result, fmt.Sprintf(\"Four\"))\n\
    \    result := append(result, fmt.Sprintf(\"Five\"))\n    result := append(result,\
    \ fmt.Sprintf(\"Six\"))\n    result := append(result, fmt.Sprintf(\"Seven\"))\n\
    \    result := append(result, fmt.Sprintf(\"Eight\"))\n    result := append(result,\
    \ fmt.Sprintf(\"Nine\"))\n\n    for _, i := range arr {\n        var str string\n\
    \        str = result[i]\n        str = str[0:1] + str[1:len(str)-1]\n       \
    \ if i < 10 {\n            str = fmt.Sprintf(\"%s%s\", str, str[0:1])\n      \
    \  }\n        arr = append(arr, i)\n    }\n    arr = arr[:len(arr)/2]\n    for\
    \ _, i := range arr {\n        var str string\n        str = result[i]\n     \
    \   str = str[0:1] + str[1:len(str)-1]\n        if i < 10 {\n            str =\
    \ fmt.Sprintf(\"%s%s\", str, str[0:1])\n        }\n        arr = append(arr, i)\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4ybvcib_test.go:22:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:23:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:24:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:25:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:26:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:27:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:28:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:29:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:30:12: no new variables on left side of :=

    /tmp/tmpv4ybvcib_test.go:51:12: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpv4ybvcib_test.go:51:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ reversedList := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > 9 {\n            reversedList[i] = arr[i]\n        } else\
    \ {\n            reversedList[len(arr)-i-1] = arr[i]\n        }\n    }\n\n   \
    \ result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[reversedList[i]]\n    }\n\n    return result\n}\n</code>\n<|/ a tags=algorithm,arrays,sorting,go\
    \ |>\n<| a dscore=0 tags=algorithm,arrays,sorting,go |>\nIn case this might help\
    \ someone in the future, here is my go implementation:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strconv\"\n)\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwnhf2ww8_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // Get the minimum and maximum values of the list.\n    min, max := arr[0],\
    \ arr[len(arr)-1]\n    for _, v := range arr[1:] {\n        if v < min {\n   \
    \         min = v\n        }\n        if v > max {\n            max = v\n    \
    \    }\n    }\n\n    // Sort the list from min to max with any negative numbers\
    \ after the minimum value at the top.\n    sort.Ints(arr[1:len(arr)-1])\n    for\
    \ i := range arr {\n        if arr[i] >= min && arr[i] <= max {\n            arr[i],\
    \ arr[i+1] = arr[i+1], arr[i]\n        }\n    }\n\n    // Reverse the list.\n\
    \    for i := range arr {\n        arr[i], arr[arr[len(arr)-1-i]] = arr[arr[len(arr)-1-i]],\
    \ arr[i]\n    }\n\n    // Get the number names and append them to the output list.\n\
    \    names := []string{}\n    for i := 1; i <= 9; i++ {\n        if arr[i] ==\
    \ i {\n            names = append(names, fmt.Sprintf(\"%d\", i))\n        }\n\
    \    }\n    return names\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nHi, this works\
    \ great, but I am struggling to make the code work with a variable amount of parameters.\
    \ Do you know if that is possible with this code?\n<|/ c |>\n<| c |>\nI haven't\
    \ used go since before this year, but when I used it, the arguments had to be\
    \ listed at the top of a function, and no names were used except for that which\
    \ was the only argument and the only return. I'll see if I can come up with an\
    \ example, but I'm pretty sure that's not possible in Go.\n<|/ c |>\n<| c |>\n\
    I added an example that should work, but I haven't tested it.\n<|/ c |>\n<| c\
    \ |>\nHi, thanks for your response. Unfortunately your example doesn't quite work\
    \ when passing more than 1 parameter. Also, I don't want to have to call by_length\
    \ every time I use the function.\n<|/ c |>\n<| c |>\nI changed it so it doesn't\
    \ depend on how many arguments you were calling it with, and it now works with\
    \ variable arguments.  It will always return an empty list if there are no arguments,\
    \ and return the sorted list of numbers if there is at least one argument.\n<|/\
    \ c |>\n<| a tags=go dscore=1 |>\nI realise this might be too late to help the\
    \ OP, but I was trying to do something like this today. After a bit of googling,\
    \ I found the answer in this blog post: http://blog.golang.org/using-goroutines-and-channels\n\
    Basically, they use a sort of \"buffer\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6xqmhybx_test.go:57:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075450
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for idx, val\
    \ := range arr {\n        if val < 1 || val > 9 {\n            continue\n    \
    \    }\n        result[idx] = names[val]\n    }\n    if len(result) > 0 {\n  \
    \      sort.Strings(result)\n        for idx := len(result) - 1; idx >= 0; idx--\
    \ {\n            result[idx] = names[result[idx]]\n        }\n    }\n    return\
    \ result\n}\n\nvar names = []string{\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\nvar by_length_test = map[string][]int{\n\
    \    \"[]int{2, 1, 1, 4, 5, 8, 2, 3}\": []int{2, 1, 1, 4, 5, 8, 2, 3},\n    \"\
    []int{}\":                          []int{},\n    \"[]int{1, -1, 55}\":      \
    \            []int{1, -1, 55},\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfqr5rr3_test.go:29:9: undefined: sort

    /tmp/tmpxfqr5rr3_test.go:31:33: invalid argument: index result[idx] (variable
    of type string) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]string, len(arr))\n    prev := \"\"\n    for idx, v := range\
    \ arr {\n        switch v {\n        case 1:\n            arr2[idx] = prev + \"\
    One\"\n        case 2:\n            arr2[idx] = prev + \"Two\"\n        case 3:\n\
    \            arr2[idx] = prev + \"Three\"\n        case 4:\n            arr2[idx]\
    \ = prev + \"Four\"\n        case 5:\n            arr2[idx] = prev + \"Five\"\n\
    \        case 6:\n            arr2[idx] = prev + \"Six\"\n        case 7:\n  \
    \          arr2[idx] = prev + \"Seven\"\n        case 8:\n            arr2[idx]\
    \ = prev + \"Eight\"\n        case 9:\n            arr2[idx] = prev + \"Nine\"\
    \n        default:\n            return []string{}\n        }\n        prev = arr2[idx]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppc3lmbeu_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two TwoOne TwoOneOne TwoOneOneFour TwoOneOneFourFive TwoOneOneFourFiveEight\
    \ TwoOneOneFourFiveEightTwo TwoOneOneFourFiveEightTwoThree]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmppc3lmbeu_test.go:72: expected '[One]', got '[]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmppc3lmbeu_test.go:72: expected\
    \ '[Three Two One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmppc3lmbeu_test.go:72: expected '[Nine Eight Four]', got '[Nine NineFour\
    \ NineFourEight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arrInts := make([]int, len(arr))\n    for i := range\
    \ arrInts {\n        arrInts[i] = arr[i]\n    }\n    sort.Ints(arrInts)\n    var\
    \ str []string\n    for i := 0; i < len(arr); i++ {\n        if i >= 1 && i <=\
    \ 9 {\n            str = append(str, fmt.Sprintf(\"%v\", arrInts[i]))\n      \
    \  } else {\n            if arrInts[i] < 1 {\n                str = append(str,\
    \ fmt.Sprintf(\"One\"))\n            } else if arrInts[i] > 9 {\n            \
    \    str = append(str, fmt.Sprintf(\"Nine\"))\n            } else {\n        \
    \        str = append(str, fmt.Sprintf(\"%v\", arrInts[i]))\n            }\n \
    \       }\n    }\n    return str\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5v5qgshy_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 = make([]int, len(arr))\n    arr2[0], arr2[1] =\
    \ 1, 9\n    for i, v := range arr {\n        if v < 1 {\n            continue\n\
    \        }\n        if v > 9 {\n            v = 9\n        }\n        arr2[i]\
    \ = arr[v-1]\n    }\n    arr3 = make([]string, len(arr))\n    for i, v := range\
    \ arr2 {\n        if v == 0 {\n            continue\n        }\n        if v <\
    \ 10 {\n            arr3[i] = fmt.Sprintf(\"%d\", v)\n            continue\n \
    \       }\n        if v%10 == 0 {\n            arr3[i] = fmt.Sprintf(\"%c\", v%10)\n\
    \            continue\n        }\n        for j := len(arr3)-1; j >= 0; j-- {\n\
    \            if v%10 == arr3[j] {\n                arr3[i] = fmt.Sprintf(\"%c\"\
    , j+1)\n                break\n            }\n        }\n    }\n    return arr3\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_co0ymwy_test.go:21:5: undefined: arr2

    /tmp/tmp_co0ymwy_test.go:22:5: undefined: arr2

    /tmp/tmp_co0ymwy_test.go:30:9: undefined: arr2

    /tmp/tmp_co0ymwy_test.go:32:5: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:33:23: undefined: arr2

    /tmp/tmp_co0ymwy_test.go:38:13: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:42:13: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:45:22: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:46:24: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:47:17: undefined: arr3

    /tmp/tmp_co0ymwy_test.go:47:17: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arrLen := len(arr)\n\n    // Return an empty list if\
    \ the input array is empty.\n    if arrLen == 0 {\n        return []string{}\n\
    \    }\n\n    // Sort by length.\n    arrSorted := make([]int, arrLen)\n    for\
    \ idx := range arr {\n        arrSorted[idx] = arr[idx]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arrSorted)))\n\
    \n    // Create name list.\n    result := make([]string, arrLen)\n    for i, v\
    \ := range arrSorted {\n        switch {\n        case v < 10:\n            result[i]\
    \ = \"One\"\n        case v < 20:\n            result[i] = \"Two\"\n        case\
    \ v < 30:\n            result[i] = \"Three\"\n        case v < 40:\n         \
    \   result[i] = \"Four\"\n        case v < 50:\n            result[i] = \"Five\"\
    \n        case v < 60:\n            result[i] = \"Six\"\n        case v < 70:\n\
    \            result[i] = \"Seven\"\n        case v < 80:\n            result[i]\
    \ = \"Eight\"\n        case v < 90:\n            result[i] = \"Nine\"\n      \
    \  default:\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0dsg05sk_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // Initialize variables\n    var tmp int\n    var newLen int\n    var digit\
    \ int\n    var tmpStr string\n\n    // Iterate each digit\n    for i, v := range\
    \ arr {\n        // Keep track of the digit position\n        tmpStr = \"\"\n\n\
    \        // Keep track of how many digits we've used\n        newLen = 0\n\n \
    \       // Iterate each digit in the number\n        for digit := 0; digit < 10;\
    \ digit++ {\n            // Keep track of the current digit\n            tmp =\
    \ 0\n\n            // Get the current digit\n            if digit < v {\n    \
    \            tmp = v % 10\n            } else {\n                tmp = v % 10\
    \ + 10\n\n                // Keep track of the digit count\n                newLen++\n\
    \            }\n\n            // Reverse the digits from the current digit to\
    \ the end of the list\n            for j := digit + 1; j < len(arr); j++ {\n \
    \               arr[j] = arr[j] % 10 + tmp\n            }\n        }\n\n     \
    \   // Reverse the digits from the first digit to the last digit in the list\n\
    \        for j := digit + 1; j < len(arr); j++ {\n            arr[j] = arr[j]\
    \ % 10\n        }\n\n        // Append the digits as strings to the temporary\
    \ string\n        for j := 0; j < newLen; j++ {\n            tmpStr += name[arr[j]%10]\n\
    \        }\n    }\n\n    // Return the temporary string\n    return []string{tmpStr}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp500m5lxb_test.go:32:9: i declared but not used

    /tmp/tmp500m5lxb_test.go:67:23: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := map[int]string{}\n    for _, v := range arr {\n\
    \        m[v] = m[v] + \"One\"\n    }\n    arr2 = make([]int, len(m))\n    for\
    \ i, v := range m {\n        arr2[i] = v\n    }\n    sort.Sort(ByLength(arr2))\n\
    \    res = make([]string, len(arr))\n    for i, v := range arr2 {\n        res[i]\
    \ = m[v]\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ggobrab_test.go:25:5: undefined: arr2

    /tmp/tmp4ggobrab_test.go:27:9: undefined: arr2

    /tmp/tmp4ggobrab_test.go:29:5: undefined: sort

    /tmp/tmp4ggobrab_test.go:29:15: undefined: ByLength

    /tmp/tmp4ggobrab_test.go:29:24: undefined: arr2

    /tmp/tmp4ggobrab_test.go:30:5: undefined: res

    /tmp/tmp4ggobrab_test.go:31:23: undefined: arr2

    /tmp/tmp4ggobrab_test.go:32:9: undefined: res

    /tmp/tmp4ggobrab_test.go:34:12: undefined: res

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, val := range arr {\n        if val < 1 || val\
    \ > 9 {\n            continue\n        }\n        result := []string{\n      \
    \      \"One\",\n            \"Two\",\n            \"Three\",\n            \"\
    Four\",\n            \"Five\",\n            \"Six\",\n            \"Seven\",\n\
    \            \"Eight\",\n            \"Nine\",\n        }[val]\n        for _,\
    \ item := range result {\n            result = append(result, item)\n        }\n\
    \    }\n    return reverse(result)\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_qmidkuc_test.go:41:29: first argument to append must be a slice; have
    result (variable of type string)

    /tmp/tmp_qmidkuc_test.go:44:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, x := range arr {\n \
    \       if x < 1 || x > 9 {\n            continue\n        }\n        switch x\
    \ {\n        case 1, 4, 5, 8:\n            x -= 1\n        case 2, 3:\n      \
    \      x = 9 - x\n        }\n        result = append(result, str[int(x)])\n  \
    \  }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahdbzzwd_test.go:32:33: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    // If any number in the list is greater than 9, ignore it\n    for _, v\
    \ := range arr {\n        if v > 9 {\n            return []string{}\n        }\n\
    \    }\n\n    // Sort the list by length\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n\
    \    // Reverse the sorted list\n    for i := len(arr) - 1; i >= 0; i-- {\n  \
    \      arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    }\n\n    //\
    \ Replace the digits by corresponding names\n    arr[0] = digits[arr[0]]\n   \
    \ arr[1] = digits[arr[1]]\n    arr[2] = digits[arr[2]]\n    arr[3] = digits[arr[3]]\n\
    \    arr[4] = digits[arr[4]]\n    arr[5] = digits[arr[5]]\n    arr[6] = digits[arr[6]]\n\
    \    arr[7] = digits[arr[7]]\n    arr[8] = digits[arr[8]]\n\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pf6ox98_test.go:33:5: undefined: sort

    /tmp/tmp9pf6ox98_test.go:34:9: no new variables on left side of :=

    /tmp/tmp9pf6ox98_test.go:41:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:42:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:43:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:44:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:45:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:46:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:47:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:48:14: undefined: digits

    /tmp/tmp9pf6ox98_test.go:48:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // if arr is empty or contains invalid integer(s)\n \
    \   if len(arr) == 0 || len(arr) > 9 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    reverse(arr)\n\n    // for each integer between 1 and 9 inclusive in the\
    \ array\n    for i := 1; i <= 9; i++ {\n        // if the integer is in the array\n\
    \        if arr[i-1] != i {\n            // ignore it\n            continue\n\
    \        }\n\n        // convert it into string \"One\", \"Two\", \"Three\", etc.\n\
    \        arr[i-1] = \"One\"\n        arr[i-9] = \"Nine\"\n    }\n\n    // make\
    \ a slice of the string array and return it\n    return arr[0:]\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16wsyezo_test.go:25:5: undefined: sort

    /tmp/tmp16wsyezo_test.go:26:5: undefined: reverse

    /tmp/tmp16wsyezo_test.go:37:20: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp16wsyezo_test.go:38:20: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmp16wsyezo_test.go:42:15: cannot use arr[0:] (value of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var ret []string\n\n    if len(arr) <= 0 {\n        return\
    \ ret\n    }\n\n    for idx, item := range arr {\n        if item < 0 || item\
    \ > 9 {\n            continue\n        }\n\n        for j, _ := range ret {\n\
    \            if j == idx {\n                continue\n            }\n\n      \
    \      if item >= 10 {\n                ret [j] = fmt.Sprintf(\"%v\", item)\n\
    \            } else {\n                ret [j] = fmt.Sprintf(\"%v\", item)+string(j+1)\n\
    \            }\n        }\n    }\n\n    return ret\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp7vs62htx_test.go:40:51: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var names []string\n    var index int\n    for index,\
    \ element := range arr {\n        if element == 1 {\n            names = append(names,\
    \ One)\n        } else if element == 2 {\n            names = append(names, Two)\n\
    \        } else if element == 3 {\n            names = append(names, Three)\n\
    \        } else if element == 4 {\n            names = append(names, Four)\n \
    \       } else if element == 5 {\n            names = append(names, Five)\n  \
    \      } else if element == 6 {\n            names = append(names, Six)\n    \
    \    } else if element == 7 {\n            names = append(names, Seven)\n    \
    \    } else if element == 8 {\n            names = append(names, Eight)\n    \
    \    } else if element == 9 {\n            names = append(names, Nine)\n     \
    \   } else {\n            fmt.Println(\"strange number\")\n        }\n    }\n\n\
    \    // sort and reverse\n    sort.Sort(ByLength(arr))\n    for index, element\
    \ := range arr {\n        if element != 1 {\n            arr[index] = names[element]\n\
    \        }\n    }\n\n    // replace with names\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpws5yldk7_test.go:25:35: undefined: One

    /tmp/tmpws5yldk7_test.go:27:35: undefined: Two

    /tmp/tmpws5yldk7_test.go:29:35: undefined: Three

    /tmp/tmpws5yldk7_test.go:31:35: undefined: Four

    /tmp/tmpws5yldk7_test.go:33:35: undefined: Five

    /tmp/tmpws5yldk7_test.go:35:35: undefined: Six

    /tmp/tmpws5yldk7_test.go:37:35: undefined: Seven

    /tmp/tmpws5yldk7_test.go:39:35: undefined: Eight

    /tmp/tmpws5yldk7_test.go:41:35: undefined: Nine

    /tmp/tmpws5yldk7_test.go:48:5: undefined: sort

    /tmp/tmpws5yldk7_test.go:48:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    n := len(arr)\n    s := make([]string, n)\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            s[j-i-1]\
    \ = str[arr[i]-1]\n        }\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > 9 {\n            s[j-i-1] = \"One\"\n            continue\n       \
    \ }\n        if arr[i] == 1 {\n            s[j-i-1] = \"One\"\n            continue\n\
    \        }\n        if arr[i] == 2 {\n            s[j-i-1] = \"Two\"\n       \
    \     continue\n        }\n        if arr[i] == 3 {\n            s[j-i-1] = \"\
    Three\"\n            continue\n        }\n        if arr[i] == 4 {\n         \
    \   s[j-i-1] = \"Four\"\n            continue\n        }\n        if arr[i] ==\
    \ 5 {\n            s[j-i-1] = \"Five\"\n            continue\n        }\n    \
    \    if arr[i] == 6 {\n            s[j-i-1] = \"Six\"\n            continue\n\
    \        }\n        if arr[i] == 7 {\n            s[j-i-1] = \"Seven\"\n     \
    \       continue\n        }\n        if arr[i] == 8 {\n            s[j-i-1] =\
    \ \"Eight\"\n            continue\n        }\n        if arr[i] == 9 {\n     \
    \       s[j-i-1] = \"Nine\"\n            continue\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9zi2v3tm_test.go:25:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:25:24: undefined: str

    /tmp/tmp9zi2v3tm_test.go:30:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:34:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:38:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:42:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:46:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:50:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:54:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:58:15: undefined: j

    /tmp/tmp9zi2v3tm_test.go:58:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // If the list is empty, return an empty list:\n    if\
    \ len(arr) == 0 {\n        return []string{}\n    }\n\n    // If the list has\
    \ any strange number ignore it:\n    if len(arr) > 1 && arr[0] == -1 && arr[len(arr)-1]\
    \ == -1 {\n        return []string{}\n    }\n\n    // Sort the integers that are\
    \ between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    sort.Ints(arr)\n\
    \    reverse := make([]int, len(arr))\n    for i, val := range arr {\n       \
    \ reverse[7-i] = val\n    }\n\n    // Return the resulting list.\n    return []string{\n\
    \        \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",\
    \ \"One\",\n    }\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8q6ptp1_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    result\
    \ := make([]string, len(arr))\n    for i := range arr {\n        switch {\n  \
    \      case arr[i] >= 1 && arr[i] <= 9:\n            str1 := \"One\"\n       \
    \     str2 := \"Two\"\n            str3 := \"Three\"\n            str4 := \"Four\"\
    \n            str5 := \"Five\"\n            str6 := \"Six\"\n            str7\
    \ := \"Seven\"\n            str8 := \"Eight\"\n            str9 := \"Nine\"\n\
    \            str10 := \"Ten\"\n            str11 := \"Eleven\"\n            str12\
    \ := \"Twelve\"\n            str13 := \"Thirteen\"\n            str14 := \"Fourteen\"\
    \n            str15 := \"Fifteen\"\n            str16 := \"Sixteen\"\n       \
    \     str17 := \"Seventeen\"\n            str18 := \"Eighteen\"\n            str19\
    \ := \"Nineteen\"\n            str20 := \"Twenty\"\n            str21 := \"Twenty-one\"\
    \n            str22 := \"Twenty-two\"\n            str23 := \"Twenty-three\"\n\
    \            str24 := \"Twenty-four\"\n            str25 := \"Twenty-five\"\n\
    \            str26 := \"Twenty-six\"\n            str27 := \"Twenty-seven\"\n\
    \            str28 := \"Twenty-eight\"\n            str29 := \"Twenty-nine\"\n\
    \n            if arr[i] < 20 {\n                result[i] = str1 + str2[arr[i]]\n\
    \            } else {\n                result[i] = str10 + str20[arr[i]-28]\n\
    \            }\n        case arr[i] >= 10 && arr[i] <= 19:\n            str1 :=\
    \ \"Ten\"\n            str2 := \"Eleven\"\n            str3 := \"Twelve\"\n  \
    \          str4 := \"Thirteen\"\n            str5 := \"Fourteen\"\n          \
    \  str6 := \"Fifteen\"\n            str7 := \"Sixteen\"\n            str8 := \"\
    Seventeen\"\n            str9 := \"Eighteen\"\n            str10 := \"Nineteen\"\
    \n            str11 := \"Twenty\"\n            str12 := \"Twenty-one\"\n     \
    \       str13 := \"Twenty-two\"\n            str14 := \"Twenty-three\"\n     \
    \       str15 \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv46ep4tc_test.go:79:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var output []string\n\n    if len(arr) == 0 {\n     \
    \   return output\n    }\n\n    for i := 1; i < 10; i++ {\n        j := i\n  \
    \      for ; j < 10; j++ {\n            if arr[j-1] < i {\n                break\n\
    \            }\n        }\n\n        j += 1\n        for ; j < 10; j++ {\n   \
    \         if arr[j-1] > i {\n                break\n            }\n        }\n\
    \n        if j < 10 {\n            output = append(output, fmt.Sprintf(\"%v\"\
    , arr[j-1]))\n        }\n    }\n\n    return output\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc0000be630, 0x8, 0x0?})\n\t\
    /tmp/tmptpdojdpg_test.go:30 +0x215\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmptpdojdpg_test.go:57 +0xd5\ntesting.tRunner(0xc0001036c0, 0x529038)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075452
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    sorted := reverse(arr[:9])\n    for index, number :=\
    \ range arr {\n        if number >= 1 && number <= 9 {\n            sorted = append(sorted,\
    \ map[int]string{number: one[number]})\n        } else {\n            sorted =\
    \ append(sorted, map[int]string{number: one[number]})\n        }\n    }\n    return\
    \ sorted\n}\n</code>\n<|/ a tags=algorithm,sorting,go dscore=1 |>\n<| a dscore=0\
    \ |>\nIf your input is sorted, you can do a binary search to find the location\
    \ of the first 9 and then do a bubble sort on elements greater than the 9th element.\
    \ For the other elements, just do a normal sort.\nThis will be O(n).\n<|/ a tags=algorithm,sorting,go\
    \ |>\n<| c |>\nThe question asks for an algorithm that runs in `O(n)`, not `O(n\
    \ log n)`\n<|/ c |>\n<| c |>\n, Thanks. Fixed it.\n<|/ c |>\n<| a tags=algorithm,sorting,go\
    \ dscore=0 |>\nA solution for your problem is to have a map which has keys as\
    \ digits and values like \"One\", \"Two\" etc. Then you can simply sort your array\
    \ and then replace values in map with values from string array accordingly.\n\
    <|/ a |>\n<| c |>\nYes, but then the map would be O(n), where n is the length\
    \ of the array.\n<|/ c |>\n<| c |>\n, That is true but we can have a map with\
    \ O(n) complexity. You have to keep track of first 9 elements and then for every\
    \ element greater than or equal to 9, you can swap the element. Complexity will\
    \ be O(n + 9) which is same as O(n)\n<|/ c |>\n<| a |>\nI ended up writing this\
    \ algorithm, and I wanted to share it to help others who come across the same\
    \ problem.\nFirst you need to define the digits in the input. These can be done\
    \ with a map, where you map each number to a string. One way of doing this is\
    \ using map[int]string as in the other answers, a more elegant way of doing it\
    \ is to use map[int]string{number: one[number]}\nI ended up using a map[int]string\
    \ since I wanted to use each number as it was sorted in the input array (as opposed\
    \ to using a range of numbers in the input array)\nThe first thing I did was create\
    \ a map from the input array, where each number is the value at the index of that\
    \ number in the original array\n<code>\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn8y014rq_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    length := len(arr)\n    for\
    \ i := 0; i < length; i++ {\n        current := arr[i]\n        if current <=\
    \ 9 && current >= 1 {\n            start = current - 1\n            end = current\
    \ + 1\n            if start > end {\n                start, end = end, start\n\
    \            }\n            fmt.Println(\"start:\", start, \"end:\", end, \"current:\"\
    , current)\n            result := append(result, by_length_helper(start, end)...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0g8_4sy9_test.go:26:13: undefined: start

    /tmp/tmp0g8_4sy9_test.go:27:13: undefined: end

    /tmp/tmp0g8_4sy9_test.go:28:16: undefined: start

    /tmp/tmp0g8_4sy9_test.go:28:24: undefined: end

    /tmp/tmp0g8_4sy9_test.go:29:24: undefined: end

    /tmp/tmp0g8_4sy9_test.go:29:30: undefined: end

    /tmp/tmp0g8_4sy9_test.go:29:35: undefined: start

    /tmp/tmp0g8_4sy9_test.go:31:35: undefined: start

    /tmp/tmp0g8_4sy9_test.go:31:50: undefined: end

    /tmp/tmp0g8_4sy9_test.go:32:38: undefined: by_length_helper

    /tmp/tmp0g8_4sy9_test.go:32:38: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := make([]string, len(arr))\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n\
    \        }\n        out[i] = \"One\"\n        if arr[i] == 1 {\n            out[i]\
    \ = \"Two\"\n        }\n        if arr[i] == 2 {\n            out[i] = \"Three\"\
    \n        }\n        if arr[i] == 3 {\n            out[i] = \"Four\"\n       \
    \ }\n        if arr[i] == 4 {\n            out[i] = \"Five\"\n        }\n    \
    \    if arr[i] == 5 {\n            out[i] = \"Six\"\n        }\n        if arr[i]\
    \ == 6 {\n            out[i] = \"Seven\"\n        }\n        if arr[i] == 7 {\n\
    \            out[i] = \"Eight\"\n        }\n        if arr[i] == 8 {\n       \
    \     out[i] = \"Nine\"\n        }\n        if arr[i] == 9 {\n            out[i]\
    \ = \"Ten\"\n        }\n        if arr[i] > 10 {\n            out[i] = fmt.Sprintf(\"\
    %d\", arr[i]%10)\n        }\n    }\n    return out\n}\n`\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_sojsdac_test.go:60:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075451
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil || len(arr) == 0 {\n        return nil\n\
    \    }\n    // sort the list from smallest to largest\n    sort.Sort(sort.Reverse(arr))\n\
    \    // create map to store the name of each digit\n    m := map[int]string{}\n\
    \    // go through each element of the array\n    for _, i := range arr {\n  \
    \      switch i {\n        case 1:\n            m[i] = \"One\"\n        case 2:\n\
    \            m[i] = \"Two\"\n        case 3:\n            m[i] = \"Three\"\n \
    \       case 4:\n            m[i] = \"Four\"\n        case 5:\n            m[i]\
    \ = \"Five\"\n        case 6:\n            m[i] = \"Six\"\n        case 7:\n \
    \           m[i] = \"Seven\"\n        case 8:\n            m[i] = \"Eight\"\n\
    \        case 9:\n            m[i] = \"Nine\"\n        default:\n            //\
    \ if the element is not between 1 and 9, ignore it\n            continue\n   \
    \     }\n    }\n    // go through the map and convert each string to the corresponding\
    \ name\n    b := make([]string, 0, len(m))\n    for k, v := range m {\n      \
    \  b = append(b, v)\n    }\n    return b\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nr8li8z_test.go:25:5: undefined: sort

    /tmp/tmp6nr8li8z_test.go:56:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil || len(arr) == 0 {\n        return []string{}\n\
    \    }\n\n    result := []string{}\n    temp := 0\n    for _, i := range arr {\n\
    \        if i < 9 {\n            temp = i\n        } else {\n            temp\
    \ = temp - 10 + i\n        }\n        result = append(result, strconv(nix_strings[temp]))\n\
    \    }\n    return append(result, strconv(nix_strings[0]))\n}\n\nvar nix_strings\
    \ map[int]string\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhxj0c4f_test.go:33:33: undefined: strconv

    /tmp/tmpjhxj0c4f_test.go:35:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // If list is empty, return an empty list:\n    if len(arr)\
    \ == 0 {\n        return nil\n    }\n\n    // Initialize new list and fill it\
    \ with the numbers 1 to 9\n    var newArr []string\n    for j := 0; j < len(arr);\
    \ j++ {\n        // Add the number in the given index to the new list:\n     \
    \   newArr = append(newArr, fmt.Sprintf(\"%d\", arr[j]))\n    }\n\n    // Sort\
    \ the new list from largest to smallest:\n    newArr = append(newArr, newArr[0])\
    \ // Add number 1 to the beginning of the list\n    newArr = append(newArr, newArr[0])\
    \ // Add number 1 to the beginning of the list\n\n    // Reverse the new list:\n\
    \    newArr = append(newArr, newArr[len(newArr)-1]) // Add number 9 to the end\
    \ of the list\n    newArr = append(newArr, newArr[len(newArr)-1]) // Add number\
    \ 9 to the end of the list\n\n    // Replace each number with its corresponding\
    \ string:\n    for j := 0; j < len(newArr); j++ {\n        newArr[j] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[newArr[j]]\n    }\n\n    // Return list of strings:\n    return newArr\n\
    }\n`\n\nconst strSlice = `package by_slice_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2eh759hc_test.go:59:1: expected declaration, found `


    const strSlice = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var output []string\n    var rev_arr []int\n    for _,\
    \ v := range arr {\n        if 1 <= v && v <= 9 {\n            rev_arr = append(rev_arr,\
    \ v)\n        } else {\n            continue\n        }\n    }\n    for _, v :=\
    \ range rev_arr {\n        output = append(output, fmt.Sprintf(\"%s\", get_name_by_number(v)))\n\
    \    }\n    return output\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3030lqu2_test.go:31:51: undefined: get_name_by_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, 0, 10)\n    for _, a := range arr\
    \ {\n        if a >= 1 && a <= 9 {\n            arr = append(arr, 0)\n       \
    \ } else {\n            arr = append(arr, a)\n        }\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    for _, a := range arr {\n        if a > 9 {\n            arr = append(arr,\
    \ fmt.Sprintf(\"%d%s\", a, by_length_test.One[a-10]))\n        } else {\n    \
    \        arr = append(arr, fmt.Sprintf(\"%d%s\", a, by_length_test.Two[a]))\n\
    \        }\n    }\n\n    return arr\n}\n`\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo8pawg_9_test.go:41:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ // create reverse sorted list\n    revlist := make([]int, len(arr))\n    for\
    \ i := 0; i < len(arr); i++ {\n        revlist[len(arr) - 1 - i] = arr[i]\n  \
    \  }\n\n    // change each index with corresponding name\n    arr2 := make([]string,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr2[i] = names[arr2[i]]\n\
    \    }\n\n    // join both lists\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp55cp8rxa_test.go:34:19: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    var result []string\n    for _, number\
    \ := range arr {\n        if number >= 1 && number <= 9 {\n            result\
    \ = append(result, \"One\")\n        } else if number >= 10 && number <= 99 {\n\
    \            result = append(result, \"Two\")\n        } else if number >= 100\
    \ && number <= 999 {\n            result = append(result, \"Three\")\n       \
    \ } else if number >= 1000 && number <= 9999 {\n            result = append(result,\
    \ \"Four\")\n        } else if number >= 10000 && number <= 99999 {\n        \
    \    result = append(result, \"Five\")\n        } else if number >= 100000 &&\
    \ number <= 999999 {\n            result = append(result, \"Six\")\n        }\
    \ else if number >= 1000000 && number <= 9999999 {\n            result = append(result,\
    \ \"Seven\")\n        } else if number >= 10000000 && number <= 99999999 {\n \
    \           result = append(result, \"Eight\")\n        } else if number >= 100000000\
    \ && number <= 999999999 {\n            result = append(result, \"Nine\")\n  \
    \      } else {\n            continue\n        }\n    }\n    reverse(result)\n\
    \    var result2 []string\n    for _, number := range result {\n        if number\
    \ == \"One\" {\n            result2 = append(result2, \"One\")\n        } else\
    \ if number == \"Two\" {\n            result2 = append(result2, \"Two\")\n   \
    \     } else if number == \"Three\" {\n            result2 = append(result2, \"\
    Three\")\n        } else if number == \"Four\" {\n            result2 = append(result2,\
    \ \"Four\")\n        } else if number == \"Five\" {\n            result2 = append(result2,\
    \ \"Five\")\n        } else if number == \"Six\" {\n            result2 = append(result2,\
    \ \"Six\")\n        } else if number == \"Seven\" {\n            result2 = append(result2,\
    \ \"Seven\")\n        } else if number == \"Eight\" {\n            result2 = append(result2,\
    \ \"Eight\")\n        } else if number == \"Nine\" {\n            result2 = append(result2,\
    \ \"Nine\")\n        } else {\n            continue\n        }\n    }\n    return\
    \ result2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fiqimm9_test.go:21:5: undefined: sort

    /tmp/tmp_fiqimm9_test.go:46:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := reverse(arr)\n    switch len(arr) {\n    case\
    \ 0:\n        return []string{}\n    case 1:\n        return oneOrZero(arr[0])\n\
    \    case 2:\n        return twoOrFive(arr[0], arr[1])\n    case 3:\n        return\
    \ threeOrTen(arr[0], arr[1], arr[2])\n    case 4:\n        return fourOrTwenty(arr[0],\
    \ arr[1], arr[2], arr[3])\n    case 5:\n        return fiveOrThirty(arr[0], arr[1],\
    \ arr[2], arr[3], arr[4])\n    case 6:\n        return sixOrForty(arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5])\n    case 7:\n        return sevenOrHundred(arr[0],\
    \ arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    case 8:\n        return\
    \ eightOrNine(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n\
    \    case 9:\n        return nineOrOne(arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8])\n    default:\n        return sort.Sort(arr)\n\
    \    }\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpby1zcqjz_test.go:21:9: no new variables on left side of :=

    /tmp/tmpby1zcqjz_test.go:21:12: undefined: reverse

    /tmp/tmpby1zcqjz_test.go:26:16: undefined: oneOrZero

    /tmp/tmpby1zcqjz_test.go:28:16: undefined: twoOrFive

    /tmp/tmpby1zcqjz_test.go:30:16: undefined: threeOrTen

    /tmp/tmpby1zcqjz_test.go:32:16: undefined: fourOrTwenty

    /tmp/tmpby1zcqjz_test.go:34:16: undefined: fiveOrThirty

    /tmp/tmpby1zcqjz_test.go:36:16: undefined: sixOrForty

    /tmp/tmpby1zcqjz_test.go:38:16: undefined: sevenOrHundred

    /tmp/tmpby1zcqjz_test.go:40:16: undefined: eightOrNine

    /tmp/tmpby1zcqjz_test.go:40:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    n := len(arr)\n    if n < 1 {\n        return nil\n \
    \   }\n    s := make([]string, len(arr))\n    for i := range arr {\n        r\
    \ := arr[i]\n        if r >= 1 && r <= 9 {\n            s[i] = \"One\"\n     \
    \   } else if r >= 10 && r <= 99 {\n            s[i] = \"Two\"\n        } else\
    \ if r >= 100 && r <= 999 {\n            s[i] = \"Three\"\n        } else if r\
    \ >= 1000 && r <= 9999 {\n            s[i] = \"Four\"\n        } else if r >=\
    \ 10000 && r <= 9999999 {\n            s[i] = \"Five\"\n        } else if r >=\
    \ 1000000 && r <= 99999999 {\n            s[i] = \"Six\"\n        } else if r\
    \ >= 10000000 && r <= 99999999999 {\n            s[i] = \"Seven\"\n        } else\
    \ if r >= 1000000000 && r <= 999999999999 {\n            s[i] = \"Eight\"\n  \
    \      } else if r >= 100000000000 && r <= 999999999999999 {\n            s[i]\
    \ = \"Nine\"\n        } else {\n            s[i] = \"Unknown\"\n        }\n  \
    \  }\n    sort.Strings(s)\n    for i := 0; i < n; i++ {\n        s[i] = s[n-i-1]\n\
    \    }\n    return s\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjcevefg_test.go:50:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result +=\
    \ []string{\n            fmt.Sprintf(\"%v\", v),\n        }\n    }\n    reverse(result)\n\
    \    for i := 0; i < len(result); i++ {\n        result[i] = nameMap[int(result[i])]\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7pcvpo8_test.go:26:9: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpj7pcvpo8_test.go:30:5: undefined: reverse

    /tmp/tmpj7pcvpo8_test.go:32:21: undefined: nameMap

    /tmp/tmpj7pcvpo8_test.go:32:33: cannot convert result[i] (variable of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var names []string\n\n    // This loop is to remove any\
    \ values greater than 9 and sort them.\n    for _, number := range arr {\n   \
    \     if number > 9 {\n            arr = append(arr, number)\n            sort.Ints(arr)\n\
    \            arr = reverse(arr)\n        }\n    }\n\n    for _, number := range\
    \ arr {\n        names = append(names, number_to_name(number))\n    }\n\n    return\
    \ names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2e901umf_test.go:27:13: undefined: sort

    /tmp/tmp2e901umf_test.go:28:19: undefined: reverse

    /tmp/tmp2e901umf_test.go:33:31: undefined: number_to_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var tmp []int\n    if len(arr) > 0 {\n        for _,\
    \ number := range arr {\n            if number == 1 || number == -1 || number\
    \ == 55 || number > 9 {\n                tmp = append(tmp, number)\n         \
    \   }\n        }\n        sort_by_length(tmp)\n        return reverse_by_length(tmp)\n\
    \    }\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyy6_q6gd_test.go:28:9: undefined: sort_by_length

    /tmp/tmpyy6_q6gd_test.go:29:16: undefined: reverse_by_length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, i := range arr {\n        if i > 9 || i < 1\
    \ {\n            continue\n        }\n        digitStr := strconv.Itoa(i)\n  \
    \      switch i {\n        case 1:\n            result.Put(One, digitStr)\n  \
    \      case 2:\n            result.Put(Two, digitStr)\n        case 3:\n     \
    \       result.Put(Three, digitStr)\n        case 4:\n            result.Put(Four,\
    \ digitStr)\n        case 5:\n            result.Put(Five, digitStr)\n       \
    \ case 6:\n            result.Put(Six,digitStr)\n        case 7:\n           \
    \ result.Put(Seven,digitStr)\n        case 8:\n            result.Put(Eight,digitStr)\n\
    \        case 9:\n            result.Put(Nine, digitStr)\n        }\n    }\n \
    \   for _, v := range result {\n        result = append(result, v)\n    }\n  \
    \  return map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpziagwizk_test.go:29:21: undefined: strconv

    /tmp/tmpziagwizk_test.go:32:20: result.Put undefined (type []string has no field
    or method Put)

    /tmp/tmpziagwizk_test.go:32:24: undefined: One

    /tmp/tmpziagwizk_test.go:34:20: result.Put undefined (type []string has no field
    or method Put)

    /tmp/tmpziagwizk_test.go:34:24: undefined: Two

    /tmp/tmpziagwizk_test.go:36:20: result.Put undefined (type []string has no field
    or method Put)

    /tmp/tmpziagwizk_test.go:36:24: undefined: Three

    /tmp/tmpziagwizk_test.go:38:20: result.Put undefined (type []string has no field
    or method Put)

    /tmp/tmpziagwizk_test.go:38:24: undefined: Four

    /tmp/tmpziagwizk_test.go:40:20: result.Put undefined (type []string has no field
    or method Put)

    /tmp/tmpziagwizk_test.go:40:20: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    arr2 := []string{}\n\
    \    min := arr[0]\n    max := arr[9]\n    min -= 1 // to start from 0\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        } else if arr[i] < min {\n            min = arr[i]\n        }\n    }\n\
    \    // fmt.Printf(\"%d %d %d %d %d %d %d %d\\n\", min, max, arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7])\n    // fmt.Printf(\"arr %v\\n\", arr)\n\
    \    arr2 := append(arr2, fmt.Sprintf(\"%d%s\", max, One[max-min]))\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            arr2 = append(arr2,\
    \ fmt.Sprintf(\"%d%s\", arr[i], Two[max-arr[i]]))\n        } else if arr[i] <\
    \ min {\n            arr2 = append(arr2, fmt.Sprintf(\"%d%s\", arr[i], Three[min-arr[i]]))\n\
    \        }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr2 = append(arr2,\
    \ fmt.Sprintf(\"%d%s\", arr[i], Four[arr[i]]))\n    }\n    return arr2\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2a_jcacu_test.go:21:9: no new variables on left side of :=

    /tmp/tmp2a_jcacu_test.go:35:10: no new variables on left side of :=

    /tmp/tmp2a_jcacu_test.go:35:51: undefined: One

    /tmp/tmp2a_jcacu_test.go:38:61: undefined: Two

    /tmp/tmp2a_jcacu_test.go:40:61: undefined: Three

    /tmp/tmp2a_jcacu_test.go:44:57: undefined: Four

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    n := len(arr)\n    result := make([]string, n)\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] > 9 {\n            continue\n        }\n        k := int(arr[i])\n\
    \        if k <= 9 {\n            result[i] = fmt.Sprintf(\"%d%s\", k, names[k])\n\
    \        } else {\n            result[i] = fmt.Sprintf(\"%d%s\", arr[i], names[arr[i]])\n\
    \        }\n    }\n    return result\n}\n\nvar names = map[int]string{1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpoltu9hiu_test.go:59: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2Two 1One 1One 4Four 5Five 8Eight 2Two 3Three]'\n    ---\
    \ FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpoltu9hiu_test.go:59: expected\
    \ '[One]', got '[1One -1 ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpoltu9hiu_test.go:59: expected '[Three Two One]', got '[1One -1 3Three\
    \ 2Two]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpoltu9hiu_test.go:59:\
    \ expected '[Nine Eight Four]', got '[9Nine 4Four 8Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    l := len(arr)\n    if l == 0 {\n        return nil\n\
    \    }\n    name := []string{}\n    for i := 0; i < l; i++ {\n        if i >=\
    \ 10 {\n            return nil\n        }\n        if arr[i] > 9 {\n         \
    \   arr[i] = arr[i] - 10\n            arr[i] = arr[i] + \"Ten\"\n        } else\
    \ {\n            arr[i] = arr[i] + \"One\"\n        }\n        name = append(name,\
    \ arr[i])\n    }\n    return name\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5utadn7w_test.go:32:22: invalid operation: arr[i] + "Ten" (mismatched
    types int and untyped string)

    /tmp/tmp5utadn7w_test.go:34:22: invalid operation: arr[i] + "One" (mismatched
    types int and untyped string)

    /tmp/tmp5utadn7w_test.go:36:29: cannot use arr[i] (variable of type int) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var (\n        l   = len(arr)\n        ans = []string{}\n\
    \        i, j int\n    )\n    for i < l {\n        if i+1 >= l {\n           \
    \ break\n        }\n        for j = 1; j < 10; j++ {\n            num := arr[i]\
    \ * 10 + j\n            if num < 10 && num >= 1 {\n                ans = append(ans,\
    \ \"One\")\n            } else if num < 100 && num >= 10 {\n                ans\
    \ = append(ans, \"Two\")\n            } else if num < 1000 && num >= 100 {\n \
    \               ans = append(ans, \"Three\")\n            } else if num < 10000\
    \ && num >= 1000 {\n                ans = append(ans, \"Four\")\n            }\
    \ else if num < 100000 && num >= 10000 {\n                ans = append(ans, \"\
    Five\")\n            } else if num < 1000000 && num >= 100000 {\n            \
    \    ans = append(ans, \"Six\")\n            } else if num < 10000000 && num >=\
    \ 1000000 {\n                ans = append(ans, \"Seven\")\n            } else\
    \ if num < 100000000 && num >= 10000000 {\n                ans = append(ans, \"\
    Eight\")\n            } else if num < 1000000000 && num >= 100000000 {\n     \
    \           ans = append(ans, \"Nine\")\n            }\n        }\n        i =\
    \ i + 1\n    }\n    return ans\n}\n`\n\nvar testCases = []\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vk9g80v_test.go:56:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075452
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if !isEmpty(arr) {\n        fmt.Printf(\"PATCH list\\\
    n\")\n        return replaceDigits(arr)\n    }\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk10ypmnq_test.go:21:9: undefined: isEmpty

    /tmp/tmpk10ypmnq_test.go:23:16: undefined: replaceDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr[len(arr)-1] = arr[len(arr)-1] % 10\n    i := 0\n\
    \    result := []string{}\n    for ; i < len(arr); i++ {\n        if arr[i] ==\
    \ 0 || arr[i] == 9 {\n            continue\n        }\n        if arr[i] == 1\
    \ {\n            arr[i] = \"One\"\n            continue\n        }\n        if\
    \ arr[i] == 2 {\n            arr[i] = \"Two\"\n            continue\n        }\n\
    \        if arr[i] == 3 {\n            arr[i] = \"Three\"\n            continue\n\
    \        }\n        if arr[i] == 4 {\n            arr[i] = \"Four\"\n        \
    \    continue\n        }\n        if arr[i] == 5 {\n            arr[i] = \"Five\"\
    \n            continue\n        }\n        if arr[i] == 6 {\n            arr[i]\
    \ = \"Six\"\n            continue\n        }\n        if arr[i] == 7 {\n     \
    \       arr[i] = \"Seven\"\n            continue\n        }\n        if arr[i]\
    \ == 8 {\n            arr[i] = \"Eight\"\n            continue\n        }\n  \
    \      if arr[i] == 9 {\n            arr[i] = \"Nine\"\n            continue\n\
    \        }\n        result = append(result, fmt.Sprintf(\"%v\", arr[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcg8jpfr8_test.go:24:5: undefined: sort

    /tmp/tmpcg8jpfr8_test.go:33:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:37:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:41:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:45:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:49:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:53:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:57:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:61:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:65:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpcg8jpfr8_test.go:65:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // sort descending\n    sort.SliceStable(arr, func(i, j int) bool {\n   \
    \     return arr[i] < arr[j]\n    })\n    // go back to string\n    arr := []string{}\n\
    \    for _, v := range arr {\n        if v > 9 {\n            v = strconv.Itoa(int(v)-1)\n\
    \        }\n        arr = append(arr, strconv.Itoa(int(v)))\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpri0_h1x9_test.go:25:5: undefined: sort

    /tmp/tmpri0_h1x9_test.go:29:9: no new variables on left side of :=

    /tmp/tmpri0_h1x9_test.go:29:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpri0_h1x9_test.go:32:17: undefined: strconv

    /tmp/tmpri0_h1x9_test.go:34:27: undefined: strconv

    /tmp/tmpri0_h1x9_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    res :=\
    \ make([]string, 0, len(arr))\n    for i := range arr {\n        if i < 1 || i\
    \ > 9 {\n            continue\n        }\n        if arr[(i-1)%9] == i {\n   \
    \         continue\n        }\n        res = append(res, fmt.Sprintf(\"%v\", arr[i%9]))\n\
    \    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpd3b1ortc_test.go:54: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[1 1 4 2 3]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n\
    \        tmpd3b1ortc_test.go:54: expected '[One]', got '[55]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpd3b1ortc_test.go:54: expected '[Three Two One]', got '[3]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpd3b1ortc_test.go:54:\
    \ expected '[Nine Eight Four]', got '[4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    s\
    \ := make([]string, len(arr))\n    for i, d := range arr {\n        if d < 1 ||\
    \ d > 9 {\n            continue\n        }\n        s[i] = names[d]\n    }\n \
    \   for i, d := range s {\n        s[i] = string(d)\n    }\n    for i := range\
    \ arr {\n        arr[i] = int(s[i])\n    }\n    return arr\n}\n\n//\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr9kscb4k_test.go:29:16: undefined: names

    /tmp/tmpr9kscb4k_test.go:35:22: cannot convert s[i] (variable of type string)
    to type int

    /tmp/tmpr9kscb4k_test.go:37:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return arr\n    }\n    res\
    \ := make([]string, len(arr))\n    arr2 := make([]int, len(arr))\n    for i :=\
    \ range arr {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(arr2)\n    for i\
    \ := range arr2 {\n        if arr2[i] >= 1 && arr2[i] <= 9 {\n            res[arr2[i]-1]\
    \ = fmt.Sprintf(\"%c\", i)\n        }\n    }\n    for i := range res {\n     \
    \   if res[i] == \"\" {\n            res[i] = \"One\"\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyid2xffb_test.go:22:16: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpyid2xffb_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i]\
    \ < 1 {\n            arr[i] = 9\n        }\n        if arr[i] > 9 {\n        \
    \    arr[i] = 1\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   arr[i] = \"One\"\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n       \
    \ if arr[i] > 1 {\n            arr[i] = \"Two\"\n        }\n        if arr[i]\
    \ < 9 {\n            arr[i] = \"Three\"\n        }\n    }\n    for i := 0; i <\
    \ len(arr); i++ {\n        arr[i] = \"Four\"\n    }\n    for i := len(arr) - 1;\
    \ i > 0; i-- {\n        if arr[i] < 3 {\n            arr[i] = \"Five\"\n     \
    \   }\n        if arr[i] > 7 {\n            arr[i] = \"Six\"\n        }\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        arr[i] = \"Seven\"\n    }\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] > 8 {\n            arr[i]\
    \ = \"Eight\"\n        }\n        if arr[i] < 2 {\n            arr[i] = \"Nine\"\
    \n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        arr[i] = \"One\"\
    \n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkerr7tg0_test.go:24:5: undefined: sort

    /tmp/tmpkerr7tg0_test.go:34:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:38:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:41:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:45:18: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:49:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:52:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:56:18: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:60:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:63:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmpkerr7tg0_test.go:63:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    list := make([]string, len(arr))\n    if arr == nil {\n\
    \        return list\n    }\n\n    // If the list is empty, return an empty list:\n\
    \    if arr == []int {\n        return list\n    }\n\n    // If the list has any\
    \ strange number ignore it:\n    if arr == []int {\n        return list\n    }\n\
    \n    pivot := arr[len(arr)/2]\n\n    for _, num := range arr {\n        if num\
    \ < pivot {\n            list = append(list, names[num])\n        } else if (num\
    \ == pivot) {\n            list = append(list, names[pivot])\n        } else {\n\
    \            list = append(list, names[num-1])\n        }\n    }\n\n    return\
    \ list\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyfd_ft9t_test.go:28:9: expected operand, found ''return''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075453
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Create list of string from integers\n    var s []string\n\
    \    for _, i := range arr {\n        if i >= 1 && i <= 9 {\n            v = fmt.Sprintf(\"\
    %d\", i)\n            s = append(s, v)\n        }\n    }\n    // Sort by reverse\
    \ order\n    sort.SliceStable(s, func(i, j int) bool {\n        return arr[j]\
    \ < arr[i]\n    })\n    // Reverse and replace by name\n    for i := 0; i < len(s);\
    \ i++ {\n        v = s[len(s)-i-1]\n        if v == \"1\" {\n            s[len(s)-i-1]\
    \ = \"One\"\n        } else if v == \"2\" {\n            s[len(s)-i-1] = \"Two\"\
    \n        } else if v == \"3\" {\n            s[len(s)-i-1] = \"Three\"\n    \
    \    } else if v == \"4\" {\n            s[len(s)-i-1] = \"Four\"\n        } else\
    \ if v == \"5\" {\n            s[len(s)-i-1] = \"Five\"\n        } else if v ==\
    \ \"6\" {\n            s[len(s)-i-1] = \"Six\"\n        } else if v == \"7\" {\n\
    \            s[len(s)-i-1] = \"Seven\"\n        } else if v == \"8\" {\n     \
    \       s[len(s)-i-1] = \"Eight\"\n        } else if v == \"9\" {\n          \
    \  s[len(s)-i-1] = \"Nine\"\n        }\n    }\n    // Return list of strings\n\
    \    return s\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dsxfugh_test.go:25:13: undefined: v

    /tmp/tmp7dsxfugh_test.go:26:27: undefined: v

    /tmp/tmp7dsxfugh_test.go:30:5: undefined: sort

    /tmp/tmp7dsxfugh_test.go:35:9: undefined: v

    /tmp/tmp7dsxfugh_test.go:36:12: undefined: v

    /tmp/tmp7dsxfugh_test.go:38:19: undefined: v

    /tmp/tmp7dsxfugh_test.go:40:19: undefined: v

    /tmp/tmp7dsxfugh_test.go:42:19: undefined: v

    /tmp/tmp7dsxfugh_test.go:44:19: undefined: v

    /tmp/tmp7dsxfugh_test.go:46:19: undefined: v

    /tmp/tmp7dsxfugh_test.go:46:19: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    length := len(arr)\n    min := 1\n    max := 9\n    // Get a list of integers\
    \ whose length is greater than min and less than max\n    // In other words, the\
    \ list has the form:\n    // [0, 0, 0, 1, 1, 1, 2, 2, 2, .... 99]\n    numberList\
    \ := make([]int, length)\n    for i := 0; i < length; i++ {\n        if i >= min\
    \ && i <= max {\n            numberList[i] = arr[i]\n        }\n    }\n    //\
    \ Sort the numberList\n    sort.Ints(numberList)\n    // Reverse the result list\n\
    \    reverseResult := make([]string, length)\n    for i := 0; i < length; i++\
    \ {\n        reverseResult[i] = fmt.Sprintf(\"%s\", numberList[length-i-1])\n\
    \    }\n    // Replace the number by its name\n    for i := 0; i < length; i++\
    \ {\n        if i >= min && i <= max {\n            arr[i] = reverseResult[i]\n\
    \        }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ficqicl_test.go:37:5: undefined: sort

    /tmp/tmp9ficqicl_test.go:46:22: cannot use reverseResult[i] (variable of type
    string) as type int in assignment

    /tmp/tmp9ficqicl_test.go:49:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    reverse\
    \ := make([]int, len(arr))\n    for i := range reverse {\n        reverse[i] =\
    \ arr[len(arr)-i]\n    }\n    for i := range arr {\n        if i >= 1 && i <=\
    \ 9 {\n            arr[reverse[i]-1] = nameOfDigit(arr[reverse[i]-1])\n      \
    \  }\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7zfqq0fm_test.go:30:33: undefined: nameOfDigit

    /tmp/tmp7zfqq0fm_test.go:33:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr0 := make([]int, len(arr))\n    arr0[0] = len(arr)\n\
    \    for idx, val := range arr {\n        if val < 1 || val > 9 {\n          \
    \  continue\n        }\n        arr0[idx] = val\n    }\n    arr1 = arr0\n    arr2\
    \ = reverse(arr0)\n    for idx := range arr0 {\n        arr1[idx] = names[arr2[idx]]\n\
    \    }\n    return arr1\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cqdylkd_test.go:29:5: undefined: arr1

    /tmp/tmp_cqdylkd_test.go:30:5: undefined: arr2

    /tmp/tmp_cqdylkd_test.go:30:12: undefined: reverse

    /tmp/tmp_cqdylkd_test.go:32:9: undefined: arr1

    /tmp/tmp_cqdylkd_test.go:32:21: undefined: names

    /tmp/tmp_cqdylkd_test.go:32:27: undefined: arr2

    /tmp/tmp_cqdylkd_test.go:34:12: undefined: arr1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) <= 0 {\n        return []string{}\n    }\n\
    \    sort.Sort(sort.Reverse(arr))\n    str := \"\"\n    index := 0\n    for ;\
    \ index < len(arr); index++ {\n        if index < len(arr) - 1 {\n           \
    \ if arr[index] > arr[index+1] {\n                str = str + fmt.Sprintf(\"%c\"\
    , digits[index])\n                arr[index] = 9\n            } else {\n     \
    \           str = str + fmt.Sprintf(\"%c\", digits[index])\n                arr[index]\
    \ = arr[index+1]\n            }\n        } else {\n            if arr[index] >\
    \ 9 {\n                str = str + fmt.Sprintf(\"%c\", digits[index])\n      \
    \          arr[index] = 9\n            } else {\n                str = str + fmt.Sprintf(\"\
    %c\", digits[index])\n                arr[index] = 0\n            }\n        }\n\
    \    }\n    return []string{str}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w9i5t3k_test.go:24:5: undefined: sort

    /tmp/tmp5w9i5t3k_test.go:30:47: undefined: digits

    /tmp/tmp5w9i5t3k_test.go:33:47: undefined: digits

    /tmp/tmp5w9i5t3k_test.go:38:47: undefined: digits

    /tmp/tmp5w9i5t3k_test.go:41:47: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i, e := range\
    \ arr {\n        if e >= 1 && e <= 9 {\n            arr2[i] = e\n        } else\
    \ {\n            continue\n        }\n    }\n    sort.Ints(arr2)\n    arr3 = append(arr2,\
    \ reverse(arr2[:])...)\n    arr4 = make([]string, len(arr))\n    for i, e := range\
    \ arr {\n        if e < 1 {\n            continue\n        }\n        arr4[i]\
    \ = fmt.Sprintf(\"%v\", e)\n    }\n    return arr4\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8z1afgq_test.go:29:5: undefined: sort

    /tmp/tmpe8z1afgq_test.go:30:5: undefined: arr3

    /tmp/tmpe8z1afgq_test.go:30:25: undefined: reverse

    /tmp/tmpe8z1afgq_test.go:31:5: undefined: arr4

    /tmp/tmpe8z1afgq_test.go:36:9: undefined: arr4

    /tmp/tmpe8z1afgq_test.go:38:12: undefined: arr4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    if len(arr) == 0 {\n      \
    \  return result\n    }\n    first := arr[0]\n    revArr := make([]int, len(arr))\n\
    \    for i, e := range arr {\n        revArr[i] = e\n    }\n    revArr = reverse(revArr)\n\
    \    for _, e := range revArr {\n        result := append(result, str[e])\n  \
    \  }\n    return result\n}\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9gp3y6z_test.go:25:5: first declared but not used

    /tmp/tmpl9gp3y6z_test.go:30:14: undefined: reverse

    /tmp/tmpl9gp3y6z_test.go:32:9: result declared but not used

    /tmp/tmpl9gp3y6z_test.go:32:34: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    len := len(arr)\n    // Ignore empty list\n    if len\
    \ == 0 {\n        return []string{}\n    }\n\n    // Use slice of string\n   \
    \ list := make([]string, len)\n    list := list[0 : len/2]\n\n    // Add all strings\
    \ to list between 1 and 9\n    for i := range arr {\n        if arr[i] >= 1 &&\
    \ arr[i] <= 9 {\n            list[i] = fmt.Sprintf(\"%s\", arr[i])\n        }\n\
    \    }\n    // Reverse list\n    list.reverse()\n\n    // Replace each string\
    \ by its name\n    for i := range list {\n        switch list[i] {\n        case\
    \ \"One\":\n            list[i] = \"One\"\n        case \"Two\":\n           \
    \ list[i] = \"Two\"\n        case \"Three\":\n            list[i] = \"Three\"\n\
    \        case \"Four\":\n            list[i] = \"Four\"\n        case \"Five\"\
    :\n            list[i] = \"Five\"\n        case \"Six\":\n            list[i]\
    \ = \"Six\"\n        case \"Seven\":\n            list[i] = \"Seven\"\n      \
    \  case \"Eight\":\n            list[i] = \"Eight\"\n        case \"Nine\":\n\
    \            list[i] = \"Nine\"\n        default:\n            fmt.Println(\"\
    Unexpected element\")\n        }\n    }\n\n    // Return result\n    return list\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjxv3434_test.go:29:10: no new variables on left side of :=

    /tmp/tmpsjxv3434_test.go:38:10: list.reverse undefined (type []string has no field
    or method reverse)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    length := len(arr[0])\n    var last string\n    for\
    \ _, number := range arr {\n        if number < 0 {\n            return result\n\
    \        }\n        if number > 9 {\n            return result\n        }\n  \
    \      if number < 10 {\n            last = fmt.Sprintf(\"%s\", number%10)\n \
    \           continue\n        }\n        last = \"One\"\n        if number ==\
    \ 9 {\n            last = \"Nine\"\n        }\n        last = fmt.Sprintf(\"%s\"\
    , number%10)\n    }\n    result = append(result, last)\n    return result\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bzq49bg_test.go:25:19: invalid argument: arr[0] (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Add error checks\n    if len(arr) == 0 {\n       \
    \ return []string{}\n    }\n\n    // Sort the list\n    arr.Sort()\n\n    // Replace\
    \ the number between 1-9 with the corresponding name\n    var result = make([]string,\
    \ len(arr))\n    for index, i := range arr {\n        if i <= 9 {\n          \
    \  result[index] = names[i]\n        } else {\n            result[index] = fmt.Sprintf(\"\
    %d\", i)\n        }\n    }\n\n    return result\n}\n`\n\nvar by_length_tests =\
    \ []testcase{\n\t{input: []int{}, want: []string{}},\n\t{input: []int{2, 1, 1,\
    \ 4, 5, 8, 2, 3}, want: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"}},\n\t{input: []int{1, -1, 55}, want: []string{\"\
    One\"}},\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx5bynul8_test.go:41:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // If list is empty, return an empty list:\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    // If list has any strange number\
    \ ignore it:\n    str := fmt.Sprintf(\"%d\", arr[0])\n    for _, v := range arr[1:]\
    \ {\n        if v < 1 {\n            continue\n        }\n        if v > 9 {\n\
    \            continue\n        }\n        str = fmt.Sprintf(\"%s%d\", str, v)\n\
    \    }\n    return []string{str}\n}\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpho4ufpn5_test.go:56: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[21145823]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n\
    \        tmpho4ufpn5_test.go:56: expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpho4ufpn5_test.go:56: expected '[Three Two One]', got '[132]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpho4ufpn5_test.go:56:\
    \ expected '[Nine Eight Four]', got '[948]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := map[string]int{\"One\": 1, \"Two\": 2, \"Three\"\
    : 3, \"Four\": 4, \"Five\": 5,\n        \"Six\": 6, \"Seven\": 7, \"Eight\": 8,\
    \ \"Nine\": 9}\n    var ret []string\n\n    if len(arr) == 0 {\n        return\
    \ ret\n    }\n\n    for _, item := range arr {\n        if item < 1 || item >\
    \ 9 {\n            continue\n        }\n        ret += map[string]int{\n     \
    \       fmt.Sprintf(\"%v\", item): m[fmt.Sprintf(\"%v\", item)],\n        }[fmt.Sprintf(\"\
    %v\", item)]\n    }\n\n    return ret\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_1rjx5aw_test.go:33:9:\
    \ invalid operation: ret += map[string]int{\u2026}[fmt.Sprintf(\"%v\", item)]\
    \ (mismatched types []string and int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var ret []string\n    for _, num := range arr {\n   \
    \     if num >= 1 && num <= 9 {\n            ret = append(ret, fmt.Sprintf(\"\
    %v\", num))\n        }\n    }\n    if len(ret) == 0 {\n        return nil\n  \
    \  }\n    ret = append(ret, \"One\")\n    ret = append(ret, \"Two\")\n    ret\
    \ = append(ret, \"Three\")\n    ret = append(ret, \"Four\")\n    ret = append(ret,\
    \ \"Five\")\n    ret = append(ret, \"Six\")\n    ret = append(ret, \"Seven\")\n\
    \    ret = append(ret, \"Eight\")\n    ret = append(ret, \"Nine\")\n    ret =\
    \ append(ret, \"Ten\")\n    ret = append(ret, \"Eleven\")\n    ret = append(ret,\
    \ \"Twelve\")\n    ret = append(ret, \"Thirteen\")\n    ret = append(ret, \"Fourteen\"\
    )\n    ret = append(ret, \"Fifteen\")\n    ret = append(ret, \"Sixteen\")\n  \
    \  ret = append(ret, \"Seventeen\")\n    ret = append(ret, \"Eighteen\")\n   \
    \ ret = append(ret, \"Nineteen\")\n    ret = append(ret, \"Twenty\")\n    ret\
    \ = append(ret, \"Twenty-one\")\n    ret = append(ret, \"Twenty-two\")\n    ret\
    \ = append(ret, \"Twenty-three\")\n    ret = append(ret, \"Twenty-four\")\n  \
    \  ret = append(ret, \"Twenty-five\")\n    ret = append(ret, \"Twenty-six\")\n\
    \    ret = append(ret, \"Twenty-seven\")\n    ret = append(ret, \"Twenty-eight\"\
    )\n    ret = append(ret, \"Twenty-nine\")\n    ret = append(ret, \"Twenty-ten\"\
    )\n    ret = append(ret, \"Twenty-eleven\")\n    ret = append(ret, \"Twenty-twelve\"\
    )\n    ret = append(ret, \"Twenty-thirteen\")\n    ret = append(ret, \"Twenty-fourteen\"\
    )\n    ret = append(ret, \"Twenty-fifteen\")\n    ret = append(ret, \"Twenty-sixteen\"\
    )\n    ret = append(ret, \"Twenty-seventeen\")\n    ret = append(ret, \"Twenty-eighteen\"\
    )\n    ret = append(ret, \"Twenty-nineteen\")\n    ret = append(ret, \"Twenty-twenty\"\
    )\n    ret = append(ret, \"Twenty-twenty-one\")\n    ret = append(ret, \"Twenty-twenty-two\"\
    )\n    ret = append(ret, \"Twenty-twenty-three\")\n    ret = \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr59gxiwh_test.go:74:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075454
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    n := 0\n    max := len(arr) - 1\n    // Find minimum\
    \ number that could make up all numbers in the array (9)\n    for _, v := range\
    \ arr {\n        n = (n<<1) + v\n        if n > 9 {\n            max = n - 9\n\
    \        }\n    }\n    // Find numbers from 0 to max-1\n    result := make([]string,\
    \ max)\n    for i := 0; i < max; i++ {\n        idx := int(arr[i] - 1)\n     \
    \   result[i] = fmt.Sprintf(\"%v\", idxToDigit(idx))\n    }\n    // Reverse list\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = reverse(arr[i],\
    \ result[i])\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yt0h8qb_test.go:34:39: undefined: idxToDigit

    /tmp/tmp5yt0h8qb_test.go:37:5: undefined: sort

    /tmp/tmp5yt0h8qb_test.go:39:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := []string{}\n    min := min(arr)\n    for _, v\
    \ := range arr {\n        if v >= min && v <= 9 {\n            out = append(out,\
    \ fmt.Sprintf(\"%v\", v))\n        }\n    }\n\n    reverse_string(out)\n    for\
    \ _, v := range out {\n        for j, w := range one_name {\n            if v\
    \ == w {\n                out[j] = v\n            }\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikae6f9e_test.go:22:12: undefined: min

    /tmp/tmpikae6f9e_test.go:29:5: undefined: reverse_string

    /tmp/tmpikae6f9e_test.go:31:27: undefined: one_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if 0 == len(arr) {\n        return nil\n    }\n\n   \
    \ min := 1\n    max := 9\n    result := make([]string, len(arr))\n\n    for i\
    \ := range arr {\n        if arr[i] < min || arr[i] > max {\n            continue\n\
    \        }\n        j := int(arr[i] - min)\n        result[i] = names[j]\n   \
    \ }\n\n    for i := range result {\n        result[i] = fmt.Sprintf(names[i],\
    \ result[i])\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9yyvl4a_test.go:34:21: undefined: names

    /tmp/tmp_9yyvl4a_test.go:38:33: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var stringArr []string\n    for _, e := range arr {\n\
    \        intValue := int(e)\n        if intValue < 1 || intValue > 9 {\n     \
    \       continue\n        }\n        stringArr = append(stringArr, fmt.Sprintf(\"\
    %v\", intValue))\n    }\n    reverse(stringArr)\n    for _, e := range stringArr\
    \ {\n        e := strings.Replace(e, \"0\", \"One\", -1)\n        e := strings.Replace(e,\
    \ \"1\", \"Two\", -1)\n        e := strings.Replace(e, \"2\", \"Three\", -1)\n\
    \        e := strings.Replace(e, \"3\", \"Four\", -1)\n        e := strings.Replace(e,\
    \ \"4\", \"Five\", -1)\n        e := strings.Replace(e, \"5\", \"Six\", -1)\n\
    \        e := strings.Replace(e, \"6\", \"Seven\", -1)\n        e := strings.Replace(e,\
    \ \"7\", \"Eight\", -1)\n        e := strings.Replace(e, \"8\", \"Nine\", -1)\n\
    \        e = strings.Replace(e, \"9\", \"Ten\", -1)\n        e := strings.Replace(e,\
    \ \"10\", \"Eleven\", -1)\n        e := strings.Replace(e, \"11\", \"Twelve\"\
    , -1)\n        e := strings.Replace(e, \"12\", \"Thirteen\", -1)\n        e :=\
    \ strings.Replace(e, \"13\", \"Fourteen\", -1)\n        e := strings.Replace(e,\
    \ \"14\", \"Fifteen\", -1)\n        e := strings.Replace(e, \"15\", \"Sixteen\"\
    , -1)\n        e := strings.Replace(e, \"16\", \"Seventeen\", -1)\n        e :=\
    \ strings.Replace(e, \"17\", \"Eighteen\", -1)\n        e := strings.Replace(e,\
    \ \"18\", \"Nineteen\", -1)\n        e := strings.Replace(e, \"19\", \"Twenty\"\
    , -1)\n        e := strings.Replace(e, \"20\", \"Twenty-one\", -1)\n        e\
    \ := strings.Replace(e, \"21\", \"Twenty-two\", -1)\n        e := strings.Replace(e,\
    \ \"22\", \"Twenty-three\", -1)\n        e := strings.Replace(e, \"23\", \"Twenty-four\"\
    , -1)\n        e := strings.Replace(e, \"24\", \"Twenty-five\", -1)\n        e\
    \ := strings.Replace(e, \"25\", \"Twenty-six\", -1)\n        e := strings.Replace(e,\
    \ \"26\", \"Twenty-seven\", -1)\n        e := strings.Replace(e, \"27\", \"Twenty-eight\"\
    , -1)\n        e := strings.Replace(e, \"28\", \"Twenty-nine\", -1)\n        e\
    \ := strings.Replace(e, \"29\", \"Thirty\", -1)\n        e := strings.Replace(e\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4no2xp5y_test.go:61:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := []string{}\n    if len(arr) == 0 {\n        return\
    \ out\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] <= 9 &&\
    \ arr[i] >= 1 {\n            out += fmt.Sprintf(\"%v\", arr[i])\n        } else\
    \ {\n            out += fmt.Sprintf(\"%v\", strings.Replace(fmt.Sprintf(\"%v\"\
    , arr[i]), \"1\", \"One\", -1))\n        }\n    }\n    return out\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m6no366_test.go:28:13: invalid operation: out += fmt.Sprintf("%v", arr[i])
    (mismatched types []string and string)

    /tmp/tmp8m6no366_test.go:30:13: invalid operation: out += fmt.Sprintf("%v", strings.Replace(fmt.Sprintf("%v",
    arr[i]), "1", "One", -1)) (mismatched types []string and string)

    /tmp/tmp8m6no366_test.go:30:38: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    l := len(arr)\n    list1 := make([]string, l)\n    list2 := make([]int, l)\n\
    \    for i := 0; i < l; i++ {\n        if arr[i] < 1 || arr[i] > 9 {\n       \
    \     continue\n        }\n        list1[l-i-1] = strconv.Itoa(arr[i])\n     \
    \   list2[l-i-1] = arr[i]\n    }\n\n    reverse(list2)\n    reverse(list1)\n \
    \   for i := 0; i < l; i++ {\n        list1[i] = strconv.Itoa(list2[i])\n    }\n\
    \    return list1\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rm6aow8_test.go:31:24: undefined: strconv

    /tmp/tmp2rm6aow8_test.go:35:5: undefined: reverse

    /tmp/tmp2rm6aow8_test.go:36:5: undefined: reverse

    /tmp/tmp2rm6aow8_test.go:38:20: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    // sort the array in asc order\n    sort.Sort(arr) //sort by value\n    arr2\
    \ = make([]string, len(arr)) //create a new array to hold sorted array\n    arr2[0]\
    \ = fmt.Sprintf(\"One\")\n    arr2[1] = fmt.Sprintf(\"Two\")\n    arr2[2] = fmt.Sprintf(\"\
    Three\")\n    arr2[3] = fmt.Sprintf(\"Four\")\n    arr2[4] = fmt.Sprintf(\"Five\"\
    )\n    arr2[5] = fmt.Sprintf(\"Six\")\n    arr2[6] = fmt.Sprintf(\"Seven\")\n\
    \    arr2[7] = fmt.Sprintf(\"Eight\")\n    arr2[8] = fmt.Sprintf(\"Nine\")\n\n\
    \    start := 0\n    end := len(arr) - 1\n    for start < end {\n        if arr2[start]\
    \ < arr2[end] {\n            tmp := arr2[end]\n            arr2[end] = arr2[start]\n\
    \            arr2[start] = tmp\n            end--\n        } else {\n        \
    \    tmp := arr2[end]\n            arr2[end] = arr2[start]\n            arr2[start]\
    \ = tmp\n            start = start + 1\n            end = end - 1\n        }\n\
    \    }\n    for i := range arr2 {\n        arr[i] = arr2[i]\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmx6r3k9_test.go:25:5: undefined: sort

    /tmp/tmpnmx6r3k9_test.go:26:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:27:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:28:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:29:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:30:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:31:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:32:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:33:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:34:5: undefined: arr2

    /tmp/tmpnmx6r3k9_test.go:34:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2,\
    \ result := make([]int, 0, len(arr)), \"\"\n    arr2 := append(arr2, arr...)\n\
    \    arr2 = append(arr2, arr2...)\n\n    for i, v := range arr2 {\n        if\
    \ v > 9 && v < 1 {\n            result = result + \"Nine\"\n            arr2[i]\
    \ = v - 10\n            continue\n        }\n        if v > 9 && v < 10 {\n  \
    \          result = result + \"Nine\"\n            arr2[i] = v - 10\n        \
    \    continue\n        }\n        if v > 9 && v < 100 {\n            result =\
    \ result + \"Ninety\"\n            arr2[i] = v - 100\n            continue\n \
    \       }\n        if v > 9 && v < 1000 {\n            result = result + \"Ninety\"\
    \n            arr2[i] = v - 1000\n            continue\n        }\n        if\
    \ v > 9 && v < 10000 {\n            result = result + \"Ninety\"\n           \
    \ arr2[i] = v - 10000\n            continue\n        }\n        if v > 9 && v\
    \ < 100000 {\n            result = result + \"Ninety\"\n            arr2[i] =\
    \ v - 100000\n            continue\n        }\n        if v > 9 && v < 1000000\
    \ {\n            result = result + \"Ninety\"\n            arr2[i] = v - 1000000\n\
    \            continue\n        }\n        if v > 9 && v < 10000000 {\n       \
    \     result = result + \"Ninety\"\n            arr2[i] = v - 10000000\n     \
    \       continue\n        }\n        if v > 9 && v < 100000000 {\n           \
    \ result = result + \"Ninety\"\n            arr2[i] = v - 100000000\n        \
    \    continue\n        }\n        if v > 9 && v < 1000000000 {\n            result\
    \ = result + \"Ninety\"\n            arr2[i] = v - 1000000000\n            continue\n\
    \        }\n        if v > 9 && v < 10000000000 {\n            result = result\
    \ + \"Ninety\"\n            arr2[i] = v - 10000000000\n            continue\n\
    \        }\n        if v > 9 && v < 100000000000 {\n            result = result\
    \ + \"Ninety\"\n            arr2[i] = v - 100000000000\n            continue\n\
    \        }\n        if v > 9 && v < 1000000000000 {\n            result = result\
    \ + \"Ninety\"\n            arr2[i] = v - 1000000000000\n            continue\n\
    \        }\n        if v > 9 && v < 10000000000000 {\n            result = result\
    \ + \"Ninety\"\n            arr2[i] = v - 10000000000000\n            continue\n\
    \        }\n        if v > 9 && v < 100000000000000 {\n            result = result\
    \ + \"Ninety\"\n            arr2[i] = v - \nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwgnbob8_test.go:102:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    if len(arr) == 0 {\n      \
    \  return result\n    }\n    list := make([]int, len(arr))\n    copy(list, arr)\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(list)))\n    reversed(list)\n    switch\
    \ {\n    case len(list) < 9:\n        for i := 0; i < len(list); i++ {\n     \
    \       result := fmt.Sprintf(\"%v\", list[i])\n            list[i] = list[len(list)-1-i]\n\
    \            list[len(list)-i-1] = result\n        }\n    case len(list) > 9:\n\
    \        for i := 0; i < len(list); i++ {\n            result := fmt.Sprintf(\"\
    %v\", list[i])\n            list[i] = list[len(list)-i]\n            list[len(list)-i-1]\
    \ = result\n        }\n    }\n    for i := 0; i < len(list); i++ {\n        result\
    \ := fmt.Sprintf(\"%v\", list[i])\n        list[i] = list[len(list)-1-i]\n   \
    \     list[len(list)-i-1] = result\n    }\n    return append(result, list[len(list)-9:])\n\
    }\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7skezon_test.go:27:5: undefined: sort

    /tmp/tmpp7skezon_test.go:28:5: undefined: reversed

    /tmp/tmpp7skezon_test.go:34:35: cannot use result (variable of type string) as
    type int in assignment

    /tmp/tmpp7skezon_test.go:40:35: cannot use result (variable of type string) as
    type int in assignment

    /tmp/tmpp7skezon_test.go:46:31: cannot use result (variable of type string) as
    type int in assignment

    /tmp/tmpp7skezon_test.go:48:31: cannot use list[len(list) - 9:] (value of type
    []int) as type string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    result := []string{}\n    current := 0\n    for _, number := range arr {\n\
    \        if number >= 1 && number <= 9 {\n            current = number\n     \
    \   } else {\n            if current != 0 {\n                result = []string{name[current]}\n\
    \            }\n            current = number\n        }\n    }\n\n    if current\
    \ != 0 {\n        result = []string{name[current]}\n    }\n\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjdd7t_2_test.go:32:35: undefined: name

    /tmp/tmpxjdd7t_2_test.go:39:27: undefined: name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var newArr []string\n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] < 1 {\n            continue\n        }\n        if arr[i]\
    \ > 9 {\n            newArr = append(newArr, fmt.Sprintf(\"%v\", arr[i]))\n  \
    \      } else {\n            newArr = append(newArr, stringWithNameFromNum(arr[i]))\n\
    \        }\n    }\n    return newArr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkf254l6_test.go:29:37: undefined: stringWithNameFromNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp string\n\n    for _,\
    \ v := range arr {\n        if v <= 9 {\n            if v == 0 {\n           \
    \     temp = fmt.Sprintf(\"Zero\", v)\n            } else {\n                temp\
    \ = fmt.Sprintf(\"%s\", v)\n            }\n            switch v {\n          \
    \  case 1:\n                temp = fmt.Sprintf(\"One\", v)\n            case 2:\n\
    \                temp = fmt.Sprintf(\"Two\", v)\n            case 3:\n       \
    \         temp = fmt.Sprintf(\"Three\", v)\n            case 4:\n            \
    \    temp = fmt.Sprintf(\"Four\", v)\n            case 5:\n                temp\
    \ = fmt.Sprintf(\"Five\", v)\n            case 6:\n                temp = fmt.Sprintf(\"\
    Six\", v)\n            case 7:\n                temp = fmt.Sprintf(\"Seven\",\
    \ v)\n            case 8:\n                temp = fmt.Sprintf(\"Eight\", v)\n\
    \            case 9:\n                temp = fmt.Sprintf(\"Nine\", v)\n      \
    \      }\n            result[len(result)-1] = temp\n        } else {\n       \
    \     temp := fmt.Sprintf(\"%s\", v)\n            result[len(result)-1] = temp\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpl84hq884_test.go:27:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:29:24: fmt.Sprintf format %s has arg v of wrong type
    int

    /tmp/tmpl84hq884_test.go:33:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:35:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:37:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:39:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:41:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:43:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:45:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:47:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:49:35: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpl84hq884_test.go:53:21: fmt.Sprintf format %s has arg v of wrong type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075455
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    var\
    \ strs []string\n    max := 9\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= max {\n            strs = append(strs, \"One\")\n            strs =\
    \ append(strs, \"Two\")\n            strs = append(strs, \"Three\")\n        \
    \    strs = append(strs, \"Four\")\n            strs = append(strs, \"Five\")\n\
    \            strs = append(strs, \"Six\")\n            strs = append(strs, \"\
    Seven\")\n            strs = append(strs, \"Eight\")\n            strs = append(strs,\
    \ \"Nine\")\n            strs = append(strs, fmt.Sprintf(\"%d\", v))\n       \
    \ } else {\n            strs = append(strs, \"0\")\n        }\n    }\n    for\
    \ _, v := range strs {\n        strs = append(strs, v)\n    }\n    return strs\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4jq24yyh_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One Two Three Four Five Six Seven Eight Nine 2 One Two\
    \ Three Four Five Six Seven Eight Nine 1 One Two Three Four Five Six Seven Eight\
    \ Nine 1 One Two Three Four Five Six Seven Eight Nine 4 One Two Three Four Five\
    \ Six Seven Eight Nine 5 One Two Three Four Five Six Seven Eight Nine 8 One Two\
    \ Three Four Five Six Seven Eight Nine 2 One Two Three Four Five Six Seven Eight\
    \ Nine 3 One Two Three Four Five Six Seven Eight Nine 2 One Two Three Four Five\
    \ Six Seven Eight Nine 1 One Two Three Four Five Six Seven Eight Nine 1 One Two\
    \ Three Four Five Six Seven Eight Nine 4 One Two Three Four Five Six Seven Eight\
    \ Nine 5 One Two Three Four Five Six Seven Eight Nine 8 One Two Three Four Five\
    \ Six Seven Eight Nine 2 One Two Three Four Five Six Seven Eight Nine 3]'\n  \
    \  --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmp4jq24yyh_test.go:65:\
    \ expected '[One]', got '[One Two Three Four Five Six Seven Eight Nine 1 0 0 One\
    \ Two Three Four Five Six Seven Eight Nine 1 0 0]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4jq24yyh_test.go:65: expected '[Three Two One]', got '[One\
    \ Two Three Four Five Six Seven Eight Nine 1 0 One Two Three Four Five Six Seven\
    \ Eight Nine 3 One Two Three Four Five Six Seven Eight Nine 2 One Two Three Four\
    \ Five Six Seven Eight Nine 1 0 One Two Three Four Five Six Seven Eight Nine 3\
    \ One Two Three Four Five Six Seven Eight Nine 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp4jq24yyh_test.go:65: expected '[Nine Eight Four]', got '[One\
    \ Two Three Four Five Six Seven Eight Nine 9 One Two Three Four Five Six Seven\
    \ Eight Nine 4 One Two Three Four Five Six Seven Eight Nine 8 One Two Three Four\
    \ Five Six Seven Eight Nine 9 One Two Three Four Five Six Seven Eight Nine 4 One\
    \ Two Three Four Five Six Seven Eight Nine 8]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075455
