name: HumanEval_157_right_angle_triangle
language: go_test.go
prompt: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n"
tests: "func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n   \
  \  { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
  \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false },\n\
  \     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
  \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
  \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
  \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
  \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\
    \    a, b, c := a, b - a, c - b\n    if a > b {\n        if a > c {\n        \
    \    return false\n        }\n    }\n    if b > c {\n        return false\n  \
    \  }\n    return true\n}\n", "    x := b - a\n    y := c - b\n    z := math.sqrt(x\
    \ * x + y * y + z * z)\n    if z < 0 {\n        z += 1\n    }\n    if x != 0 &&\
    \ y != 0 {\n        return math.Sqrt(x * x / z + y * y / z + z * z / z) < 1\n\
    \    }\n    return false\n}\n", "    // Add your code here\n    return true\n\
    }\n</code>\n<|/ a |>\n<| a tags=python,geometry |>\nThe below function takes three\
    \ integers and returns the area of right-angled triangle.\n<code>\ndef right_angle_triangle(a,b,c):\n\
    \n    area_of_triangle = 2*(a + b + c)/2\n\n    if a == b and a == c and a > c:\n\
    \        return area_of_triangle\n    elif b == c and a > b:\n        return area_of_triangle\n\
    \    elif a == c and a > b:\n        return area_of_triangle\n    else:\n    \
    \    if b > c:\n            if a > c:\n                return area_of_triangle\n\
    \            elif a > b:\n                return 2*(a-c)\n            else:\n\
    \                return 2*(b-c)\n        else:\n            if a > c:\n      \
    \          return area_of_triangle\n            elif a > b:\n                return\
    \ 2*(b-c)\n            else:\n                return 2*(a-c)\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nYou missed case where the triangle is made up of 3 identical triangles.\n\
    <|/ c |>\n<| a |>\nHere is an recursive solution that is based on the fact that\
    \ the triangle is a special case of a pyramid with base 1.\n<code>\ndef is_right_angled(a,\
    \ b, c):\n    if b == c:\n        return True\n    elif a == 0:\n        return\
    \ is_right_angled(b, c, a) or is_right_angled(c, b, a)\n    elif a == 1:\n   \
    \     return is_right_angled(b, c, a) or is_right_angled(c, b, a)\n    elif a\
    \ == 2:\n        return True\n    else:\n        return is_right_angled(b, b,\
    \ a) or is_right_angled(c, c, a)\n</code>\n<|/ a dscore=2 tags=python,geometry\
    \ |>\n<| c |>\nThis does not work when `a` and `b` have the same value.\n<|/ c\
    \ |>\n<| c |>\nYes, this doesn't work when the triangles form an equilateral triangle.\
    \ The answer above by is a better solution.\n<|/ c |>\n<| a dscore=2 tags=python,geometry\
    \ |>\n<code>\ndef triangle(side1, side2, side3):\n \n  if(side1 == side2 and side1\
    \ == side3):\n    return False\n  if(side2 == side3 and side2 == side1):\n   \
    \ return False\n  if(side3 == side1 and side3 == side2):\n    return False\n \
    \ \n  if(side1 != side2):\n    if(side2 != side3):\n      return False\n    elif(side1\
    \ == side3):\n      return True\n    else:\n      return False\n  \n  if(side1\
    \ != side3):\n    if(side3 != side2):\n      return False\n    elif(side1 == side2):",
  "    if a*a + b*b == c*c {\n        if b < c {\n            if a > c {\n       \
    \         fmt.Printf(\"%v %v %v\\n\", a, c, b)\n                return true\n\
    \            }\n            if a < c {\n                fmt.Printf(\"%v %v %v\\\
    n\", a, c, b)\n                return false\n            }\n        }\n      \
    \  if a > c {\n            fmt.Printf(\"%v %v %v\\n\", a, c, b)\n            return\
    \ true\n        }\n        if a < c {\n            fmt.Printf(\"%v %v %v\\n\"\
    , a, c, b)\n            return false\n        }\n    }\n    fmt.Printf(\"%v %v\
    \ %v\\n\", a, c, b)\n    return false\n}\n", "    // write code here\n    if a\
    \ == b {\n        return false\n    }\n    if a == c {\n        return false\n\
    \    }\n    if b == c {\n        return false\n    }\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n\n    if a > b {\n        var a int\n\
    \        var b int\n        if a > c {\n            a = c\n            b = a\n\
    \        } else {\n            a = b\n            b = c\n        }\n    }\n\n\
    \    var a, b int\n    var c int\n    for {\n        a = a + b\n        b = a\
    \ + c\n        c = a + b\n        if a == b {\n            return true\n     \
    \   }\n    }\n    return false\n}\n", "    // If the length of the three sides\
    \ is an equilateral triangle\n    if a * b == c {\n        return true\n    }\n\
    \    // If either the length of the sides is greater than the other, or the \n\
    \    // angle formed by the sides is greater than 90 degrees\n    if a * b > c\
    \ || a * c > b {\n        return false\n    }\n    // If no other side is greater\
    \ than 90 degrees\n    if a == c {\n        return true\n    }\n    // Otherwise\
    \ if all other sides are greater than 90 degrees\n    if b == c {\n        return\
    \ true\n    }\n    // If any two sides are less than 90 degrees\n    if a < b\
    \ {\n        return false\n    }\n    // Otherwise if any two sides are greater\
    \ than 90 degrees\n    if a > b {\n        return false\n    }\n    // If the\
    \ sides are equal, no right-angled triangle exists\n    return true\n}\n", " \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    return ((a\
    \ + b > c) && (a + c > b)) && ((b + c > a) && (b + a > c))\n}\n", "    ab := b\
    \ - a\n    cb := c - b\n    abSum := ab * ab\n    cbSum := cb * cb\n    return\
    \ abSum >= cbSum\n}\n", "    if (a + b > c && a + c > b && b + c > a) || (a +\
    \ b > c && a + c > b && b + c > a && a + b > b) {\n        return true\n    }\n\
    \    return false\n}\n", "    if (a==0 && b==0 && c==0) || (a==0 && b!=0 && c==0)\
    \ || (a==0 && b==0 && c!=0) || (a!=0 && b==0 && c==0) || (a!=0 && b==0 && c!=0)\
    \ || (a!=0 && b!=0 && c==0) || (a!=0 && b!=0 && c!=0) || (a==0 && b!=0 && c!=0)\
    \ || (a!=0 && b==0 && c==0) || (a!=0 && b!=0 && c==0) {\n        return false\n\
    \    }\n    if (a==0 && b==0 && c!=0) || (a==0 && b!=0 && c==0) || (a!=0 && b==0\
    \ && c==0) || (a!=0 && b!=0 && c!=0) || (a!=0 && b==0 && c!=0) || (a!=0 && b!=0\
    \ && c!=0) || (a==0 && b!=0 && c!=0) || (a!=0 && b==0 && c==0) || (a!=0 && b!=0\
    \ && c==0) {\n        return true\n    }\n    return false\n}\n</code>\n<|/ a\
    \ tags=algorithm,java |>\n<| a tags=algorithm,java |>\nYour program is correct\
    \ and simple.\nHere I am just adding another solution with different approach\
    \ for same. \n<code>\nimport java.util.*;\nclass RightAngleTriangleTest{\n   \
    \ public static void main(String args[]){\n        int a = 0;\n        int b =\
    \ 0;\n        int c = 0;\n        int sum = 0;\n        boolean flag = true;\n\
    \        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\
    \ first side of triangle\");\n        a = sc.nextInt();\n        System.out.println(\"\
    Enter second side of triangle\");\n        b = sc.nextInt();\n        System.out.println(\"\
    Enter third side of triangle\");\n        c = sc.nextInt();\n\n        if((Math.pow(a,\
    \ 2)) + (Math.pow(b, 2)) + (Math.pow(c, 2)) >= (Math.pow(a + (b + c), 2))){\n\
    \            flag = false;\n        }\n\n        if((Math.pow(a, 2)) + (Math.pow(b,\
    \ 2)) + (Math.pow(c, 2)) >= (Math.pow(a + (b - c), 2))){\n            flag = false;\n\
    \        }\n\n        if((Math.pow(a, 2)) + (Math.pow(b, 2)) + (Math.pow(c, 2))\
    \ >= (Math.pow(a + (b + c), 2))){\n            flag = false;\n        }\n\n  \
    \      if((Math.pow(a, 2)) + (Math.pow(b, 2)) + (Math.pow(c, 2)) >= (Math.pow(a\
    \ + (b - c), 2))){\n            flag = false;\n        }\n\n        if((Math.pow(a,\
    \ 2)) + (Math.pow(b, 2)) + (Math.pow(c, 2)) >= (Math.pow(a + (b + ", "    // If\
    \ the sides are not positive, then they cannot form a right angle triangle.\n\
    \    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // If\
    \ the sides are equal, then the triangle is a right angle triangle.\n    if a\
    \ == b {\n        return c == a\n    }\n\n    // If the sides are odd, then they\
    \ form a right angle triangle.\n    if a % 2 == 1 && b % 2 == 1 && c % 2 == 1\
    \ {\n        return true\n    }\n\n    // If the sides are even, then they form\
    \ a right angle triangle.\n    if a % 2 == 0 && b % 2 == 0 && c % 2 == 0 {\n \
    \       return false\n    }\n\n    // If the sides are equally divisible, then\
    \ they form a right angle triangle.\n    if a % 2 == 0 && b % 2 == 0 && c % 2\
    \ == 0 {\n        return true\n    }\n\n    // If the sides are divisible by 2,\
    \ then they form a right angle triangle.\n    if a % 2 == 0 && b % 2 == 0 && c\
    \ % 2 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 3, then they form a right angle triangle.\n    if a % 3 != 0 && b % 3 !=\
    \ 0 && c % 3 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 4, then they form a right angle triangle.\n    if a % 4 != 0 && b % 4 !=\
    \ 0 && c % 4 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 5, then they form a right angle triangle.\n    if a % 5 != 0 && b % 5 !=\
    \ 0 && c % 5 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 6, then they form a right angle triangle.\n    if a % 6 != 0 && b % 6 !=\
    \ 0 && c % 6 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 7, then they form a right angle triangle.\n    if a % 7 != 0 && b % 7 !=\
    \ 0 && c % 7 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 8, then they form a right angle triangle.\n    if a % 8 != 0 && b % 8 !=\
    \ 0 && c % 8 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 9, then they form a right angle triangle.\n    if a % 9 != 0 && b % 9 !=\
    \ 0 && c % 9 != 0 {\n        return true\n    }\n\n    // If the sides are divisible\
    \ by 10, then they form a right angle triangle.\n    if a % 10 != 0 && b % 10\
    \ != 0 && c % 10 != 0 {\n        return true\n    }\n\n    // If the side", " \
    \   if a == 0 {\n        if b == 0 {\n            if c == 0 {\n              \
    \  return true\n            }\n        }\n    }\n    if b == 0 {\n        if c\
    \ == 0 {\n            return true\n        }\n    }\n    if c == 0 {\n       \
    \ return false\n    }\n\n    // if b is not 0, then c = -b/a\n    if b != 0 {\n\
    \        c = -b / a\n    }\n\n    // if c is 0, return true\n    if c == 0 {\n\
    \        return true\n    }\n\n    // if c is negative, then return false\n  \
    \  if c < 0 {\n        return false\n    }\n\n    // Otherwise, c > 0, so if c\
    \ is greater than a then return false\n    if c > a {\n        return false\n\
    \    }\n\n    // If c is greater than b then return true\n    if c > b {\n   \
    \     return true\n    }\n\n    // If c is greater than b and less than c, then\
    \ return false\n    if c > b && c < a {\n        return false\n    }\n\n    //\
    \ Otherwise, c is less than a and less than b, so c is greater than or equal to\
    \ \n    // or equal to (b - a).\n    // return ((c >= b) || (c <= a))\n    return\
    \ ((c >= b) || (c <= a))\n}\n", "    if (a*a + b*b == c*c){\n        return 1\n\
    \    }\n    \n    if (a*a + b*b > c*c){\n        return false\n    }\n    \n \
    \   if (b*b - a*a > c*c){\n        return false\n    }\n    \n    return true\n\
    }\n", "    if a == b {\n        return a == c\n    }\n    if b == c {\n      \
    \  return b == a\n    }\n    if a == c {\n        return b == a\n    }\n    if\
    \ a > b {\n        return true\n    }\n    if a < b {\n        return false\n\
    \    }\n    if b > c {\n        return true\n    }\n    if b < c {\n        return\
    \ false\n    }\n    return false\n}\n", "    if b > c {\n        // swap so that\
    \ b is greater than c\n        var tmp int = b\n        b = c\n        c = tmp\n\
    \    }\n\n    if a + b > c {\n        return false\n    }\n\n    if a + c > b\
    \ {\n        return false\n    }\n\n    if b + c > a {\n        return false\n\
    \    }\n\n    // Now we know a,b and c are all the same and sum to a+b+c\n   \
    \ d := a + b + c\n    if a >= b+c {\n        d += b - a\n    }\n\n    if b >=\
    \ c-a {\n        d += c - b\n    }\n\n    if c >= a-b {\n        d += a - c\n\
    \    }\n\n    e := a + b + c + d\n    if e >= 4 {\n        return false\n    }\n\
    \    return true\n}\n", "    \n    // Check if three sides are greater than 0\n\
    \    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // If\
    \ the sum of three sides equals the remaining side\n    if a + b + c == a {\n\
    \        return true\n    }\n\n    // If sum of three sides is equal\n    if a\
    \ + b == c {\n        return true\n    }\n\n    // If the sum of three sides is\
    \ greater than the remaining side\n    if a + b > c {\n        return true\n \
    \   }\n\n    // If sum of three sides is less than the remaining side\n    if\
    \ a + b < c {\n        return true\n    }\n\n    // Otherwise the sum of the three\
    \ sides is greater than the remaining side\n    // return false\n    return false\n\
    }\n", "    if a == b {\n        if a == c {\n            return true\n       \
    \ } else {\n            return false\n        }\n    } else {\n        if b ==\
    \ c {\n            return false\n        } else {\n            if a > b {\n  \
    \              fmt.Println(\"A > B\")\n                fmt.Println(\"A > C\")\n\
    \            }\n            if a < b {\n                fmt.Println(\"A < B\"\
    )\n                fmt.Println(\"A < C\")\n            }\n            if b > c\
    \ {\n                fmt.Println(\"B > C\")\n                fmt.Println(\"A <\
    \ C\")\n            }\n            if b < c {\n                fmt.Println(\"\
    B < C\")\n                fmt.Println(\"A > C\")\n            }\n\n          \
    \  return false\n        }\n    }\n}\n", "    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if b > a {\n        return true\n    }\n    if a < b\
    \ {\n        return true\n    }\n    if a < c {\n        return false\n    }\n\
    \    if b < c {\n        return false\n    }\n    // return true;\n    // return\
    \ false;\n}\n", "    // This formula will evaluate to true or false. \n    //\
    \ If it is true, it means there is a right angle triangle. \n    // If it is false,\
    \ it means there is not a right angle triangle.\n    return (b > c) && (a == (b\
    \ + c) || (a != (b + c) && (b != c)))\n}\n", "    var ab int = a*b\n    var cc\
    \ int = c*c\n    var abc int = ab + cc\n    if ab == cc || ab == 0 {\n       \
    \ return true\n    }\n    if ab == 0 {\n        return false\n    }\n    var bc\
    \ int = b*c\n    var ac int = a*c\n    var bc int = b*c\n    var abc int = abc\
    \ + bc\n    return abc >= ac && abc >= bc\n}\n", "    // Calculate the angles\
    \ in radians\n    radian1 := (3.1415926535897932384626433832795 / 180)*a\n   \
    \ radian2 := (3.1415926535897932384626433832795 / 180)*b\n    radian3 := (3.1415926535897932384626433832795\
    \ / 180)*c\n\n    // Find the cosine of the angles\n    cosine1 := (radian1 *\
    \ radian2 + radian3) * 0.5\n    cosine2 := (radian1 * radian2 + radian3) * 0.5\n\
    \    cosine3 := (radian1 * radian2 + radian3) * 0.5\n\n    // Return the sign\
    \ of cosines\n    sign := (cosine1 > cosine2 && cosine1 > cosine3) ? 1 : -1\n\n\
    \    // Return whether the calculated angles are within 10\n    return (sign >\
    \ 0 && cosine2 > cosine1 && cosine2 > cosine3)\n}\n</code>\nThe above works by\
    \ calculating the three angles in radians, then finding the cosine of the angles.\
    \ I take the absolute value of the cosine of the angles, and check to see if they\
    \ are greater than 0.1 and less than 0.9 just to make sure I'm in the right direction.\n\
    <|/ a tags=math,go |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n  \
    \  \"fmt\"\n    \"math\"\n)\n", "    //   a  b  c\n    abs := abs(a - b)\n   \
    \ acs := abs(a - c)\n    bcs := abs(b - c)\n    abs -= abs % 2\n    acs -= acs\
    \ % 2\n    bcs -= bcs % 2\n    return (abs + acs + bcs == 2)\n}\n", "    if b\
    \ == 0 || c == 0 || b == c {\n        return false\n    }\n\n    ab := b - a\n\
    \    ac := c - a\n    \n    if ab == 0 {\n        if ac == 0 {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n\n    if\
    \ ac == 0 {\n        return false\n    }\n\n    return ab / ac == 0.5\n}\n</cell>\n\
    <cell>\n%%file triangle.go\n\npackage triangle\n", "    // If the sides are equal,\
    \ it's a right angle triangle\n    if a == 0 && b == 0 && c == 0 {\n        return\
    \ true\n    }\n\n    // If the sides are equal, it's a right angle triangle\n\
    \    if a == 0 && b == 0 || a == c && b == c {\n        return true\n    }\n\n\
    \    // If the sides are equal, it's a right angle triangle\n    if a == c &&\
    \ b == c {\n        return true\n    }\n\n    // If the sides are equal, it's\
    \ a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n        return\
    \ false\n    }\n\n    // If the sides are equal, it's a right angle triangle\n\
    \    if a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\n    // If\
    \ the sides are equal, it's a right angle triangle\n    if a != 0 && b != 0 &&\
    \ c != 0 {\n        return false\n    }\n\n    // If the sides are equal, it's\
    \ a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n        return\
    \ false\n    }\n\n    // If the sides are equal, it's a right angle triangle\n\
    \    if a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\n    // If\
    \ the sides are equal, it's a right angle triangle\n    if a != 0 && b != 0 &&\
    \ c != 0 {\n        return false\n    }\n\n    // If the sides are equal, it's\
    \ a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n        return\
    \ false\n    }\n\n    // If one side is 0, it's a right angle triangle\n    if\
    \ a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\n    // If one side\
    \ is 0, it's a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n   \
    \     return false\n    }\n\n    // If one side is 0, it's a right angle triangle\n\
    \    if a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\n    // If\
    \ one side is 0, it's a right angle triangle\n    if a != 0 && b != 0 && c !=\
    \ 0 {\n        return false\n    }\n\n    // If one side is 0, it's a right angle\
    \ triangle\n    if a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\
    \n    // If one side is 0, it's a right angle triangle\n    if a != 0 && b !=\
    \ 0 && c != 0 {\n        return false\n    }\n\n    // If one side is 0, it's\
    \ a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n        return\
    \ false\n    }\n\n    // If one side is 0, it's a right angle triangle\n    if\
    \ a != 0 && b != 0 && c != 0 {\n        return false\n    }\n\n    // If one side\
    \ is 0, it's a right angle triangle\n    if a != 0 && b != 0 && c != 0 {\n   \
    \     return false\n    }", "    // Write your code here\n    if (b == 0 || c\
    \ == 0) || (a == 0 || b == 0){\n        return false\n    }\n    switch {\n  \
    \      case a > c:\n            return right_angle_triangle(a - b, c, b)\n   \
    \     case b > c:\n            return right_angle_triangle(a, b - c, c)\n    \
    \    case a > b:\n            return right_angle_triangle(a, c - b, c)\n     \
    \   default:\n            return true\n    }\n}\n</cell>\n<text>\nLet's verify\
    \ that the function works:\n\n\n</text>\n<cell>\n# Let's test the function!\n\
    right_angle_triangle(3, 4, 5)\n</cell>\n<text>\nWe have verified that the function\
    \ works by checking to see if our function returns a boolean value True. Now,\
    \ let's see how to verify this using our unittests.\n\n\n</text>\n<cell>\n%%file\
    \ triangle_test.go\n\npackage triangle_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n", "    if (b*b == a*a) && (c*c == b*b) { // if it's a triangle\
    \ with 3 sides and one side is equal to the other side\n        return ((b%2 ==\
    \ 0) && ((b/2)*(b/2) != (a/2)*(a/2))) || ((b/2) == (a/2) || (b/2) == (a/2))\n\
    \    }\n    return false\n}\n", "    // Write your code here.\n    return false\n\
    }", "    if a == b {\n        return a == c || a == c - b || b == c - a\n    }\
    \ else if a == c {\n        return b == c || b == c - a || c == a - b\n    } else\
    \ if b == c {\n        return a == c || a == c - b || c == a - b\n    }\n    return\
    \ true\n}\n", "    \n    var a, b int\n    var c, d int\n    \n    // Check for\
    \ base cases\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    if a > c {\n        a = c\n    }\n    if b > c {\n        b = c\n    }\n\n\
    \    // If one side is greater than the other then it is not an right angle\n\
    \    // triangle\n    if a > b {\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n\n    // Test if one triangle is equilateral to\
    \ the other\n    if a == b {\n        if a == c {\n            return true\n \
    \       } else {\n            return false\n        }\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n\n \
    \   // Compute area of triangle\n    area_a = (a * b) / 2.0\n    area_b = (b *\
    \ c) / 2.0\n    area_c = (c * a) / 2.0\n    area_ab = (area_a + area_b - area_c)\
    \ / 2.0\n    area_ac = (area_a - area_c + area_b) / 2.0\n    area_ba = (area_b\
    \ + area_c - area_a) / 2.0\n    area_ca = (area_c + area_a - area_ab) / 2.0\n\
    \    area_cb = (area_c - area_ab + area_a) / 2.0\n\n    // If triangle is not\
    \ right angle\n    if area_ab != area_ac {\n        if area_ab != area_ba {\n\
    \            if area_ab != area_ca {\n                if area_ab != area_cb {\n\
    \                    if area_ac != area_ca {\n                        if area_ac\
    \ != area_cb {\n                            if area_ac != area_ca {\n        \
    \                        if area_ac != area_cb {\n                           \
    \         if area_ac != area_ca {\n                                        if\
    \ area_ac != area_cb {\n                                            return true\n\
    \                                        }\n                                 \
    \   }\n                                }\n                            }\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return false\n}\n", "    // check if triangle is triangle\
    \ or 180 degree\n    if a == b {\n        return c == a || c == a\n    }\n   \
    \ if a == c {\n        return b == c || b == a\n    }\n    if b == c {\n     \
    \   return a == c || a == b\n    }\n    // check if angles are within 90 degree\n\
    \    return (a * a + b * b + c * c >= 4)\n}\n", "    // Get the side's of triangle\n\
    \    side1 := b - a\n    side2 := c - a\n    // If the side's of triangle are\
    \ same, \n    if side1 == side2 {\n        return true\n    }\n    // if the side's\
    \ of triangle are not same, \n    else {\n        // Check if two sides are equal\n\
    \        if side1 != 0 {\n            // If the side are not equal, \n       \
    \     // Return false \n            return false\n        }\n        // If the\
    \ sides are equal, \n        // return true \n        return true\n    }\n}\n",
  "    if a>b+c {\n        return false\n    }\n    if b>a+c {\n        return false\n\
    \    }\n    if c>a+b {\n        return false\n    }\n    if a == b {\n       \
    \ return true\n    }\n    if a == c {\n        return true\n    }\n    if a ==\
    \ b+c {\n        return true\n    }\n    return false\n}\n", "    return b+c ==\
    \ a || a == c || (b == c && a != 0)\n}\n", "    if a + b > c {\n        return\
    \ false\n    }\n    if a + c > b {\n        return false\n    }\n    if b + c\
    \ > a {\n        return false\n    }\n    return true\n}\n", "    a %= 360\n \
    \   b %= 360\n    c %= 360\n\n    var is_right_triangle bool\n    if a > b {\n\
    \        is_right_triangle = (a > c)\n    } else {\n        is_right_triangle\
    \ = (b > c)\n    }\n\n    return is_right_triangle\n}\n", "    return ( a*b >\
    \ c*c || (a*b == c*c && a*a >= b*b) ) || ( b*b > c*c || (b*b == c*c && b*b >=\
    \ a*a) )\n}\n", "    // Check if three sides are equal\n    if (a == 0 && b ==\
    \ 0 && c == 0) || (a == 0 && b != 0 && c != 0) || (a != 0 && b == 0 && c != 0)\
    \ || (a != 0 && b != 0 && c == 0) || (a != 0 && b != 0 && c != 0 && a == c) {\n\
    \        return true\n    }\n\n    // If the length are equal, check if any angle\
    \ is right angle\n    a_90 := (a > 0 && b > 0 && c > 0)\n    b_90 := (a > 0 &&\
    \ b > 0 && c < 0)\n    c_90 := (a > 0 && b < 0 && c > 0)\n    d_90 := (a < 0 &&\
    \ b > 0 && c > 0)\n    e_90 := (a < 0 && b > 0 && c < 0)\n    f_90 := (a < 0 &&\
    \ b < 0 && c > 0)\n    g_90 := (a < 0 && b < 0 && c < 0)\n\n    return a_90 ||\
    \ b_90 || c_90 || d_90 || e_90 || f_90 || g_90\n}\n", "    if a == 0 && b == 0\
    \ && c == 0 { return true }\n    if a == 0 || b == 0 || c == 0 || a * b == c {\
    \ return false }\n    if a == b {\n        if a > c {\n            a -= c\n  \
    \      } else {\n            b -= c\n        }\n    }\n    if a == c {\n     \
    \   if a > b {\n            a -= b\n        } else {\n            b -= a\n   \
    \     }\n    }\n    if b == c {\n        if b > a {\n            b -= a\n    \
    \    } else {\n            a -= b\n        }\n    }\n    return true\n}\n", " \
    \   if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return a\
    \ == b+c\n}\n", "    return b > a && b > c || a > b\n}\n", "    // Add some error\
    \ checks.\n    if a > 0 && b > 0 && c > 0 {\n        x := (b - c) / 2\n      \
    \  if a == x || c == x {\n            if a == x && c == x {\n                return\
    \ false\n            }\n            if a == x {\n                return true\n\
    \            }\n            if c == x {\n                return true\n       \
    \     }\n        }\n    }\n    return false\n}\n", "    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b && b == c {\n        return\
    \ true\n    }\n    \n    // This block will calculate the right angle triangle\n\
    \    \n    c /= 2\n    a /= 2\n    b /= 2\n    \n    c /= 2\n    c -= b\n    c\
    \ -= a\n    \n    a /= 2\n    a -= c\n    a -= b\n    \n    b /= 2\n    b -= c\n\
    \    b -= a\n    \n    if a == b {\n        return false\n    } else {\n     \
    \   return true\n    }\n}\n", "    var aa, bb, cc, a int\n    var bbc, cc int\n\
    \    a = a + b + c\n    aa = a + aa\n    bb = a + bb\n    cc = a + cc\n    bbc\
    \ = a + bb + cc\n    return (((bbc >= aa) && (bb >= cc)) || ((bbc >= cc) && (bb\
    \ >= aa)) || ((cc >= bb) && (cc >= aa)))\n}\n", "    if (a * b * c) < 0 {\n  \
    \      return false\n    } else {\n        return ((b * c) - (a * b)) > 0\n  \
    \  }\n}", "    return ((a-b)*(a - b) + (c-a)*(c - a)) == (a + b + c)\n}\n", " \
    \   return a >= b+c && b >= a+c && c >= b+a && c >= a+b && a + b == c + a\n}",
  "    // If the side lengths are equal, then it's a right-angled triangle.\n    if\
    \ (a == b) && (b == c){\n        return true\n    }\n\n    // If the sides are\
    \ the same, check if one angle is greater than the other\n    // and has the same\
    \ value (if not, it's not a triangle).\n    // If not the same, then return false.\n\
    \    // Example condition: a = 3, b = 2, c = 3\n    // => a > b and a == c\n \
    \   // => a > c and b == c\n    // => a > c and b > c\n    // => a > c and b >\
    \ c => not a triangle\n    if (a == b) || (a == c) || (b == c){\n        return\
    \ false\n    }\n\n    // Check if one angle is greater than the other and has\
    \ the same value\n    // If it is not, return false.\n    if (a > b){\n      \
    \  if (a > c){\n            return false\n        } else {\n            return\
    \ true\n        }\n    } else {\n        if (b > c){\n            return false\n\
    \        } else {\n            return true\n        }\n    }\n}\n", "    return\
    \ ((a == b) || (a == c) || (b == c))\n}\n", "    // A right angle triangle is\
    \ a triangle in which one angle is right angle or\n    // 90 degree.\n    // Example:\n\
    \    // >>> right_angle_triangle(3, 4, 5)\n    // true\n    // >>> right_angle_triangle(1,\
    \ 2, 3)\n    // false\n    \n    // Check a, b, c\n    // a, b, c >= 0\n    //\
    \ 0 <= a + b + c <= 10000\n    if a <= 0 || b <= 0 || c <= 0 || a + b + c > 10000\
    \ {\n        return false\n    }\n\n    // A right angle triangle has a right\
    \ angled triangle side length greater than or equal to twice the length of any\
    \ other\n    // right angled triangle side.\n    // Example:\n    // >>> right_angle_triangle(3,\
    \ 4, 5)\n    // true\n    // >>> right_angle_triangle(1, 2, 3)\n    // false\n\
    \    if 2*a >= a && 2*b >= b && 2*c >= c {\n        return true\n    }\n    \n\
    \    // A right angle triangle has a right angled triangle side length greater\
    \ than or equal to twice the sum of all right angled\n    // triangle sides.\n\
    \    // Example:\n    // >>> right_angle_triangle(3, 4, 5)\n    // true\n    //\
    \ >>> right_angle_triangle(1, 2, 3)\n    // false\n    if 2*a + 2*b >= c && 2*a\
    \ + 2*c >= b && 2*b + 2*c >= a {\n        return true\n    }\n    \n    // A right\
    \ angle triangle has a right angled triangle side length greater than or equal\
    \ to the sum of all right angled\n    // triangle sides (including its own length).\n\
    \    // Example:\n    // >>> right_angle_triangle(3, 4, 5)\n    // true\n    //\
    \ >>> right_angle_triangle(1, 2, 3)\n    // false\n    if 2*a + 2*b + 2*c >= a\
    \ {\n        return true\n    }\n    \n    // A right angle triangle has a right\
    \ angled triangle side length less than the sum of all right angled triangle sides.\n\
    \    // Example:\n    // >>> right_angle_triangle(3, 4, 5)\n    // true\n    //\
    \ >>> right_angle_triangle(1, 2, 3)\n    // false\n    if 2*a + 2*b + 2*c <= b\
    \ {\n        return true\n    }\n    \n    // A right angle triangle has a right\
    \ angled triangle side length less than the sum of all right angled triangle sides\n\
    \    // including its own length (a right-angled triangle that does not include\
    \ its own length).\n    // Example:\n    // >>> right_angle_triangle(3, 4, 5)\n\
    \    // true\n    // >>> right_angle_triangle(1, 2, 3)\n    // false\n    if 2*a\
    \ + 2*b + 2*c <= c {\n        return true\n    }\n    \n    // Otherwise, no triangle\
    \ is right-angled.\n    return ", "    // return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n    // A right-angled triangle is\
    \ a triangle in which one angle is right angle or \n    // 90 degree.\n    //\
    \ Example:\n    // >>> right_angle_triangle(3, 4, 5)\n    // true\n    // >>>\
    \ right_angle_triangle(1, 2, 3)\n    // false\n    if a <= 0 || b <= 0 || c <=\
    \ 0 || a >= b+c || b >= a+c || a >= c {\n        return false\n    }\n\n    //\
    \ The conditions are a triangle with 3 sides with 3 points and 2 sides with \n\
    \    // 1 point.\n\n    // Case when sides a and b are same\n    if a == b {\n\
    \        return true\n    }\n\n    // Case when sides a and c are same\n    if\
    \ a == c {\n        return true\n    }\n\n    // Case when sides b and c are same\n\
    \    if b == c {\n        return true\n    }\n\n    // Case when sides a and b\
    \ are same\n    if a == b+c {\n        return true\n    }\n\n    // Case when\
    \ sides a and c are same\n    if a == c-b {\n        return true\n    }\n\n  \
    \  // Case when sides b and c are same\n    if b == c-a {\n        return true\n\
    \    }\n\n    // Case when sides b and c are same\n    if b == c+a {\n       \
    \ return true\n    }\n\n    // Case when sides a and b are same\n    if a == c+b\
    \ {\n        return true\n    }\n\n    // Case when sides a and c are same\n \
    \   if a == c+b+b {\n        return true\n    }\n\n    // Case when sides b and\
    \ c are same\n    if b == c+b+a {\n        return true\n    }\n\n    // Case when\
    \ sides a and b are same\n    if a == b+b+a {\n        return true\n    }\n\n\
    \    // Case when sides a and c are same\n    if a == c+b+b+a {\n        return\
    \ true\n    }\n\n    // Case when sides b and c are same\n    if b == c+b+a+b\
    \ {\n        return true\n    }\n\n    // Case when sides b and c are same\n \
    \   if a == c+b+a+b+a {\n        return true\n    }\n\n    // Case when sides\
    \ a and b are same\n    if a == b+a+b+a {\n        return true\n    }\n\n    //\
    \ Case when sides a and c are same\n    if a == c+a+b+b+a {\n        return true\n\
    \    }\n\n    // Case when sides b and c are same\n    if b == c+a+b+a+", "  \
    \  d := b * b - 4 * a * c\n    if d >= 0 {\n        d /= 2\n        if b == c\
    \ {\n            return false\n        }\n        if a < c && b < c && a < d {\n\
    \            return true\n        }\n        if a < c && b < c && d < a {\n  \
    \          return false\n        }\n        if a < c && b > c && d < a {\n   \
    \         return false\n        }\n        if a < c && b > c && d < b {\n    \
    \        return true\n        }\n        if a > c && b < c && d < b {\n      \
    \      return false\n        }\n        if a > c && b > c && d < a {\n       \
    \     return true\n        }\n        if a > c && b > c && d > a {\n         \
    \   return false\n        }\n        if a > c && b > c && d > b {\n          \
    \  return true\n        }\n        if a > c && b > c && d > c {\n            return\
    \ true\n        }\n        if a > c && b < c && d > c {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if a > b {\n        a = a - b\n\
    \    }\n    if a > c {\n        a = a - c\n    }\n    if b > c {\n        b =\
    \ b - c\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n      \
    \  b = -b\n    }\n    if c < 0 {\n        c = -c\n    }\n    if a < b {\n    \
    \    a = b - a\n    }\n    if a < c {\n        a = c - a\n    }\n    if b < c\
    \ {\n        b = c - b\n    }\n    if c < a {\n        c = a - c\n    }\n    if\
    \ b < a {\n        b = a - b\n    }\n    if c < b {\n        c = b - c\n    }\n\
    \    // return c > 0\n    return c > 0\n}\n", "    return ((b * b) - (4 * a *\
    \ c)) > 0\n}\n", "    // Write your code here\n    return false\n}\n", "    return\
    \ b == c || b == a - 1 || c == a - 1 || ((a + b + c) == (a * b) / 2)\n}\n", " \
    \   if (a == b) || (a == c) || (b == c) { return false }\n    return (a + b >\
    \ c) || (a + c > b) || (b + c > a)\n}\n", "    // If the side of a triangle is\
    \ zero, return false.\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // If the side is greater than its adjacents, return false.\n  \
    \  if a > b+c {\n        return false\n    }\n\n    if b > a+c {\n        return\
    \ false\n    }\n\n    // If the side is greater than its opposite angle, return\
    \ false.\n    if a > b*180/float32(a) {\n        return false\n    }\n\n    if\
    \ b > a*180/float32(b) {\n        return false\n    }\n\n    // Return true.\n\
    \    return true\n}\n", "    // Condition for right angle triangle\n    if (a%2\
    \ == 0)  && (b%2 == 0)  && (c%2 == 0) {\n        return true\n    }\n\n    //\
    \ Condition for right angle triangle\n    if (a%2 != 0)  && (b%2 != 0)  && (c%2\
    \ != 0) {\n        return false\n    }\n\n    // Condition for right angle triangle\n\
    \    if (a%2 != 0)  && (b%2 == 0)  && (c%2 != 0) {\n        return true\n    }\n\
    \n    // Condition for right angle triangle\n    if (a%2 == 0)  && (b%2 != 0)\
    \  && (c%2 == 0) {\n        return true\n    }\n\n    return false\n}\n", "  \
    \  total := a + b + c\n    return total == 180 || total == 90 || total == 270\
    \ || total == 360 || total == 90 || total == 90\n}\n", "    if a>0 && b>0 && c>0\
    \ && c<a {\n        return true\n    }\n    return false\n}\n", "    return ((a\
    \ + b > c) || (b > c && a > c))\n}\n", "    return a == b && b == c && a == c\
    \ - b\n}\n</code>\n<|/ a tags=algorithm,c dscore=0 |>\n<| c |>\nThis fails for\
    \ `a = 0` and `b = 0`.  It should return true.\n<|/ c |>\n<| c |>\nYou're right,\
    \ thanks ! I fixed it\n<|/ c |>\n<| a dscore=0 tags=algorithm,c |>\nI think this\
    \ would be helpful\n<code>", "    if (a == 0 && b == 0 && c == 0) || (a != 0 &&\
    \ b != 0 && c != 0) {\n        return false\n    }\n    // Check if any side is\
    \ 90 degree or right.\n    if ((a > 0 && b > 0 && c > 0) || (a > 0 && b > 0 &&\
    \ c < 0) || (a < 0 && b > 0 && c > 0) || (a < 0 && b > 0 && c < 0)) {\n      \
    \  return false\n    }\n    c -= a\n    if c > b {\n        c -= b\n    }\n  \
    \  return c >= 0\n}\n", "    if a == b {\n        return b != c\n    } else if\
    \ a == c {\n        return b != a\n    } else {\n        return a != b\n    }\n\
    }\n", "    x := a + (b * 2)\n    y := (b * b) + (c * 4)\n    return ((x == y)\
    \ || (x == -y))\n}\n", "    // The three sides are a, b, c\n    // The length\
    \ of each side is a, b, c\n    // The side that is 90 degrees is \n    // the\
    \ one that has the largest length among a, b, and c\n    // So, \n    // the side\
    \ with longest length will be one that is\n    // the one that is 90 degrees\n\
    \    longest := a \n    if b > c { \n        longest = b\n    }\n    if c > a\
    \ { \n        longest = c\n    }\n    \n    switch longest {\n        case a :\n\
    \        case b :\n        case c :\n            // The three sides are all equal\n\
    \            return true\n        case a > b && a > c && b > c :\n           \
    \ // The longest side\n            // is the one with 90 degrees\n           \
    \ // The other two sides\n            // are all equal\n            return false\n\
    \        default:\n            // The longest side\n            // is greater\
    \ than 90 degrees\n            return false\n    }\n}\n", "    // Test if the\
    \ three sides are of equal length\n    // This line is the ONLY place where you\
    \ change any variable\n    if a==b && b==c {\n        return true\n    }\n\n \
    \   // If not, then it is an angle greater than or equal to 90 degree\n    if\
    \ a < b {\n        // Test for greater or equal to a and lesser than b\n     \
    \   if a >= c {\n            // Test for less or equal to a and greater than c\n\
    \            return b >= c\n        }\n        // Test for greater or equal to\
    \ a and greater than c\n        return c >= a\n    }\n    // Test for greater\
    \ or equal to a and less than b\n    return b >= a\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=go |>\n<code>\npackage main\n\nimport \"fmt\"\n", "    var a int\
    \ = a\n    var b int = b\n    var c int = c\n    if a == 0 || b == 0 || c == 0\
    \ {\n        return true\n    }\n    var a, b, c int = int(a), int(b), int(c)\n\
    \    switch {\n    case a + b > c:\n        return false\n    case a + c > b:\n\
    \        return false\n    case b + c > a:\n        return false\n    default:\n\
    \        return true\n    }\n}\n", "    // The right angle of a triangle is 90-degree\n\
    \    // Example: a=4 b=3 c=5\n    // => 90 - 5 = 45\n    \n    // The triangles\
    \ are formed when a,b,c are equal\n    // Example: a=5 b=3 c=5\n    // => a=5\
    \ b=3 c=5\n    \n    // The triangle is right if one of the three sides is greater\
    \ than 90\n    // Example: a=4 b=3 c=5\n    // => a=4 b=3 c=5\n    \n    // The\
    \ triangle is right if one of the three sides is greater than 90\n    // Example:\
    \ a=4 b=3 c=5\n    // => a=4 b=3 c=5\n    \n    // Return false if a,b,c are not\
    \ equal\n    // Example: a=5 b=3 c=5\n    // => a=5 b=3 c=5\n    \n    // Return\
    \ false if a,b,c are not equal\n    // Example: a=5 b=3 c=5\n    // => a=5 b=3\
    \ c=5\n    return ((a + b) > c || (c + b) > a || (c + a) > b)\n}\n", "    return\
    \ ((a + b > c) && (a + c > b) && (b + c > a))\n}\n", "    if (a + b) > c || c\
    \ > (a + b) || b > c {\n        return false\n    }\n    if (a + c) > b || b >\
    \ (a + c) || c > (a + b) {\n        return false\n    }\n    return true\n}\n\
    </code>\n<|/ a tags=python,math,geometry dscore=4 |>\n<| a tags=python,math,geometry\
    \ |>\nFor any three numbers, n, m, p it is possible to define a triangle, T(n,m,p).\
    \ So, a triangle is defined by three points, n, m and p.\nThree points form a\
    \ triangle, if they are coplanar. These three points can be thought of as three\
    \ lines in a plane.\nIf the three points are equal, then the triangle can be considered\
    \ to form a parallelogram.\nThree lines in a plane can be thought of as three\
    \ vectors.\nTo check if a triangle is right-angled or left-angled, we check whether\
    \ the triangle is a parallelogram or a triangle. If it forms a triangle then we\
    \ check whether they are coplanar.\n<code>\ndef is_triangle(n,m,p):\n    if (n==m)&&(n==p):\
    \ return True\n    if (m==p)&&(n==m): return True\n    if (n==m)&&(m==p): return\
    \ True\n    return False\n\ndef is_parallelogram (n,m,p):\n    if (n==m)&&(n==p):\
    \ return True\n    if (m==p)&&(n==m): return True\n    if (n==m)&&(m==p): return\
    \ True\n    return False\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 tags=python,math,geometry\
    \ |>\nI needed this problem today, and had to develop a solution in Python. I\
    \ found that none of the other solutions mentioned here worked as expected for\
    \ me, as they all failed on cases like the one mentioned above. \nSo, here's my\
    \ solution - it seems simpler than some of the others. \n<code>\ndef is_triangle(a,b,c):\n\
    \  return a==b==c\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThis can be solved in\
    \ O(1) time using B\xE9zier curves.  The following B\xE9zier curve is defined\
    \ as follows:\n<code>\nP(t) = P0 * (1-t)^3 + 3*P1 * (1-t)^2*t + 3*P2 * t^3\n</code>\n\
    Where P0, P1, P2 are points defined, P0=(0,0), P1=(0,1), P2=(x,1), and t is the\
    \ parameter between 0 and 1.  Here is a Python function that will return True\
    \ if the triangle is right-angled or False if it is not.\n<code>\nimport math\n\
    \n", "    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n    if\
    \ a == b || a == c || b == c {\n        return true\n    }\n    if a < b {\n \
    \       a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if\
    \ b > c {\n        b, c = c, b\n    }\n    d := (a + b) + c\n    if a == b ||\
    \ a == c {\n        d -= a\n    }\n    if a > b {\n        d -= b\n    }\n   \
    \ if d < 0 {\n        return false\n    }\n    if a == c || b == c {\n       \
    \ return true\n    }\n    c -= a\n    b -= a\n    a /= 2\n    b /= 2\n    c /=\
    \ 2\n    if a*(a + b) <  4*c {\n        return false\n    }\n    if a*(a + b)\
    \ >= 4*c {\n        return true\n    }\n    if b*(a + b) <  4*c {\n        return\
    \ true\n    }\n    return false\n}\n", "    if a >= b {\n        return right_angle_triangle(b,\
    \ a, c)\n    }\n    if b >= c {\n        return right_angle_triangle(c, a, b)\n\
    \    }\n    // if (b - c) is an odd number,\n    // then all angles of right angle\
    \ triangle are: 180, 270, 360\n    if b%2 == 0 {\n        if c%2 == 0 {\n    \
    \        return a >= b\n        } else {\n            return a == b\n        }\n\
    \    }\n    return c == b\n}\n", "    if b > a {\n        b--\n    }\n    if c\
    \ > a {\n        c--\n    }\n    if c > b {\n        c--\n    }\n    if c > b\
    \ {\n        c--\n    }\n    c > a\n    return (a + b + c == 20)\n}\n", "    if\
    \ (a + b > c) && (a + c > b) && (b + c > a) {\n        return true;\n    }\n \
    \   return false;\n}\n", "    if a < b+c && b < a+c && c < a+b {\n        return\
    \ true\n    }\n    return false\n}\n", "    if a > b {\n        a, b = b, a\n\
    \    }\n\n    if a > c {\n        a, c = c, a\n    }\n\n    if b > c {\n     \
    \   b, c = c, b\n    }\n\n    return a * b * c >= a && b * c >= b\n}\n", "   \
    \ return a>b && b > c && a < c\n}\n", "    // Check if all three sides are equal\n\
    \    if a==b {\n        if b==c {\n            return true\n        }\n    }\n\
    \    // Check if all three sides are equal\n    if a==c {\n        if b==c {\n\
    \            return true\n        }\n    }\n    // Check which of the three sides\
    \ is greater\n    if (a > b) && (a > c) {\n        return true\n    }\n    if\
    \ ((b > a) && (b > c)) {\n        return true\n    }\n    if ((c > a) && (c >\
    \ b)) {\n        return true\n    }\n    return false\n}\n", "    return a >=\
    \ b+c && a >= c-b && a >= c+b\n}\n", "    if a == 0 && b == 0 && c == 0 {\n  \
    \      return true\n    } else if a == 0 {\n        return true\n    } else if\
    \ b == 0 {\n        return false\n    } else if c == 0 {\n        return false\n\
    \    }\n\n    var a, b, c int\n    if a > c {\n        a, c = c, a\n    }\n  \
    \  if b > c {\n        b, c = c, b\n    }\n\n    switch {\n    case a == c:\n\
    \        return right_angle(a, b, c)\n    case b == c:\n        return true\n\
    \    case a == c:\n        return true\n    default:\n        return right_angle(a,\
    \ b, c)\n    }\n}\n", "    if a < 0 || b < 0 || c < 0 || a > b {\n        return\
    \ false\n    }\n    if a > c && b > c {\n        return true\n    }\n    if a\
    \ > c && c > b {\n        return false\n    }\n    if a == b {\n        return\
    \ false\n    }\n    if a == c {\n        return true\n    }\n    if b == c {\n\
    \        return true\n    }\n    if a + b > c {\n        return true\n    }\n\
    \    if a + c > b {\n        return true\n    }\n    if b + c > a {\n        return\
    \ true\n    }\n    return false\n}", "    if (a > b) && (b > c){\n        if ((a\
    \ + b + c) == 0){\n            return true\n        }\n        if ((a - b - c)\
    \ == 0){\n            return true\n        }\n        if ((b - a) == 0){\n   \
    \         return true\n        }\n        if ((b + c) == 0){\n            return\
    \ true\n        }\n        if ((a - b) == 0){\n            return true\n     \
    \   }\n        if ((c + b) == 0){\n            return true\n        }\n      \
    \  if ((a - c) == 0){\n            return true\n        }\n        if ((c - b)\
    \ == 0){\n            return true\n        }\n    }\n    return false\n}\n</code>\n\
    <|/ a tags=go dscore=1 |>\n<| c |>\n\"The above example is incorrect\"?\n<|/ c\
    \ |>\n<| c |>\nThe question states: \"Given the lengths of the three sides of\
    \ a triangle. Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\"\n<|/ c |>\n<| a tags=go |>\nI believe this could be a great application\
    \ for the math/fp package.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"math/fp\"\n)\n", "    var a, b, c int\n    for i := 0; i < 3; i++ {\n   \
    \     switch {\n        case i&1 == 1:\n            a += b\n        case i ==\
    \ 2:\n            a += c\n        case i == 3:\n            b += c\n        default:\n\
    \            b += a\n        }\n    }\n\n    return a == b+c\n}\n</code>\n<|/\
    \ a tags=go,if-statement |>\n<| a |>\nOne possible solution I came up with for\
    \ golang is using recursion.\n<code>", "    a += b\n    b += c\n    c += a\n \
    \   \n    if a > b {\n        a -= b\n    }\n    if b > c {\n        b -= c\n\
    \    }\n    if c > a {\n        c -= a\n    }\n\n    return ((a > c) && (b > c)\
    \ && (c > a))\n}\n", "    // Triangle angle is right angle if both a and b and\
    \ c\n    // are in range of [-180, 180] angle and 180 degree\n    // a and b are\
    \ in range of [0, 360] angle.\n    // c is in range of [0, 360] angle\n    if\
    \ a<=0 || b<=0 || c<=0 {\n        return false\n    }\n    if a>=360 || b>=360\
    \ || c>=360 {\n        return false\n    }\n    if a>b+c {\n        return false\n\
    \    }\n    if b>a+c {\n        return false\n    }\n    if a>b+c {\n        return\
    \ false\n    }\n    return true\n}\n", "    if b == 0 || c == 0 {\n        return\
    \ false\n    }\n\n    if a == 0 || a == b || a == c {\n        return true\n \
    \   }\n\n    if b > c {\n        a, c = c, a\n        b, a = a, b\n    }\n\n \
    \   if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    d := (b\
    \ * b) - (4 * a * c)\n\n    if d < 0 {\n        return false\n    }\n\n    if\
    \ d == 0 {\n        return true\n    }\n\n    return right_angle_triangle(c -\
    \ a, b - a, c - a)\n}\n", "\tif a > c {\n\t\treturn false\n\t}\n\tif b > c {\n\
    \t\treturn false\n\t}\n\tif a + b > c {\n\t\treturn false\n\t}\n\treturn true\n\
    }\n", "    switch {\n    case a == 0 && b == 0 && c == 0: // base case\n     \
    \   return true\n    case a%2 == 0 && (b%2 == 0 || c%2 == 0): // base case\n \
    \       return true\n    default:\n        return false\n    }\n}\n", "    var\
    \ isRight bool\n    switch {\n    case a == b and a == c:\n        isRight = true\n\
    \    case b == c and b == a:\n        isRight = true\n    case a == c and b ==\
    \ c:\n        isRight = true\n    default:\n        isRight = false\n    }\n\n\
    \    return isRight\n}\n", "    switch {\n    case a + b > c && a + c > b + c\
    \ && b + c > a + c, // Triangle is equilateral.\n        a == c && b == c, //\
    \ Equilateral triangle\n        a == b || a == c || b == c, // Equilateral or\
    \ isosceles triangle (90).\n        a == b && b == c || a == c && c == b, // Right\
    \ angle triangle (45).\n        a == b || b == c || c == b, // Right angle triangle\
    \ (90).\n    default:\n        return false\n    }\n    return true\n}\n", " \
    \   if a==0 && b==0 {\n        return true\n    }\n\n    if a==0 && c==0 {\n \
    \       return false\n    }\n\n    if b==0 && c==0 {\n        return true\n  \
    \  }\n\n    return a+b>c || c+b>a\n}\n", "    if (b == 0 || c == 0) || (a == 0\
    \ && b == 0 && c == 0) || (a == 0 && b == c && c == 0) || (a == c && b == 0) ||\
    \ (b == 0 && c == c && c == 0) || (a == 0 && b == c && c == c) || (a == c && b\
    \ == c && c == 0) || (a == 0 && b == 0 && c == c) || (a == c && b == 0 && c ==\
    \ c) || (a == 0 && b == c && c == 0) || (a == c && b == c && c == c){\n      \
    \  return true\n    }\n    if (a < 0 || b < 0 || c < 0){\n        return false\n\
    \    }\n    if (a == b && b == c){\n        return true\n    }\n    if (a == 0){\n\
    \        if (c == 0){\n            return true\n        }\n        return false\n\
    \    }\n    if (b == 0){\n        if (c == 0){\n            return true\n    \
    \    }\n        return false\n    }\n    if (c == 0){\n        if (a==0){\n  \
    \          return true\n        }\n        return false\n    }\n    if (a == b){\n\
    \        if (c == c){\n            return true\n        }\n        return false\n\
    \    }\n    if ((a == c) || (b == c) || (a == b) || (b == a)){\n        return\
    \ true\n    }\n    if (a < b){\n        if ((b - a) < (c - b)){\n            return\
    \ true\n        }\n        return false\n    }\n    if ((a - b) < (b - c)){\n\
    \        return true\n    }\n    return false\n}\n", "    if a > b {\n       \
    \ a = b\n    }\n    if b > c {\n        b = c\n    }\n    if a > c {\n       \
    \ a = c\n    }\n    right := (b * b) - (4 * a * c)\n    left := (b * b) + (4 *\
    \ a * c)\n    if (right >= 0 && right <= left) || (right == -1 && left >= 0) ||\
    \ (right == 1 && left <= 0) {\n        return true\n    }\n    return false\n\
    }\n", "    return b+a == c || (b+a == c && b+c == a)\n}\n", "    if a < 0 {\n\
    \        a *= -1\n    }\n    if b < 0 {\n        b *= -1\n    }\n    if c < 0\
    \ {\n        c *= -1\n    }\n    if b == 0 {\n        return false\n    }\n  \
    \  if c == 0 {\n        return false\n    }\n    if b == a {\n        return false\n\
    \    }\n    if c == a {\n        return false\n    }\n    if a == b {\n      \
    \  return false\n    }\n    if a == c {\n        return false\n    }\n    if b\
    \ == c {\n        return false\n    }\n    return true\n}\n", "    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThe algorithm is wrong. `right_angle_triangle(100,\
    \ 200, 300)` gives `true`. You shouldn't be using `a`, `b`, `c` but `a`, `b`,\
    \ `d`.\n<|/ c |>\n<| a dscore=2 |>\nThis question is very similar to other Stackoverflow\
    \ questions asking for the same thing. \nThe general idea is to check if a triangle\
    \ is right angle or right triangle. \nThere are two ways to find if a triangle\
    \ is right or right triangle. \n1) Defining the equation of the triangle, using\
    \ pythagoras: \n<code>\na^2 + b^2 = c^2\n</code>\nThis equation tells you if two\
    \ sides are equal, which means they form a right triangle. \n2) Finding if the\
    \ two angles are equal, which means they form a right angle. \n<code>\nacos((a\
    \ + b)/sqrt((a + b)^2 - (a^2 + b^2)) / b) \n</code>\nThis equation tells you if\
    \ two angles are equal and forms a right angle. \nA triangle is right angle or\
    \ right triangle is when \n<code>\n(acos((a + b)/sqrt((a + b)^2 - (a^2 + b^2))\
    \ / b) = 1 or 2)\n</code>\n<|/ a tags=math,language-agnostic,algorithm,geometry\
    \ |>\n<| c |>\nI agree with that, but this doesn't answer the original question,\
    \ which is how to determine if a triangle is right or right triangle without relying\
    \ on the pythagoras theorem.\n<|/ c |>\n<| c |>\nI added an explanation to the\
    \ answer. Hope it helps!\n<|/ c |>\n<| c |>\nThank you, that's a good answer.\
    \ I've been looking for this solution a while now. I've been wondering if the\
    \ pythagoras theorem would work and I thought maybe it wouldn't. Looks like it\
    \ would only work if you know the sides, not the length of the sides, which is\
    \ what I'm currently using to determine if a triangle is a right angle or right\
    \ triangle. Thank you for the explanation.\n<|/ c |>\n<| a dscore=0 |>\nThe classic\
    \ example of an \"isosceles\" triangle is a right angled triangle with a single\
    \ vertex.  You would test for this with:", "    if (a>b&&a>c&&b>c) {\n       \
    \ return true\n    }\n    return false\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,python\
    \ dscore=0 |>\nIn short, this is my answer:\n<code>\ndef checkTriangle(side1,\
    \ side2, side3):\n    left = 0\n    right = 1\n    top = right + 1\n    bottom\
    \ = left + 2\n    \n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return\
    \ False\n    \n    if side1 > side2 and side1 > side3:\n        top = right +\
    \ 1\n    elif side2 > side1 and side2 > side3:\n        left = bottom + 2\n  \
    \  elif side3 > side2 and side3 > side1:\n        bottom = left + 2\n    \n  \
    \  return top < bottom and left < right\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    def checkTriangle(side1, side2, side3):\n    left = 0\n    right = 1\n    top\
    \ = right + 1\n    bottom = left + 2\n    \n    if side1 <= 0 or side2 <= 0 or\
    \ side3 <= 0:\n        return False\n    \n    if side1 > side2 and side1 > side3:\n\
    \        top = right + 1\n    elif side2 > side1 and side2 > side3:\n        left\
    \ = bottom + 2\n    elif side3 > side2 and side3 > side1:\n        bottom = left\
    \ + 2\n    \n    return top < bottom and left < right\n\ndef checkTriangle2(side1,\
    \ side2, side3):\n    left = side2\n    right = side3\n    top = left + 2\n  \
    \  bottom = right + 1\n    \n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n\
    \        return False\n    \n    if side1 > side2 and side1 > side3:\n       \
    \ left = side2\n    elif side2 > side1 and side2 > side3:\n        right = side3\n\
    \    elif side3 > side2 and side3 > side1:\n        top = left + 2\n    \n   \
    \ return top < bottom and left < right\n    \n    \nprint(checkTriangle(3, 4,\
    \ 5))\nprint(checkTriangle(1, 2, 3))\nprint(checkTriangle2(3, 4, 5))\nprint(checkTriangle2(1,\
    \ 2, 3))\nprint(checkTriangle2(4, 3, 1))\nprint(checkTriangle2(3, 3, 4))\n</code>\n\
    <|/ a dscore=0 tags=algorithm,python |>\n<| a tags=algorithm,python dscore=0 |>\n\
    <code>\ndef checkTriangle(side1, side2, side3):\n    left = 0\n    right = 1\n\
    \    top = right + 1\n    bottom = left + 2\n    \n    if ", "    ab := b - a\n\
    \    ac := c - a\n    // Check if a or b or c is a negative number\n    if ab\
    \ < 0 || ac < 0 {\n        // Check if a or b or c is 0\n        if ab == 0 &&\
    \ ac == 0 {\n            // Check if a or b is 0\n            if ab == 0 {\n \
    \               // If b is 0\n                if ac == 0 {\n                 \
    \   // a is also 0\n                    return true\n                } else {\n\
    \                    // a is not 0\n                    return false\n       \
    \         }\n            } else {\n                // b is not 0\n           \
    \     return false\n            }\n        } else {\n            // a or b is\
    \ not 0\n            return false\n        }\n    } else {\n        // a or b\
    \ or c is a positive number\n        return true\n    }\n}\n", "    return ((a\
    \ + b) > c || (b+c) > a || (c+a) > b)\n}\n", '    if (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) ||
    (a==0 && b==0 && c==0) || (a==0 && b==0 && c==0) || (a', "    if((a < 0 || b <\
    \ 0 || c < 0) || (a >= b+c && b >= a+c && c >= b+a)) return false\n    if((a ==\
    \ 0 || b == 0 || c == 0) || (a == b+c && b == a+c && c == b+a)) return false\n\
    \    return true\n}\n", "    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n\
    \    }\n\n    return a + b > c && a + c > b && b + c > a\n}\n", "    \n    if\
    \ a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if\
    \ c < 0 {\n        c = -c\n    }\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    return a > b+c && b > a+c && c > a-b\n}\n", "    if\
    \ a<=0 || b<=0 || c<=0 {\n        return false\n    }\n    if a+b>c {\n      \
    \  return false\n    }\n    if a+c>b {\n        return false\n    }\n    if b+c>a\
    \ {\n        return false\n    }\n    return true\n}\n", "    // Check all the\
    \ possible cases and return true is the cases are all possible.\n    if a == 0\
    \ || b == 0 || c == 0 || a == b || a == c || b == c {\n        return false\n\
    \    }\n\n    // Check if one of the sides is 90 degree.\n    switch {\n    case\
    \ a > b {\n        switch {\n        case c > a:\n            return true\n  \
    \      case c == a:\n            return false\n        }\n    }\n\n    switch\
    \ {\n    case b > a:\n        switch {\n        case c > b:\n            return\
    \ true\n        case c == b:\n            return false\n        }\n    }\n\n \
    \   switch {\n    case c > a:\n        switch {\n        case b > c:\n       \
    \     return true\n        case b == c:\n            return false\n        }\n\
    \    }\n\n    // If all else fails, this is not a right-angled triangle.\n   \
    \ return false\n}\n</code>\n<|/ a tags=go dscore=1 |>\n<| a tags=go |>\nHere is\
    \ my solution\n<code>\npackage main\n\nimport \"fmt\"\n", "    if b != c {\n \
    \       if b == a {\n            return false\n        }\n        if c == a {\n\
    \            return true\n        }\n        if b == c {\n            return true\n\
    \        }\n    }\n\n    // Check for 90deg triangle\n    if a > c {\n       \
    \ return false\n    }\n    if a > b {\n        return true\n    }\n    return\
    \ false\n}\n", "    // Triangle sides are greater than or equal to zero \n   \
    \ // and less than or equal to 3 \n    if a < 0 || b < 0 || c < 0 {\n        return\
    \ false\n    }\n\n    // Check whether the triangle has equilateral sides or not\n\
    \    // using modulus operator to check whether the three sides\n    // are equilateral\
    \ or not \n    return (a % 2 == 0 && b % 2 == 0 && c % 2 == 0)\n}\n", "    if\
    \ (a == 0 || b == 0 || c == 0) && (a != 0 && b != 0 && c != 0) {\n        return\
    \ false\n    }\n    switch {\n    case a > b && a > c && b > c:\n        return\
    \ true\n    case b > a && b > c && a > c:\n        return true\n    case c > a\
    \ && c > b && a > b:\n        return true\n    default:\n        return false\n\
    \    }\n}\n", "    \n    \n\n    //to check three side have triangle shape\n \
    \   if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    //to check\
    \ three side have triangle shape\n    if a+b+c == 0 {\n        return false\n\
    \    }\n\n    if a*a + b*b == c*c {\n        return false\n    }\n\n    //to check\
    \ three side have triangle shape\n    if a*a + b*b == (c*c-a*a)/2 {\n        return\
    \ false\n    }\n\n    if a*a + b*b == (c*c-a*a)/2 {\n        return false\n  \
    \  }\n\n    if a*a + b*b == (c*c-a*a)/2 {\n        return false\n    }\n    \n\
    \    return true\n}\n", "    var d1, d2, d3 int\n    if a < b {\n        d1 =\
    \ b\n        d2 = c\n        d3 = a\n    } else if a < c {\n        d1 = a\n \
    \       d2 = c\n        d3 = b\n    } else {\n        d1 = a\n        d2 = b\n\
    \        d3 = c\n    }\n\n    // Now calculate the area of the triangle. \n  \
    \  // Refer this link: https://en.wikipedia.org/wiki/Triangle_area\n    c := d1\
    \ * d2 + d3 * d2\n    a := d1 * d3 - d3 * d2\n    b := d2 * d3 - d1 * d3\n   \
    \ c /= 2\n\n    // Now we need to find the value of hypotenuse (which is hypotenuse\
    \ of a\n    // right angled triangle). \n    // Refer this link: https://en.wikipedia.org/wiki/Hypotenuse\n\
    \    // The formula for hypotenuse is:\n    // h = \u221A (a^2 + b^2 + c^2)\n\
    \    // h is used to find the area of the triangle. \n    // h is also called\
    \ the hypotenuse (length).\n    h := math.Sqrt(math.Pow(float64(a), 2.0) + math.Pow(float64(b),\
    \ 2.0) + math.Pow(float64(c), 2.0))\n    \n    // If the area is greater than\
    \ half of hypotenuse, then the triangle is \n    // considered as right angled\
    \ else its not \n    if h > float64(h/2) {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for\
    \ the code. Can you please tell me what should I test when I am calling the function?\
    \ I am very new to golang, Thanks!\n<|/ c |>\n<| c |>\nI added a test code to\
    \ my answer. Go and programming are easy, if you know how to use `Go`. Just try\
    \ to solve some easy problems like this and try to apply the techniques you learn\
    \ there.\n<|/ c |>\n<| c |>\nYou also can test your function `right_angle_triangle`\
    \ with the online demo: https://play.golang.org/p/K6W9EZwvQi4\n<|/ c |>\n<| c\
    \ |>\nI still don't know what to do with my test code. can you please edit your\
    \ answer with the test code and show me the result. Thanks\n<|/ c |>\n<| c |>\n\
    Updated the answer. Good luck!\n<|/ c |>\n<| a |>\nThis code should help you to\
    \ solve this problem:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype\
    \ triangle ", "    // Check if sides are invalid\n    if a == 0 || b == 0 || c\
    \ == 0 || a > b+c {\n        return false\n    }\n    // Check if sides are reversed\n\
    \    if a > b {\n        return a <= c\n    } else {\n        return a >= c\n\
    \    }\n}\n", "    if a == 0 || b == 0 || c == 0 {\n        return false\n   \
    \ }\n\n    // Check if any three sides are equal\n    if a == b+c || a == c+b\
    \ || a == b+c {\n        return true\n    }\n    // Check if any two sides are\
    \ equal\n    if a == b+c || a == c+b {\n        return false\n    }\n    // Check\
    \ if any side is 90 degree\n    if a == b {\n        return true\n    }\n    //\
    \ Check if any side is less than 90 degree\n    if a < b {\n        return false\n\
    \    }\n    // Check if any side is more than 90 degree\n    if a > b {\n    \
    \    return true\n    }\n\n    return false\n}", "    if b == 0 {\n        return\
    \ false\n    }\n    if c == 0 {\n        return false\n    }\n    if a < 0 ||\
    \ b < 0 || c < 0 {\n        return false\n    }\n\n    return ((a + c) <= (b +\
    \ c) && (a <= c) || (b <= c) || (a <= b))\n}\n", "    var a1, b1, c1 int\n   \
    \ \n    // If lengths of the sides are equal, then the triangle is a\n    // right-angled\
    \ triangle\n    if a==b {\n        return true\n    } else if b==c {\n       \
    \ return true\n    }\n    \n    // If first side is greater than the second, then\
    \ first side\n    // is a right-angled triangle\n    if a>b {\n        a1 = a\n\
    \        b1 = b\n    } else {\n        a1 = b\n        b1 = a\n    }\n    \n \
    \   // If second side is greater than the third, then second side\n    // is a\
    \ right-angled triangle\n    if b>c {\n        c1 = b\n        b1 = c\n    } else\
    \ {\n        c1 = c\n        b1 = b\n    }\n    \n    // If first and third sides\
    \ are equal, then the triangle is a\n    // right-angled triangle\n    if a1==c1\
    \ {\n        return true\n    } else if b1==c1 {\n        return true\n    }\n\
    \    \n    return false\n}\n", "    // write code here\n    if a + b > c {\n \
    \       return false\n    }\n    if b > c {\n        return false\n    }\n   \
    \ if a + c > b {\n        return false\n    }\n    return true\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis answer was flagged as a low quality answer because\
    \ of the low quality of code and it did not meet the guidelines. Please edit it\
    \ to improve the quality and get it more upvotes.\n<|/ c |>\n<| a tags=algorithm,math,javascript,geometry\
    \ |>\nA right angle triangle is a triangle in which the first angle (say A) is\
    \ greater than the second angle (say B) and third angle (say C), but less than\
    \ the sum of both sides.\n<|/ a dscore=0 |>\n<| c |>\nThe question was not about\
    \ a right angle triangle, but about the algorithm to determine if three sides\
    \ form a right angled triangle (which could be done by simply determining the\
    \ triangle area, for example). An example would be `right_angle_triangle(4,5,6)`\
    \ or `right_angle_triangle(3,2,5)`. The answer by Rashom and my comments are correct\
    \ about this - it is just a triangle inequality.\n<|/ c |>\n<| c |>\nIf it can\
    \ be written as a triangle inequality, then I agree with you. But the question\
    \ is about an algorithm, not about mathematical definition of triangles.\n<|/\
    \ c |>\n<| a |>\n<code>", "    return a > 0 && b > 0 && c > 0 && b > a && c >\
    \ b\n}\n", "    // return false if the sides lengths are invalid\n    if b < 0\
    \ || c < 0 || a < 0 {\n        return false\n    }\n\n    // Calculate the area\
    \ of triangle with given sides\n    area := a + b + c\n    // Calculate the sum\
    \ of the two given sides\n    sum := a + b\n    // Calculate the difference between\
    \ two given sides\n    diff := c - b\n\n    // Check if each side is greater than\
    \ the sum of the two given sides\n    if diff > sum {\n        return false\n\
    \    }\n    // Calculate the difference between the two given sides\n    diff\
    \ *= diff\n    // Calculate the sum of the given sides\n    sum *= sum\n    //\
    \ Calculate the area of the given triangle\n    area *= area\n    // Check if\
    \ the difference between the given sides and the sum of the two \n    // given\
    \ sides is equal to the area of the given triangle\n    if diff != sum {\n   \
    \     return false\n    }\n\n    // If every check passed, the triangle is right-angled.\n\
    \    return true\n}\n", "    if b == 0 || c == 0 || a == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return c == b\n    }\n    if a == c {\n     \
    \   return b == c\n    }\n    if a == b+c {\n        return b == a-c\n    }\n\
    \    if a == b-c {\n        return b == a + c\n    }\n    return false\n}\n",
  "    // check if any one side is negative\n    if a < 0 || b < 0 || c < 0 {\n  \
    \      return false\n    }\n    // check if any two sides are equal\n    if a\
    \ == 0 || b == 0 || c == 0 {\n        return false\n    }\n    // check if any\
    \ two sides are equal\n    if a == c || b == c {\n        return false\n    }\n\
    \    // check if any two sides are equal\n    if a == c && b == c {\n        return\
    \ false\n    }\n\n    // check if any two sides are equal\n    if a == b || a\
    \ == c || b == c {\n        return false\n    }\n\n    // check if any two sides\
    \ are equal\n    if a == b && b == c {\n        return false\n    }\n    // check\
    \ if two sides are equal\n    if a == b {\n        return false\n    }\n\n   \
    \ // check if two sides are equal\n    if b == c {\n        return false\n   \
    \ }\n    // check if two sides are equal\n    if a == c {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if a == b {\n        return false\n\
    \    }\n\n    // check if two sides are equal\n    if a == b {\n        return\
    \ false\n    }\n    // check if two sides are equal\n    if b == c {\n       \
    \ return false\n    }\n    // check if two sides are equal\n    if a == c {\n\
    \        return false\n    }\n    // check if two sides are equal\n    if a ==\
    \ b {\n        return false\n    }\n    // check if two sides are equal\n    if\
    \ a == c {\n        return false\n    }\n    // check if two sides are equal\n\
    \    if b == c {\n        return false\n    }\n    // check if two sides are equal\n\
    \    if a == c {\n        return false\n    }\n\n    // check if two sides are\
    \ equal\n    if b == c {\n        return false\n    }\n    // check if two sides\
    \ are equal\n    if a == c {\n        return false\n    }\n    // check if two\
    \ sides are equal\n    if a == b {\n        return false\n    }\n    // check\
    \ if two sides are equal\n    if a == c {\n        return false\n    }\n    //\
    \ check if two sides are equal\n    if b == c {\n        return false\n    }\n\
    \    // check if two sides are equal\n    if a == c {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if a == b {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if b == c {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if a == c {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if a == b {\n        return false\n\
    \    }\n    // check if two sides are equal\n    if b == c ", "    return (((b\
    \ - a) * (b - c)) > ((a * b) - (b * c)))\n}\n", "    // The sides of the triangle\
    \ (A,B,C) are given as the lengths of the three sides.\n    if a > 0 && b > 0\
    \ && c > 0 {\n        return triangle(a, b, c)\n    }\n    fmt.Println(\"This\
    \ triangle is not a right-angled triangle\")\n    return false\n}\n</code>\n<|/\
    \ a |>\n<| a tags=go,triangulation |>\nHere's a Python 3 solution that I wrote.\
    \  It doesn't have bounds checking, only integers:\n<code>\nimport math\n\nclass\
    \ Triangle(object):\n    def __init__(self, a, b, c):\n        self.a = a\n  \
    \      self.b = b\n        self.c = c\n        self.perimeter = a + b + c\n\n\
    \    def is_right_angle(self):\n        cos_a = math.cos(self.b / self.a)\n  \
    \      cos_b = math.cos(self.c / self.b)\n        cos_c = math.cos(self.a / self.c)\n\
    \        sin_a = math.sin(self.b / self.a)\n        sin_b = math.sin(self.c /\
    \ self.b)\n        sin_c = math.sin(self.a / self.c)\n\n        # a is the longest\
    \ triangle so if b > a, then a is greater than c\n        a_prime_angle = (cos_b\
    \ + cos_c) / (sin_b * sin_c)\n\n        # b is the longest triangle so if c >\
    \ b, then b is greater than a\n        b_prime_angle = (cos_c + cos_a) / (sin_c\
    \ * sin_a)\n\n        # c is the longest triangle so if a > c, then c is greater\
    \ than b\n        c_prime_angle = (cos_a + cos_b) / (sin_a * sin_b)\n\n      \
    \  # a is the longest triangle so if b > a, then a is greater than c\n       \
    \ if math.fabs(a_prime_angle - b_prime_angle) > math.fabs(a_prime_angle - c_prime_angle):\n\
    \            return self.a > self.b\n        elif math.fabs(a_prime_angle - c_prime_angle)\
    \ > math.fabs(a_prime_angle - b_prime_angle):\n            return self.a > self.c\n\
    \        else:\n            return self.c > self.b\n\nif __name__ == \"__main__\"\
    :\n    t = Triangle(10, 20, 30)\n    print(\"The triangle is a right angled triangle:\
    \ {}\".format(t.is_right_angle()))\n    t = Triangle(12, 24, 36)\n    print(\"\
    The triangle is a right angled triangle: {}\".format(t.is_right_angle()))\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nI have recently written a javascript package that\
    \ uses triangle inequalities to solve this problem in JavaScript: https://github.com/hughsk/triangle_inequalities\n\
    I tried to port the Java version to javascript and failed, so I implemented the\
    \ algorithm from wikipedia and then I translated it from ", "    if a == b {\n\
    \        return a == c\n    }\n    if a > b {\n        return false\n    }\n \
    \   if b > c {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if a == c {\n        return b == b\n    }\n    if a == b {\n     \
    \   return c == c\n    }\n    return false\n}\n", "    if b == 0 {\n        return\
    \ false\n    }\n\n    if a == 0 || a == 180 {\n        return true\n    }\n\n\
    \    if c == 0 || c == 90 {\n        return true\n    }\n\n    if (a + b > c)\
    \ && (a + c > b) && (b + c > a) {\n        return true\n    }\n    return false\n\
    }\n", "    // If the sides are equal, triangle is a right angled triangle.\n \
    \   if (a == b) && (a == c) {\n        return true;\n    }\n\n    // If the side\
    \ lengths are equal, triangle is a right angled triangle.\n    if (a == b) ||\
    \ (a == c) {\n        return true;\n    }\n\n    // If the two sides are equal,\
    \ triangle is a right angled triangle.\n    // If the three sides are equal, triangle\
    \ is a right angled triangle.\n    // If they all have the same length, triangle\
    \ is a right angled triangle.\n    if (a == b) || (a == c) || (b == c) {\n   \
    \     return true;\n    }\n\n    // Otherwise, triangle is not a right angled\
    \ triangle.\n    return false;\n}\n", "    if a == b {\n        return true\n\
    \    }\n\n    if a != c {\n        return false\n    }\n\n    if b != c {\n  \
    \      return false\n    }\n\n    return a == b\n}\n", "    // check three sides\n\
    \    if a > b {\n        fmt.Println(a, b)\n        return false\n    }\n\n  \
    \  if a < b {\n        fmt.Println(a, b)\n        return false\n    }\n\n    if\
    \ b > c {\n        fmt.Println(b, c)\n        return false\n    }\n\n    if b\
    \ < c {\n        fmt.Println(b, c)\n        return false\n    }\n\n    // check\
    \ one side\n    if a == b {\n        fmt.Println(\"\")\n        return true\n\
    \    }\n\n    // check two sides\n    if a == c {\n        fmt.Println(a, b)\n\
    \        return false\n    }\n\n    if b == c {\n        fmt.Println(b, c)\n \
    \       return false\n    }\n\n    return true\n}\n", "    return (a + b > c)\
    \ && ((a + c) > b) && ((c + b) > a)\n}\n", "    if b == 0 {\n        return a\
    \ == c\n    }\n    if a == 0 || b == 0 {\n        return false\n    }\n    if\
    \ a < b {\n        if a > c {\n            return false\n        }\n    } else\
    \ {\n        if b > c {\n            return false\n        }\n    }\n    return\
    \ is_right_angle(a, b)\n}\n", "    // Check if any of the three sides are equal\n\
    \    if a == b {\n        if a > c {\n            return true\n        }\n   \
    \ }\n    else if a == c {\n        if b > c {\n            return true\n     \
    \   }\n    }\n    return false\n}\n</code>\n<|/ a tags=go,boolean,numbers |>\n\
    <| c |>\nthank you for the solution, is there any chance you can elaborate as\
    \ to why you didn't just use the built in package `math` for the determinant?\n\
    <|/ c |>\n<| c |>\n- I didn't know about the `math.IsDegenerate` function, so\
    \ I thought I would implement a solution from scratch. Honestly, I just didn't\
    \ have the need for something so computationally intensive. Also, for the purposes\
    \ of this post, the built-in package was fine.\n<|/ c |>\n<| c |>\nA determinant\
    \ is the product of the cross-product of two vectors. If you look at the Wikipedia\
    \ page I linked to, it explains how this is derived. So you should be able to\
    \ use `math.Sqrt(a * b * c)` where `a`, `b`, and `c` are the side lengths of the\
    \ triangle. Those lengths are easily calculable because it's just the lengths\
    \ of the three sides of the triangle. Of course, the determinant is also easy\
    \ to calculate from just two sides.\n<|/ c |>\n<| c |>\n- I added an implementation\
    \ using just two sides. Again, though, the determinant calculation is also pretty\
    \ simple if you only need to work with two sides.\n<|/ c |>\n<| c |>\nI just want\
    \ to add that `IsDegenerate` returns `true` for cases where `a` is `0`, which\
    \ is what happens when the triangle is degenerate. This can be quite handy, especially\
    \ if you know you're dealing with a triangle and want to know if a particular\
    \ side is degenerate, just to be safe.\n<|/ c |>\n<| a dscore=2 tags=go,boolean,numbers\
    \ |>\nWe can use the determinant of the triangle:\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n", "    return (a + b > c) && (a + c > b) && (b + c > a)\n\
    }\n</code>\n<|/ a tags=algorithm,c++,geometry dscore=1 |>\n<| a tags=algorithm,c++,geometry\
    \ dscore=1 |>\nHere's my version:\n<code>\nint a = 5;\nint b = 6;\nint c = 3;\n\
    \nint max = 3 * a * b;\nint min = a * b * c;\n\nbool isRightAngleTriangle(int\
    \ a, int b, int c) {\n    return max * c - min * b > 0 ;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\nI wanted to point out that if you're looking for an algorithm\
    \ that can actually tell if the triangle is right-angled, that algorithm isn't\
    \ that trivial.  For instance, if you have a triangle with sides 1,1,2, and you\
    \ add another 1,2, then it would still be considered a right angled triangle,\
    \ because 1,2 isn't an even integer.  Thus, if you're looking for an algorithm\
    \ that can tell if your triangle is right angled, you're basically looking for\
    \ an algorithm that can tell if your triangle is a right angled triangle with\
    \ three sides that all add up to 9.  Of course, you could just do a simple math\
    \ check to see if the sum of your sides is equal to 9, but that wouldn't be enough\
    \ to determine if your triangle is right angled.  \nSo here's an algorithm that\
    \ can tell if your triangle is right angled:\nYou have to add up all of the sides,\
    \ if the sum of two sides adds up to 9, then the triangle is right-angled.\n<code>\n\
    bool IsRightAngledTriangle(int a, int b, int c)\n{\n    int sum = (a + b) + (c\
    \ + a);\n    return sum == 9\n}\n</code>\n<|/ a tags=algorithm,c++,geometry |>\n\
    <| a tags=algorithm,c++,geometry |>\n<code>\nint a = 5;\nint b = 6;\nint c = 3;\n\
    \nint max = 3 * a * b;\nint min = a * b * c;\n\nbool isRightAngleTriangle(int\
    \ a, int b, int c) {\n    return max * c - min * b > 0 ;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis answer has already been given 5 years ago.\n<|/ c |>\n<| c\
    \ |>\nIt would be good to include some explanation as to why your code is correct\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nint a = 5;\nint b = 6;\nint c = 3;\n\nint\
    \ max = 3 * a * b;\nint min = a * b * c;\n\nbool ", "    angle := 180 - math.Sqrt(a*a\
    \ + b*b + c*c)\n    return angle >= 90\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ tags=algorithm,language-agnostic,geometry,math |>\nThis is a classic problem\
    \ in computer science. You're looking for a triangle containing three sides of\
    \ length x, y, z. The problem then reduces to finding any pair of sides with length\
    \ y that sum to z. In order to simplify things, let's define the sum of the sides\
    \ to be n, the length of the third side to be s3, the other two sides to be s2,\
    \ and we want the triangle to be right angled if s2-s3=z*z.\nThe simplest approach\
    \ would be to just iterate through all the possible pairs of sides. But this would\
    \ be a huge problem. One way would be to just iterate through all possible triples\
    \ of sides (n, n, n) for some constant n large enough to encompass all the possibilities.\
    \ That's not so bad, since we can just keep all the possibilities in memory and\
    \ test them at the end. The other way would be to keep a heap with all the possible\
    \ solutions sorted by their lengths, and then just pop off the first triangle\
    \ which has length z*z and which can be built by adding one side. That's more\
    \ complicated and more memory intensive.\nWe can do better with Dynamic Programming.\
    \ It turns out that it's possible to come up with an algorithm which only iterates\
    \ through all the possible triples of sides (n, n, n) for some n large enough\
    \ to encompass all the possibilities, and which is O(n^3). We can do it in O(n^2)\
    \ by storing the length of the sides for each triangle (which we can do by sorting\
    \ them by length, then just storing them in an array or linked list). Then, we\
    \ can just pop off the triangle that has length z*z and which can be built by\
    \ adding one side.\nThis works in O(n^2) time, and O(n^3) space.\nSo now let's\
    \ try and prove that it's O(n^3) and O(n^2) time.\nThe first step is to con",
  "    return (a + b > c) || (a + c > b) || (b + c > a)\n}\n", "    if a == b {\n\
    \        return false\n    }\n\n    if a == c {\n        return false\n    }\n\
    \n    if b == c {\n        return false\n    }\n\n    if a == 0 || b == 0 || c\
    \ == 0 {\n        return false\n    }\n\n    var sum1, sum2, sum3 int\n    sum1\
    \ = a + b + c\n    sum2 = a + c - b\n    sum3 = b + c - a\n    return ((sum1 <\
    \ sum2 && sum1 < sum3) == (sum2 < sum3))\n}\n", "    // TODO: Write your solution\
    \ (below)\n    if a>b || b>c || c>a {\n        fmt.Println(\"a\")\n        fmt.Println(\"\
    \ \")\n        fmt.Println(\"b\")\n        fmt.Println(\" \")\n        fmt.Println(\"\
    c\")\n        fmt.Println(\" \")\n        fmt.Println(a)\n        fmt.Println(\"\
    \ \")\n        fmt.Println(b)\n        fmt.Println(\" \")\n        fmt.Println(c)\n\
    \        fmt.Println(\" \")\n        fmt.Println(\" \")\n        fmt.Println(\"\
    a\")\n        fmt.Println(\" \")\n        fmt.Println(\"b\")\n        fmt.Println(\"\
    \ \")\n        fmt.Println(\"c\")\n        fmt.Println(\" \")\n        fmt.Println(a)\n\
    \        fmt.Println(\" \")\n        fmt.Println(b)\n        fmt.Println(\" \"\
    )\n        fmt.Println(c)\n        fmt.Println(\" \")\n        fmt.Println(\"\
    \ \")\n        fmt.Println(a)\n        fmt.Println(\" \")\n        fmt.Println(b)\n\
    \        fmt.Println(\" \")\n        fmt.Println(c)\n        fmt.Println(\" \"\
    )\n        fmt.Println(\" \")\n        fmt.Println(a)\n        fmt.Println(\"\
    \ \")\n        fmt.Println(b)\n        fmt.Println(\" \")\n        fmt.Println(c)\n\
    \        fmt.Println(\" \")\n        fmt.Println(\" \")\n        fmt.Println(a)\n\
    \        fmt.Println(\" \")\n        fmt.Println(b)\n        fmt.Println(\" \"\
    )\n        fmt.Println(c)\n        fmt.Println(\" \")\n        fmt.Println(\"\
    \ \")\n        fmt.Println(a)\n        fmt.Println(\" \")\n        fmt.Println(b)\n\
    \        fmt.Println(\" \")\n        fmt.Println(c)\n        fmt.Println(\" \"\
    )\n        fmt.Println(\" \")\n        fmt.Println(a)\n        fmt.Println(\"\
    \ \")\n        fmt.Println(b)\n        fmt.Println(\" \")\n        fmt.Println(c)\n\
    \        fmt.Println(\" \")\n        fmt.Println(\" \")\n        fmt.Println(a)\n\
    \        fmt.Println(\" \")\n        fmt.Println(b)\n        fmt.Println(\" \"\
    )\n        fmt.Println(c)\n        fmt.Println(\" \")\n        fmt.Println(\"\
    \ \")\n        fmt.Println(a)\n        fmt.Println(\" \")\n        fmt.Println(b)\n\
    \        fmt.Println(\" \")\n        fmt.Println(c)\n        fmt.Println(\" \"\
    )\n        fmt.Println(\" \")\n        fmt.Println(a)\n        fmt.Println(\"\
    \ \")\n        fmt.Println(b)\n        fmt.Println(\" \")\n        fmt.Println(c)\n\
    \        fmt.Println(\" \")\n        fmt.Println(\" \")", "    if a == 0 || b\
    \ == 0 || c == 0 {\n        return false\n    }\n    \n    ab := a*b\n    ac :=\
    \ a*c\n    bc := b*c\n    \n    if ab == ac && bc == 0 {\n        return true\n\
    \    } else if ab == bc && ac == 0 {\n        return false\n    }\n    \n    if\
    \ ab < ac {\n        diff := ac - ab\n        if bc < diff {\n            diff\
    \ := bc - diff\n            if a < diff {\n                return true\n     \
    \       }\n        }\n    } else {\n        diff := bc - ab\n        if bc < diff\
    \ {\n            diff := bc - diff\n            if a < diff {\n              \
    \  return true\n            }\n        }\n    }\n    \n    return false\n}\n",
  "    return a > 0 && b > 0 && c > 0 &&\n        (a + b == c || a + c == b || b +\
    \ c == a)\n}\n", "    // Calculate all the possible angles of the triangle\n \
    \   a := b - a\n    c := c - b\n\n    ab := math.Sqrt(float64(a*a + b*b))\n  \
    \  ac := math.Sqrt(float64(a*a + c*c))\n    bc := math.Sqrt(float64(b*b + c*c))\n\
    \n    if ab*bc > ac*c {\n        // If the angle is greater than 180 degree, it\
    \ is a right-angled triangle\n        return ab > bc\n    }\n\n    // Otherwise\
    \ it is a straight-angled triangle\n    return ab < ac && ab < bc\n}\n</code>\n\
    <|/ a dscore=5 tags=geometry,algorithm,c++ |>\n<| c |>\nThis algorithm doesn't\
    \ work well for cases like this one: \n\n`right_angle_triangle(3, 4, 5)` returns\
    \ `true`\n`right_angle_triangle(1, 2, 3)` returns `true`\n`right_angle_triangle(10,\
    \ 10, 10)` returns `false`\n<|/ c |>\n<| c |>\nThis is really simple and efficient!\n\
    <|/ c |>\n<| c |>\nI agree, thanks! This is super straightforward and effective.\n\
    <|/ c |>\n<| c |>\nI love this solution. My only gripe is that it's slightly confusing\
    \ because you think `a` is `b - a`, but really it's the `b - a` which makes up\
    \ the angle, and `a` represents the other side. Eg, `right_angle_triangle(3, 4,\
    \ 5)` should say `a = 3 - 2 = 1`, but it's actually `a = 3`\n<|/ c |>\n<| c |>\n\
    I've made a quick adjustment to make the code clearer. The original code was a\
    \ bit confusing because `a` and `b` were confusing because they represented two\
    \ sides of the triangle, and they were using 'a' and 'b' for the same variable,\
    \ but that caused confusion in the comments.\n<|/ c |>\n<| a tags=geometry,algorithm,c++\
    \ dscore=5 |>\nYet another solution:\n<code>\nbool isRightAngled(int a, int b,\
    \ int c) {\n    return (a + b > c) && (b + c > a) && (a + c > b) \n          \
    \ && (a + b + c < 90); \n}\n</code>\nThis doesn't work if any side is zero. \n\
    <code>\nbool isRightAngled(int a, int b, int c) {\n    return (a + b > c) && (b\
    \ + c > a) && (a + c > b) \n           && (a + b + c < 90) && (b + a * c < 90",
  "    return b > a && b > c && ((a + b) > c || (a + c) > b)\n}\n", "    if a < 0\
    \ || b < 0 || c < 0 {\n        return false\n    }\n    a_sq := a * a\n    b_sq\
    \ := b * b\n    c_sq := c * c\n    a_c_sq := a_sq + c_sq\n    if b_sq >= a_c_sq\
    \ {\n        return false\n    }\n    if a > c && b > c {\n        return false\n\
    \    }\n    if a == c && b == c {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c && b < c {\n        return false\n    }\n    if a < c && b < c {\n\
    \        return false\n    }\n    return true\n}\n", "    // Get the two sides\
    \ of the triangle\n    side_a := a - b\n    side_b := b - c\n    side_c := c -\
    \ a\n\n    // If the side lengths are the same\n    if side_a == side_b && side_b\
    \ == side_c {\n        return true\n    }\n\n    // If the side lengths are different\n\
    \    if side_a != side_b {\n        return false\n    }\n\n    // If the side\
    \ lengths are equal\n    if side_b != side_c {\n        return false\n    }\n\n\
    \    // If the side lengths are equal\n    return true\n}\n", "    return ((a\
    \ + b >= c) || (b + c >= a) || (a + b + c >= 4))\n}\n", "    if b == c {\n   \
    \     return false\n    }\n    if a == b {\n        return a <= c\n    }\n   \
    \ \n    return a <= b && c <= a\n}\n", "    if (a == b && (a > c || b > c)) ||\
    \ (a > b && b > c) {\n        return false;\n    }\n    else if b == c {\n   \
    \     return true;\n    }\n    else {\n        return a > b || b > c;\n    }\n\
    }", "    return a*a + b*b == c*c\n}\n", "    // if a==b or a==c or b==c then they\
    \ are equilateral\n    if a == b+c || a == c+b || b == c+a {\n        return true\n\
    \    }\n    // else one of the sides is 90 degree\n    if a%2 == 0 {\n       \
    \ return a==(b+c) || (b==(c+a) && (c-b)==a)\n    }\n    return b%2 == 0 && b==(c+a)\
    \ || (b==(c+a) && (c-b)==b)\n}\n", "    switch {\n    case a > c && a > b:  //check\
    \ case 1\n        return true\n    case b > c:\n        return false\n    case\
    \ a == c || a == b:\n        return true\n    default:\n        return false\n\
    \    }\n}\n", "\t// The following conditions must be satisfied for a triangle\
    \ to be\n\t// considered a right-angled triangle\n\t// The sum of any two sides\
    \ cannot be greater than the third side\n\t// The sum of any two sides must be\
    \ equal to the original length\n\t// Example: right_angle_triangle(3, 4, 5)\n\t\
    // Sum of any two sides: 3 + 4  Sum of any two sides: 5 + 4  Sum of any two sides:\
    \ 3 + 5\n\t// Condition violated: 3 + 5 + 4 > 5 + 4 + 3\n\n\t// Calculate the\
    \ sum of any two sides\n\tsum := a + b + c\n\t// If the sum of any two sides is\
    \ greater than the third side\n\t// then return false\n\tif sum > c {\n\t\treturn\
    \ false\n\t}\n\n\t// If sum is equal to the third side, then the sides equal\n\
    \tif sum == c {\n\t\treturn true\n\t}\n\n\t// If the sum of the two sides is equal\
    \ to the third side\n\t// then it is a right-angled triangle\n\treturn (sum ==\
    \ (a + b))\n}\n", "    //check a\n    if a <= 0 || b <= 0 || c <= 0 {\n      \
    \  return false\n    }\n    //check b\n    if a > b {\n        return false\n\
    \    }\n    //check c\n    if a > c {\n        return false\n    }\n    // a >\
    \ b > c\n    if b > c {\n        return false\n    }\n    // Check b\n    if b\
    \ == c {\n        return true\n    }\n\n    // If we are here, then b and c are\
    \ not the same.\n    if a > c {\n        // Check a\n        if a == b {\n   \
    \         return true\n        }\n        // Check c\n        if a == c {\n  \
    \          return true\n        }\n        // Check b\n        if a == b {\n \
    \           return true\n        }\n        // If we are here, a is not the same\
    \ as c or b is not the same as c.\n        return false\n    }\n    // If we are\
    \ here, then a is not the same as b or c is not the same as a.\n    return false\n\
    }\n", "    // The sum of two sides cannot be greater than the third side\n   \
    \ if a + b > c {\n        return false;\n    }\n    // The sum of two sides cannot\
    \ be greater than the third side\n    if a + c > b {\n        return false;\n\
    \    }\n    // The sum of two sides cannot be greater than the third side\n  \
    \  if b + c > a {\n        return false;\n    }\n    // The sum of two sides cannot\
    \ be greater than the third side\n    if a + b > c {\n        return false;\n\
    \    }\n    // The sum of two sides cannot be greater than the third side\n  \
    \  if a + c > b {\n        return false;\n    }\n    // The sum of two sides cannot\
    \ be greater than the third side\n    if b + c > a {\n        return false;\n\
    \    }\n    // The sum of two sides cannot be greater than the third side\n  \
    \  if a + b > c {\n        return false;\n    }\n    // The sum of two sides cannot\
    \ be greater than the third side\n    if a + c > b {\n        return false;\n\
    \    }\n    // The sum of two sides cannot be greater than the third side\n  \
    \  if b + c > a {\n        return false;\n    }\n    // No two sides can be greater\
    \ than the third side\n    return true;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,geometry,math,c++,python\
    \ |>\n<| c |>\nI tested this in Python, seems to work. http://ideone.com/OXqVG\n\
    <|/ c |>\n<| c |>\nIt is not the correct solution because you are using square\
    \ root instead of Pythagorean theorem\n<|/ c |>\n<| c |>\nYou should not use square\
    \ roots. You should be using Pythagorean theorem.\n<|/ c |>\n<| c |>\nThis is\
    \ not correct: \n`if b**2 - 4 * a * c < 0:\n    return false\nif a**2 - 4 * b\
    \ * c < 0:\n    return false\nreturn True`\n<|/ c |>\n<| c |>\nNot the right solution.\
    \ Because this solution says that  the triangle is *not* a right-angled triangle\
    \ when all sides are equal\n<|/ c |>\n<| a dscore=2 |>\nIn a nutshell, no solution\
    \ is guaranteed in any language or library because you cannot prove that an algorithm\
    \ is correct.\n<|/ a tags=algorithm,geometry,math,c++,python |>\n<| a dscore=2\
    \ |>\nThe question is not about finding a solution (which is quite easy I believe),\
    \ but about whether a solution is actually possible. \nYou only need to check\
    \ three sides for being equal.\nThe eas", "    if a == 0 || b == 0 || c == 0 ||\
    \ (a > b) || (a > c) || (b > c) || (a < b) {\n        return false\n    }\n  \
    \  if a > b+c {\n        return right_angle_triangle(b,c,a)\n    }\n    if b >\
    \ c+a {\n        return right_angle_triangle(b,a,c)\n    }\n    if c > b+a {\n\
    \        return right_angle_triangle(a,b,c)\n    }\n    return true\n}\n", " \
    \   if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b\
    \ {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n\
    \    if b > c {\n        b, c = c, b\n    }\n    if a + b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return c % a == 0\n    }\n    if a ==\
    \ c {\n        return a % b == 0\n    }\n    return b == c\n}\n</code>\nI tested\
    \ it on a go playground.\n<|/ a dscore=1 |>\n<| c |>\nThis is incorrect for general\
    \ case: for example `right_angle_triangle(5,5,5)` returns true whereas there is\
    \ no right angled triangle.\n<|/ c |>\n<| c |>\nYes you are right, I changed the\
    \ code to handle this case and also added a link to a go playground where you\
    \ can test it.\n<|/ c |>\n<| a tags=python,math |>\nThe algorithm is pretty straightforward.\
    \ It can be implemented with a single for loop and recursion.\n<code>\ndef is_triangle(a,\
    \ b, c):\n    if a + b > c:\n        return False\n\n    if a == b and c == b:\n\
    \        return True\n\n    if a > b:\n        a, b = b, a\n    if c > b:\n  \
    \      c, b = b, c\n\n    if a == c or a == b:\n        return True\n\n    if\
    \ b == c:\n        return True\n\n    return is_triangle(a, b, c) or is_triangle(a,\
    \ c, b)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nNot correct for general case. For\
    \ example: `is_triangle(5,5,5)` returns true whereas there is no right angled\
    \ triangle.\n<|/ c |>\n<| c |>\nGood catch. Updated the code.\n<|/ c |>\n<| c\
    \ |>\nYou can replace `return c > b` with `return c >= b`\n<|/ c |>\n<| c |>\n\
    I did it because I assumed that triangle with same side length is not considered\
    \ triangle. Though I don't think it would be a big deal.\n<|/ c |>\n<| c |>\n\
    What if `c` is negative?\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport math\n\n\
    def is_triangle(a, b, c):\n    triangle_side1 = math.sqrt(a**2+b**2)\n    triangle_side2\
    \ = math.sqrt(c**2+b**2)\n    triangle_side3 = math.sqrt(a**2+c**2)\n\n    if\
    \ triangle_side1 == triangle_side2 or triangle_side2 == triangle_side3 or ", " \
    \   return a == b && (b == c || c == a || a == c/b)\n}\n", "    return b > a &&\
    \ c > b && c > a\n}\n", "    if b != c {\n        return false\n    }\n\n    if\
    \ a == 0 {\n        return true\n    }\n\n    if a >= b+c {\n        return false\n\
    \    }\n\n    var sum = b + c\n    var sum_ab = a + (b * 2)\n    var sum_bc =\
    \ b + c\n    var sum_ac = a + (c * 2)\n\n    if sum_ab == sum_bc && sum_bc ==\
    \ sum_ac {\n        return true\n    }\n\n    if sum_bc >= sum_ac {\n        return\
    \ false\n    }\n\n    return false\n}\n", "    switch {\n    case a < b {\n  \
    \      return false\n    case b < c:\n        return false\n    case a == c:\n\
    \        return true\n    default:\n        // Swap the order of the operands\
    \ so that a >= b\n        // and b >= c\n        a, b = b, a\n        c = c, a\n\
    \        if b == c {\n            if a > b {\n                return false\n \
    \           }\n            return true\n        }\n        if a == b {\n     \
    \       return true\n        }\n    }\n    // If a is greater than b AND b is\
    \ greater than c, then a is right\n    // angle and b is 90 degree\n    return\
    \ false\n}\n", "    if a >= b {\n        return false\n    }\n    if a >= c {\n\
    \        return false\n    }\n    if b >= c {\n        return false\n    }\n \
    \   d := 0\n    b := b - a\n    c := c - a\n    d = b * b - c * c\n    if d ==\
    \ 0 {\n        return false\n    }\n    if d > 0 {\n        if d < b {\n     \
    \       return false\n        }\n    } else {\n        if d > c {\n          \
    \  return false\n        }\n    }\n    return true\n}\n", "    \n    // check\
    \ if a,b,c is greater than 0\n    if a < 0 || b < 0 || c < 0 {\n        return\
    \ false\n    }\n    \n    d := a + b + c\n    if d == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b:\n        c -= b\n    case b > c:\n\
    \        a -= c\n    case c > a:\n        b -= a\n    }\n    \n    // check if\
    \ a,b,c is greater than 0\n    if a < 0 || b < 0 || c < 0 {\n        return false\n\
    \    }\n    \n    d := a + b + c\n    return d == 0\n}\n", "    if a == 0 || b\
    \ == 0 || c == 0 {\n        fmt.Println(\"a or b or c is zero \", a, b, c)\n \
    \       return false\n    }\n\n    deltaA := b - a\n    deltaB := c - b\n    deltaC\
    \ := a - c\n\n    discriminant := deltaA * deltaB - deltaC * deltaA\n\n    if\
    \ discriminant < 0 {\n        fmt.Println(\"discriminant is negative \", discriminant)\n\
    \        return false\n    }\n\n    if discriminant > 0 {\n        if deltaA *\
    \ deltaB > 0 {\n            if deltaB * deltaC > 0 {\n                // if discriminant\
    \ = deltaA * deltaB * deltaC then angles are 90 degree\n                return\
    \ false\n            } else {\n                // if discriminant = deltaA * deltaB\
    \ * deltaC then angles are 90 degree\n                return true\n          \
    \  }\n        } else {\n            if deltaC * deltaA > 0 {\n               \
    \ // if discriminant = deltaA * deltaB * deltaC then angles are 90 degree\n  \
    \              return true\n            } else {\n                // if discriminant\
    \ = deltaA * deltaB * deltaC then angles are 90 degree\n                return\
    \ false\n            }\n        }\n    } else {\n        fmt.Println(\"discriminant\
    \ is zero \", discriminant)\n        return false\n    }\n}\n</code>\n<|/ a tags=go,geometry,python,math\
    \ |>\n<| a tags=go,geometry,python,math |>\nFor those who are looking to implement\
    \ this algorithm for 3D vectors (x,y,z) and want to avoid sqrt, I wrote the following,\
    \ it solves the problem in O(log(n)):\n<code>\npackage main\n\nimport (\n    \"\
    math\"\n)\n", "    if a*a + b*b == c*c {\n        return true\n    }\n    return\
    \ false\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npackage right_angle_triangle\n\
    \nimport \"testing\"\n", "    return b > a && b > c || c > a && c > b || a > b\
    \ && (a == c || b == c)\n}\n", "    if (a + b + c) != 0 {\n        return ((a\
    \ + b) > c) && ((b + c) > a) && ((c) > b)\n    }\n\n    fmt.Println(\"Given sides\
    \ are equilateral\")\n    return false\n}\n", "    return (a == b) || (a == c)\
    \ || (b == c)\n}\n", "    // base cases: \n    // - lengths of a and b are equal\n\
    \    // - lengths of a and c are equal\n    // - length of b and c are equal\n\
    \    if (a == b && a == c) || (a == c && b == c){\n        return true\n    }\n\
    \    // calculate the hypotenuse of a and b.\n    // The hypotenuse is hypotenuse\
    \ of a square root of \n    // the square root of (length of a) * (length of b).\n\
    \    // The hypotenuse of a and b is sqrt(a^2 + b^2).\n    const hypotenuse =\
    \ float64(math.Sqrt(float64(a*a) + float64(b*b)))\n    // calculate length of\
    \ a and c.\n    const a_length = float64(a*a)\n    const c_length = float64(c*c)\n\
    \    // calculate c % hypotenuse\n    const c_mod = c_length%hypotenuse\n    //\
    \ calculate b and c % hypotenuse\n    const b_mod = float64(b*b)%hypotenuse\n\
    \    // if a is greater than or equal to b.\n    if (a >= b) {\n        // if\
    \ c is greater than or equal to b.\n        if (c >= b) {\n            // if c\
    \ mod is equal to 0\n            if (c_mod != 0) {\n                // if b is\
    \ greater than or equal to a.\n                if (b_mod >= a) {\n           \
    \         return true\n                }\n            }\n        }\n    }\n  \
    \  return false\n}\n", "    // return false if any argument is negative or larger\
    \ than the others.\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n\
    \    }\n    \n    if a + b > c || a + c > b || b + c > a {\n        return false\n\
    \    }\n    \n    // triangle is right-angled if the sum of the two angles is\
    \ 90\n    if a + b == c || b + c == a {\n        return true\n    }\n    \n  \
    \  // triangle is right-angled if the sum of the two angles is 180\n    if a +\
    \ b == b {\n        return true\n    }\n    \n    return false\n}\n", "    if\
    \ a == 0 && b == 0 && c == 0 {\n        return true\n    } else if a == 0 && b\
    \ == 0 {\n        return false\n    } else if a == 0 && c > 0 {\n        return\
    \ false\n    } else if a > 0 && b == 0 {\n        return false\n    } else if\
    \ a > 0 && c == 0 {\n        return false\n    }\n    if a == 0 || b == 0 || c\
    \ == 0 {\n        return false\n    }\n    return a == (b + c)\n}\n", "    //\
    \ Write your code here\n    \n    return ((a == b) || (a == c) || (b == c))\n\
    }\n", "    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    d :=\
    \ a + b + c\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    if d == 0 {\n        return true\n    }\n    \n    var a_to_c int = a * c\
    \ - b * c\n    var b_to_c int = b * c - a * c\n    var c_to_a int = a * c - b\
    \ * c\n\n    return a_to_c >= 0 && b_to_c >= 0 && c_to_a >= 0 && c_to_a <= d\n\
    }\n", "    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    //\
    \  Return true if a <= b and b <= c and\n    //  a + b > c\n    return a <= b\
    \ && b <= c && a + b > c\n}\n", "    // Check whether the three sides are of same\
    \ length.\n    if a != b && b != c {\n        return false\n    }\n    // Check\
    \ whether the three sides are of same length.\n    if a != c && c != b {\n   \
    \     return false\n    }\n\n    // Check whether the first side is either right\
    \ or 90 degree.\n    if (a > b && a > c) || (a == b && a < c) {\n        return\
    \ true\n    }\n\n    // Check whether the second side is either right or 90 degree.\n\
    \    if (b > a && b > c) || (b == a && b < c) {\n        return true\n    }\n\n\
    \    // Check whether the third side is either right or 90 degree.\n    if (c\
    \ > a && c > b) || (c == a && c < b) {\n        return true\n    }\n\n    // All\
    \ the sides are same.\n    return false\n}\n", "    abs := math.Abs(float64(a-b))\n\
    \    abs -= math.Abs(float64(b-c))\n    return abs <= 0.5\n}\n", "    return a\
    \ == b && (a != c || a != c - b) || a == c - b && (b != c || b != c - a)\n}\n",
  "    switch {\n    case a > b && a > c:\n        return false\n    case b > c &&\
    \ b > a:\n        return false\n    case c > a && c > b:\n        return false\n\
    \    case a <= 0 && b <= 0 && c <= 0:\n        return true\n    case a <= 0 &&\
    \ b <= 0 && c > 0:\n        return false\n    case a <= 0 && b > 0 && c <= 0:\n\
    \        return false\n    case a <= 0 && b > 0 && c > 0:\n        return false\n\
    \    default:\n        return true\n    }\n}\n", "    var a, b, c int\n    fmt.Println(a,\
    \ b, c)\n    if a > c {\n        a, b, c = c, b, a\n    }\n    if b > c {\n  \
    \      a, b, c = c, b, a\n    }\n    if a > b {\n        a, b, c = c, b, a\n \
    \   }\n    if a == b {\n        return true\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    return false\n\
    }\n", "    if a + b > c || a + c > b || b + c > a {\n        return false\n  \
    \  }\n    \n    // Check if all three angles are within 45 degrees range\n   \
    \ if a > b {\n        if a > c {\n            if b > c {\n                return\
    \ true\n            } else {\n                return false\n            }\n  \
    \      } else {\n            if b > c {\n                return false\n      \
    \      } else {\n                return true\n            }\n        }\n    }\
    \ else {\n        if a > c {\n            if b > c {\n                return false\n\
    \            } else {\n                return true\n            }\n        } else\
    \ {\n            if b > c {\n                return true\n            } else {\n\
    \                return false\n            }\n        }\n    }\n}\n", "    if\
    \ a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    if a >\
    \ b && a > c {\n        return false\n    }\n    \n    if b > c {\n        return\
    \ false\n    }\n    \n    if c > a {\n        return false\n    }\n    \n    if\
    \ a == b {\n        return false\n    }\n    \n    if a == c {\n        return\
    \ true\n    }\n    \n    if b == c {\n        return true\n    }\n    \n    if\
    \ a == b+c {\n        return true\n    }\n    \n    return false\n}\n", "    c\
    \ -= a\n    c -= b\n    c -= a\n    c /= 2\n    return c*c*c + b*b*b == a*b*a\n\
    }\n", "    l := sqrt(pow((b-a), 2) + pow((c-b), 2))\n    if l < 1 {\n        return\
    \ false\n    }\n    c /= l\n    return (b-a) == (c-b)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the answer, but it is an exercise question, not an assignment\
    \ question. I have to write a function that returns the length of a triangle and\
    \ I don't see how to do that.\n<|/ c |>\n<| c |>\nThanks for clarifying that point.\
    \ I've updated my answer with a solution which also avoids using `sqrt`.\n<|/\
    \ c |>\n<| c |>\nthank you! The only thing is that the function doesn't return\
    \ the length of a triangle but rather returns true/false if the triangle is right-angled,\
    \ so I changed the return statement to `return (b-a) == (c-b)`\n<|/ c |>\n<| a\
    \ tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n", "\tif a*a +\
    \ b*b == c*c {\n\t\treturn a == b\n\t}\n\treturn false\n}\n", "    return is_right_angle(a,\
    \ b, c) || is_right_angle(b, c, a)\n}\n", "    test := a > b + c\n    return test\
    \ == b && a == c\n}\n", "    if a > c {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    a_sqr_diff := a*a - b*b\n    b_sqr_diff := b*b - c*c\n  \
    \  c_sqr_diff := c*c - a*a\n    a_sqr_diff_squared := a_sqr_diff*a_sqr_diff\n\
    \    b_sqr_diff_squared := b_sqr_diff*b_sqr_diff\n    c_sqr_diff_squared := c_sqr_diff*c_sqr_diff\n\
    \n    a_sqr_diff_product = a_sqr_diff_squared * a_sqr_diff\n    b_sqr_diff_product\
    \ = b_sqr_diff_squared * b_sqr_diff\n    c_sqr_diff_product = c_sqr_diff_squared\
    \ * c_sqr_diff\n\n    a_plus_b_square_diff = a_sqr_diff + b_sqr_diff\n    a_plus_c_square_diff\
    \ = a_sqr_diff + c_sqr_diff\n    b_plus_c_square_diff = b_sqr_diff + c_sqr_diff\n\
    \n    a_plus_b_square_diff_product = a_plus_b_square_diff*a_plus_b_square_diff\n\
    \    b_plus_c_square_diff_product = b_plus_c_square_diff*b_plus_c_square_diff\n\
    \n    a_plus_b_square_diff_product =\n        a_sqr_diff_product + b_sqr_diff_product\n\
    \    b_plus_c_square_diff_product =\n        b_sqr_diff_product + c_sqr_diff_product\n\
    \n    a_plus_c_square_diff_product =\n        a_sqr_diff_product + c_sqr_diff_product\n\
    \n    a_plus_b_square_diff_product = a_plus_b_square_diff_product\n    b_plus_c_square_diff_product\
    \ = b_plus_c_square_diff_product\n\n    a_plus_c_square_diff_product = a_plus_c_square_diff_product\n\
    \n    a_minus_b_square_diff_product = a_sqr_diff_product - b_sqr_diff_product\n\
    \    b_minus_c_square_diff_product = b_sqr_diff_product - c_sqr_diff_product\n\
    \n    a_minus_b_square_diff_product = a_sqr_diff_product - b_sqr_diff_product\n\
    \    b_minus_c_square_diff_product = b_sqr_diff_product - c_sqr_diff_product\n\
    \n    if a_minus_b_square_diff_product > b_minus_", "    // Check to see if a\
    \ == b == c\n    // If this is the case, the triangle is NOT a right-angled triangle\n\
    \    if (a == b == c) {\n        return false\n    }\n\n    // Check to see if\
    \ a == b or a == c\n    // If this is the case, the triangle IS a right-angled\
    \ triangle\n    if (a == b || a == c) {\n        // Check to see if b == c\n \
    \       // If this is the case, the triangle IS a right-angled triangle\n    \
    \    if (b == c) {\n            // Check to see if b is greater than c\n     \
    \       // If this is the case, the triangle IS a right-angled triangle\n    \
    \        if (b > c) {\n                // Check to see if c is greater than a\n\
    \                // If this is the case, the triangle IS a right-angled triangle\n\
    \                if (c > a) {\n                    return true\n             \
    \   }\n            }\n        }\n    }\n    return false\n}\n", "\tif a == 0 ||\
    \ b == 0 || c == 0 {\n\t\treturn false\n\t}\n\n\tif a + b > c {\n\t\treturn false\n\
    \t}\n\tif a + c > b {\n\t\treturn false\n\t}\n\tif b + c > a {\n\t\treturn false\n\
    \t}\n\n\treturn true\n}\n", "    // This solution works by checking if a triangle\
    \ has any triangle formed\n    // inside itself.\n    // We start by checking\
    \ if the triangle has a right angle formed on it,\n    // which is the case if\
    \ a == b == c.\n    // We then check to see if the angle is 90 degrees, which\
    \ is the case if\n    // a == b or a == c or b == c.\n    // If all of these are\
    \ true, we return true.\n    return a == b || a == c || b == c || a == b && b\
    \ == c || a == c && c == b\n}\n", "    switch {\n        case a > c && b > c:\n\
    \            return false\n        case a > c || b > c:\n            return true\n\
    \        default:\n            if a > b:\n                return a == c\n    \
    \        else\n                return b == c\n    }\n}\n", "    // base case\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if\
    \ one side is 90 degree\n    if (a == b && b == c) || (a == c && c == b) {\n \
    \       return true\n    }\n\n    // if one side is right angle\n    if a > 0\
    \ && b > 0 && c > 0 {\n        return a + b > c\n    }\n    return false\n}\n",
  "    d, e := a*a + b*b - c*c, b*b - a*a\n    // If the triangle is right angle\n\
    \    if d == e {\n        // If triangle has a 90 degree side\n        if b*b\
    \ > 0 {\n            // If the side is greater than the other side\n         \
    \   if c > a {\n                return false\n            } else {\n         \
    \       return true\n            }\n        }\n        // If the side is less\
    \ than the other side\n        if c < a {\n            return false\n        }\n\
    \    }\n    return false\n}\n", "    if b != c {\n        return false\n    }\n\
    \    if a == c {\n        return true\n    }\n    if a == b {\n        return\
    \ a > c\n    }\n    c -= b\n    return ((b * b) - (4 * c)) <= 0\n}\n", "    //\
    \ Write your code here\n    if a == 0 && b == 0 && c == 0{\n        return true;\n\
    \    }\n    if (a == 0 && b > 0)||(b == 0 && c > 0){\n        return false;\n\
    \    }\n    if a == c {\n        if b == c {\n            return true;\n     \
    \   }\n    }\n    if (b == 0 && c > 0)||(a == 0 && b < 0){\n        return false;\n\
    \    }\n    if (b > 0 && c > 0){\n        if a > c {\n            return false;\n\
    \        }\n    }\n    if (b < 0 && c > 0){\n        if b > a {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "    if b == 0 || c == 0) {\n\
    \        return false\n    }\n    if b == a {\n        return (c-a) == (b-c) and\
    \ b != c\n    }\n    if b == c {\n        return (b-a) == (c-b) and b != a\n \
    \   }\n    if a == c {\n        return (b-a) == (c-b) and b != a\n    }\n    if\
    \ a == b {\n        return (c-a) == (b-c)\n    }\n    return false\n}\n", "  \
    \  if b == 0 || c==0 { // base case\n        return false\n    }\n    if a > c\
    \ {\n        if b > c {\n            return false\n        } else {\n        \
    \    return true\n        }\n    } else {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n}\n", " \
    \   return b > a && b > c && a>c && b > a && c > a && c > b\n}\n", "    if a >\
    \ b && b > c {\n        return false\n    }\n    if b == 0 || c == 0 {\n     \
    \   return false\n    }\n    if a == b {\n        return c == a || c == b\n  \
    \  }\n    if a == c || b == c {\n        return false\n    }\n    if a < b {\n\
    \        return right_angle_triangle(b, c) if b > c else true\n    }\n    if a\
    \ > c {\n        return right_angle_triangle(a, c) if c > a else true\n    }\n\
    \    return false\n}\n", "    return a == b && (a == c || a == c - b)\n}\n", " \
    \   // Write code here\n    return a>b && b > c && a>c && c>b\n}\n", "    // If\
    \ the sides are equal then it is a right triangle\n    if (a <= 0 || b <= 0 ||\
    \ c <= 0) {\n        return false\n    }\n\n    // Find all the angles that could\
    \ form a right-angled triangle\n    angles := []int{\n        a,\n        b,\n\
    \        c,\n        a + b,\n        b + c,\n        a + c,\n        c + b,\n\
    \        a + b + c}\n\n    // Sort the angles in descending order\n    sort.Ints(angles)\n\
    \n    // If the angles make up the right-angled triangle\n    // then return true\n\
    \    for i := 0; i < len(angles)/2; i++ {\n        if angles[i] > angles[i+1]\
    \ {\n            return true\n        }\n    }\n\n    // Return false otherwise\n\
    \    return false\n}\n", "    if a == b {\n        return a > c\n    } else if\
    \ c == b {\n        return a > c\n    }\n\n    // a > b and b > c\n    if a >\
    \ c {\n        return right_angle_triangle(c - a, b - a, c)\n    } else if b >\
    \ c {\n        return right_angle_triangle(a - b, c - a, c)\n    }\n\n    // a\
    \ > b and b > c\n    if a > c {\n        return right_angle_triangle(c - a, b\
    \ - a, c)\n    } else if b > c {\n        return right_angle_triangle(a - b, c\
    \ - a, c)\n    }\n\n    // a > b and b > c\n    return false\n}\n", "    // base\
    \ case\n    if b == 0 || c == 0 {\n        return false\n    }\n    // recursive\
    \ call\n    return right_angle_triangle(b, c - 1, a) or right_angle_triangle(a,\
    \ b - 1, c)\n}\n</code>\n<|/ a |>\n<| a tags=go |>\nThis question does not really\
    \ have anything to do with Go, but it is interesting.  So I'm adding an answer\
    \ with Python.\nThe first thing we need to do is to define the right angle triangle,\
    \ which is just any triangle with one edge opposite the other two edges.  So we\
    \ start with a triangle defined with three edges which are the three sides of\
    \ a right-angled triangle:\n<code>\ntriangle = [a, b][a, c][b, c]\n</code>\nIf\
    \ this triangle is right-angled, then we can use it to form a right angled triangle,\
    \ by simply taking the other two edges out of it, and combining the two triangles\
    \ we already have:\n<code>\ntriangle = [a, b][b, c][c, a]\n</code>\nSo the Python\
    \ code to do this is just:\n<code>\ndef right_angled_triangle(a, b, c):\n    return\
    \ a == b or c == b or a == c\n</code>\nAnd we can test it like:\n<code>\n>>> triangle\
    \ = [3, 4, 5]\n>>> right_angled_triangle(*triangle)\nTrue\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=3 tags=go |>\n<code>\npackage main\n\nimport \"fmt\"\n", " \
    \   return a==b+c || a==c+b\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
