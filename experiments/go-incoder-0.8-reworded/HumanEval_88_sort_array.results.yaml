language: go_test.go
name: HumanEval_88_sort_array
results:
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for _, v := range array {\n        sum += v\n    }\n\
    \    switch sum%2 {\n    case 0:\n        sort.Ints(array)\n    case 1:\n    \
    \    sort.Reverse(array)\n    }\n    return array\n}\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdk7de_s_test.go:29:9: undefined: sort

    /tmp/tmpqdk7de_s_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    \n    var ret []int\n    for _, val := range array {\n        ret :=\
    \ append(ret, val)\n    }\n    \n    var sum int\n    for _, val := range ret\
    \ {\n        sum += val\n    }\n    \n    if sum%2 == 0 {\n        for i := 0;\
    \ i < len(ret)/2; i++ {\n            var tmp = ret[i]\n            ret[i] = ret[len(ret)-1-i]\n\
    \            ret[len(ret)-1-i] = tmp\n        }\n    } else {\n        for i :=\
    \ 0; i < len(ret)/2; i++ {\n            var tmp = ret[len(ret)-1-i]\n        \
    \    ret[len(ret)-1-i] = ret[i]\n            ret[i] = tmp\n        }\n    }\n\
    \    \n    return ret\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp397qly8h_test.go:26:9: ret declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array := array[0 : len(array):len(array)]\n    sort := []int{}\n\n  \
    \  for _, value := range array {\n        sum += value\n    }\n    if sum%2 !=\
    \ 0 {\n        sort = append(sort, array[len(array) - 1]...)\n        sort = append(sort,\
    \ array[:len(array)-1]...)\n    } else {\n        sort = append(sort, array[len(array)\
    \ - 1]...)\n        sort = append(sort, array[:len(array)-1]...)\n    }\n    return\
    \ sort\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpurxt4heg_test.go:23:11: no new variables on left side of :=

    /tmp/tmpurxt4heg_test.go:27:9: undefined: sum

    /tmp/tmpurxt4heg_test.go:29:8: undefined: sum

    /tmp/tmpurxt4heg_test.go:30:29: cannot use array[len(array) - 1] (variable of
    type int) as type []int in argument to append

    /tmp/tmpurxt4heg_test.go:33:29: cannot use array[len(array) - 1] (variable of
    type int) as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    left, right :=\
    \ 0, len(array)\n    temp, sum := 0, array[0]\n    for right < len(array) {\n\
    \        if array[right] > sum {\n            temp = array[right]\n          \
    \  sum += array[right]\n            array[right] = temp\n        }\n        left\
    \ += 1\n        right += 1\n    }\n    return array[:left] + sort_array(array[:left])\
    \ + array[left:] + sort_array(array[left:])\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjlav90vq_test.go:37:17: invalid operation: operator + not defined on array[:left]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    sum := 0\n   \
    \ for _, num := range array {\n        sum += num\n    }\n    if sum%2 == 0 {\n\
    \        return sort_array_desc(array)\n    } else {\n        return sort_array_asc(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6v22xqo_test.go:31:16: undefined: sort_array_desc

    /tmp/tmpg6v22xqo_test.go:33:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // code here\n    sum := 0\n    for _, n := range array {\n        sum\
    \ += n\n    }\n    sort.Ints(array)\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(array))\n\
    \    } else {\n        sort.Sort(array)\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp85_j9v_c_test.go:28:5: undefined: sort

    /tmp/tmp85_j9v_c_test.go:30:9: undefined: sort

    /tmp/tmp85_j9v_c_test.go:32:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return []int{}\n\
    \    }\n\n    // Find the sum of the first and last elements.\n    var sum int\n\
    \    for i := 0; i < length; i++ {\n        sum += array[i]\n    }\n\n    // Sort\
    \ the array in ascending order.\n    if sum%2 != 0 {\n        for i := 0; i <\
    \ length-1; i++ {\n            for j := 0; j < length-i; j++ {\n             \
    \   if array[j] > array[j+1] {\n                    array[j], array[j+1] = array[j+1],\
    \ array[j]\n                }\n            }\n        }\n    }\n\n    // Sort\
    \ the array in descending order.\n    if sum%2 == 0 {\n        for i := 0; i <\
    \ length-1; i++ {\n            for j := 0; j < length-i; j++ {\n             \
    \   if array[j] > array[j+1] {\n                    array[j], array[j+1] = array[j+1],\
    \ array[j]\n                }\n            }\n        }\n    }\n\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000024390?, 0x0?, 0xd0?})\n\
    \t/tmp/tmpdejwshdt_test.go:38 +0x128\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpdejwshdt_test.go:68 +0xfb\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    var total int = 0\n    for _, value := range\
    \ array {\n        total += value\n    }\n\n    if total % 2 == 1 {\n        for\
    \ _, value := range array {\n            array.remove(value)\n        }\n    }\n\
    \    return array\n}\n</code>\n<|/ a |>\n<| c |>\nYou should include your test\
    \ cases here, too.\n<|/ c |>\n<| c |>\nThis answer is terrible for most practical\
    \ uses, as it's not scalable and thus horribly inefficient.\n<|/ c |>\n<| c |>\n\
    the idea is to sort integers only, so why do you think it wouldn't work?\n<|/\
    \ c |>\n<| c |>\nI thought the idea was to sort integers only and return the list\
    \ sorted.\n<|/ c |>\n<| c |>\nthe question is \"sort the given list in ascending\
    \ order if the sum( first index value, last index value) is odd, or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\"\
    \ The above is just an example that explains the idea, not something that can\
    \ be used in practice. The OP should provide some real data that shows how his\
    \ real use case works.\n<|/ c |>\n<| a tags=algorithm,sorting,go |>\n<code>\n\
    package main\n\nimport (\n    \"testing\"\n    \"sort\"\n)\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbbie_piv_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    sum := array[0]\n\
    \    index := 1\n    for index < len(array) {\n        sum += array[index]\n \
    \       if sum%2 != 0 {\n            sum = 0\n        } else {\n            sum++\n\
    \        }\n        array[index] = sum\n        index++\n    }\n    return array\n\
    }\n`\n\ttests, err := ParseTests()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\
    err = RunTests(tests, testPackageName, NewSimpleAnalyzer())\n\tif err != nil {\n\
    \t\tpanic(err)\n\t}\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps1y7y45c_test.go:40:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for i := range array {\n        j := i\n      \
    \  for j := 0; j < len(array); j++ {\n            if array[j] < array[j-1] {\n\
    \                break\n            }\n        }\n        result = append(result,\
    \ array[j-1], array[j])\n    }\n    return result\n}\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpj7ziyjrj_test.go:27\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpj7ziyjrj_test.go:43\
    \ +0x25\ntesting.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var retArray []int\n    var sum, i, j, temp int\n\n    for i = 0; i <\
    \ len(array); i++ {\n        temp = array[i]\n        sum = temp + array[i]\n\
    \        for (j = 0; j < i; j++ {\n            if sum > temp {\n             \
    \   temp = array[j]\n                sum = temp + array[i]\n            }\n  \
    \      }\n        retArray = append(retArray, temp)\n    }\n\n    return retArray\n\
    }\n</code>\n<|/ a tags=go dscore=1 |>\n<| a tags=go |>\nYou can find here an example\
    \ of how to sort numbers using sort.Sort.\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"sort\"\n)\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphdlihkaj_test.go:29:16: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    sum := 0\n    i := 0\n    for i < length {\n\
    \        sum += array[i]\n        if sum%2 == 1 {\n            array[i], array[length-i-1]\
    \ = array[length-i-1], array[i]\n        }\n        i++\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp97xsb779_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp97xsb779_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp97xsb779_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=11) %!s(int=87)\
    \ %!s(int=32) %!s(int=42) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp97xsb779_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array := copy(array)\n    // Sort the array in ascending order.\n   \
    \ sort.Sort(arraySlice(array))\n    // Sum up the first and last elements to get\
    \ the sum of the first and last elements.\n    sum := 0\n    for _, num := range\
    \ array {\n        sum += num\n    }\n    // If the sum of the first and last\
    \ elements is a multiple of 2, sort it in descending order.\n    if sum%2 == 1\
    \ {\n        sort.Sort(arraySlice(array))\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x6_lhi9_test.go:23:11: no new variables on left side of :=

    /tmp/tmp4x6_lhi9_test.go:23:14: invalid operation: not enough arguments for copy(array)
    (expected 2, found 1)

    /tmp/tmp4x6_lhi9_test.go:25:5: undefined: sort

    /tmp/tmp4x6_lhi9_test.go:25:15: undefined: arraySlice

    /tmp/tmp4x6_lhi9_test.go:33:9: undefined: sort

    /tmp/tmp4x6_lhi9_test.go:33:19: undefined: arraySlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // fmt.Printf(\"\\n%#v\\n\", array)\n    sort.Slice(array, func(i, j\
    \ int) bool {\n        // fmt.Printf(\"%#v\\n\", array[i])\n        // fmt.Printf(\"\
    %#v\\n\", array[j])\n        return array[i] > array[j]\n    })\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ya51r6n_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result = make([]int, len(array))\n    for i := range array {\n  \
    \      result[i] = array[i]\n    }\n    sort.Sort(result)\n    if sum1(result)\
    \ % 2 == 1 {\n        for i := range result {\n            result[i] = -result[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpik35zwb8_test.go:27:5: undefined: sort

    /tmp/tmpik35zwb8_test.go:28:8: undefined: sum1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    size := len(array)\n\n    sum := 0\n    for _, i := range array {\n \
    \       sum += i\n    }\n\n    switch sum % 2 {\n    case 1:\n        return sort_array_desc(array,\
    \ size)\n    case 0:\n        return sort_array_asc(array, size)\n    default:\n\
    \        fmt.Println(\"sum is not even\")\n        return sort_array_asc(array,\
    \ size)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdpcgmfsp_test.go:32:16: undefined: sort_array_desc

    /tmp/tmpdpcgmfsp_test.go:34:16: undefined: sort_array_asc

    /tmp/tmpdpcgmfsp_test.go:37:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // O(1) runtime\n    if len(array) == 0 {\n        return []int{}\n \
    \   }\n\n    sum := 0\n    for _, value := range array {\n        sum += value\n\
    \    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n\
    \            return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jp8x0sw_test.go:33:9: undefined: sort

    /tmp/tmp9jp8x0sw_test.go:37:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    var result []int\n    var first_index int\n    var\
    \ last_index int\n    var temp_index int\n\n    // if array length is odd, append\
    \ it at the end\n    if (n % 2 == 1) {\n        result := append(result, array[0])\n\
    \    }\n\n    // if the array length is even, append the number at its middle\n\
    \    // then append it at the end\n    if (n % 2 == 0) {\n        first_index\
    \ = n / 2\n        last_index = n - first_index\n        result := append(result,\
    \ array[first_index])\n        result := append(result, array[last_index])\n \
    \   }\n\n    for i := 0; i < n; i++ {\n        temp_index = i\n        for temp_index\
    \ < n && array[temp_index] < array[temp_index+1] {\n            temp_index +=\
    \ 1\n        }\n        result := append(result, array[temp_index])\n    }\n\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhuq9jvx_test.go:31:9: result declared but not used

    /tmp/tmplhuq9jvx_test.go:40:16: no new variables on left side of :=

    /tmp/tmplhuq9jvx_test.go:48:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := range array {\n        array[i] = -i\n    }\n    fmt.Println(\"\
    PATCH list\")\n    fmt.Println(array)\n    sort.SliceStable(array, func(i, j int)\
    \ bool {\n        sum1 := array[0] + array[1]\n        sum2 := array[0] + array[2]\n\
    \        sum3 := array[0] + array[3]\n        sum4 := array[0] + array[4]\n  \
    \      sum5 := array[0] + array[5]\n        sum6 := array[0] + array[6]\n    \
    \    sum7 := array[0] + array[7]\n        sum8 := array[0] + array[8]\n      \
    \  sum9 := array[0] + array[9]\n        sum10 := array[0] + array[10]\n      \
    \  if sum1 % 2 == 1 {\n            return false\n        }\n        if sum2 %\
    \ 2 == 1 {\n            return false\n        }\n        if sum3 % 2 == 1 {\n\
    \            return false\n        }\n        if sum4 % 2 == 1 {\n           \
    \ return false\n        }\n        if sum5 % 2 == 1 {\n            return false\n\
    \        }\n        if sum6 % 2 == 1 {\n            return false\n        }\n\
    \        if sum7 % 2 == 1 {\n            return false\n        }\n        if sum8\
    \ % 2 == 1 {\n            return false\n        }\n        if sum9 % 2 == 1 {\n\
    \            return false\n        }\n        if sum10 % 2 == 1 {\n          \
    \  return false\n        }\n        if sum1 + sum2 % 2 == 1 {\n            return\
    \ false\n        }\n        if sum3 + sum4 % 2 == 1 {\n            return false\n\
    \        }\n        if sum5 + sum6 % 2 == 1 {\n            return false\n    \
    \    }\n        if sum7 + sum8 % 2 == 1 {\n            return false\n        }\n\
    \        if sum9 + sum10 % 2 == 1 {\n            return false\n        }\n   \
    \     if sum1 + sum2 + sum3 + sum4 + sum5 + sum6 + sum7 + sum8 + sum9 + sum10\
    \ == 0 {\n            return array[i] > array[j]\n        }\n        return array[i]\
    \ > array[j]\n    })\n    fmt.Println(array)\n    return array\n}\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_bnld4f_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil {\n        return nil\n    }\n    // Sum up all the values\
    \ from index 0 to the end, then do \"if\" logic to determine if ascending or descending\
    \ sort.\n    var total = 0\n    for _, value := range array {\n        total +=\
    \ value\n    }\n    if total %2 == 1 {\n        for _, value := range array {\n\
    \            array, _ = sort_array_test(array, value)\n        }\n    } else {\n\
    \        for _, value := range array {\n            array, _ = sort_array_test(array,\
    \ -value)\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4kgkpjs_test.go:33:24: undefined: sort_array_test

    /tmp/tmpj4kgkpjs_test.go:37:24: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array[0] == 0 && array[len(array)-1] == 0 {\n        return array\n\
    \    }\n    first := array[0]\n    last := array[len(array)-1]\n    count := 0\n\
    \    for _, v := range array {\n        count += v\n        if count % 2 == 0\
    \ {\n            count /= 2\n            if first > last {\n                return\
    \ sort_array(array[0:len(array)-1])\n            }\n            return append([]int{last},\
    \ array[0:len(array)-1]...)\n        }\n        count /= 2\n        if first <\
    \ last {\n            return append([]int{first}, array[0:len(array)-1]...)\n\
    \        }\n        first = last\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpjue1evs4_test.go:23 +0x1d1\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpjue1evs4_test.go:54 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code here\n    var result []int\n    var sum1 int\n    var sum2\
    \ int\n    for i := 0; i < len(array); i++ {\n        sum1 = sum1 + array[i]\n\
    \    }\n    for i := len(array) - 2; i >= 0; i-- {\n        sum2 = sum2 + array[i]\n\
    \    }\n    if sum1%2 != 0 {\n        fmt.Printf(\"%v %v\\n\", sum1, sum2)\n \
    \       result = append(result, sum1)\n        sort.Ints(array)\n        result\
    \ = append(result, sum2)\n    } else {\n        result = append(result, sum2)\n\
    \        result = append(result, sum1)\n        sort.Ints(array)\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gi5dw36_test.go:36:9: undefined: sort

    /tmp/tmp6gi5dw36_test.go:41:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: type assertion is not work, please check\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpxszfuv7e_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpxszfuv7e_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpxszfuv7e_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpxszfuv7e_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpxszfuv7e_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    sort.Sort(sort.Reverse(func(a, b int) bool {\
    \ return a%2 == b % 2 }))\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjobfkvqm_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code here\n    sum := 0\n    sort.Ints(array)\n\n    for _, value\
    \ := range array {\n        sum += value\n    }\n\n    if sum%2 != 0 {\n     \
    \   sort.Slice(array, func(i, j int) bool {\n            return array[i] > array[j]\n\
    \        })\n    } else {\n        sort.Slice(array, func(i, j int) bool {\n \
    \           return array[i] < array[j]\n        })\n    }\n    return array\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer but I'm afraid it isn't what\
    \ I'm looking for. I don't want to sort an array. I want to sort a cogo of it\
    \ ([]int{}). My cogo also has other stuff so I guess I need to write a custom\
    \ sort function if I want to use sort.\n<|/ c |>\n<| c |>\nAh! I see now. So you\
    \ want to sort a cogo. I'll edit my answer.\n<|/ c |>\n<| c |>\nSorry I didn't\
    \ see your update before I replied to you. I already have a sort function that\
    \ I wrote for sorting arrays. But I couldn't find a way to sort a cogo.\n<|/ c\
    \ |>\n<| c |>\nNo worries, I'll take a look at your cogo and get back to you shortly.\n\
    <|/ c |>\n<| c |>\nI updated my answer. I think this should solve your problem.\n\
    <|/ c |>\n<| a tags=go,arrays,sorting,go-cogo |>\nI see that you're not allowed\
    \ to change the length of the array, so I suggest you to change the type to array\
    \ instead of slice\n<code>\ntype IntArray []int\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm1cjqamj_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpucu4s0es_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpucu4s0es_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpucu4s0es_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpucu4s0es_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpucu4s0es_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return nil\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpi2kq666g_test.go:45: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpi2kq666g_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpi2kq666g_test.go:45:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n \
    \       tmpi2kq666g_test.go:45: expected '[%!s(int=1) %!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpi2kq666g_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpi2kq666g_test.go:45:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    if len(array) == 0 {\n        return result\n \
    \   }\n    last := array[0]\n    for _, item := range array[1:] {\n        if\
    \ item > last {\n            result = append(result, item)\n        }\n      \
    \  last = item\n    }\n    if len(result) == 0 {\n        return result\n    }\n\
    \    first := result[0]\n    length := len(result)\n    if length%2 != 0 {\n \
    \       result = append(result,result[len(result)-1])\n        length = length\
    \ - 1\n    }\n    for i := 0; i < length/2; i++ {\n        var t int\n       \
    \ if i%2 == 0 {\n            t = first\n        } else {\n            t = result[(length-1)-i]\n\
    \        }\n        if t > result[len(result)-1] {\n            result = append(result,\
    \ t)\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmp3o67yy87_test.go:76: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmp3o67yy87_test.go:76:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp3o67yy87_test.go:76: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=4) %!s(int=1) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp3o67yy87_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp3o67yy87_test.go:76: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=42) %!s(int=87)]'\n   \
    \ --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmp3o67yy87_test.go:76:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=23)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n\n    var evenSum, oddSum int\n    evenSum = 0\n  \
    \  oddSum = 0\n\n    for _, v := range array {\n        evenSum += v\n       \
    \ oddSum += v\n    }\n\n    if oddSum%2 == 1 {\n        for _, v := range array\
    \ {\n            result = append(result, v)\n        }\n\n        for i := range\
    \ result {\n            fmt.Printf(\"%d\", result[i])\n        }\n\n        for\
    \ i := range result {\n            result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n        }\n\n    } else {\n        for _, v := range array {\n  \
    \          result = append(result, v)\n        }\n\n        for i := range result\
    \ {\n            fmt.Printf(\"%d\", result[i])\n        }\n\n        for i :=\
    \ 0; i < len(result)/2; i++ {\n            fmt.Printf(\"%d\", result[i])\n   \
    \     }\n\n        for i := 0; i < len(result)/2; i++ {\n            result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n        }\n\n    }\n\
    \n    return result\n}\n</code>\n<|/ a tags=go dscore=0 |>\n<| a dscore=0 |>\n\
    Here's another way that sorts descending by adding the values before sorting the\
    \ array and returning only odd or even numbers depending on the sum.\n<code>\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpre3xbo28_test.go:68:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var newArray []int\n    \n    var sum = 0 // = array[len(array)-1]\n\n\
    \    for i := range array {\n        sum = sum + array[i]\n    }\n\n    if sum%2\
    \ == 1 {\n        for i := range array {\n            newArray = append(newArray,\
    \ array[i])\n        }\n    } else {\n        for i := range array {\n       \
    \     newArray = append(newArray, array[len(array)-i-1])\n        }\n    }\n\n\
    \    return newArray\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps45gganq_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmps45gganq_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps45gganq_test.go:63: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmps45gganq_test.go:63: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps45gganq_test.go:63: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    if sum(intSlice(array)[0]+intSlice(array)[1]) %\
    \ 2 != 0 {\n        result = append(result, intSlice(array)...)\n    } else {\n\
    \        result = append(result, intSlice(array)...)\n        sort.Ints(result)\n\
    \        result = append(result, intSlice(array)...)\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkodded2b_test.go:24:8: undefined: sum

    /tmp/tmpkodded2b_test.go:24:12: undefined: intSlice

    /tmp/tmpkodded2b_test.go:25:33: undefined: intSlice

    /tmp/tmpkodded2b_test.go:27:33: undefined: intSlice

    /tmp/tmpkodded2b_test.go:28:9: undefined: sort

    /tmp/tmpkodded2b_test.go:29:33: undefined: intSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw5lp608a_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    start := 0\n    end := len(array)\n\
    \    for start < end {\n        index := start + (end - start) / 2\n        sum1\
    \ := array[start]\n        sum2 := array[end]\n        if sum1+sum2 > 0 {\n  \
    \          sum1 += array[end-1]\n            sum2 += array[start-1]\n        }\n\
    \        if sum1 < sum2 {\n            result[index] = sum1\n        } else {\n\
    \            result[index] = sum2\n        }\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c4550?, 0x1, 0x37930?})\n\
    \t/tmp/tmptkcxqvnp_test.go:29 +0x3f\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmptkcxqvnp_test.go:51 +0x9b\ntesting.tRunner(0xc000192680, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var a int\n    var b int\n    var c int\n    \n    var newarray []int\n\
    \    var newarray2 []int\n    \n    newarray = array\n    \n    a = newarray[0]\n\
    \    b = newarray[1]\n    c = newarray[2]\n    \n    \n    newarray2 = append(newarray,\
    \ c)\n    newarray2 = append(newarray, b)\n    newarray2 = append(newarray, a)\n\
    \    \n    for i := 0; i < len(newarray2); i++ {\n        if newarray2[i] > newarray2[i+1]\
    \ {\n            b := newarray2[i+1]\n            newarray2[i+1] = newarray2[i]\n\
    \            newarray2[i] = b\n        }\n    }\n    \n    return newarray2\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpmh6cp05z_test.go:32 +0x1af\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpmh6cp05z_test.go:59 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0]\n    sorted_array := []int{}\n    for _, num := range\
    \ array {\n        if sum%2 != 0 {\n            sorted_array = append(sorted_array,\
    \ num)\n        } else {\n            sorted_array = append(sorted_array,\n  \
    \              num+1,\n                num-1,\n                num,\n        \
    \    )\n        }\n        sum += num\n    }\n    return sorted_array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpwg2rr3ni_test.go:23\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpwg2rr3ni_test.go:47\
    \ +0x18\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    result := make([]int, length)\n    for i :=\
    \ 0; i < length; i++ {\n        result[i] = array[i]\n    }\n    sort.Ints(result)\n\
    \    for i := 0; i < length; i++ {\n        result[i] = array[i]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1b6alspl_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum = 0\n    for _, v := range array {\n        sum += v\n    }\n\
    \    switch sum%2 {\n    case 0:\n        // Even sum\n        sort.Ints(array[0:len(array)-1])\n\
    \        return array\n    case 1:\n        // Odd sum\n        sort.Ints(array[len(array)-1:])\n\
    \        return array\n    default:\n        // Both even sum\n        sort.Sort(sort.Reverse(sort.Ints(array[0:len(array)-1])))\n\
    \        return array\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82vbh7cc_test.go:30:9: undefined: sort

    /tmp/tmp82vbh7cc_test.go:34:9: undefined: sort

    /tmp/tmp82vbh7cc_test.go:38:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int = 0\n    var evenSum = 0\n    var oddSum = 0\n    for _,\
    \ value := range array {\n        sum += value\n        if sum%2 == 0 {\n    \
    \        evenSum += value\n        } else {\n            oddSum += value\n   \
    \     }\n    }\n    if oddSum == 0 {\n        array = sort_array_desc(array)\n\
    \    } else {\n        array = sort_array_asc(array)\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp564w2xr7_test.go:35:17: undefined: sort_array_desc

    /tmp/tmp564w2xr7_test.go:37:17: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    sum := array[0]\n\
    \    for _, i := range array {\n        sum += i\n    }\n    if sum%2 == 0 {\n\
    \        fmt.Println(\"descending\")\n        sort.Ints(array)\n    } else {\n\
    \        fmt.Println(\"ascending\")\n        sort.Ints(array[:len(array)-1])\n\
    \    }\n    return array\n}\n`\n    },\n    {\n        name: \"list\",\n     \
    \   package: \"list\",\n        input: `package list\n\nimport (\n    \"fmt\"\n\
    \    \"sort\"\n)\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmph6f8macu_test.go:39:1: expected declaration,\
    \ found `\n    },\n    {\n        name: \"list\",\n        package: \"list\",\n\
    \        input: `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    \n    sum := 0\n    for _, value := range array {\n        sum += value\n\
    \    }\n    \n    if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool\
    \ {\n            return array[i] > array[j]\n        })\n    } else {\n      \
    \  sort.Slice(array, func(i, j int) bool {\n            return array[i] < array[j]\n\
    \        })\n    }\n    return array\n}\n</code>\n<|/ a tags=go |>\n<| c |>\n\
    This is not an answer, it's just a copy of answer given above. Maybe you can just\
    \ add a link to the original answer?\n<|/ c |>\n<| c |>\nIt is a working solution\
    \ but doesn't answer the question. He is asking for help, not just to find another\
    \ way to do the same thing. He wants to know why the original code is not working\
    \ and why he needs another approach\n<|/ c |>\n<| c |>\nPlease add some explanation\
    \ why this code would work, maybe add a short explanation of how it works.\n<|/\
    \ c |>\n<| a |>\nYour code doesn't work because you're trying to access data at\
    \ an index that doesn't exist, i.e. the length of the slice is zero, thus you\
    \ can't do \n<code>\narray[index]\n</code>\nYou can however use the Length property\
    \ of the slice to determine how many elements it has:\n<code>\nfor i := 0; i <\
    \ len(array); i++ {\n    sum += array[i]\n}\n</code>\nThen the code will work\
    \ as expected.\n<|/ a tags=go dscore=1 |>\n<| a tags=go |>\nHere is the code:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpshnese4e_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var tempArr []int\n    var sum, i, j int\n    for ; i < len(array); i++\
    \ {\n        sum += array[i]\n        tempArr = append(tempArr, sum)\n    }\n\
    \    for ; i < len(array); i++ {\n        sum -= array[i]\n        tempArr = append(tempArr,\
    \ sum)\n    }\n    sort.Ints(tempArr)\n    return tempArr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmklj5hnx_test.go:24:17: j declared but not used

    /tmp/tmpmklj5hnx_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: Write the sort logic\n    // Hint: use bubble sort, and if you\
    \ don't know how to sort, google it.\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpg77dv191_test.go:47: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpg77dv191_test.go:47: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpg77dv191_test.go:47: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpg77dv191_test.go:47: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpg77dv191_test.go:47: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  switch {\n    case sum%2 == 1:\n        // desc\n        for i := len(array)\
    \ - 1; i > 0; i-- {\n            array[i] = array[i - 1]\n        }\n    default:\n\
    \        // asc\n        for i := 0; i < len(array); i++ {\n            array[i]\
    \ = array[i + 1]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpizhxrvis_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=3)\
    \ %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpizhxrvis_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=3)\
    \ %!s(int=0) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpizhxrvis_test.go:61: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpizhxrvis_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=15) %!s(int=42)\
    \ %!s(int=87) %!s(int=32) %!s(int=11)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpizhxrvis_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=21) %!s(int=14) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    s := sort_array_test.Sum(array)\n    if s % 2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ugpoule_test.go:23:10: undefined: sort_array_test

    /tmp/tmp2ugpoule_test.go:25:9: undefined: sort

    /tmp/tmp2ugpoule_test.go:27:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    result := []int{}\n    for _, v := range array {\n    \
    \    sum += v\n        result = append(result, v)\n    }\n    if sum%2 == 0 {\n\
    \        result = reverse(result) // sort it in descending order\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygjehkc__test.go:30:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    // sort slice in ascending order\n    sort.Sort(slice)\n\
    \    return slice\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxsq0ut2_test.go:25:5: undefined: sort

    /tmp/tmpvxsq0ut2_test.go:25:15: undefined: slice

    /tmp/tmpvxsq0ut2_test.go:26:12: undefined: slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    list := []int{}\n    for _, value := range array {\n        list = append(list,\
    \ value)\n    }\n    sort.Sort(sort.IntSlice(list))\n    return list\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiw_u2sr__test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n\n    // base case\n    if n <= 1 {\n        return\
    \ array\n    }\n\n    // use recursion here\n    lastIndex := n - 1\n    sum :=\
    \ array[lastIndex] + array[lastIndex+1]\n    switch sum % 2 {\n    case 0:\n \
    \       fmt.Printf(\"PATCH list\\n\")\n        return sort_array(array[lastIndex+1:])\n\
    \    case 1:\n        fmt.Printf(\"\\nPATCH list\\n\")\n        return sort_array(array[:lastIndex])\n\
    \    }\n\n    return sort_array(array[lastIndex+1:])\n}\n</code>\nI didn't know\
    \ what was going on in the recursive call and that solved the issue. Also thank\
    \ you very much for all the help and suggestions given.\n<|/ a |>\n<| a |>\nTry\
    \ this.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1p9g47n_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for i, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Sort(slice.SortFunc(func(i int, j int) bool {\n\
    \            return array[i] > array[j]\n        }))\n    } else {\n        sort.Sort(slice.SortFunc(func(i\
    \ int, j int) bool {\n            return array[i] < array[j]\n        }))\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikaaczq__test.go:24:9: i declared but not used

    /tmp/tmpikaaczq__test.go:28:9: undefined: sort

    /tmp/tmpikaaczq__test.go:28:19: undefined: slice

    /tmp/tmpikaaczq__test.go:32:9: undefined: sort

    /tmp/tmpikaaczq__test.go:32:19: undefined: slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    length := len(array)\n    for _, value := range array {\n\
    \        sum += value\n    }\n\n    if sum%2 == 0 {\n        for i := range array\
    \ {\n            array[i], array[i-1] = array[i-1], array[i]\n        }\n    }\
    \ else {\n        for i := range array {\n            array[i], array[length-1-i]\
    \ = array[length-1-i], array[i]\n        }\n    }\n\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp1awee4z5_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp1awee4z5_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp1awee4z5_test.go:61: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp1awee4z5_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp1awee4z5_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array := sortDesc(array)\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k61klru_test.go:23:11: no new variables on left side of :=

    /tmp/tmp3k61klru_test.go:23:14: undefined: sortDesc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := range array {\n        array[i] = int(array[i])\n    }\n   \
    \ if sort_array_test.sumArrayInRange(len(array), 0, len(array)-1, array) == 1\
    \ {\n        return array\n    }\n    return sort_array_test.sortArrayDescending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaktjgzh__test.go:26:8: undefined: sort_array_test

    /tmp/tmpaktjgzh__test.go:29:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var i int\n    var sum int\n    var tmp int\n \
    \   length = len(array)\n    for i = 0; i< length; i++ {\n        sum += array[i]\n\
    \        tmp = array[i]\n        if (sum%2 == 1) {\n            tmp = tmp * -1\n\
    \        }\n        result = append(result, tmp)\n    }\n    return sort_array_test.SortArray(array)\n\
    }\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuecqor79_test.go:27:5: undefined: length

    /tmp/tmpuecqor79_test.go:28:19: undefined: length

    /tmp/tmpuecqor79_test.go:36:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if 0 == len(array) {\n        return array\n    }\n    var sum int\n\
    \    var i int\n    for i = 0; i < len(array); i++ {\n        sum += array[i]\n\
    \    }\n    if sum%2 == 0 {\n        return append(sort_array(array[0:len(array)/2]),\
    \ append(sort_array(array[len(array)/2:]), array[0:len(array)/2]))\n    }\n  \
    \  return append(sort_array(array[0:len(array)/2]), append(sort_array(array[len(array)/2:]),\
    \ array[0:len(array)/2]))\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyr_b4tia_test.go:32:58: cannot use append(sort_array(array[len(array)
    / 2:]), array[0:len(array) / 2]) (value of type []int) as type int in argument
    to append

    /tmp/tmpyr_b4tia_test.go:32:104: cannot use array[0:len(array) / 2] (value of
    type []int) as type int in argument to append

    /tmp/tmpyr_b4tia_test.go:34:54: cannot use append(sort_array(array[len(array)
    / 2:]), array[0:len(array) / 2]) (value of type []int) as type int in argument
    to append

    /tmp/tmpyr_b4tia_test.go:34:100: cannot use array[0:len(array) / 2] (value of
    type []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sums []int\n    for _, num := range array {\n        sums = append(sums,\
    \ num)\n    }\n    if len(sums) <= 1 {\n        return array\n    }\n    first\
    \ := sums[0]\n    last := sums[len(sums)-1]\n    if first >= last {\n        return\
    \ array\n    }\n    if first == last {\n        if first % 2 == 0 {\n        \
    \    return sort_array(array[:len(sums)-1])\n        }\n        return sort_array(array[:len(sums)-1])\n\
    \    }\n    diff := last - first\n    if diff % 2 == 0 {\n        return sort_array(array[:len(sums)-1])\n\
    \    }\n    return sort_array(array[:len(sums)-1])\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmppyuy8xzq_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmppyuy8xzq_test.go:67:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmppyuy8xzq_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmppyuy8xzq_test.go:67: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=42) %!s(int=87) %!s(int=32) %!s(int=11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmppyuy8xzq_test.go:67:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=21)\
    \ %!s(int=14) %!s(int=23) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    sum_of_first_index := 0\n    sum_of_last_index\
    \ := 0\n\n    index_of_first_index := 0\n    index_of_last_index := len(array)\
    \ - 1\n\n    sum_of_first_index_of_first_index := 0\n    sum_of_last_index_of_first_index\
    \ := 0\n\n    sum_of_first_index_of_last_index := 0\n    sum_of_last_index_of_last_index\
    \ := 0\n\n    for _, index := range array {\n        sum_of_first_index += index\n\
    \    }\n\n    for _, index := range array {\n        sum_of_last_index += index\n\
    \    }\n\n    for index_of_first_index < index_of_last_index {\n        if sum_of_first_index\
    \ > sum_of_last_index {\n            sum_tmp := sum_of_last_index\n          \
    \  sum_of_last_index = sum_of_first_index\n            sum_of_first_index = sum_tmp\n\
    \        }\n\n        sum_index_of_first_index := array[index_of_first_index]\n\
    \        sum_index_of_last_index := array[index_of_last_index]\n\n        if sum_index_of_last_index\
    \ > sum_index_of_first_index {\n            sum_tmp := sum_index_of_last_index\n\
    \            sum_index_of_last_index = sum_index_of_first_index\n            sum_index_of_first_index\
    \ = sum_tmp\n        }\n\n        if sum_index_of_first_index + sum_index_of_last_index\
    \ == 0 {\n            continue\n        }\n\n        result [index_of_first_index]\
    \ = sum_index_of_first_index\n        index_of_first_index++\n        result [index_of_last_index]\
    \ = sum_index_of_last_index\n        index_of_last_index--\n    }\n\n    return\
    \ result\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2_k5gvu_test.go:30:5: sum_of_first_index_of_first_index declared but
    not used

    /tmp/tmpj2_k5gvu_test.go:31:5: sum_of_last_index_of_first_index declared but not
    used

    /tmp/tmpj2_k5gvu_test.go:33:5: sum_of_first_index_of_last_index declared but not
    used

    /tmp/tmpj2_k5gvu_test.go:34:5: sum_of_last_index_of_last_index declared but not
    used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Sort descending order if even sum\n    if sum(array) % 2 == 0 {\n\
    \        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n    // Sort ascending\
    \ order if odd sum\n    if sum(array) % 2 == 1 {\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdohruvzh_test.go:24:8: undefined: sum

    /tmp/tmpdohruvzh_test.go:25:9: undefined: sort

    /tmp/tmpdohruvzh_test.go:29:8: undefined: sum

    /tmp/tmpdohruvzh_test.go:30:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    s := make([]int, len(array))\n    sum := 0\n \
    \   for i := 0; i < len(array); i++ {\n        sum += array[i]\n    }\n    sort.SliceStable(s,\
    \ func(i, j int) bool {\n        return sum%2 == 1 || (sum%2 == 0 && s[i] < s[j])\n\
    \    })\n    return s\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsbcmulh_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var list []int\n    var sum int\n    for _, number := range array {\n\
    \        sum += number\n    }\n\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n\n    for _, number\
    \ := range array {\n        list = append(list, number)\n    }\n\n    return list\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2nhfk3k_test.go:30:9: undefined: sort

    /tmp/tmpe2nhfk3k_test.go:32:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sorted = make([]int, len(array))\n\n    // get the first element\
    \ in the array that has a sum of 0 less than the remaining value\n    var startIndex\
    \ int\n    var sum = 0\n    for ii, v := range array {\n        if sum < 0 {\n\
    \            sum += v\n            continue\n        }\n        sum += v\n   \
    \     startIndex = ii\n        break\n    }\n\n    // calculate the sum of the\
    \ elements with their index\n    var cur int\n    for _, v := range array {\n\
    \        cur += v\n    }\n\n    // if the sum summed of element with their index\
    \ is odd then sort it in ascending order\n    // if the sum is even then sort\
    \ it in descending order\n    if cur%2 == 0 {\n        for ii := startIndex +\
    \ 1; ii < len(array); ii++ {\n            sorted[ii] = array[ii]\n        }\n\
    \    } else {\n        for ii := startIndex + 1; ii < len(array); ii++ {\n   \
    \         sorted[ii-startIndex] = array[ii]\n        }\n    }\n\n    return sorted\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpp6q1xoj__test.go:78: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpp6q1xoj__test.go:78:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpp6q1xoj__test.go:78:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=0) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpp6q1xoj__test.go:78:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmpp6q1xoj__test.go:78: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=0) %!s(int=42) %!s(int=87) %!s(int=32) %!s(int=11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpp6q1xoj__test.go:78:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=0)\
    \ %!s(int=14) %!s(int=23) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code here\n    sum := 0\n    for _, v := range array {\n    \
    \    sum += v\n    }\n    arr := make([]int, len(array))\n    for i := 0; i <\
    \ len(array); i++ {\n        if sum%2 == 0 {\n            arr[len(arr)-1] = array[i]\n\
    \        } else {\n            arr[i] = array[i]\n        }\n    }\n    return\
    \ arr\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpj61heclu_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpj61heclu_test.go:57: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpj61heclu_test.go:57: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpj61heclu_test.go:57: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpj61heclu_test.go:57: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Ints(array)\n    sum := array[0]\n    for _, val := range array[1:]\
    \ {\n        if val > sum {\n            sum = val\n        }\n    }\n    if sum%2\
    \ == 1 {\n        sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(sort.Reverse(array))\n\
    \        sort.Sort(sort.Reverse(array))\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40krinsc_test.go:23:5: undefined: sort

    /tmp/tmp40krinsc_test.go:31:9: undefined: sort

    /tmp/tmp40krinsc_test.go:33:9: undefined: sort

    /tmp/tmp40krinsc_test.go:34:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    // check odd/even case\n    if length%2 !=\
    \ 0 {\n        temp = array[len(array)/2-1]\n        array[len(array)/2] = temp\n\
    \    }\n\n    // sort ascending/descending according to sum function\n    sort.Ints(array)\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpku5yiygn_test.go:26:9: undefined: temp

    /tmp/tmpku5yiygn_test.go:27:31: undefined: temp

    /tmp/tmpku5yiygn_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    sort.Sort(sort.Reverse(sort.Ints(array)))\n   \
    \ for _, v := range array {\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08ii3xec_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var newArray = make([]int, len(array))\n    for i := range newArray {\n\
    \        newArray[i] = array[i]\n    }\n    sum_value := newArray[len(newArray)-1]\
    \ + newArray[0]\n    if sum_value % 2 != 0 {\n        newArray = newArray[0 :\
    \ len(newArray)-1]\n    } else {\n        newArray = newArray[0 : len(newArray)-1]\n\
    \    }\n    return newArray\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmprh8g59nm_test.go:27\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmprh8g59nm_test.go:43\
    \ +0x33\ntesting.tRunner(0xc0001964e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Ints(array)\n    return array\n}\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7q7t6rb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil {\n        return nil\n    }\n    var result []int\n\
    \    // calculate the sum of first and last elements in the given array\n    var\
    \ sum_first_element int\n    var sum_last_element int\n    for _, e := range array\
    \ {\n        sum_first_element += e\n        sum_last_element += e\n    }\n\n\
    \    // if sum is odd, sort it in ascending order\n    if sum_last_element%2 !=\
    \ 0 {\n        sort_first_last(result, sum_first_element, sum_last_element, sum_first_element)\n\
    \    } else {\n        sort_first_last(result, sum_first_element, sum_last_element-1,\
    \ sum_last_element)\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zx5y1x9_test.go:37:9: undefined: sort_first_last

    /tmp/tmp_zx5y1x9_test.go:39:9: undefined: sort_first_last

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, num := range array {\n        sum += num\n    }\n\
    \    if sum%2 != 0 {\n        sort_array := sort.IntSlice{}\n        sort_array\
    \ = append(sort_array, array...)\n        sort_array = sort.Reverse(sort_array)\n\
    \        return sort_array\n    } else {\n        return array\n    }\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxinvhtn4_test.go:28:23: undefined: sort

    /tmp/tmpxinvhtn4_test.go:30:22: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write code here.\n    // fmt.Println(\"sort_array is here\")\n   \
    \ var s []int\n    var k int\n    var j int\n    var tmp int\n    var tmp2 int\n\
    \    l = len(array)\n    // fmt.Printf(\"%T\\n\", array) // *[]int\n    // fmt.Println(array)\n\
    \    i = 0\n    for i < l {\n        if array[i] > array[i+1] {\n            s\
    \ = append(s, array[i])\n            k = i\n        } else {\n            s =\
    \ append(s, array[i+1])\n            j = i\n        }\n        i = i + 1\n   \
    \ }\n    // fmt.Printf(\"%T\\n\", s)\n    sort.Sort(s)\n    // fmt.Printf(\"%T\\\
    n\", s)\n    k++\n    i = 0\n    for i < l {\n        if i == k {\n          \
    \  s = append(s, array[j])\n        } else {\n            s = append(s, array[i])\n\
    \        }\n        i = i + 1\n    }\n    // fmt.Printf(\"%T\\n\", s)\n    return\
    \ s\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2dzt9wc_test.go:30:5: undefined: l

    /tmp/tmpi2dzt9wc_test.go:33:5: undefined: i

    /tmp/tmpi2dzt9wc_test.go:34:9: undefined: i

    /tmp/tmpi2dzt9wc_test.go:34:13: undefined: l

    /tmp/tmpi2dzt9wc_test.go:35:18: undefined: i

    /tmp/tmpi2dzt9wc_test.go:36:33: undefined: i

    /tmp/tmpi2dzt9wc_test.go:37:17: undefined: i

    /tmp/tmpi2dzt9wc_test.go:39:33: undefined: i

    /tmp/tmpi2dzt9wc_test.go:40:17: undefined: i

    /tmp/tmpi2dzt9wc_test.go:42:13: undefined: i

    /tmp/tmpi2dzt9wc_test.go:42:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return sort_array_test.SortArray(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6exw0p__test.go:23:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075337
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    switch {\n    case len(array) <= 1:\n        return array\n    case len(array)\
    \ % 2 == 0:\n        sort.SliceStable(array, func(i, j int) bool {\n         \
    \   switch {\n            case array[i] > array[j]:\n                return true\n\
    \            case array[i] < array[j]:\n                return false\n       \
    \     default:\n                return false\n            }\n        })\n    \
    \    return array\n    default:\n        sort.SliceStable(array, func(i, j int)\
    \ bool {\n            switch {\n            case array[i] > array[j]:\n      \
    \          return false\n            case array[i] < array[j]:\n             \
    \   return true\n            default:\n                return false\n        \
    \    }\n        })\n        return array\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu73qxgi_test.go:27:9: undefined: sort

    /tmp/tmpfu73qxgi_test.go:39:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var list, _ = make([]int, len(array))\n    list.Init(array)\n    return\
    \ list.Sort()\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvhb4a6_3_test.go:23:19: assignment mismatch: 2 variables but make returns
    1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n    sum0 := 0\n\
    \    sum1 := 0\n    for _, val := range array {\n        sum0 += val\n       \
    \ sum1 += sum0\n    }\n    \n    if sum1 % 2 == 0 {\n        sort.Ints(array)\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] > array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ocgljwx_test.go:34:9: undefined: sort

    /tmp/tmp8ocgljwx_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var newArray []int\n    // If the array is empty\n    if len(array) ==\
    \ 0 {\n        return newArray\n    }\n    n := len(array)\n    // If the first\
    \ item in the array is odd and total sum is odd\n    if array[0]%2 == 1 {\n  \
    \      for i := 1; i < n; i++ {\n            if array[i]%2 != 0 {\n          \
    \      array[i], array[i-1] = array[i-1], array[i]\n            }\n        }\n\
    \    }\n    // If the first item in the array is even and total sum is even\n\
    \    if array[0]%2 == 0 {\n        for i := 1; i < n; i++ {\n            if array[i]\
    \ %2 == 0 {\n                array[i], array[i-1] = array[i-1], array[i]\n   \
    \         }\n        }\n    }\n    // Recursion\n    switch len(array) {\n   \
    \ case 2:\n        newArray = append(newArray, array[0])\n        newArray = append(newArray,\
    \ array[1])\n    case 3:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n        newArray = append(newArray,\
    \ array[2])\n    case 4:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n        newArray = append(newArray,\
    \ array[2])\n        newArray = append(newArray, array[3])\n    case 5:\n    \
    \    newArray = append(newArray, array[0])\n        newArray = append(newArray,\
    \ array[1])\n        newArray = append(newArray, array[2])\n        newArray =\
    \ append(newArray, array[3])\n        newArray = append(newArray, array[4])\n\
    \    case 6:\n        newArray = append(newArray, array[0])\n        newArray\
    \ = append(newArray, array[1])\n        newArray = append(newArray, array[2])\n\
    \        newArray = append(newArray, array[3])\n        newArray = append(newArray,\
    \ array[4])\n        newArray = append(newArray, array[5])\n    case 7:\n    \
    \    newArray = append(newArray, array[0])\n        newArray = append(newArray,\
    \ array[1])\n        newArray = append(newArray, array[2])\n        newArray =\
    \ append(newArray, array[3])\n        newArray = append(newArray, array[4])\n\
    \        newArray = append(newArray, array[5])\n        newArray = append(newArray,\
    \ array[6])\n    case 8:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n        newArray = append(newArray,\
    \ array[2])\n        newArray = append(newArray, array[3])\n        newArray =\
    \ append(newArray, array[4])\n        newArray = append(newArray, array[5])\n\
    \        newArray = append(newArray, array[6])\n        newArray = append(newArray,\
    \ array[7])\n    case 9:\n        newArray = append(newArray, array[0])\n    \
    \    newArray = append(newArray, array[1])\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpszxynodz_test.go:93:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075338
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    if isOdd(len(array),\
    \ 0) {\n        return sort_odd_first(array)\n    } else {\n        return sort_even_first(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcppeu_v_test.go:27:8: undefined: isOdd

    /tmp/tmplcppeu_v_test.go:28:16: undefined: sort_odd_first

    /tmp/tmplcppeu_v_test.go:30:16: undefined: sort_even_first

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"Given array: \", array)\n\n    var total int\n    var aLen\
    \ int\n\n    for i := 0; i < len(array); i++ {\n        total += array[i]\n  \
    \      aLen++\n    }\n\n    // If total is odd, then sort it in ascending order.\n\
    \    if total % 2 != 0 {\n        for i := 0; i < len(array); i++ {\n        \
    \    for j := 0; j < i; j++ {\n                if array[j] > array[j+1] {\n  \
    \                  array[j], array[j+1] = array[j+1], array[j]\n             \
    \   }\n            }\n        }\n    }\n\n    // If total is even, then sort it\
    \ in descending order.\n    if total % 2 == 0 {\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := 0; j < i; j++ {\n                if array[j] > array[j+1]\
    \ {\n                    array[j], array[j+1] = array[j+1], array[j]\n       \
    \         }\n            }\n        }\n    }\n\n    fmt.Println(\"Sorted array:\
    \ \", array)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Given array:  []\nSorted array:  []\nGiven array:  [5]\nSorted array: \
    \ [5]\nGiven array:  [2 4 3 0 1 5]\nSorted array:  [0 2 1 3 4 5]\nGiven array:\
    \  [2 4 3 0 1 5 6]\nSorted array:  [0 1 2 3 4 5 6]\nGiven array:  [2 1]\nSorted\
    \ array:  [1 2]\nGiven array:  [15 42 87 32 11 0]\nSorted array:  [15 32 11 42\
    \ 0 87]\nGiven array:  [21 14 23 11]\nSorted array:  [14 21 11 23]\n--- FAIL:\
    \ TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n \
    \       tmpl84gtjhh_test.go:78: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpl84gtjhh_test.go:78:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpl84gtjhh_test.go:78:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=32) %!s(int=11) %!s(int=42) %!s(int=0) %!s(int=87)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpl84gtjhh_test.go:78:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=14)\
    \ %!s(int=21) %!s(int=11) %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    result := append(result, array...)\n    sort_array_test(result)\n\
    \    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38hm8ebd_test.go:24:12: no new variables on left side of :=

    /tmp/tmp38hm8ebd_test.go:25:5: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    result := []int{}\n    for _, v := range array {\n    \
    \    sum += v\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    for _, v :=\
    \ range array {\n        result = append(result, v)\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdm4wr1wl_test.go:29:9: undefined: sort

    /tmp/tmpdm4wr1wl_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    firstIndex :=\
    \ 0\n    lastIndex := len(array)\n    sum := 0\n\n    // First index value calculation\n\
    \    for i := 0; i < lastIndex; i++ {\n        sum += array[i]\n    }\n\n    if\
    \ sum%2 == 0 {\n        firstIndex = lastIndex\n    } else {\n        firstIndex\
    \ = lastIndex - 1\n    }\n\n    arrayCopy = append([]int{}, array...)\n\n    //\
    \ Last index value calculation\n    for i := firstIndex; i > 0; i-- {\n      \
    \  sum += arrayCopy[i]\n    }\n\n    if sum%2 == 0 {\n        lastIndex = firstIndex\n\
    \    } else {\n        lastIndex = firstIndex + 1\n    }\n\n    for i := 0; i\
    \ < lastIndex; i++ {\n        if arrayCopy[i] > arrayCopy[firstIndex] {\n    \
    \        arrayCopy[i], arrayCopy[firstIndex] = arrayCopy[firstIndex], arrayCopy[i]\n\
    \        }\n    }\n\n    return arrayCopy\n}\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwynv_4f8_test.go:41:5: undefined: arrayCopy

    /tmp/tmpwynv_4f8_test.go:45:16: undefined: arrayCopy

    /tmp/tmpwynv_4f8_test.go:55:12: undefined: arrayCopy

    /tmp/tmpwynv_4f8_test.go:56:51: undefined: arrayCopy

    /tmp/tmpwynv_4f8_test.go:60:12: undefined: arrayCopy

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    p := make([]int, len(array))\n    q := make([]int, len(array))\n    i\
    \ := 0\n    for len(array) > 0 {\n        p[i] = array[i]\n        i++\n     \
    \   q = array[:i]\n        array = array[i:]\n        sort.Ints(q)\n        for\
    \ j := 0; j < len(q); j++ {\n            p[i] = q[j]\n            i++\n      \
    \  }\n    }\n    return p\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tp3yf54_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Sort(sort.IntSlice(array))\n    for i := range array {\n       \
    \ if array[len(array)-i-1]%2==0 {\n            array[len(array)-i-1]--\n     \
    \   } else {\n            array[len(array)-i-1]++\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2b947j31_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 0 {\n        return array\n    }\n\n    sort.SliceStable(array[:len(array)-1],\
    \ func(i, j int) bool {\n        return array[i] > array[j]\n    })\n    if array[len(array)-1]%2\
    \ == 0 {\n        sort.SliceStable(array[:len(array)-1], func(i, j int) bool {\n\
    \            return array[i] < array[j]\n        })\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfc30eps_test.go:27:5: undefined: sort

    /tmp/tmpbfc30eps_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n    size := len(array)\n    sum := 0\n    sorted\
    \ := make([]int, size)\n    for _, num := range array {\n        sum += num\n\
    \    }\n    if sum % 2 == 1 {\n        for i := 0; i < size; i++ {\n         \
    \   if i == size-1 || array[i] > array[i+1] {\n                sorted := append(sorted,\
    \ array[i])\n            }\n        }\n    } else {\n        for i := 0; i < size;\
    \ i++ {\n            if i == size-1 || array[i] < array[i+1] {\n             \
    \   sorted := append(sorted, array[i])\n            }\n        }\n    }\n    return\
    \ sorted\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesl8enuc_test.go:33:17: sorted declared but not used

    /tmp/tmpesl8enuc_test.go:39:17: sorted declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var newArray []int\n\n    for _, num := range array {\n        if num%2\
    \ == 0 {\n            newArray = append(newArray, num)\n        } else {\n   \
    \         newArray = append(newArray, 0)\n        }\n    }\n\n    return newArray\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpdixn28vf_test.go:55: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpdixn28vf_test.go:55:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpdixn28vf_test.go:55:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpdixn28vf_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=0)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmpdixn28vf_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=0) %!s(int=42) %!s(int=0) %!s(int=32) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpdixn28vf_test.go:55:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=0)\
    \ %!s(int=14) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // sort ascending\n    sort.Sort(sort.Reverse(func(a, b int) bool { return\
    \ a > b }))\n    // if sum is odd, sort descending\n    var index int = 0\n  \
    \  var sum = 0 //sum is sum of array[index]\n    var temp int\n    for i := range\
    \ array {\n        if temp != 0 {\n            sum += array[i]\n        }\n  \
    \      temp = array[i]\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(func(a,\
    \ b int) bool { return a > b }))\n    }\n    return array\n}\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1otfni08_test.go:24:5: undefined: sort

    /tmp/tmp1otfni08_test.go:26:9: index declared but not used

    /tmp/tmp1otfni08_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum1 := int(array[0])\n    sum2 := int(array[len(array)-1])\n    \n \
    \   if sum2 > sum1 {\n        return array\n    }\n    if sum2 > sum1 {\n    \
    \    fmt.Println(\"sort_array(\" + fmt.Sprint(array) + \")\")\n        return\
    \ array\n    }\n    if sum2 > sum1 {\n        fmt.Println(\"sort_array(\" + fmt.Sprint(array)\
    \ + \")\")\n        return array\n    }\n    \n    sum1 += 1\n    sum2 -= 1\n\
    \    \n    if sum2 > sum1 {\n        return array\n    }\n    if sum2 > sum1 {\n\
    \        return array\n    }\n    if sum2 > sum1 {\n        return array\n   \
    \ }\n    \n    return array\n}\n`\n    \n    func TestSortArray(t *testing.T)\
    \ {\n        type T \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1zp8dzgi_test.go:53:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return sort_array_test(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6n6z6h7_test.go:23:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var last_i int\n    var i int\n    var sum int\n\
    \n    for i := 0; i < len(array); i++ {\n        sum += array[i]\n        if sum%2\
    \ != 0 {\n            sum--\n            last_i = i\n        } else {\n      \
    \      sum += array[i]\n            if sum%2 != 0 {\n                sum++\n \
    \           }\n        }\n        result = append(result, array[i])\n    }\n \
    \   if len(array) > len(result) {\n        result = append(result, array[last_i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjos0kxat_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    for i := 0; i < len(array); i++ {\n        j\
    \ := i + 1\n        while (j < len(array) && array[j] < array[i]) {\n        \
    \    array[j], array[i] = array[i], array[j]\n            j++\n        }\n   \
    \ }\n    return array\n}\n`\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgqsvnp88_test.go:26:55: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sumVal int\n    for _, v := range array {\n        sumVal += v\n\
    \    }\n    switch sumVal {\n    case 0:\n        return array\n    case 1:\n\
    \        return array[0 :] // sort ascending\n    default:\n        var sorted\
    \ []int\n        sorted = array[:0] // copy the first element in the array first\n\
    \        for i := range array {\n            sorted = append(sorted, array[i])\
    \ // append the remaining elements\n        }\n        sorted = sort_array(sorted)\
    \ // sort the copied elements (in ascending order)\n        sorted = append(sorted,\
    \ array[len(array)-1]) // append the last element\n        sorted = sort_array(sorted)\
    \ // sort the copied elements (in descending order)\n        return sorted\n \
    \   }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0340\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204f6?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.sort_array({0xc00001e1f8?,\
    \ 0x1, 0x1?})\n\t/tmp/tmph17vw32a_test.go:22 +0x15b fp=0xc0201e0350 sp=0xc0201e0348\
    \ pc=0x4ef7bb\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\
    \t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e03c0 sp=0xc0201e0350 pc=0x4ef736\n\
    command-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38\
    \ +0xd6 fp=0xc0201e0430 sp=0xc0201e03c0 pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?,\
    \ 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e04a0 sp=0xc0201e0430\
    \ pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\
    \t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e0510 sp=0xc0201e04a0 pc=0x4ef736\n\
    command-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38\
    \ +0xd6 fp=0xc0201e0580 sp=0xc0201e0510 pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?,\
    \ 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e05f0 sp=0xc0201e0580\
    \ pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\
    \t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e0660 sp=0xc0201e05f0 pc=0x4ef736\n\
    command-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38\
    \ +0xd6 fp=0xc0201e06d0 sp=0xc0201e0660 pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?,\
    \ 0x1, 0x0?})\n\t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e0740 sp=0xc0201e06d0\
    \ pc=0x4ef736\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x1, 0x0?})\n\
    \t/tmp/tmph17vw32a_test.go:38 +0xd6 fp=0xc0201e07"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for _, number := range array {\n        fmt.Println(\"\
    number:\", number)\n        fmt.Println(\"result:\", result)\n        result =\
    \ append(result, number)\n    }\n\n    fmt.Println(\"after sort array:\", result)\n\
    \    for _, number := range result {\n        fmt.Println(\"number:\", number)\n\
    \    }\n    return result\n}\n</code>\n<|/ a tags=sorting,go,arrays |>\n<| a dscore=2\
    \ |>\nUsing sort.Slice:\n<code>\npackage main\n\nimport (\n    \"sort\"\n    \"\
    testing\"\n)\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiygwt1mw_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075339
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n\n    k := len(array)\
    \ - 2\n    a := array[k] + array[k+1]\n    b := array[k] - array[k+1]\n    if\
    \ a > b {\n        return array\n    }\n    return []int{array[k], array[k+1],\
    \ array[k+2]}\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5125e0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5125e0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmp20bnz92z_test.go:33\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmp20bnz92z_test.go:48\
    \ +0x146\ntesting.tRunner(0xc0001a0340, 0x527ed8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Printf(\"ORIGINAL LIST: %v\\n\", array)\n    fmt.Printf(\"SORTED\
    \ LIST: %v\\n\", sort_array_test(array))\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgc6c1tlm_test.go:24:37: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sum := 0\n    var i int\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for _, v := range\
    \ array {\n            array[i] = v\n            i++\n        }\n        sort.Ints(array)\n\
    \        return array\n    }\n    for _, v := range array {\n        array[i]\
    \ = v\n        i++\n    }\n    sort.Ints(array)\n    return reverseInts(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41mg3qz9_test.go:34:9: undefined: sort

    /tmp/tmp41mg3qz9_test.go:41:5: undefined: sort

    /tmp/tmp41mg3qz9_test.go:42:12: undefined: reverseInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum1 := 0\n    sum2 := 0\n    result := []int{}\n    for i := 0; i <\
    \ len(array); i++ {\n        sum1 += array[i]\n        sum2 += array[i]\n    }\n\
    \    if sum%2 == 0 {\n        for i := 0; i < len(array); i++ {\n            result\
    \ := append(result, array[i])\n        }\n    } else {\n        for i := 0; i\
    \ < len(array); i++ {\n            result := append(result, array[len(array)-i-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp20x4_djo_test.go:30:8: undefined: sum

    /tmp/tmp20x4_djo_test.go:32:13: result declared but not used

    /tmp/tmp20x4_djo_test.go:36:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075340
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    sum := 0\n   \
    \ for _, num := range array {\n        sum += num\n    }\n    if sum%2 == 0 {\n\
    \        for i := 0; i < len(array); i++ {\n            for j := i + 1; j < len(array);\
    \ j++ {\n                compare := array[j]\n                if compare < array[i]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    } else {\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := i + 1; j < len(array); j++ {\n                compare\
    \ := array[j]\n                if compare > array[i] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpkosvjhqz_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmpkosvjhqz_test.go:71: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkosvjhqz_test.go:71:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=87) %!s(int=42) %!s(int=32) %!s(int=15) %!s(int=11) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    var new_array []int\n    sum := 0\n    for\
    \ _, element := range array {\n        sum += element\n        if sum%2 != 0 {\n\
    \            new_array = append(new_array, element)\n        } else {\n      \
    \      new_array = append(new_array, len(array)-1-element)\n        }\n    }\n\
    \    return new_array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmptv6s7vn1_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=1) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmptv6s7vn1_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=0)\
    \ %!s(int=5) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmptv6s7vn1_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=-1) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmptv6s7vn1_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=-82)\
    \ %!s(int=-27) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmptv6s7vn1_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=-20) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Ints(array)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifyp61f0_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    p := make([]int, len(array))\n    for i := range p {\n        p[i] =\
    \ array[i]\n    }\n    p := sort_array_test.SortArray(p)\n    p := sort_array_test.ReverseSortArray(p)\n\
    \    return p\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdo7o6c2v_test.go:27:7: no new variables on left side of :=

    /tmp/tmpdo7o6c2v_test.go:27:10: undefined: sort_array_test

    /tmp/tmpdo7o6c2v_test.go:28:7: no new variables on left side of :=

    /tmp/tmpdo7o6c2v_test.go:28:10: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var res []int\n    var sum1 int\n    var sum2 int\n    for _, num :=\
    \ range array {\n        sum1 += num\n        sum2 += sum1 + num\n        if sum1%2\
    \ == 0 {\n            res, sum1, sum2 = res, sum1, sum2\n        } else {\n  \
    \          res, sum1, sum2 = res[1:], sum1, sum2\n        }\n    }\n    return\
    \ res\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpox4pspus_test.go:32\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpox4pspus_test.go:45\
    \ +0x90c\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var res []int\n    var sum int\n    // iterate through each element\n\
    \    for _, value := range array {\n        sum += value\n        // if sum is\
    \ even\n        if sum%2 == 0 {\n            // append the element\n         \
    \   res = append(res, value)\n        } else {\n            // append the element\n\
    \            res = append(res, value*-1)\n        }\n    }\n    return res\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmp41hqkujy_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=-5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmp41hqkujy_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=-3) %!s(int=0) %!s(int=1) %!s(int=-5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmp41hqkujy_test.go:59:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=-3) %!s(int=0) %!s(int=1)\
    \ %!s(int=-5) %!s(int=-6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmp41hqkujy_test.go:59: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=-1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp41hqkujy_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=-15) %!s(int=-42) %!s(int=87) %!s(int=32) %!s(int=-11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmp41hqkujy_test.go:59:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=-21)\
    \ %!s(int=-14) %!s(int=23) %!s(int=-11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    // Sort the\
    \ array\n    var left, right int\n    left_diff := 0\n    right_diff := 0\n  \
    \  for _, v := range array {\n        left += v\n        right_diff += v\n   \
    \ }\n    var result []int\n    left = 0\n    right = left_diff\n    result = make([]int,\
    \ len(array))\n    for left, right := 0, len(array)-1; left < right; left, right\
    \ = left + 1, right -1 {\n        var i int\n        if array[left] > array[right]\
    \ {\n            i, array[left], array[right] = array[right], array[left]\n  \
    \          result[i], array[left], array[right] = array[right], array[left], i\n\
    \        }\n    }\n    for _, v := range result {\n        array[len(array)-v-1]\
    \ = v\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqg5vasti_test.go:28:15: right declared but not used

    /tmp/tmpqg5vasti_test.go:42:44: assignment mismatch: 3 variables but 2 values

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    if len(array) == 0 {\n        return array\n\
    \    }\n    if len(array) == 1 {\n        return array\n    }\n    // sort\n \
    \   length := len(array)\n    sum := 0\n    for i := 0; i < length; i++ {\n  \
    \      sum += array[i]\n    }\n    if sum % 2 != 0 {\n        sort.SliceStable(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.SliceStable(array, func(i, j int) bool {\n       \
    \     return array[i] < array[j]\n        })\n    }\n    return array\n}\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbh3txfxv_test.go:37:9: undefined: sort

    /tmp/tmpbh3txfxv_test.go:41:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    var resultArr []int\n    sort.Ints(array)\n  \
    \  for _, v := range array {\n        resultArr = append(resultArr, v)\n    }\n\
    \    return resultArr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi16queel_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    sum := 0\n    for _, v := range array {\n \
    \       sum += v\n    }\n    \n    if sum%2 == 1 {\n        array.reverse()\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1m4vu838_test.go:23:5: length declared but not used

    /tmp/tmp1m4vu838_test.go:30:15: array.reverse undefined (type []int has no field
    or method reverse)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    result := []int{}\n    sum := array[0]\n    for _, i := range array {\n\
    \        sum += i\n    }\n    if sum%2 == 1 {\n        for _, i := range array\
    \ {\n            result = append(result, i)\n        }\n    } else {\n       \
    \ for i := 0; i < len(array)-1; i++ {\n            if array[i] > array[i+1] {\n\
    \                result = append(result, array[i])\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmp8gvcsbul_test.go:24\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmp8gvcsbul_test.go:49\
    \ +0x18\ntesting.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Printf(\"--------> %v\\n\", array)\n    fmt.Printf(\"--------> %v\\\
    n\", array[:])\n    start := array[0]\n    end := array[len(array)-1]\n    sumFirst\
    \ := start\n    sumEnd := end\n    sumFirstOdd := sumEnd % 2 == 1\n    sumFirstEven\
    \ := sumEnd % 2 == 0\n    index := 0\n    for index < len(array) {\n        current\
    \ := array[index]\n        if sumFirst + current > sumEnd {\n            fmt.Printf(\"\
    --------> %v\\n\", array)\n            fmt.Printf(\"--------> %v\\n\", array[:])\n\
    \            return array\n        }\n        sumFirst = sumFirst + current\n\
    \        sumEnd = sumEnd + current\n        sumFirstOdd = sumFirstOdd && current\
    \ % 2 == 1\n        sumFirstEven = sumFirstEven && current % 2 == 0\n        index++\n\
    \    }\n\n    return nil\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--------> []\n--------> []\n--- FAIL: TestSort_Array (0.00s)\npanic: runtime\
    \ error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error:\
    \ index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0, 0x0})\n\t/tmp/tmpspu1arel_test.go:25\
    \ +0x27d\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpspu1arel_test.go:56\
    \ +0x4d\ntesting.tRunner(0xc0001a01a0, 0x5290f0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum_of_list := 0\n    for _, element := range array {\n        sum_of_list\
    \ += element\n    }\n    if sum_of_list % 2 != 0 {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] > array[j]\n        })\n\
    \    } else {\n        sort.Slice(array, func(i, j int) bool {\n            return\
    \ array[i] < array[j]\n        })\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvs9iipw_test.go:28:9: undefined: sort

    /tmp/tmpdvs9iipw_test.go:32:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    // Find the sum\
    \ of the first and last elements\n    firstValue := array[0]\n    lastValue :=\
    \ array[len(array)-1]\n    sumFirstValue := firstValue\n    sumLastValue := lastValue\n\
    \    for _, i := range array {\n        sumFirstValue += i\n    }\n    for _,\
    \ j := range array {\n        sumLastValue += j\n    }\n    if sumFirstValue <\
    \ sumLastValue {\n        // The list is sorted in ascending order\n        return\
    \ array\n    }\n    // The list is sorted in descending order\n    array := reverse_list(array)\n\
    \    return sort_array(array)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdhbhcd6_test.go:42:11: no new variables on left side of :=

    /tmp/tmpcdhbhcd6_test.go:42:14: undefined: reverse_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    count := len(array)\n    sum := 0\n    for _, v := range array {\n  \
    \      sum += v\n    }\n    if sum%2 == 1 {\n        sort.Ints(array)\n    } else\
    \ {\n        sort.Int64s(array)\n    }\n    return array\n}\n</code>\nOutput:\n\
    <code>\npackage main\n\nimport \"fmt\"\nimport \"sort_array_test\"\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8oqzsonr_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    k := n / 2\n    var tmp int\n    for i := 0; i <\
    \ n; i++ {\n        for j := 0; j < n-i; j++ {\n            if array[len(array)-j-1]\
    \ + array[j] < array[j] {\n                tmp := array[j]\n                array[j]\
    \ = array[j-i]\n                array[j-i] = tmp\n            }\n        }\n \
    \   }\n    return array\n}\n`\n\nvar sort_array_tests = []*ast.TestCase{\n   \
    \ {\n        Desc: \"simple array\",\n        Code: sort,\n        Tests: []*ast.TestCase{\n\
    \            {\n                Desc: \"empty array\",\n                Code:\
    \ sort_empty_code,\n                Tests: []*ast.TestCase{\n                \
    \    {\n                        Desc: \"sort empty\",\n                      \
    \  Code: sort_empty_test,\n                    },\n                },\n      \
    \      },\n            {\n                Desc: \"simple array\",\n          \
    \      Code: sort_code,\n                Tests: []*ast.TestCase{\n           \
    \         {\n                        Desc: \"sort ascending\",\n             \
    \           Code: sort_test,\n                    },\n                    {\n\
    \                        Desc: \"sort descending\",\n                        Code:\
    \ sort_test_reverse,\n                    },\n                },\n           \
    \ },\n        },\n    },\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbfjbv2w7_test.go:37:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075341
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // return an array with the given list sorted\n    var sum int\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 == 0 {\n      \
    \  fmt.Println(array)\n        sort.Sort(sort.IntSlice(array))\n        fmt.Println(array)\n\
    \    } else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n       \
    \ fmt.Println(array)\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9pibtqp_test.go:30:9: undefined: sort

    /tmp/tmpu9pibtqp_test.go:33:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // return array after sorting.\n    if len(array) == 0 {\n        return\
    \ array\n    }\n    // If the sum of the first and the last element is odd, sort\
    \ in ascending order.\n    if array[0] + array[len(array)-1] % 2 == 1 {\n    \
    \    sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    } else {\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4te_c0is_test.go:29:9: undefined: sort

    /tmp/tmp4te_c0is_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    m := make([]int, len(array))\n    for k := range array {\n        m[k]\
    \ = array[k]\n    }\n\n    sort.Ints(m)\n    return m\n}\n`\n\trequire.NoError(t,\
    \ err)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpca1soxj6_test.go:31:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil {\n        return nil\n    }\n    if len(array) == 0\
    \ {\n        return array\n    }\n    \n    \n    var result []int\n    \n   \
    \ if array[0]%2 == 0 {\n        // sum first and last element\n        result\
    \ := append(result, array[0])\n        result := append(result, array[len(array)-1])\n\
    \    } else {\n        // sum first and last element - reverse\n        result\
    \ := append(result,array[len(array)-1])\n        result := append(result, array[0])\n\
    \    }\n    \n    // sort\n    sort.Ints(result)\n    \n    // recreate array\n\
    \    if len(result) == 0 {\n        return array\n    }\n    if len(result) ==\
    \ 1 {\n        return append(array, result[0])\n    }\n    \n    \n    // create\
    \ new array\n    newArray := make([]int, len(result))\n    \n    // copy to new\
    \ array\n    for i := range newArray {\n        newArray[i] = array[i]\n    }\n\
    \    \n    // reverse array\n    if result[len(result)-1]%2 == 0 {\n        \n\
    \        for i := len(newArray)-1; i >= 0; i-- {\n            newArray[i] = array[i-1]\n\
    \        }\n    } else {\n        \n        for i := len(newArray)-1; i >= 0;\
    \ i-- {\n            newArray[i] = array[i+1]\n        }\n    }\n    \n    //\
    \ return result\n    return newArray\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqgepi20o_test.go:36:16: no new variables on left side of :=

    /tmp/tmpqgepi20o_test.go:40:16: no new variables on left side of :=

    /tmp/tmpqgepi20o_test.go:44:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil {\n        return nil\n    }\n\n    start := len(array)\
    \ - 1\n    end := len(array) - 1\n    sum := array[0] + array[end]\n\n    if sum%2\
    \ == 0 {\n        for i := len(array) - 1; i > 0; i-- {\n            if array[i]\
    \ > array[i - 1] {\n                end -= 1\n                array[i], array[end]\
    \ = array[end], array[i]\n                start = i + 1\n            }\n     \
    \   }\n    } else {\n        for i := len(array) - 1; i > 0; i-- {\n         \
    \   if array[i] < array[i - 1] {\n                end -= 1\n                array[i],\
    \ array[end] = array[end], array[i]\n                start = i + 1\n         \
    \   }\n        }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvmrs97_j_test.go:27:5: start declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075342
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array[0] == 0 || array[len(array)-1] == 0 {\n        return array\n\
    \    }\n\n    var i int = 0\n    var j int = 0\n    var sum int = 0\n\n    for\
    \ ; i < len(array); i++ {\n        sum = sum + array[i]\n        if sum%2 == 0\
    \ {\n            continue\n        }\n        if sum%2 != 0 {\n            i++\n\
    \            sum = sum + array[i]\n        }\n        array[j], array[i] = array[i],\
    \ array[j]\n        j++\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpgfjd2nyd_test.go:23 +0xc9\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpgfjd2nyd_test.go:53 +0x4d\ntesting.tRunner(0xc000103380, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // init temp list\n    tempList := make([]int, len(array))\n    // init\
    \ sum list\n    sum := 0\n    for i := 0; i < len(array); i++ {\n        tempList[i]\
    \ = array[i]\n        sum += array[i]\n    }\n    // init index list for sort\n\
    \    indexList := make([]int, len(array))\n    // init index\n    index := 0\n\
    \    for i := 0; i < len(array); i++ {\n        indexList[i] = index\n       \
    \ index += array[i]\n    }\n    switch {\n    case sum % 2 != 0:\n        // asc\n\
    \        for i := 0; i < len(array); i++ {\n            tempList[i] = array[indexList[i]]\n\
    \            indexList[i]++\n        }\n        return tempList\n    case sum\
    \ % 2 == 1:\n        // desc\n        for i := 0; i < len(array); i++ {\n    \
    \        tempList[i] = array[indexList[i]]\n            indexList[i]--\n     \
    \   }\n        return tempList\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000024390?, 0x6, 0x6})\n\t\
    /tmp/tmpajopiskc_test.go:43 +0x169\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpajopiskc_test.go:67 +0xfb\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    if len(array) == 0 {\n        return array\n \
    \   }\n    odd, even := 0, 0\n    sum := array[len(array)-1] + array[len(array)-2]\n\
    \    for i := range array {\n        if i == 0 || i == len(array)-1 {\n      \
    \      continue\n        }\n        odd += array[i]\n        even += sum - array[i-1]\n\
    \        sum = odd + even\n        array[i] = odd\n        sum = array[len(array)-1]\
    \ + array[len(array)-2]\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x0?, 0xd0?})\n\
    \t/tmp/tmp0lamc0sl_test.go:28 +0x71\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp0lamc0sl_test.go:50 +0x90\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 0 {\n        return array\n    }\n    i := 0\n    j\
    \ := len(array)-1\n    k := 0\n    sumArrayValues := 0\n    for ; j < k; j++ {\n\
    \        sumArrayValues += array[j]\n    }\n    if sumArrayValues % 2 == 1 {\n\
    \        j := 0\n        for ; j < k; j++ {\n            array[j] = array[j+1]\n\
    \        }\n        array[k] = array[j]\n        k++\n        sumArrayValues +=\
    \ array[k]\n    }\n    for ; i < j; i++ {\n        sumArrayValues += array[i]\n\
    \    }\n    if sumArrayValues % 2 == 0 {\n        i := 0\n        for ; j < k;\
    \ j++ {\n            array[j] = array[j+1]\n        }\n        array[k] = array[j]\n\
    \        k++\n        sumArrayValues += array[k]\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcs_xlhd_test.go:46:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := 0; i < len(array); i++ {\n        if array[i] < 0 {\n      \
    \      array[i], array[i] = array[i], array[len(array)-i-1]\n        }\n    }\n\
    \    len := len(array)\n    sum := 0\n    for i := 0; i < len; i++ {\n       \
    \ sum += array[i]\n    }\n    if sum%2 == 0 {\n        for i := 0; i < len; i++\
    \ {\n            array[len-i-1], array[i] = array[i], array[len-i-1]\n       \
    \ }\n    } else {\n        for i := 0; i < len; i++ {\n            array[len-i-1],\
    \ array[i] = array[i], array[len-i-1]\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpo_r2e8dv_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpo_r2e8dv_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpo_r2e8dv_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpo_r2e8dv_test.go:64: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpo_r2e8dv_test.go:64: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    length := len(array)\n    var arr []int\n   \
    \ var sum int\n    for i := 0; i < length; i++ {\n        sum += array[i]\n  \
    \      if sum%2 == 0 {\n            arr = append(arr, array[i])\n        } else\
    \ {\n            arr = append(arr, array[length-i-1])\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpgulgb9pt_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=3)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpgulgb9pt_test.go:57: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpgulgb9pt_test.go:57: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpgulgb9pt_test.go:57: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=87)\
    \ %!s(int=32) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpgulgb9pt_test.go:57: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := range array {\n        j := 0\n        for k := range array\
    \ {\n            if k == i {\n                break\n            } else {\n  \
    \              j++\n            }\n        }\n        if array[i] > array[j] {\n\
    \            array[i], array[j] = array[j], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpesq6ft1x_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpesq6ft1x_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpesq6ft1x_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpesq6ft1x_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpesq6ft1x_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075343
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code goes here\n    result := make([]int, 0, len(array))\n  \
    \  sum := 0\n    for _, i := range array {\n        sum += i\n    }\n    if sum%2\
    \ != 0 {\n        sort.Sort(sort.Reverse(array))\n    }\n    for _, i := range\
    \ array {\n        result = append(result, i)\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29f68tl3_test.go:30:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array := sort_array_test.Array\n    sort.Ints(array)\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r_kefdq_test.go:23:11: no new variables on left side of :=

    /tmp/tmp7r_kefdq_test.go:23:14: undefined: sort_array_test

    /tmp/tmp7r_kefdq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // code here\n    for i := 0; i < len(array); i++ {\n        j := i +\
    \ 1\n        for j; j < len(array); j++ {\n            if array[i] < array[j]\
    \ {\n                array[i], array[j] = array[j], array[i]\n            }\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckmaes0s_test.go:26:13: j (variable of type int) is not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sorted_array := make([]int, len(array))\n    sorted_array_length := len(array)\n\
    \    for i := 0; i < sorted_array_length; i++ {\n        j := i\n        for j\
    \ > 0 && array[j-1] > array[j] {\n            array[j], array[j-1] = array[j-1],\
    \ array[j]\n            j, j = j-1, j-1\n        }\n        sorted_array[i] =\
    \ array[j]\n    }\n    return sorted_array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9hqy9c_2_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp9hqy9c_2_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp9hqy9c_2_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp9hqy9c_2_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9hqy9c_2_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // O(1) time complexity\n    if len(array) <= 1 {\n        return array\n\
    \    }\n\n    // O(n) time complexity\n    var sum = 0\n    for _, val := range\
    \ array {\n        sum += val\n    }\n    var flag = 0\n    if sum%2 == 0 {\n\
    \        flag = 1\n    }\n    sort.Slice(array, func(i int, j int) bool {\n  \
    \      return flag == (sum-array[j])%2\n    })\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2z5246g_test.go:37:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := range array {\n        if array[i] < array[i+1] {\n        \
    \    array[i], array[i+1] = array[i+1], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpdz5of6sz_test.go:24\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpdz5of6sz_test.go:39\
    \ +0x7ac\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var i, j int\n    arrayCopy := make([]int, len(array))\n    // O(n *\
    \ 2) == O(n)\n    for i := 0; i < len(arrayCopy); i++ {\n        arrayCopy[i]\
    \ = array[i]\n    }\n    // O(logn)\n    sortArrayInAscending(arrayCopy)\n   \
    \ for j = 1; j < len(arrayCopy); j++ {\n        if arrayCopy[j-1] > arrayCopy[j]\
    \ {\n            swap(arrayCopy, j, j-1)\n        }\n    }\n    return arrayCopy\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7c3op2xo_test.go:23:9: i declared but not used

    /tmp/tmp7c3op2xo_test.go:30:5: undefined: sortArrayInAscending

    /tmp/tmp7c3op2xo_test.go:33:13: undefined: swap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var (\n        sum   = 0\n        swap bool = false\n        ints []int\n\
    \    )\n    for _, value := range array {\n        sum += value\n        if sum%2\
    \ == 0 {\n            ints = append(ints, value)\n        } else {\n         \
    \   ints = append(ints, -value) // reverse order\n            swap = true\n  \
    \      }\n    }\n\n    // if any int is 0, ignore it from the array\n    for _,\
    \ value := range ints {\n        if value == 0 {\n            continue\n     \
    \   }\n        if swap {\n            swap = false\n            ints[len(ints)-1],\
    \ ints[len(ints)] = ints[len(ints)], ints[len(ints)-1]\n        } else {\n   \
    \         ints[len(ints)-1], ints[len(ints)] = ints[len(ints)-1], ints[len(ints)]\
    \ // reverse order\n            swap = true\n        }\n    }\n    return ints\n\
    }\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000c4550, 0x1, 0x37930?})\n\
    \t/tmp/tmp3z2eagqq_test.go:45 +0x168\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp3z2eagqq_test.go:61 +0x9b\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075344
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for _, x := range array {\n        sum += x\n    }\n\
    \    if sum%2 != 0 {\n        sort.Sort(array)\n    } else {\n        sort.Sort(sort.Reverse(array))\n\
    \    }\n    return array\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=go |>\nIt has\
    \ been mentioned that you should avoid using reflection for such operations. But\
    \ it can be done using reflection, so that doesn't mean we should avoid using\
    \ reflection.\nIn your case, we can define a method to sort a slice.\n<code>\n\
    type slice []int\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpccz1s45k_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075343
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    var result []int\n\n    for _, value := range array {\n\
    \        sum += value\n    }\n\n    if sum%2 == 1 {\n        result = append(result,\
    \ array...)\n    } else {\n        result = append(result, array[len(array)-1],\
    \ array...)\n    }\n\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa_mji9l3_test.go:33:54:\
    \ too many arguments in call to append\n\thave ([]int, int, []int)\n\twant ([]int,\
    \ ...int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Ints(array)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifyp61f0_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    sum := 0\n    for _, i := range array {\n   \
    \     sum += i\n    }\n    \n    if sum%2 == 0 {\n        sort.SliceStable(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    } else {\n        sort.SliceStable(array, func(i, j int) bool {\n       \
    \     return array[i] > array[j]\n        })\n    }\n    \n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxdqpr_g_test.go:30:9: undefined: sort

    /tmp/tmpxxdqpr_g_test.go:34:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    cogoArray := make([]int, len(array))\n    for i := range array {\n  \
    \      cogoArray[i] = array[i]\n    }\n\n    // Sort array in ascending order\
    \ if the sum is odd, or in descending order if the sum is even.\n    if sum (cogoArray[0],\
    \ cogoArray[len(cogoArray)-1]) % 2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(cogoArray)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(cogoArray))\n    }\n\n    return\
    \ cogoArray\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jaxiwec_test.go:29:8: undefined: sum

    /tmp/tmp1jaxiwec_test.go:30:9: undefined: sort

    /tmp/tmp1jaxiwec_test.go:32:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := range array {\n        if i == 0 {\n            continue\n \
    \       }\n        total := array[0] + array[i]\n        if total % 2 == 1 {\n\
    \            array[i], array[0] = array[0], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp2us_25uw_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp2us_25uw_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=4) %!s(int=2) %!s(int=3)\
    \ %!s(int=0) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp2us_25uw_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=15) %!s(int=42)\
    \ %!s(int=87) %!s(int=32) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075344
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: Write the correct code here.\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8lnbtxtj_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp8lnbtxtj_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp8lnbtxtj_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp8lnbtxtj_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8lnbtxtj_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075344
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sorted_array := make([]int, 0)\n\n    for i := 0; i < len(array); i++\
    \ {\n        index := i\n        for index > 0 && sorted_array[index-1] < array[index]\
    \ {\n            sorted_array = append(sorted_array, array[index-1])\n       \
    \     index -= 1\n        }\n\n        if index == 0 {\n            sorted_array\
    \ = append(sorted_array, array[index])\n        } else {\n            sorted_array\
    \ = append(sorted_array, array[index])\n        }\n    }\n\n    return sorted_array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp274yvw97_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmp274yvw97_test.go:61: expected\
    \ '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=1)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp274yvw97_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp274yvw97_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=42) %!s(int=15) %!s(int=15) %!s(int=87) %!s(int=42) %!s(int=15) %!s(int=15)\
    \ %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n\
    \        tmp274yvw97_test.go:61: expected '[%!s(int=23) %!s(int=21) %!s(int=14)\
    \ %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=14) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075345
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var list = get_arrays(array)\n    list = sort_arrays(list)\n    var newArray\
    \ []int\n    for _, v := range list {\n        newArray = append(newArray, v)\n\
    \    }\n    return newArray\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqvrf4vpp_test.go:23:16: undefined: get_arrays

    /tmp/tmpqvrf4vpp_test.go:24:12: undefined: sort_arrays

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum, i, j, k int\n    sum := 0\n    for _, item := range array {\n\
    \        sum += item\n    }\n    for _, item := range array {\n        i++\n \
    \   }\n    for _, item := range array {\n        j--\n    }\n    for _, item :=\
    \ range array {\n        if sum%2 == 0 {\n            k = i\n        } else {\n\
    \            k = j\n        }\n        fmt.Println(sum, i, j, k)\n        if array[k]\
    \ < array[i] {\n            array[i], array[k] = array[k], array[i]\n        }\n\
    \        sum -= array[i]\n        sum -= array[j]\n    }\n    return array\n}\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29m106en_test.go:24:9: no new variables on left side of :=

    /tmp/tmp29m106en_test.go:28:12: item declared but not used

    /tmp/tmp29m106en_test.go:31:12: item declared but not used

    /tmp/tmp29m106en_test.go:34:12: item declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n\n    sum := sum(array[0],\
    \ array[len(array)-1])\n    switch sum%2 {\n    case 0:\n        array[0], array[len(array)-1]\
    \ = array[len(array)-1], array[0]\n        array = sort_array(array[0:len(array)])\n\
    \    default:\n        array[0], array[len(array)-1] = array[len(array)-1], array[0]\n\
    \        array = sort_array(array[0:len(array)])\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6e2h_hcr_test.go:27:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    for _, value := range array {\n        result =\
    \ append(result, value)\n    }\n    sort.SliceStable(result, func(i, j int) bool\
    \ {\n        return result[(i+1)/2] > result[(j+1)/2]\n    })\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbj2pf91u_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n\n    if length == 0 {\n        return []int{}\n\
    \    }\n\n    // sort list from 0 to length-1 if sum of first and last elements\
    \ is odd\n    if array[length/2-1] > array[length/2+1] {\n        fmt.Println(\"\
    asc\")\n        sort.Ints(array)\n    } else {\n        fmt.Println(\"desc\")\n\
    \        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n    return array\n\
    }\n</code>\n<|/ a dscore=1 tags=go |>\n<| c |>\nHi Sayan! Thanks for your answer!\
    \ But I still have a problem.... I wrote a code similar to your solution and it\
    \ works fine on my local machine but fails when I run it on the golang playground:\n\
    \nhttps://play.golang.org/p/8UJ8gUjLJvE\n\nI cannot understand why is this happening,\
    \ I have checked the program and it's completely the same!\n<|/ c |>\n<| c |>\n\
    I think I find the reason, I'll add it as an answer. Thanks for the help!\n<|/\
    \ c |>\n<| a dscore=1 |>\nThanks to everyone for the help. After trying a lot\
    \ on the playground I came to the conclusion that there was a problem with the\
    \ golang.org/x/tools package that I was using and after updating it to latest\
    \ version it works.\n<|/ a tags=go |>\n<| c |>\nThanks for posting your solution.\
    \ The problem is, it's not actually a solution. That's why the other answers seem\
    \ to be more appropriate.\n<|/ c |>\n<| c |>\nYeah, this was only to show a working\
    \ solution. It doesn't work in the playground. I'll have to find a way to fix\
    \ it or find a better solution.\n<|/ c |>\n<| c |>\nIt does work in the playground.\
    \ You just need to wait for the next golang.org/x/tools release to fix it.\n<|/\
    \ c |>\n<| c |>\nAh ok thanks! I'll try to wait till then.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe other answers don't solve the problem of sorting a slice containing\
    \ \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb0f7si2v_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    start := 0\n  \
    \  end := len(array) - 1\n\n    if array[start] % 2 != 0 {\n        end -= 1\n\
    \    }\n    if array[end] % 2 != 0 {\n        start += 1\n    }\n    switch {\n\
    \    case start > end:\n        return array\n    case array[start] >= array[end]:\n\
    \        return append(sort_array(array[0:start]), array[0:end])\n    case array[end]\
    \ >= array[start]:\n        return append(sort_array(array[start:end]), array[0:start])\n\
    \    default:\n        return append(sort_array(array[0:start]), append(sort_array(array[start:end]),\
    \ array[0:end]))\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnojkf4ox_test.go:39:56: cannot use array[0:end] (value of type []int)
    as type int in argument to append

    /tmp/tmpnojkf4ox_test.go:41:58: cannot use array[0:start] (value of type []int)
    as type int in argument to append

    /tmp/tmpnojkf4ox_test.go:43:51: cannot use append(sort_array(array[start:end]),
    array[0:end]) (value of type []int) as type int in argument to append

    /tmp/tmpnojkf4ox_test.go:43:93: cannot use array[0:end] (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    i, j := 0, 0\n    for ; i < len(array); i++ {\n\
    \        j = 0\n        while j < len(array) {\n            if array[j]+i < array[j+1]\
    \ {\n                break\n            }\n            j += 1\n        }\n   \
    \     if j == len(array) {\n            result = append(result, array[i])\n  \
    \      } else {\n            result = append(result, array[j], array[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqx4_pmzd_test.go:27:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075344
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var newArray []int\n\n    // The sum of the first index and last index\
    \ of the original list is divisible by 2\n    if (sumOfFirstAndLast(array) % 2\
    \ == 0) {\n        // Sort it in descending order\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        // Sort it in ascending order\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n\n    // Copy the sorted array to the new array\n    for _, v := range\
    \ array {\n        newArray = append(newArray, v)\n    }\n\n    return newArray\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbft3hr_h_test.go:26:9: undefined: sumOfFirstAndLast

    /tmp/tmpbft3hr_h_test.go:28:9: undefined: sort

    /tmp/tmpbft3hr_h_test.go:31:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here\n\n    // base case\n    if len(array) == 0 {\n\
    \        return []int{}\n    }\n\n    // base case\n    if array[0] > array[1]\
    \ {\n        array[0], array[1] = array[1], array[0]\n    }\n    sum, i := 0,\
    \ 0\n    for i < len(array) {\n        // increment index value\n        i +=\
    \ 1\n\n        // increment sum\n        sum += array[i]\n\n        // swap if\
    \ the sum is odd\n        if sum%2 != 0 {\n            array[i], array[i-1] =\
    \ array[i-1], array[i]\n            sum, i = sum, i\n        }\n    }\n    //\
    \ return sorted array\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x0?, 0xd0?})\n\
    \t/tmp/tmpfeytis6c_test.go:31 +0xa5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpfeytis6c_test.go:60 +0x90\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // return nil if array is nil\n    if array == nil {\n        return\
    \ nil\n    }\n    sumIndex := 0\n    sumArray := 0\n    for _, v := range array\
    \ {\n        sumArray += v\n    }\n    if sumArray > 0 {\n        sumIndex = sumArray\
    \ % 2\n    }\n    sort.Ints(array)\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4gkig75u_test.go:27:5: sumIndex declared but not used

    /tmp/tmp4gkig75u_test.go:35:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    sort.Sort(sort.IntSlice(array))\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8c6e90t9_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, value := range array {\n        sum += value\n \
    \   }\n\n    // The first index is the sum of the first value in the list\n  \
    \  // and the last index is the sum of the last value in the list\n    if sum%2\
    \ != 0 {\n        return append([]int{}, array...)\n    }\n    return append([]int{},\
    \ array[:len(array)-1]...)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpzuwz1b1e_test.go:33\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpzuwz1b1e_test.go:43\
    \ +0x1c\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075346
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    sum := array[0]\n\
    \    slice := make([]int, 0, len(array))\n    for _, num := range array {\n  \
    \      sum += num\n        slice = append(slice, num)\n    }\n    fmt.Println(sum)\n\
    \    sort.Ints(slice)\n    fmt.Println(slice)\n    return slice\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49uwi_mh_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    array := array[:len(array):len(array)]\n\
    \n    var isOdd bool = false\n    for _, val := range array {\n        if val\
    \ <= 0 {\n            break\n        }\n        if isOdd {\n            isOdd\
    \ = (val%2 == 1)\n        } else {\n            isOdd = (val%2 == 0)\n       \
    \ }\n    }\n\n    if !isOdd {\n        sort.Ints(array)\n    } else {\n      \
    \  sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n\n    return array\n\
    }\n`\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8y_i2cz6_test.go:49:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n\n    if len(array) == 0 {\n        return result\n\
    \    }\n\n    var left []int\n    var right []int\n\n    for _, v := range array\
    \ {\n        left = append(left, v)\n    }\n    for _, v := range array {\n  \
    \      right = append(right, v)\n    }\n\n    if left[len(left)-1] <= right[0]\
    \ {\n        result = append(result, left[0])\n    }\n\n    for index := len(left)\
    \ - 1; index > 0; index-- {\n        if left[index-1] > left[index+1] {\n    \
    \        result := append(result, left[index])\n            left = left[0:index]\n\
    \            copy(left, right[0:len(right)])\n            return result\n    \
    \    }\n    }\n\n    return result\n}\n`\n\nvar sort_array_tests = []string{\n\
    \    `package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmptg2irb8i_test.go:54:1: expected declaration,\
    \ found `\n\nvar sort_array_tests = []string{\n    `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075345
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n\n\
    \    if sum%2 == 1 {\n        sort.Slice(array, func(i, j int) bool {\n      \
    \      return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n\n    return array\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2czgqd91_test.go:29:9: undefined: sort

    /tmp/tmp2czgqd91_test.go:33:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum, _ := checkSum(array)\n    return sortArray(array, sum)\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5ba6p2b_test.go:23:15: undefined: checkSum

    /tmp/tmpi5ba6p2b_test.go:24:12: undefined: sortArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sorted, tmp := make([]int, 0, len(array))\n    for _, val := range array\
    \ {\n        sorted = append(sorted, val)\n    }\n    sort.Sort(sort)\n    if\
    \ isOdd(sumInt(sorted[0], sorted[len(sorted)-1])) {\n        sorted = append(sorted,\
    \ sorted[len(sorted)-1])\n        sorted = append(sorted, sorted[0])\n    } else\
    \ {\n        sorted = append(sorted, sorted[len(sorted)-1])\n        sorted =\
    \ append(sorted, sorted[len(sorted)-1])\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphougk4gd_test.go:23:20: assignment mismatch: 2 variables but make returns
    1 value

    /tmp/tmphougk4gd_test.go:27:5: undefined: sort

    /tmp/tmphougk4gd_test.go:28:8: undefined: isOdd

    /tmp/tmphougk4gd_test.go:28:14: undefined: sumInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    if len(array) == 0 {\n        return result\n \
    \   }\n\n    var first_index int\n    var last_index int\n    var sum int\n  \
    \  first_index = 0\n    last_index = len(array) - 1\n    sum = 0\n    for i :=\
    \ 0; i < len(array); i++ {\n        sum += array[i]\n    }\n\n    if sum%2 ==\
    \ 1 {\n        result = append(result, array[last_index])\n    } else {\n    \
    \    result = append(result, array[0])\n    }\n\n    for i := 0; i < len(array);\
    \ i++ {\n        sum += array[i]\n        if sum%2 != 0 {\n            result\
    \ = append(result, array[i])\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9h4rdjee_test.go:28:9: first_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var length int = len(array)\n    for i:=0; i<length;\
    \ i++ {\n        sum += array[i]\n        if sum%2==0 {\n            result =\
    \ append(result, array[i])\n        } else {\n            result = append(result,\
    \ array[i])\n            result =append(result, array[length-1])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_25d46__test.go:26:9: undefined: sum

    /tmp/tmpe_25d46__test.go:27:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"PATCH list\")\n    var sortedArray []int\n    sum := array[0]\n\
    \    for i := 1; i < len(array); i++ {\n        sum += array[i]\n    }\n    fmt.Printf(\"\
    sum: %v\\n\", sum)\n    if sum%2 == 1 {\n        sortedArray = make([]int, 0,\
    \ len(array))\n        for i := 1; i < len(array); i++ {\n            sortedArray\
    \ = append(sortedArray, array[i])\n        }\n    } else {\n        sortedArray\
    \ = make([]int, 0, len(array)+1)\n        for i := 1; i < len(array); i++ {\n\
    \            sortedArray = append(sortedArray, array[len(array)-1-i])\n      \
    \  }\n        sortedArray = append(sortedArray, 0)\n    }\n    return sortedArray\n\
    }\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "PATCH list\n--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index\
    \ out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out\
    \ of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000f5cd8, 0x0, 0x37930?})\n\
    \t/tmp/tmpqxaf9nq6_test.go:25 +0x2f4\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpqxaf9nq6_test.go:51 +0x4b\ntesting.tRunner(0xc0001a0340, 0x5290f0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    sort.Slice(array, func(i, j int) bool {\n\
    \        var res int\n        if sumInt(array[i], array[j]) % 2 == 1 {\n     \
    \       res = -1\n        } else {\n            res = 1\n        }\n        return\
    \ res\n    })\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb95ap24i_test.go:24:5: undefined: sort

    /tmp/tmpb95ap24i_test.go:26:12: undefined: sumInt

    /tmp/tmpb95ap24i_test.go:31:16: cannot use res (variable of type int) as type
    bool in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array[1] < array[0] {\n        sort.Sort(sort.Reverse(sortArray))\n\
    \    } else {\n        sort.Sort(sortArray)\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3xn41w6_test.go:24:9: undefined: sort

    /tmp/tmp_3xn41w6_test.go:24:32: undefined: sortArray

    /tmp/tmp_3xn41w6_test.go:26:9: undefined: sort

    /tmp/tmp_3xn41w6_test.go:26:19: undefined: sortArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    lenArray := len(array)\n    i := 0\n   \
    \ j := 0\n    k := 0\n\n    sum := 0\n    max := array[0]\n    for k < lenArray\
    \ {\n        sum += array[k]\n        if sum%2 == 0 {\n            if max%2 >\
    \ 0 {\n                array[k] ^= max\n            } else {\n               \
    \ array[k] ^= max\n                array[k] ^= max\n            }\n        } else\
    \ {\n            if max%2 == 0 {\n                array[k] ^= max\n          \
    \      array[k] ^= max\n            } else {\n                array[k] ^= max\n\
    \                array[k] ^= max\n            }\n        }\n        max = array[k]\n\
    \        k = k + 1\n    }\n\n    return array\n}\n</code>\n<|/ a tags=go,arrays,sorting\
    \ |>\n<| c |>\nIf `len(array)` is `0`, then `sum` will be `0`, which won't be\
    \ even.\n<|/ c |>\n<| c |>\nThanks for your suggestion, I have updated my answer.\n\
    <|/ c |>\n<| a tags=go,arrays,sorting |>\nThis can be done in O(n) time complexity.\
    \ Go can sort an array in O(nlogn) time complexity since it uses merge sort. \n\
    This solution takes O(n) time.\n<code>\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtcj3vit_test.go:55:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    result := make([]int, len(array))\n    for i := 0; i < len(array); i++\
    \ {\n        result[i], _ = sort_array_test(array[i])\n    }\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp844uzdod_test.go:25:24: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075346
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    sum := 0\n    for _, num := range array {\n   \
    \     sum += num\n    }\n    if sum%2 != 0 {\n        sort.Slice(array, func(i,\
    \ j int) bool {\n            return array[i] < array[j]\n        })\n    } else\
    \ {\n        sort.Slice(array, func(i, j int) bool {\n            return array[i]\
    \ > array[j]\n        })\n    }\n    result = array[:]\n    return result\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tqq36z9_test.go:29:9: undefined: sort

    /tmp/tmp4tqq36z9_test.go:33:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    var sum int\n    for _, val := range array {\n\
    \        sum += val\n    }\n    if sum%2 != 0 {\n        for _, val := range array\
    \ {\n            result = append(result, val)\n        }\n    } else {\n     \
    \   for _, val := range array {\n            result = append(result, val*-1)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpw0inc_lt_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpw0inc_lt_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpw0inc_lt_test.go:59: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpw0inc_lt_test.go:59: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpw0inc_lt_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n\n    sum := 0\n    for _, value := range array {\n\
    \        sum += value\n    }\n\n    if sum%2 == 1 {\n        for _, value := range\
    \ array {\n            result += value\n        }\n    } else {\n        for _,\
    \ value := range array {\n            result = append(result, -value+sum)\n  \
    \      }\n    }\n\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2b3dzp7s_test.go:32:13: invalid operation: result += value (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    l := len(array)\n    sum := 0\n    for i := 0; i < l; i++ {\n       \
    \ sum += array[i]\n    }\n    sorted := make([]int, l)\n    if sum%2 == 1 {\n\
    \        for i := 0; i < l; i++ {\n            sorted[sortIdx(sum, i, array)]++\n\
    \        }\n    } else {\n        for i := 0; i < l; i++ {\n            sorted[sortIdx(sum,\
    \ i, array)] = array[sortIdx(sum, i, array)]\n        }\n    }\n    return sorted\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp703ng0xg_test.go:31:20: undefined: sortIdx

    /tmp/tmp703ng0xg_test.go:35:52: undefined: sortIdx

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0]\n    i := 0\n    for _, v := range array {\n        sum\
    \ += v\n        if sum%2 != 0 {\n            array = append(array[i+1:], v)\n\
    \            i++\n        } else {\n            array = append(array, v)\n   \
    \     }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpriddy5og_test.go:23\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpriddy5og_test.go:44\
    \ +0x18\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    sum := 0\n    for\
    \ _, i := range array {\n        sum += i\n    }\n\n    if sum%2 == 0 {\n    \
    \    sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(sort.Reverse(sort.Ints(array)))\n\
    \    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykpxky9i_test.go:32:9: undefined: sort

    /tmp/tmpykpxky9i_test.go:34:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // code here\n    total = 0\n    for _, num := range array {\n      \
    \  total += num\n    }\n    odd = total % 2 == 0\n    if odd {\n        for _,\
    \ num := range array {\n            if num > 0 {\n                array[0], array[1]\
    \ = array[1], num\n                total--\n            }\n        }\n    } else\
    \ {\n        for _, num := range array {\n            if num > 0 {\n         \
    \       array[0], array[len(array)-1] = array[len(array)-1], num\n           \
    \     total--\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptggv6w3h_test.go:24:5: undefined: total

    /tmp/tmptggv6w3h_test.go:26:9: undefined: total

    /tmp/tmptggv6w3h_test.go:28:5: undefined: odd

    /tmp/tmptggv6w3h_test.go:28:11: undefined: total

    /tmp/tmptggv6w3h_test.go:29:8: undefined: odd

    /tmp/tmptggv6w3h_test.go:33:17: undefined: total

    /tmp/tmptggv6w3h_test.go:40:17: undefined: total

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // sort descending\n    sorted := make([]int, len(array))\n    for i\
    \ := range array {\n        // sort ascending if sum of first and last elements\
    \ is odd\n        if array[i] > 0 && array[i+1] > 0 {\n            sorted[i] =\
    \ array[i] + array[i+1]\n        } else {\n            sorted[i] = array[i]\n\
    \        }\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpldhnf355_test.go:27\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpldhnf355_test.go:44\
    \ +0x919\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n    // return sortList\n}\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphm0afsg1_test.go:25:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    return sort_array_test(array)\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0882fsi5_test.go:24:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sums []int\n    for _, v := range array {\n        sums = append(sums,\
    \ v)\n    }\n    fmt.Printf(\"%v\\n\", sums)\n    sort.SliceStable(sums, func(i,\
    \ j int) bool {\n        return sums[i] < sums[j]\n    })\n    return sums\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0763am79_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    s := 0\n    e := 0\n    sort.Sort(sortSliceIntSlice(array, s, e))\n \
    \   return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyf_o5f5a_test.go:25:5: undefined: sort

    /tmp/tmpyf_o5f5a_test.go:25:15: undefined: sortSliceIntSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return sort_array2(array)\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8otr7d5_test.go:23:12: undefined: sort_array2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sorted = make([]int, len(array))\n    var sumOfValues int\n    for\
    \ i, value := range array {\n        sorted[i] = value\n        sumOfValues +=\
    \ value\n    }\n    if sumOfValues&1 == 1 {\n        fmt.Println(\"Sort ascending\"\
    )\n        sort.Slice(sorted, func(i, j int) bool {\n            return sorted[i]\
    \ > sorted[j]\n        })\n    } else {\n        fmt.Println(\"Sort descending\"\
    )\n        sort.Slice(sorted, func(i, j int) bool {\n            return sorted[i]\
    \ < sorted[j]\n        })\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gu9nqc8_test.go:31:9: undefined: sort

    /tmp/tmp5gu9nqc8_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := 0; i < len(array); i++ {\n        if sum((array[i], array[len(array)-1-i]))\
    \ % 2 != 0 {\n            sort.Sort(array[:i])\n            sort.Sort(array[len(array):])\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpirj_56_o_test.go:24:25: expected '')'', found '',''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sort.Slice(array, func(i, j int) bool {\n        sum := array[i] + array[j]\n\
    \        if sum%2 != 0 {\n            return true\n        } else {\n        \
    \    return false\n        }\n    })\n\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1kh33vz_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your solution here\n    array2 := make([]int, len(array))\n\
    \    array2 := sort_array_test(array, array2)\n    return array2\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9l1vg2j_test.go:25:12: no new variables on left side of :=

    /tmp/tmpz9l1vg2j_test.go:25:15: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, v := range array {\n        sum += v\n    }\n  \
    \  if sum%2 != 0 {\n        sort.Slice(array, func(i, j int) bool {\n        \
    \    return array[j] < array[i]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[j] > array[i]\n        })\n\
    \    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0ypwzmg_test.go:28:9: undefined: sort

    /tmp/tmpy0ypwzmg_test.go:32:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // initialize result array\n    var result []int\n    \n    // get the\
    \ sum of the first and last value of the given array\n    // if the sum is odd,\
    \ then sort the array in descending order\n    // otherwise sort the array in\
    \ ascending order\n    sum := 0\n    for _, value := range array {\n        sum\
    \ += value\n    }\n    if sum%2 == 1 {\n        for _, value := range array {\n\
    \            result = append(result, value)\n        }\n    } else {\n       \
    \ for _, value := range array {\n            result = append(result, value)\n\
    \        }\n    }\n    \n    // sort the result array\n    sort_result := sort_array_test(result)\n\
    \    \n    // return the sorted result array\n    return sort_result\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpom8e4ios_test.go:44:20: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: implement me\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyretetya_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyretetya_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyretetya_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyretetya_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyretetya_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sums []int\n    for _, v := range array {\n        sums = append(sums,\
    \ v)\n    }\n    // reverse it\n    for i := len(sums) - 1; i >= 0; i-- {\n  \
    \      sums[i], sums[len(sums)-i-1] = sums[len(sums)-i-1], sums[i]\n    }\n  \
    \  sort.Ints(sums)\n    return sums\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvezixa9_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 0 {\n        return array\n    }\n    length := len(array)\n\
    \    sum1 := array[0]\n    sum2 := array[length-1]\n    for i := 0; i < length-1;\
    \ i++ {\n        sum1 += array[i]\n        sum2 += array[i+1]\n        if sum1\
    \ < (sum2 << 1) {\n            array[i], array[i+1] = array[i+1], array[i]\n \
    \           i++\n        }\n    }\n    return array\n}\n`},\n        {title: \"\
    patch package\", code: `package sort_array_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpjvijuhfn_test.go:39:1: expected declaration,\
    \ found `},\n        {title: \"patch package\", code: `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Initialize sum variable\n    var sum int\n    for _, v := range array\
    \ {\n        sum += v\n    }\n    // Initialize index variables\n    var first,\
    \ last int\n    var odd, even int\n    // If sum is odd, sort it in ascending\
    \ order\n    if sum%2 == 0 {\n        first, last = 0, len(array)-1\n        odd\
    \ = 1\n        even = 0\n    } else {\n        first, last = 0, len(array)-1\n\
    \        odd, even = 1, 0\n    }\n    // Loop to find index and value of last\
    \ index\n    for index := first; index < last; index++ {\n        // Swap if the\
    \ sum of current index and next index are odd\n        if sum%2 != 0 {\n     \
    \       if index != odd {\n                temp := array[index]\n            \
    \    array[index] = array[index+1]\n                array[index+1] = temp\n  \
    \          }\n            sum += array[index]\n        }\n    }\n    return array\n\
    }\n</cell>\n<cell>\n%%sql \n\n-- Given a list of non-negative integers, return\
    \ a cogo of the given list after sorting,\n-- you will sort the given list in\
    \ ascending order if the sum( first index value, last index value) is odd,\n--\
    \ or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n-- Note:\n-- * don't change the given list.\n-- Examples:\n-- >>>\
    \ sort_array(string{})\n-- PATCH list\n-- >>> sort_array([]int{5})\n-- []int{5}\n\
    -- >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n-- []int{0, 1, 2, 3, 4, 5}\n-- >>>\
    \ sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n-- []int{6, 5, 4, 3, 2, 1, 0}\n-- >>>\
    \ sort_array([]int{0, 1, 2, 3, 4, 5})\n-- []int{0, 1, 2, 3, 4, 5}\n</cell>\n<cell>\n\
    # Run the cell to test your code:\n# NOTE: The cell is frozen, please run above\
    \ code first.\nassert(sort_array([]int{5}) == []int{5})\nassert(sort_array([]int{2,\
    \ 4, 3, 0, 1, 5}) == []int{0, 1, 2, 3, 4, 5})\nassert(sort_array([]int{2, 4, 3,\
    \ 0, 1, 5, 6}) == []int{6, 5, 4, 3, 2, 1, 0})\nassert(sort_array([]int{0, 1, 2,\
    \ 3, 4, 5}) == []int{0, 1, 2, 3, 4, 5})\n</cell>\n<text>\nPart II: Sort array\
    \ with index\n\n</text>\n<text>\nWrite a function that sort a list with index.\
    \ The list should look like:\n[1, 2, 3, 4]\n[1, 2, 3, 4, 5]\n[1, 3, 3, 4, 5]\n\
    [1, 3, 4, 5]\n[1, \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ka_pw0k_test.go:54:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum = 0\n    for _, i := range array {\n        sum += i\n    }\n\
    \n    if sum%2 == 1 {\n        for _, i := range array {\n            for j :=\
    \ i + 1; j < len(array); j++ {\n                array[j] = array[j-1]\n      \
    \      }\n        }\n    } else {\n        for _, i := range array {\n       \
    \     for j := i - 1; j >= 0; j-- {\n                array[j] = array[j+1]\n \
    \           }\n        }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_eduy82a_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_eduy82a_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_eduy82a_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_eduy82a_test.go:64: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_eduy82a_test.go:64: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := 0\n    for _, n := range array {\n        sum += n\n    }\n  \
    \  sort.Slice(array, func(i, j int) bool {\n        return sum-(array[i]+array[j])\
    \ < 0\n    })\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgesgv9g_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    total := 0\n    for _, val := range array {\n \
    \       total += val\n    }\n    if total % 2 != 0 {\n        result = append(result,\
    \ 0)\n    }\n    for _, val := range array {\n        total -= val\n        if\
    \ total % 2 != 0 {\n            result = append(result, val-1)\n        }\n  \
    \  }\n    return array\n}\n`\n\n<|/ file |>\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsc7998d0_test.go:39:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write code here\n    last := len(array) - 1\n    result := make([]int,\
    \ last)\n    total := 0\n    for i := 0; i < last; i++ {\n        total += array[i]\n\
    \        result[i] = array[i]\n    }\n\n    if total % 2 == 0 {\n        for i\
    \ := last; i > 0; i-- {\n            total -= result[i-1]\n            result[i]\
    \ = result[i-1]\n        }\n    } else {\n        for i := 0; i < last; i++ {\n\
    \            total -= result[i]\n            result[i] = result[i]\n        }\n\
    \    }\n    return result\n}\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x54a1a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x54a1a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc0000d3cd8, 0x5e3ea0?, 0x37930?})\n\
    \t/tmp/tmpv646dxwm_test.go:25 +0x35\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpv646dxwm_test.go:52 +0x4b\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Your code here\n    // fmt.Println(array)\n    sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    return array\n}\n`\n)\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvmjj7d5g_test.go:28:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var listOfValues []int\n    for _, value := range array {\n        listOfValues\
    \ = append(listOfValues, value)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(listOfValues)))\n\
    \    return listOfValues\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxool1szv_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if array[0] >\
    \ array[len(array)-1] {\n        sort.Ints(array)\n    } else {\n        sort.Ints(array[:len(array)-1])\n\
    \    }\n    sum := array[0] + array[len(array)-1]\n    if sum%2 == 0 {\n     \
    \   sort.Sort(sort.Reverse(sort.IntSlice(array[:len(array)-1])))\n    } else {\n\
    \        sort.Sort(sort.IntSlice(array[:len(array)-1]))\n    }\n    return array\n\
    }\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcs6fdm1_test.go:27:9: undefined: sort

    /tmp/tmprcs6fdm1_test.go:29:9: undefined: sort

    /tmp/tmprcs6fdm1_test.go:33:9: undefined: sort

    /tmp/tmprcs6fdm1_test.go:35:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n\n    var newArray\
    \ []int\n    j := 0\n    k := len(array) - 1\n    newArray = array[j:]\n    for\
    \ {\n        if k == 0 {\n            break\n        }\n        if j+1 < k {\n\
    \            if newArray[j+1] > newArray[j] {\n                newArray = append(newArray,\
    \ newArray[j])\n                j++\n            } else {\n                newArray\
    \ = append(newArray, newArray[k])\n                k--\n            }\n      \
    \  } else if newArray[j+1] > newArray[j] {\n            newArray = append(newArray,\
    \ newArray[j])\n            j++\n        } else {\n            newArray = append(newArray,\
    \ newArray[k])\n            k--\n        }\n    }\n    return newArray\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyokoe9y7_test.go:73: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpyokoe9y7_test.go:73:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)\
    \ %!s(int=6) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpyokoe9y7_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpyokoe9y7_test.go:73:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=42) %!s(int=87) %!s(int=32) %!s(int=11) %!s(int=0)\
    \ %!s(int=15) %!s(int=42) %!s(int=0) %!s(int=11) %!s(int=32) %!s(int=87) %!s(int=42)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpyokoe9y7_test.go:73:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=21)\
    \ %!s(int=14) %!s(int=23) %!s(int=11) %!s(int=11) %!s(int=23) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    var result []int\n\
    \    var firstVal int\n    var lastVal int\n    var tmpInt int\n    for _, value\
    \ := range array {\n        firstVal = value\n        break\n    }\n    for _,\
    \ value := range array {\n        lastVal = value\n        break\n    }\n    lastVal\
    \ += firstVal\n    if firstVal%2 == 0 && lastVal%2 == 0 {\n        result = append(result,\
    \ lastVal)\n        return result\n    }\n    tmpInt = firstVal\n    for _, value\
    \ := range array {\n        if tmpInt > value {\n            result = append(result,\
    \ tmpInt)\n            tmpInt = value\n        } else {\n            tmpInt +=\
    \ value\n        }\n    }\n    result = append(result, tmpInt)\n    return result\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpnbhnhoam_test.go:75: expected '[%!s(int=5)]', got '[%!s(int=10)]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpnbhnhoam_test.go:75:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n     \
    \   tmpnbhnhoam_test.go:75: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpnbhnhoam_test.go:75: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n     \
    \   tmpnbhnhoam_test.go:75: expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32)\
    \ %!s(int=42) %!s(int=87)]', got '[%!s(int=159) %!s(int=32) %!s(int=11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpnbhnhoam_test.go:75:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=42)\
    \ %!s(int=37) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075349
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n\n    for _, value := range array {\n        result\
    \ = append(result, value)\n    }\n\n    return sort_array_test(result)\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9v2wrcel_test.go:29:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sumOfArray int\n\n    for _, value := range array {\n        sumOfArray\
    \ = sumOfArray + value\n    }\n\n    if sumOfArray == 0 {\n        return array\n\
    \    }\n\n    if sumOfArray % 2 == 0 {\n        return sort_array_test(array,\
    \ sumOfArray) // descending\n    }\n\n    return sort_array_test(array, sumOfArray)\
    \ // ascending\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpog0wvgps_test.go:34:16: undefined: sort_array_test

    /tmp/tmpog0wvgps_test.go:37:12: undefined: sort_array_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write code here\n\n    var tmp int\n    total := 0\n    for _, i :=\
    \ range array {\n        total += i\n    }\n    if total %2 == 0 {\n        for\
    \ _, i := range array {\n            tmp = i\n            sort.Ints(array)\n \
    \           array[0] = tmp\n        }\n    } else {\n        for _, i := range\
    \ array {\n            tmp = i\n            sort.Ints(array)\n            array[len(array)-1]\
    \ = tmp\n        }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9ytgfpj_test.go:33:13: undefined: sort

    /tmp/tmpk9ytgfpj_test.go:39:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075348
