language: go_test.go
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return n%10 == 0\n        ? n%100 == 0\n            ? n%1000 == 0\n \
    \               ? n%10000 == 0\n                    ? n%100000 == 0\n        \
    \                ? n%1000000 == 0\n                            ? n%10000000 ==\
    \ 0\n                                ? n%1000000 == 0\n                      \
    \              ? n%1000000 == 0\n                                        ? n%1000000\
    \ == 0\n                                            ? n%1000000 == 0\n       \
    \                                         ? n%1000000 == 0\n                 \
    \                                   ? n%1000000 == 0\n                       \
    \                                 ? n%1000000 == 0\n                         \
    \                                   ? n%1000000 == 0\n                       \
    \                                         ? n%1000000 == 0\n                 \
    \                                                   ? n%1000000 == 0\n       \
    \                                                                 ? n%1000000\
    \ == 0\n                                                                     \
    \       ? n%1000000 == 0\n                                                   \
    \                             ? n%1000000 == 0\n                             \
    \                                                       ? n%1000000 == 0\n   \
    \                                                                            \
    \         ? n%1000000 == 0\n                                                 \
    \                                           ? n%1000000 == 0\n               \
    \                                                                            \
    \     ? n%1000000 == 0\n                                                     \
    \                                               ? n%1000000 == 0\n           \
    \                                                                            \
    \                 ? n%1000000 == 0\n                                         \
    \                                                                   ? n%1000000\
    \ == 0\n                                                                     \
    \                                           ? n%1000000 == 0\n               \
    \                                                                            \
    \                         ? n%1000000 == 0\n                                 \
    \                                                                            \
    \           ? n%1000000 == 0\n                                               \
    \                                                                            \
    \ ? n%1000000 == 0\n                                                         \
    \                                                                       ? n%1000000\
    \ == 0\n                                                                     \
    \                                                               ? n%1000000 ==\
    \ 0\n                                                                        \
    \                                                                ? n%1000000 ==\
    \ 0\n                                                                        \
    \                                                                    ? n%1000000\
    \ == 0\n                                                                     \
    \                                                                           ?\
    \ n%1000000 == 0\n                                                           \
    \                                                                            \
    \             ? n%1000000 == 0\n                                             \
    \                                                                            \
    \                               ? n%1000000 == 0\n                           \
    \                                                                            \
    \                                                     ? n%1000000 == 0\n     \
    \                                                                            \
    \                                                                            \
    \   ? n%1000000 == 0\n                                                       \
    \                                                                            \
    \                                 ? n%1000000 == 0\n                         \
    \                                                                            \
    \                                                                   ? n%1000000\
    \ == 0\n                                                                     \
    \                                                                            \
    \                           ? n%1000000 == 0\n                               \
    \                                                                            \
    \                                                                     ? n%1000000\
    \ == 0\n                                                                     \
    \                                                                            \
    \                                   ? n%1000000 == 0\n                       \
    \                                                                            \
    \                                                                            \
    \         ? n%1000000 == 0\n                                                 \
    \                                                                            \
    \                                                               ? n%1000000 ==\
    \ 0\n                                                                        \
    \                                                                            \
    \                                            ? n%1000000 == 0\n              \
    \                                                                            \
    \                                                                            \
    \                              ? n%1000000 == 0\n                            \
    \                                                                            \
    \                                                                            \
    \                    ? n%1000000 == 0\n                                      \
    \                                                                            \
    \                                                                            \
    \              ? n%1000000 == 0\n                                            \
    \                                                                            \
    \                                                                            \
    \            ? n%1000000 == 0\n                                              \
    \                                                                            \
    \                                                                            \
    \              ? n%1000000 == 0\n                                            \
    \                                                                            \
    \                                                                            \
    \                    ? n%1000000 == 0\n                                      \
    \                                                                            \
    \                                                                            \
    \                              ? n%1000000 == 0\n                            \
    \                                                                            \
    \                                                                            \
    \                                            ? n%1000000 == 0\n              \
    \                                                                            \
    \                                                                            \
    \                                                              ? n%1000000 ==\
    \ 0\n                                                                        \
    \                                                                            \
    \                                                                            \
    \        ? n%1000000 == 0\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                  ? n%1000000 == 0\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                ? n%1000000 ==\
    \ 0\n                                                                        \
    \                                                                            \
    \                                                                            \
    \                    ? n%1000000\nfunc TestStarts_One_Ends(t *testing.T) {\n \
    \ candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmk7quqv__test.go:12:9: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    c := 0\n    for i := 1; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            c += 1\n            if i%2 == 0\
    \ && n%i%2 == 0 {\n                c += 2\n            }\n            if n%i%2\
    \ == 0 {\n                c += 2\n            }\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpaeteva04_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpaeteva04_test.go:46:\
    \ expected '%!s(int=18)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpaeteva04_test.go:46: expected '%!s(int=180)', got '%!s(int=6)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpaeteva04_test.go:46:\
    \ expected '%!s(int=1800)', got '%!s(int=13)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpaeteva04_test.go:46: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <=\
    \ i; j++ {\n            if i == 1 && j == i {\n                // Trivial case.\n\
    \                count++\n            }\n            if j > i {\n            \
    \    // We have a prefix of two 1s.\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpe8tpf95g_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpe8tpf95g_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpe8tpf95g_test.go:44: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpe8tpf95g_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n%2 == 0 {\n        return\
    \ starts_one_ends(n/2)\n    }\n\n    // If n even, then 1 must start with the\
    \ even digit, and end with the odd\n    // digit. Otherwise it must start with\
    \ the odd digit and end with the even\n    // digit.\n    start := n % 100\n \
    \   if start < 10 {\n        return 1\n    }\n    return starts_one_ends(start\
    \ / 10) + 1\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpv51svts2_test.go:45: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpv51svts2_test.go:45:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpv51svts2_test.go:45: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpv51svts2_test.go:45:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    t := n\n    t += 1 // make room for n\n    c := 0\n    for i := 1; i\
    \ < n; i++ {\n        if t % i == 0 {\n            if t < 1000000000 {\n     \
    \           c++\n            } else {\n                c += 2\n            }\n\
    \        }\n        t /= i\n    }\n    return c\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5_02k6je_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5_02k6je_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5_02k6je_test.go:44: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5_02k6je_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5_02k6je_test.go:44: expected '%!s(int=18000)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    temp := 1\n    for temp <= n {\n        if temp%10 ==\
    \ 1 {\n            count++\n        }\n        temp++\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp1z65t0hp_test.go:39: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp1z65t0hp_test.go:39:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp1z65t0hp_test.go:39: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp1z65t0hp_test.go:39:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    start := n\n    end := 0\n    if n%10 == 1 {\n        end++\n    }\n\
    \    for n > 0 {\n        if n%10 == 1 {\n            end++\n        }\n     \
    \   if n%10 == 0 {\n            end--\n        }\n        n/=10\n    }\n    return\
    \ end - start\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpuyfmg6oz_test.go:45: expected '%!s(int=18)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpuyfmg6oz_test.go:45:\
    \ expected '%!s(int=180)', got '%!s(int=-3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpuyfmg6oz_test.go:45: expected '%!s(int=1800)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpuyfmg6oz_test.go:45:\
    \ expected '%!s(int=18000)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n += 1 // Make n positive\n    m := n\n    var s int\n    for {\n   \
    \     m /= 10\n        s += m >= n\n        if s == 0 {\n            break\n \
    \       }\n    }\n    return s\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8xhejo4_test.go:16:9: invalid operation: s += m >= n (mismatched types
    int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n <= 0 {\n        return 0\n    }\n    num := 0\n    start := 1\n\
    \    end := 1\n    for ; n > 0; n-- {\n        start = (start * 10) + n % 10\n\
    \        end = (end * 10) + n % 10\n        num += 1\n        if start == 1 {\n\
    \            start += end\n            end = 1\n        } else {\n           \
    \ end += start\n            start = 1\n        }\n    }\n    return num\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp98313oje_test.go:49: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp98313oje_test.go:49:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp98313oje_test.go:49: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp98313oje_test.go:49:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n <= 0 {\n        return -1\n    }\n    return countSingles(n, n)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7oq06lx3_test.go:14:12: undefined: countSingles

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 2 {\n        return 0\n    }\n\n    // We start with n = 2k +\
    \ 1, where k starts with 1.\n    // We then recurse on the remainder of n / 10.\n\
    \    // For each k, we add one to the count of n-digit integers that start or\
    \ end with 1.\n    // For n = 2k, we return (n * (n + 1) / 2) + ((n * n) / 2)\
    \ / 2 = ((2k + 1) * n) / 2k.\n    // For n = 2k + 2, we return ((2k + 1) * n)\
    \ / 2k + 2k = ((2k + 2) * n) / 2k.\n\n    // To avoid overflow, we start by assuming\
    \ that n is too big for an int64.\n    // This can then be corrected at the end.\n\
    \    n |= 1\n\n    var count = 0\n\n    for k := 0; k <= 9; k++ {\n        count\
    \ += ((n * n) / 2) + ((n * n) / 2) / 2 // count the k-digit integers that start\
    \ or end with 1\n        n = n / 10\n    }\n\n    return count + (n & 1)\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpch2maf1k_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpch2maf1k_test.go:52:\
    \ expected '%!s(int=18)', got '%!s(int=6)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpch2maf1k_test.go:52: expected '%!s(int=180)', got '%!s(int=6)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpch2maf1k_test.go:52:\
    \ expected '%!s(int=1800)', got '%!s(int=18)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpch2maf1k_test.go:52: expected '%!s(int=18000)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        n = 0\n    }\n    result := 0\n    for i := 0; i\
    \ < n; i++ {\n        if n%10 == 1 {\n            result++\n        }\n      \
    \  n /= 10\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5z91g6bf_test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5z91g6bf_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5z91g6bf_test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5z91g6bf_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // The number is positive so long as n is greater than or equal to 10.\n\
    \    if n <= 10 {\n        return n\n    }\n\n    // If n is greater than 10,\
    \ then it is divisible by 3, hence it does not\n    // start or end with 1.\n\
    \    if n % 3 == 0 {\n        return 0\n    }\n\n    // If n is divisible by 3,\
    \ then it is divisible by 5, hence it does not\n    // start or end with 1.\n\
    \    if n % 5 == 0 {\n        return 0\n    }\n\n    // Otherwise, iterate through\
    \ the digits from 100 to 9 and add 1 to\n    // each digit that starts or ends\
    \ with 1.\n    var count int\n    for d := 100; d >= 0; d /= 10 {\n        if\
    \ n >= d {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmprbe49wmg_test.go:56: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmprbe49wmg_test.go:56:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmprbe49wmg_test.go:56: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmprbe49wmg_test.go:56:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          if n%(i-1) == 1 {\n                count++\n            }\n       \
    \     if n%(i+1) == 1 {\n                count++\n            }\n        }\n \
    \   }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpl8kwb7v4_test.go:14\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpl8kwb7v4_test.go:32\
    \ +0x53a\ntesting.tRunner(0xc0001a0340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    start := 0\n    end := 10\n    count := 0\n    for i := 1; i <= n; i++\
    \ {\n        if n%i == 0 {\n            start = i\n        } else {\n        \
    \    end = i\n        }\n        count += 1\n    }\n    return count\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1sdwvsmn_test.go:11:5: start declared but not used

    /tmp/tmp1sdwvsmn_test.go:12:5: end declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    if n < 10 {\n        count++\n    }\n    for i := 1;\
    \ i <= n/10; i++ {\n        if n%10 == 1 {\n            count++\n        } else\
    \ if n%10 == 0 {\n            count--\n        }\n    }\n    return count\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpaj94lvr6_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpaj94lvr6_test.go:42:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpaj94lvr6_test.go:42: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpaj94lvr6_test.go:42:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Write your code here\n    var count int\n    for i := 0; i < n; i++\
    \ {\n        if i%10 == 1 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpznxf227g_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpznxf227g_test.go:38:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpznxf227g_test.go:38: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpznxf227g_test.go:38:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpznxf227g_test.go:38: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    one := int64(1)\n    two_one := two(one)\n\n    count := 0\n    i :=\
    \ n - 1\n    for n > 0 && i > -1 {\n        if n >= two_one {\n            count\
    \ += n - two_one\n            n -= two_one\n            i -= two_one\n       \
    \ }\n        two_one = two(one_and_neg(one))\n        count += int(i == two_one)\n\
    \        one = one_and_neg(one_and_neg(one))\n    }\n\n    return count\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpklhz_tk5_test.go:12:16: undefined: two

    /tmp/tmpklhz_tk5_test.go:22:19: undefined: two

    /tmp/tmpklhz_tk5_test.go:22:23: undefined: one_and_neg

    /tmp/tmpklhz_tk5_test.go:24:15: undefined: one_and_neg

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n\n    p := int64(1)\n\n    for\
    \ i := 0; i < n; i++ {\n        p = p * 10 + 1\n        if p % 10 == 1 {\n   \
    \         return i + 1\n        }\n    }\n\n    return -1\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpfmsdchrh_test.go:44: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpfmsdchrh_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpfmsdchrh_test.go:44: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpfmsdchrh_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n += n % 10\n    c := 0\n    for x := n; x > 0; x /= 10 {\n        if\
    \ x%10 == 1 {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp7bk9yx9d_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7bk9yx9d_test.go:38:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp7bk9yx9d_test.go:38: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7bk9yx9d_test.go:38:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp7bk9yx9d_test.go:38: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        switch {\n        case\
    \ i+1 == n || i+2 == n:\n            count++\n        case i+1 != n && i+2 !=\
    \ n:\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpk87i8kny_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpk87i8kny_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpk87i8kny_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpk87i8kny_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return\
    \ 1\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n  \
    \      return 2\n    }\n\n    one_starts_1 := starts_one_ends(n - 1)\n    one_ends_1\
    \ := starts_one_ends(n - 2)\n    if one_starts_1 < one_ends_1 {\n        return\
    \ one_starts_1\n    } else {\n        return one_ends_1\n    }\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpszkcfxoa_test.go:53: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpszkcfxoa_test.go:53:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpszkcfxoa_test.go:53: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpszkcfxoa_test.go:53:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074438
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n%10 != 0 {\n        return 0\n    }\n    c := 0\n    for i := 0;\
    \ i < n; i++ {\n        c += 1 if i&1 == 1 || n-i <= 1\n    }\n    return c\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp84ugcu9l_test.go:16:16: expected '';'', found ''if''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074437
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    for i := n; i > 1; i-- {\n        if i%10 == 1 {\n \
    \           result++\n            if i%10 == 1 {\n                result++\n \
    \           }\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp6wjo50id_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp6wjo50id_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp6wjo50id_test.go:40: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp6wjo50id_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp6wjo50id_test.go:40: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    one_count := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            one_count++\n        }\n        n /= 10\n    }\n    return one_count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmppghq_eon_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppghq_eon_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmppghq_eon_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppghq_eon_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return n / 10\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpu1d_bbxn_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpu1d_bbxn_test.go:31:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpu1d_bbxn_test.go:31: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpu1d_bbxn_test.go:31:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpu1d_bbxn_test.go:31: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int\n    for i := 0; i < n; i++ {\n        count += i\n   \
    \     count += n\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp99ol8a0y_test.go:36: expected '%!s(int=18)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp99ol8a0y_test.go:36:\
    \ expected '%!s(int=180)', got '%!s(int=12)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp99ol8a0y_test.go:36: expected '%!s(int=1800)', got '%!s(int=22)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp99ol8a0y_test.go:36:\
    \ expected '%!s(int=18000)', got '%!s(int=35)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074439
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    counts := make(map[int]int)\n    l := n\n    for i := 1; i <= n; i++\
    \ {\n        start := (l - 1) / i\n        end := (l - start) / i\n        if\
    \ start <= end {\n            counts[start]++\n            counts[end]++\n   \
    \     }\n    }\n    var ret int\n    for key, val := range counts {\n        if\
    \ val > ret {\n            ret = val\n        }\n    }\n    return ret\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv76ctgza_test.go:22:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074439
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    start := 0\n    end := n\n    var count int\n\n    for start < end {\n\
    \        if n%10 == 1 {\n            count++\n        }\n        start *= 10\n\
    \        n/=10\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074452
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sum := 0\n    if n == 0 || n == 1 {\n        return 1\n    }\n    if\
    \ n%10 == 1 && n%100 != 11 {\n        return 1\n    }\n    for i := 1; i <= n;\
    \ i++ {\n        if n%i == 0 && n%(i-1) == 0 {\n            sum += i\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmp832kaaig_test.go:19\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmp832kaaig_test.go:34\
    \ +0x44f\ntesting.tRunner(0xc0001924e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n <= 1 {\n        return 0\n    }\n\n    result := 0\n    sum := n\n\
    \n    // Start with 1.\n    for sum <= 1 {\n        if sum == 1 {\n          \
    \  result += 1\n        }\n        sum *= 10\n    }\n    // Keep doubling the\
    \ sum as long as n is greater than 1.\n    for n > 1 {\n        result += (sum\
    \ % 10) * sum\n        sum *= 10\n        n--\n    }\n    return result\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpvc9osjml_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpvc9osjml_test.go:51:\
    \ expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpvc9osjml_test.go:51: expected '%!s(int=180)', got '%!s(int=9)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpvc9osjml_test.go:51:\
    \ expected '%!s(int=1800)', got '%!s(int=16)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpvc9osjml_test.go:51: expected '%!s(int=18000)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var counter int\n\n    for i := 1; i <= n; i++ {\n        counter +=\
    \ 1\n        if i % 2 == 0 && i > 1 && i % 100 == 0 {\n            counter--\n\
    \        }\n    }\n\n    return counter\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpshistifp_test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpshistifp_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpshistifp_test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpshistifp_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    i := 0\n    for i <= n {\n        if n%10 == 1 {\n \
    \           if i%10 == 0 {\n                result++\n            }\n        }\n\
    \        if i == n {\n            break\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpn07sm_5__test.go:44: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn07sm_5__test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpn07sm_5__test.go:44: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn07sm_5__test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum += 1\n        if\
    \ n%2 == 0 && i / 2 != i {\n            sum += 2\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpmmayevk9_test.go:38: expected '%!s(int=18)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpmmayevk9_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpmmayevk9_test.go:38: expected '%!s(int=1800)', got '%!s(int=10)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpmmayevk9_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    counter := 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            counter += 1\n        }\n        n /= 10\n    }\n    return counter\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpbbb5kuw4_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbbb5kuw4_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpbbb5kuw4_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbbb5kuw4_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return starts_one_ends_test(n, 1)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmporrl_j2r_test.go:11:12: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    counts := make(map[int]int)\n    for i := 1; i <= n; i += 2 {\n     \
    \   if starts_one_end(i) {\n            counts[int(i)] = 1\n        }\n      \
    \  if starts_one_end(n - 1 - i) {\n            counts[int(n - 1 - i)] = 1\n  \
    \      }\n    }\n    return len(counts)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6tqdivo_test.go:13:12: undefined: starts_one_end

    /tmp/tmpl6tqdivo_test.go:16:12: undefined: starts_one_end

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int\n    var i int\n    i := 0\n    count = 1\n    for i <\
    \ n+1 {\n        if ((i >> 1) == 1) {\n            count++\n        }\n      \
    \  i++\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsyem9dx_test.go:13:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    switch {\n    case n < 10:\n        return 1\n    case n%10 == 0:\n \
    \       return starts_one_ends(n/10)\n    case n%10 == 1:\n        return starts_one_ends(n/10)\
    \ + 1\n    default:\n        return starts_one_ends(n%10) + starts_one_ends(n%10+1)\n\
    \    }\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpdwc68gha_test.go:40: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpdwc68gha_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpdwc68gha_test.go:40: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpdwc68gha_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i\
    \ < n; i++ {\n        if i == 0 || i == n-1 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmppeekk7wd_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmppeekk7wd_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmppeekk7wd_test.go:40: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmppeekk7wd_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmppeekk7wd_test.go:40: expected '%!s(int=18000)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count0 := 0\n    count1 := 0\n    count2 := 0\n    for i := 0; i < n;\
    \ i++ {\n        f := n / 10\n        if (f == 0) || (f*f == n) &&  (f < 10) {\n\
    \            count0++\n        } else if (f == 1) || (f*f == n) &&  (f < 100)\
    \ {\n            count1++\n        } else if f == 2 {\n            count2++\n\
    \        }\n    }\n    return count0+count1+count2\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpbdftz8ss_test.go:44: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbdftz8ss_test.go:44:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpbdftz8ss_test.go:44: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbdftz8ss_test.go:44:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n -= 1\n    s := binary.BigEndian.Uint64([]byte(n.String()))\n    i :=\
    \ 0\n    for {\n        if s[i] > 1 {\n            i++\n            n -= int64(s[i])\n\
    \            if n <= 0 {\n                return i + 1\n            }\n      \
    \      continue\n        }\n        if s[i] == 0 {\n            n += int64(s[i])\n\
    \            i += 1\n            if n <= 0 {\n                return i + 1\n \
    \           }\n            continue\n        }\n        break\n    }\n    return\
    \ -1\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmg5apr6_test.go:12:10: undefined: binary

    /tmp/tmpqmg5apr6_test.go:12:43: n.String undefined (type int has no field or method
    String)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        panic(\"n is negative\")\n    }\n    if n < 10 {\n\
    \        return 1\n    }\n    if n < 100 {\n        return 1 + starts_one_ends(n/10)\n\
    \    }\n    if n < 1000 {\n        return 1 + starts_one_ends(n/100) + starts_one_ends(n/100)\n\
    \    }\n    if n < 10000 {\n        return 1 + starts_one_ends(n/1000) + starts_one_ends(n/1000)\
    \ +\n            starts_one_ends(n/10000)\n    }\n    if n < 100000 {\n      \
    \  return 1 + starts_one_ends(n/100000) +\n            starts_one_ends(n/100000)\
    \ +\n            starts_one_ends(n/1000000) +\n            starts_one_ends(n/10000000)\n\
    \    }\n    if n < 10000000 {\n        return 1 + starts_one_ends(n/1000000000)\
    \ +\n            starts_one_ends(n/1000000000) +\n            starts_one_ends(n/10000000000)\
    \ +\n            starts_one_ends(n/100000000000)\n    }\n    if n < 100000000000\
    \ {\n        return 1 + starts_one_ends(n/1000000000000) +\n            starts_one_ends(n/1000000000000)\
    \ +\n            starts_one_ends(n/10000000000000) +\n            starts_one_ends(n/100000000000000)\
    \ +\n            starts_one_ends(n/1000000000000000)\n    }\n    if n < 1000000000000000\
    \ {\n        return 1 + starts_one_ends(n/1000000000000000) +\n            starts_one_ends(n/1000000000000000)\
    \ +\n            starts_one_ends(n/10000000000000000) +\n            starts_one_ends(n/100000000000000000)\n\
    \    }\n    if n < 100000000000000000 {\n        return 1 + starts_one_ends(n/100000000000000000)\
    \ +\n            starts_one_ends(n/100000000000000000) +\n            starts_one_ends(n/1000000000000000000)\
    \ +\n            starts_one_ends(n/10000000000000000000)\n    }\n    if n < 1000000000000000000\
    \ {\n        return 1 + starts_one_ends(n/10000000000000000000) +\n          \
    \  starts_one_ends(n/10000000000000000000) +\n            starts_one_ends(n/100000000000000000000)\
    \ +\n            starts_one_ends(n/1000000000000000000000)\n    }\n    if n <\
    \ 10000000000000000000 {\n        return 1 + starts_one_ends(n/1000000000000000000000)\
    \ +\n            starts_one_ends(n/1000000000000000000000) +\n            starts_one_ends(n/1000000000000000000000000)\
    \ +\n            starts_one_ends(n/10000000000000000000000000)\n    }\n    if\
    \ n < 1000000000000000000000000 {\n        return 1 + starts_one_ends(n/10000000000000000000000000)\n\
    \    }\n    return 0\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg5x45gwj_test.go:56:31: 10000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmpg5x45gwj_test.go:59:38: 10000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmpg5x45gwj_test.go:60:31: 10000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmpg5x45gwj_test.go:61:31: 100000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmpg5x45gwj_test.go:62:31: 1000000000000000000000 (untyped int constant)
    overflows int

    /tmp/tmpg5x45gwj_test.go:64:12: 10000000000000000000 (untyped int constant) overflows
    int

    /tmp/tmpg5x45gwj_test.go:65:38: 1000000000000000000000 (untyped int constant)
    overflows int

    /tmp/tmpg5x45gwj_test.go:66:31: 1000000000000000000000 (untyped int constant)
    overflows int

    /tmp/tmpg5x45gwj_test.go:67:31: 1000000000000000000000000 (untyped int constant)
    overflows int

    /tmp/tmpg5x45gwj_test.go:68:31: 10000000000000000000000000 (untyped int constant)
    overflows int

    /tmp/tmpg5x45gwj_test.go:68:31: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count = 0\n    for i := 1; i <= n; i++ {\n        if ((i-1) == n\
    \ || (i-1) == n-1) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnwv035i__test.go:37: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnwv035i__test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnwv035i__test.go:37: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnwv035i__test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    c := 0\n    for {\n        if n == 1 {\n            return c\n      \
    \  }\n        if n % 10 == 1 {\n            n = n/10\n            c++\n      \
    \      continue\n        }\n        if n % 10 == 0 {\n            if n == 1 {\n\
    \                c++\n            }\n            break\n        }\n        n =\
    \ n/10\n    }\n    return c\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n \
    \ candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp9b0_pbhg_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp9b0_pbhg_test.go:49:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp9b0_pbhg_test.go:49: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp9b0_pbhg_test.go:49:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp9b0_pbhg_test.go:49: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074440
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 2 {\n        return n\n    }\n\n    n /= 10\n    if n == 1 {\n\
    \        return 1\n    }\n\n    count := 0\n    for digit := n; digit != 1; digit\
    \ /= 10 {\n        count += digit / 2\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    ones := 0\n    start := 0\n    end := n\n    for i := end - 1; i >= start;\
    \ i-- {\n        if n%10 == 1 {\n            ones++\n        }\n        n /= 10\n\
    \    }\n    return ones\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpr1wvh2qy_test.go:40: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpr1wvh2qy_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpr1wvh2qy_test.go:40: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpr1wvh2qy_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074441
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return count1(n, n/10)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbp7bd27__test.go:11:12: undefined: count1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074440
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n    \
    \        cnt++\n        }\n        if i%10 == 0 {\n            cnt += 10\n   \
    \     }\n    }\n    return cnt\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp21tqwrem_test.go:40: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp21tqwrem_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=11)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp21tqwrem_test.go:40: expected '%!s(int=180)', got '%!s(int=11)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp21tqwrem_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=11)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp21tqwrem_test.go:40: expected '%!s(int=18000)', got '%!s(int=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074441
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sums := make([]int, 0)\n    i := 1\n\n    for ; i < n; i++ {\n      \
    \  sums = append(sums, i)\n    }\n    for ; i < n; i++ {\n        if sums[i-1]\
    \ == 0 {\n            sums = append(sums, i)\n        }\n    }\n    return len(sums)\
    \ - n // 2\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpc4neeh4v_test.go:42: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpc4neeh4v_test.go:42:\
    \ expected '%!s(int=18)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpc4neeh4v_test.go:42: expected '%!s(int=180)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpc4neeh4v_test.go:42:\
    \ expected '%!s(int=1800)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpc4neeh4v_test.go:42: expected '%!s(int=18000)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074441
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    num := n - 1\n    for num <= 0 {\n        if num > 0\
    \ {\n            num -= 1\n        } else {\n            break\n        }\n  \
    \  }\n    for num >= 0 {\n        if num % 10 == 1 {\n            result += 1\n\
    \        }\n        num -= 10\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpingqxq33_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpingqxq33_test.go:46:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpingqxq33_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpingqxq33_test.go:46:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpingqxq33_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074441
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    i := 0\n    j := 1\n    for i < n {\n        if n%j ==\
    \ 1 {\n            count++\n            j += 1\n            if i == n {\n    \
    \            j = 1\n                i++\n            }\n        } else if j ==\
    \ n+1 {\n            i++\n        } else {\n            j = 1\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // The return value will hold the count of starting 1s.\n    starts_one\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n            starts_one++\n\
    \        }\n    }\n    return starts_one\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmppm8ofzma_test.go:38: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppm8ofzma_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmppm8ofzma_test.go:38: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppm8ofzma_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n == 0 {\n        return 1\n    }\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    return countDigits(n)\
    \ + starts_one_ends(n-1)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrfcti7o_test.go:20:12: undefined: countDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074441
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    i := 0\n    for n > 0 {\n        // For every i where n%10 == 1, return\
    \ i because it is our first positive\n        // integer.\n        if n%10 ==\
    \ 1 {\n            return i\n        }\n        i++\n        n /= 10\n    }\n\
    \    // If n == 0, then n%10 == 0. If n%10 != 0, then n%10 > 0. Thus 0 is not\
    \ a\n    // positive integer.\n    return -1\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpgyp9kn_r_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpgyp9kn_r_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpgyp9kn_r_test.go:43: expected '%!s(int=180)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpgyp9kn_r_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpgyp9kn_r_test.go:43: expected '%!s(int=18000)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    for number := 1; number <= 10; number++ {\n        if\
    \ (n-number) == 1*(number == 1 || number == 10) {\n            result++\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ru30snf_test.go:13:26: invalid operation: 1 * (number == 1 || number
    == 10) (mismatched types untyped int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074441
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sum := 0\n    i := 0\n    while i < n {\n        if n%10 == 1 {\n   \
    \         sum++\n        }\n        i += 10\n    }\n    return sum\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2wj4hpw3_test.go:13:11: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074441
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Base Case:\n    if n < 10 {\n        return 1\n    }\n\n    // Recursive\
    \ Case:\n    if n%2 == 0 {\n        return starts_one_ends(n/2) + starts_one_ends(n/2)\n\
    \    } else {\n        return starts_one_ends(n/2) - 1\n    }\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpkms5i_tf_test.go:41: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkms5i_tf_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpkms5i_tf_test.go:41: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkms5i_tf_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    s := binary.BigEndian.Uint64(make([]byte,\
    \ n))\n    return int(binary.BigEndian.Uint32(s[:len(s)-2])) + starts_one_ends(n-1)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98jgenjt_test.go:14:10: undefined: binary

    /tmp/tmp98jgenjt_test.go:15:16: undefined: binary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n%2 == 0 {\n        return 1\n    }\n    if n%3 == 0 {\n        return\
    \ 2\n    }\n    if n%5 == 0 {\n        return 3\n    }\n    return 0\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp14ga2tgo_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp14ga2tgo_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp14ga2tgo_test.go:40: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp14ga2tgo_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp14ga2tgo_test.go:40: expected '%!s(int=18000)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return -1\n    }\n    total := 0\n    for i := 1;\
    \ i <= n; i++ {\n        start := n\n        end := n\n        for j := 1; j <=\
    \ i; j++ {\n            if start == end {\n                end--\n           \
    \ }\n            start = end + 1\n        }\n        if start == 1 {\n       \
    \     total++\n        }\n    }\n    return total\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp_uk66iau_test.go:48: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp_uk66iau_test.go:48:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp_uk66iau_test.go:48: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp_uk66iau_test.go:48:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    onesCount := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if n%10000000 == 0 {\n            if n%100000000 ==\
    \ 0 {\n                if n%1000000000 == 0 {\n                    onesCount++\n\
    \                }\n            } else {\n                if n%10000000000 ==\
    \ 0 {\n                    onesCount++\n                }\n            }\n   \
    \     }\n        n = (n - 1)/10000000\n    }\n    return onesCount\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpjeqiegz__test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpjeqiegz__test.go:49:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpjeqiegz__test.go:49: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpjeqiegz__test.go:49:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpjeqiegz__test.go:49: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Base case.\n    if n == 0 {\n        return 0\n    }\n\n    // Recursive\
    \ case.\n    s := starts_one_ends(n-1) + 1\n\n    // If we reach the end or if\
    \ we found a non-zero digit, we have found a\n    // starting digit.\n    if n\
    \ <= 9 || s%10 != 0 {\n        return s\n    }\n\n    return s\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpxgmtatiw_test.go:45: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpxgmtatiw_test.go:45:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpxgmtatiw_test.go:45: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpxgmtatiw_test.go:45:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    one_count := 0\n    for i := 0; i < n; i++ {\n        one_count += int(i%10\
    \ == 1)\n    }\n    return one_count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpioaz3w9s_test.go:13:26: cannot convert i % 10 == 1 (untyped bool value)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074442
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n\n    var cnt int\n    for i :=\
    \ 1; i <= n; i++ {\n        if starts_one(i) || ends_one(i) {\n            cnt++\n\
    \        }\n    }\n    return cnt\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyn88y14d_test.go:17:12: undefined: starts_one

    /tmp/tmpyn88y14d_test.go:17:29: undefined: ends_one

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    i := 0\n    for i < n {\n        if n == i || n == i-1\
    \ {\n            count++\n        }\n        i++\n    }\n    return count\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp_988d_bz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp_988d_bz_test.go:39:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp_988d_bz_test.go:39: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp_988d_bz_test.go:39:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp_988d_bz_test.go:39: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    ones, rest := n, n\n    for rest >= 10 {\n        ones++\n        rest\
    \ -= 10\n    }\n    for rest > 0 {\n        if rest <= 1 {\n            ones++\n\
    \            break\n        }\n        ones++\n        rest -= 1\n    }\n    return\
    \ ones\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpoktsvudp_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpoktsvudp_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpoktsvudp_test.go:44: expected '%!s(int=180)', got '%!s(int=6)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpoktsvudp_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpoktsvudp_test.go:44: expected '%!s(int=18000)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n /= 10\n    count:= 0\n    for i := 1; i <= n; i++ {\n        if i %\
    \ (n-1) == 0 {\n            count++\n            if i%(n+1) == 0 {\n         \
    \       count++\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmppp_chh_7_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmppp_chh_7_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmppp_chh_7_test.go:41: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmppp_chh_7_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmppp_chh_7_test.go:41: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    // Count the number of integers\
    \ of length k starting with 1 or ending with\n    // 1.\n    i := 0\n    for {\n\
    \        if n % 10 == 1 && i > 0:\n            break\n        i++\n        n =\
    \ n / 10\n    }\n    return i\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8s0apv4_test.go:18:32: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074442
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    s := 1\n    c := 0\n    for i := 0; i < n; i++ {\n        if ((n%10)\
    \ == 1) {\n            c += s\n        }\n        s *= 10\n    }\n    return c\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpksidnefi_test.go:39: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpksidnefi_test.go:39:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpksidnefi_test.go:39: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpksidnefi_test.go:39:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        panic(\"Cannot compute starts_one_ends for negative\
    \ number\")\n    }\n\n    var count int\n    for i := 0; i < n; i++ {\n      \
    \  if i%9 == 1 {\n            count++\n        }\n    }\n\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpowmisufo_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpowmisufo_test.go:42:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpowmisufo_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpowmisufo_test.go:42:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpowmisufo_test.go:42: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        fmt.Println(\"starts_one_ends: negative input\")\n\
    \        return 0\n    }\n\n    // The idea is to find all the starting numbers\
    \ starting from one and to\n    // the length of the input integer. Then, find\
    \ the count of starting number\n    // that end with 1.\n    // Note that this\
    \ count is different from the length of the input\n    // integer\n    var cnt\
    \ int\n    idx := 1\n    for ; idx < n; idx++ {\n        if n%idx == 0 {\n   \
    \         if n%idx == idx-1 {\n                cnt += 1\n            }\n     \
    \   }\n    }\n    return cnt\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp0usnyhej_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp0usnyhej_test.go:50:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp0usnyhej_test.go:50: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp0usnyhej_test.go:50:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp0usnyhej_test.go:50: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count, _ := counts_one_ends(n)\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp19dlfy53_test.go:11:17: undefined: counts_one_ends

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    pos := n\n    for pos > 0 {\n        count += 1\n   \
    \     pos /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpn6nlbkf__test.go:37: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn6nlbkf__test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpn6nlbkf__test.go:37: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn6nlbkf__test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 10 {\n        return 0\n    }\n    start := 0\n    end := 0\n\
    \    for i := 0; i < n; i++ {\n        if i%10 == 1 {\n            start = i+1\n\
    \        }\n        if i%10 == 0 {\n            end = i+1\n        }\n    }\n\
    \    return end - start\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp04stk6v2_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp04stk6v2_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp04stk6v2_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp04stk6v2_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp04stk6v2_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if n%2 == 0 {\n   \
    \         if n == 1 {\n                return 1\n            }\n            if\
    \ n%10 == 1 && n%100 != 11 {\n                return 1\n            }\n      \
    \      if n%100 == 1 {\n                return 1\n            }\n            if\
    \ n%1000 == 1 {\n                return 1\n            }\n            if n%10000\
    \ == 1 {\n                return 1\n            }\n            if n%100000 ==\
    \ 1 {\n                return 1\n            }\n            if n%1000000 == 1\
    \ {\n                return 1\n            }\n            if n%10000000 == 1 {\n\
    \                return 1\n            }\n        }\n        if n%2 == 1 {\n \
    \           if n == 1 {\n                return 1\n            }\n           \
    \ if n%10 != 1 || n%10 == 0 && n%100 != 11 {\n                return 1\n     \
    \       }\n            if n%100 == 1 {\n                return 1\n           \
    \ }\n            if n%1000 == 1 {\n                return 1\n            }\n \
    \           if n%10000 == 1 {\n                return 1\n            }\n     \
    \       if n%100000 == 1 {\n                return 1\n            }\n        \
    \    if n%1000000 == 1 {\n                return 1\n            }\n          \
    \  if n%10000000 == 1 {\n                return 1\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpnlar4bxf_test.go:86: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpnlar4bxf_test.go:86:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpnlar4bxf_test.go:86: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpnlar4bxf_test.go:86:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    f := func(x int) bool {\n        return x != 0 && x > 0 && x % 10 ==\
    \ 1 && x % 100 != 11 && x % 1000 == 0\n    }\n    c := 0\n    for x := 0; x <\
    \ n; x++ {\n        if f(x) {\n            c += 1\n        }\n        if x !=\
    \ n && f(x+1) {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpu_e88itp_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpu_e88itp_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpu_e88itp_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpu_e88itp_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpu_e88itp_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    k := 0\n    for i := 1; i < n; i += 1 {\n        if n%i == 0 {\n    \
    \        if n/(i - 1) == 1 {\n                k++\n            } else {\n    \
    \            k--\n            }\n        }\n    }\n    return k\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmp4bv7ax7f_test.go:14\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmp4bv7ax7f_test.go:32\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    for x := 1; x < n; x++ {\n        if x%10 == 1 {\n \
    \           result += 1\n        }\n        if x % 10 == 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpu83l85ev_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpu83l85ev_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpu83l85ev_test.go:40: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpu83l85ev_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpu83l85ev_test.go:40: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var (\n        count = 0\n        start  bool\n        finish bool\n\
    \    )\n    for i := 0; i < n; i++ {\n        if i == 0 || i == n-1 {\n      \
    \      continue\n        }\n        for j := 1; j < 10; j++ {\n            if\
    \ i%j == 0 {\n                count++\n                if i != 0 {\n         \
    \           if j == 1 {\n                        start = true\n              \
    \      }\n                    if j == 2 {\n                        finish = true\n\
    \                    }\n                }\n                break\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgp7u10ql_test.go:13:9: start declared but not used

    /tmp/tmpgp7u10ql_test.go:14:9: finish declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 2 {\n        return 0\n    }\n\n    n /= 10\n    m := starts_one_ends(n-1)\n\
    \    if n%10 == 1 {\n        m += 1\n    }\n    return m\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp25ifaa8__test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp25ifaa8__test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp25ifaa8__test.go:40: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp25ifaa8__test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp25ifaa8__test.go:40: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    s := make([]int, n+1)\n   \
    \ s[0] = 1\n    x := 1\n    y := 2\n    for i := 1; i < n+1; i++ {\n        if\
    \ y == n {\n            y = 0\n            x++\n        }\n        if i == 1 {\n\
    \            s[i] = x\n        }\n        if s[i] == 1 {\n            y++\n  \
    \      }\n        if s[i] == 0 {\n            s[i] = 2\n        }\n    }\n   \
    \ return s[x]\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpbpx_4wip_test.go:53: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbpx_4wip_test.go:53:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpbpx_4wip_test.go:53: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbpx_4wip_test.go:53:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var cnt int\n    for i := 2; i < n; i++ {\n        if n%i == 0:\n   \
    \         cnt += 1\n            if n%i == 1:\n                cnt -= 1\n     \
    \   }\n    }\n    return cnt\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0d69jigi_test.go:13:20: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n < 10 {\n        return\
    \ 1\n    }\n    if n < 100 {\n        return 2\n    }\n    if n < 1000 {\n   \
    \     return 3\n    }\n    if n < 10000 {\n        return 4\n    }\n    if n <\
    \ 100000 {\n        return 5\n    }\n    if n < 1000000 {\n        return 6\n\
    \    }\n    if n < 10000000 {\n        return 7\n    }\n    if n < 100000000 {\n\
    \        return 8\n    }\n    if n < 1000000000 {\n        return 9\n    }\n \
    \   if n < 10000000000 {\n        return 10\n    }\n    if n < 100000000000 {\n\
    \        return 11\n    }\n    if n < 1000000000000 {\n        return 12\n   \
    \ }\n    if n < 10000000000000 {\n        return 13\n    }\n    if n < 100000000000000\
    \ {\n        return 14\n    }\n    if n < 1000000000000000 {\n        return 15\n\
    \    }\n    if n < 10000000000000000 {\n        return 16\n    }\n    if n < 100000000000000000\
    \ {\n        return 17\n    }\n    if n < 1000000000000000000 {\n        return\
    \ 18\n    }\n    return 19\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmppe5xxm8r_test.go:88: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppe5xxm8r_test.go:88:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmppe5xxm8r_test.go:88: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppe5xxm8r_test.go:88:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    t := uint64(n - 1)\n    // The base case for 0 is trivial.\n \
    \   if t == 0 {\n        return 1\n    }\n    if n%2 == 1 {\n        return starts_one_ends(2*n-1)\
    \ + starts_one_ends(2*n) + starts_one_ends(n)\n    }\n    return starts_one_ends(2*n-1)\
    \ + starts_one_ends(2*n)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x8000000000000001?)\n\
    \t/tmp/tmpy6o_k698_test.go:10 +0x118 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef778\n\
    command-line-arguments_test.starts_one_ends(0x4000000000000001)\n\t/tmp/tmpy6o_k698_test.go:23\
    \ +0x6b fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x4000000000000001)\n\
    \t/tmp/tmpy6o_k698_test.go:23 +0x94 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6f4\n\
    command-line-arguments_test.starts_one_ends(0x4000000000000001)\n\t/tmp/tmpy6o_k698_test.go:23\
    \ +0x94 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6f4\ncommand-line-arguments_test.starts_one_ends(0x4000000000000001)\n\
    \t/tmp/tmpy6o_k698_test.go:23 +0x94 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6f4\n\
    command-line-arguments_test.starts_one_ends(0x4000000000000001)\n\t/tmp/tmpy6o_k698_test.go:23\
    \ +0x94 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6f4\ncommand-line-arguments_test.starts_one_ends(0x4000000000000001)\n\
    \t/tmp/tmpy6o_k698_test.go:23 +0x94 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6f4\n\
    command-line-arguments_test.starts_one_ends(0x4000000000000001)\n\t/tmp/tmpy6o_k698_test.go:23\
    \ +0x94 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6f4\ncommand-line-arguments_test.starts_one_ends(0x4000000000000001)\n\
    \t/tmp/tmpy6o_k698_test.go:23 +0x94 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6f4\n\
    command-line-arguments_test.starts_one_ends(0x4000000000000001)\n\t/tmp/tmpy6o_k698_test.go:23\
    \ +0x94 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6f4\ncommand-line-arguments_test.starts_one_ends(0x4000000000000001)\n\
    \t/tmp/tmpy6o_k698_test.go:23 +0x94 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6f4\n\
    c"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n%10 == 1 {\n        return 1\n    }\n    if n%10 == 0 {\n       \
    \ return n\n    }\n    return 1 + starts_one_ends(n%10)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x2?)\n\
    \t/tmp/tmpdxieanur_test.go:10 +0xab fp=0xc0201e0398 sp=0xc0201e0390 pc=0x4ef70b\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e03b0 sp=0xc0201e0398 pc=0x4ef6e5\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpdxieanur_test.go:17 +0x85 fp=0xc0201e03c8 sp=0xc0201e03b0 pc=0x4ef6e5\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e03e0 sp=0xc0201e03c8 pc=0x4ef6e5\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpdxieanur_test.go:17 +0x85 fp=0xc0201e03f8 sp=0xc0201e03e0 pc=0x4ef6e5\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e0410 sp=0xc0201e03f8 pc=0x4ef6e5\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpdxieanur_test.go:17 +0x85 fp=0xc0201e0428 sp=0xc0201e0410 pc=0x4ef6e5\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e0440 sp=0xc0201e0428 pc=0x4ef6e5\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpdxieanur_test.go:17 +0x85 fp=0xc0201e0458 sp=0xc0201e0440 pc=0x4ef6e5\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e0470 sp=0xc0201e0458 pc=0x4ef6e5\ncommand-line-arguments_test.starts_one_ends(0x0?)\n\
    \t/tmp/tmpdxieanur_test.go:17 +0x85 fp=0xc0201e0488 sp=0xc0201e0470 pc=0x4ef6e5\n\
    command-line-arguments_test.starts_one_ends(0x0?)\n\t/tmp/tmpdxieanur_test.go:17\
    \ +0x85 fp=0xc0201e04a0 sp=0xc0201e0488 pc=0x4ef6e5\ncommand-line-arguments_test."
  timestamp: 1660074446
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n == 0 {\n        return 0\n    }\n    return starts_one_ends_internal(n)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0p1g4ds8_test.go:14:12: undefined: starts_one_ends_internal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074444
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 || n&1 != 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return 1\n    }\n    return starts_one_ends(n / 10) + starts_one_ends(n\
    \ % 10)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:10 +0xa8 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef708\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:17 +0x6b fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cb\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:17 +0x6b fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cb\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:17 +0x6b fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cb\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:17 +0x6b fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cb\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_ends(0x0)\n\
    \t/tmp/tmp2c_mp7nm_test.go:17 +0x6b fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cb\n\
    command-line-arguments_test.starts_one_ends(0x0)\n\t/tmp/tmp2c_mp7nm_test.go:17\
    \ +0x6b fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef6cb\ncommand-line-arguments_test.starts_one_e"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // write your code here\n\n    if n%2 == 0 {\n        if n < 10 {\n \
    \           return 1\n        }\n        return (n/10+1) * 10 + starts_one_ends(n%10)\n\
    \    }\n    if n < 10 {\n        return 1\n    }\n    return starts_one_ends(n%10)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpit6wjdtz_test.go:42: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpit6wjdtz_test.go:42:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpit6wjdtz_test.go:42: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpit6wjdtz_test.go:42:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sum := 0\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n     \
    \       sum += n/(i - 1)\n        }\n    }\n    return sum\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpy0jzg3th_test.go:13\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpy0jzg3th_test.go:27\
    \ +0x12\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    i := n\n    if n <= 0 {\n        return 0\n    }\n\n\
    \    // Initialize start by seeing if we have reached 1.\n    start := 1\n   \
    \ for i /= 10 {\n        i++\n        start *= 10\n    }\n\n    // Count until\
    \ we reach 1 or an end that has 1 as its base.\n    for i <= 1 {\n        if start\
    \ < i {\n            i++\n            start *= 10\n        }\n        if n ==\
    \ i {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4s6x8eq2_test.go:19:9: expected boolean or range expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074444
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    counts := make([]int, 0, n+1)\n    for i := 1; i <= n; i++ {\n      \
    \  if n%i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi41vybiv_test.go:11:5: counts declared but not used

    /tmp/tmpi41vybiv_test.go:14:13: undefined: count

    /tmp/tmpi41vybiv_test.go:17:12: undefined: count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074445
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return starts_one_ends_helper([]int{1}, n)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdfem8cq7_test.go:11:12: undefined: starts_one_ends_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074445
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    base := 1\n    count := 0\n    lastNum := n - 1\n    for num < lastNum\
    \ {\n        base = base + 1\n        num = num * base\n        if num == 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfybwiyk7_test.go:14:9: undefined: num

    /tmp/tmpfybwiyk7_test.go:16:15: undefined: num

    /tmp/tmpfybwiyk7_test.go:17:12: undefined: num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         count++\n            if i <= n/2 {\n                count += starts_one_ends(i)\n\
    \            }\n            if i > n/2 {\n                count += starts_one_ends(n-i)\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpx_gjm30x_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpx_gjm30x_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpx_gjm30x_test.go:43: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpx_gjm30x_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpx_gjm30x_test.go:43: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    num := make([]int, n)\n    for i := range num {\n        num[i] = i\n\
    \    }\n    for i := n; i > 0; i-- {\n        if num[i] == 1 {\n            n\
    \ -= 1\n            break\n        }\n        if num[i] - num[i-1] == 1 {\n  \
    \          n -= num[i-1]\n            break\n        }\n    }\n    return n\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpx93qf9ck_test.go:16\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpx93qf9ck_test.go:35\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074445
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n&1 == 0 {\n        return 1\n    }\n\n    result := 0\n    for i\
    \ := 1; i <= n; i += 2 {\n        if n%i == 0 {\n            result += 1\n   \
    \         if n%2 == 0 && i%2 == 1 {\n                result += 1\n           \
    \ }\n            if n%2 == 1 && i%2 == 0 {\n                result += 1\n    \
    \        }\n            if n%2 == 1 && i%2 == 1 {\n                result += 1\n\
    \            }\n        }\n    }\n    if n > 0 {\n        if n%2 == 0 && n%2 ==\
    \ 1 {\n            result += 1\n        }\n        if n%2 == 1 && n%2 == 0 {\n\
    \            result += 1\n        }\n        if n%2 == 1 && n%2 == 1 {\n     \
    \       result += 1\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpdfks9zsz_test.go:31:12: suspect and: n%2 == 0 && n%2 == 1

    /tmp/tmpdfks9zsz_test.go:34:12: suspect and: n%2 == 1 && n%2 == 0

    /tmp/tmpdfks9zsz_test.go:37:12: redundant and: n%2 == 1 && n%2 == 1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074446
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := n; i > 0; i++ {\n        if n%10 == 1 {\n  \
    \          if i == 1 {\n                count++\n            }\n        } else\
    \ {\n            if i == n {\n                count++\n            } else {\n\
    \                continue\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074459
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Based on:\n    // http://blog.golang.org/playground/go-talk/interleaved.html\n\
    \    sum := 0\n    for i := 0; i < n; i++ {\n        if n % 10 != 0 {\n      \
    \      sum += (n / 10) % 10\n        }\n        n /= 10\n    }\n    return sum\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmptu7kmb9i_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmptu7kmb9i_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmptu7kmb9i_test.go:40: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmptu7kmb9i_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmptu7kmb9i_test.go:40: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074446
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    if n == 0 {\n        return result\n    }\n    for i\
    \ := 0; i <= n; i++ {\n        if n%i == 0 && i%n == 1 {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmp8zr0cen3_test.go:16\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmp8zr0cen3_test.go:30\
    \ +0x474\ntesting.tRunner(0xc0001a01a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074446
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    switch {\n    case n == 0: // 0 ends with 1.\n      \
    \  count = starts_one_ends(n-1) + 1\n    case n == 1: // 1 starts with 1.\n  \
    \      count = starts_one_ends(n-1) + 1\n    default: // Otherwise, there are\
    \ n-1 possibilities.\n        count += starts_one_ends(n-1) - starts_one_ends(n)\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.starts_one_ends(0xffffffffff00002c?)\n\
    \t/tmp/tmptaipr427_test.go:10 +0x7a fp=0xc0201e0398 sp=0xc0201e0390 pc=0x4ef6da\n\
    command-line-arguments_test.starts_one_ends(0xffffffffff00002d)\n\t/tmp/tmptaipr427_test.go:18\
    \ +0x3e fp=0xc0201e03b8 sp=0xc0201e0398 pc=0x4ef69e\ncommand-line-arguments_test.starts_one_ends(0xffffffffff00002e)\n\
    \t/tmp/tmptaipr427_test.go:18 +0x3e fp=0xc0201e03d8 sp=0xc0201e03b8 pc=0x4ef69e\n\
    command-line-arguments_test.starts_one_ends(0xffffffffff00002f)\n\t/tmp/tmptaipr427_test.go:18\
    \ +0x3e fp=0xc0201e03f8 sp=0xc0201e03d8 pc=0x4ef69e\ncommand-line-arguments_test.starts_one_ends(0xffffffffff000030)\n\
    \t/tmp/tmptaipr427_test.go:18 +0x3e fp=0xc0201e0418 sp=0xc0201e03f8 pc=0x4ef69e\n\
    command-line-arguments_test.starts_one_ends(0xffffffffff000031)\n\t/tmp/tmptaipr427_test.go:18\
    \ +0x3e fp=0xc0201e0438 sp=0xc0201e0418 pc=0x4ef69e\ncommand-line-arguments_test.starts_one_ends(0xffffffffff000032)\n\
    \t/tmp/tmptaipr427_test.go:18 +0x3e fp=0xc0201e0458 sp=0xc0201e0438 pc=0x4ef69e\n\
    command-line-arguments_test.starts_one_ends(0xffffffffff000033)\n\t/tmp/tmptaipr427_test.go:18\
    \ +0x3e fp=0xc0201e0478 sp=0xc0201e0458 pc=0x4ef69e\ncommand-line-arguments_test.starts_one_ends(0xffffffffff000034)\n\
    \t/tmp/tmptaipr427_test.go:18 +0x3e fp=0xc0201e0498 sp=0xc0201e0478 pc=0x4ef69e\n\
    command-line-arguments_test.starts_one_ends(0xffffffffff000035)\n\t/tmp/tmptaipr427_test.go:18\
    \ +0x3e fp=0xc0201e04b8 sp=0xc0201e0498 pc=0x4ef69e\ncommand-line-arguments_test.starts_one_ends(0xffffffffff000036)\n\
    \t/tmp/tmptaipr427_test.go:18 +0x3e fp=0xc0201e04d8 sp=0xc0201e04b8 pc=0x4ef69e\n\
    c"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n <= 0 {\n        return 0\n    }\n    m := n\n    var count int\n\
    \    for i := 0; i < m; i++ {\n        if n%100 == 0 {\n            if n == 1000\
    \ {\n                count++\n            }\n            if n == 10000 {\n   \
    \             count++\n            }\n            if n == 1000000 {\n        \
    \        count++\n            }\n            if n == 10000000 {\n            \
    \    count++\n            }\n            if n == 100000000 {\n               \
    \ count++\n            }\n            if n == 1000000000 {\n                count++\n\
    \            }\n            if n == 10000000000 {\n                count++\n \
    \           }\n            if n == 100000000000 {\n                count++\n \
    \           }\n            if n == 1000000000000 {\n                count++\n\
    \            }\n            if n == 10000000000000 {\n                count++\n\
    \            }\n            if n == 100000000000000 {\n                count++\n\
    \            }\n            if n == 1000000000000000 {\n                count++\n\
    \            }\n            if n == 10000000000000000 {\n                count++\n\
    \            }\n            if n == 100000000000000000 {\n                count++\n\
    \            }\n            if n == 1000000000000000000 {\n                count++\n\
    \            }\n            if n == 10000000000000000000 {\n                count++\n\
    \            }\n            if n == 100000000000000000000 {\n                count++\n\
    \            }\n            if n == 1000000000000000000000 {\n               \
    \ count++\n            }\n            if n == 10000000000000000000000 {\n    \
    \            count++\n            }\n            if n == 100000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 100000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 100000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 100000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 100000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 100000000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 1000000000000000000000000000000000000000\
    \ {\n                count++\n            }\n            if n == 10000000000000000000000000000000000000000\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyz1ci26f_test.go:127:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074445
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        fmt.Println(\"Invalid input\")\n        return 0\n\
    \    }\n    total := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 1 {\n\
    \            total += 1\n        }\n    }\n    return total\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpc03r5o5g_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpc03r5o5g_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpc03r5o5g_test.go:41: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpc03r5o5g_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpc03r5o5g_test.go:41: expected '%!s(int=18000)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074446
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    if n % 2 == 1 {\n        return\
    \ 0\n    }\n    if n % 3 == 1 {\n        return 0\n    }\n    if n % 5 == 1 {\n\
    \        return 0\n    }\n    if n % 7 == 1 {\n        return 0\n    }\n    return\
    \ n - 1\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpzi5ny1il_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpzi5ny1il_test.go:46:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpzi5ny1il_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpzi5ny1il_test.go:46:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpzi5ny1il_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074446
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    switch {\n    case n < 3:\n        return n\n    case n == 3:\n     \
    \   return 2\n    case n > 3 && n < 100:\n        return 3\n    case n > 100 :\n\
    \        return 4\n    }\n    \n}\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpll0mpnji_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074446
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n /= 10\n    count := 0\n    for i := 0; i < n; i++ {\n        if i >\
    \ 0 && n % 10 == 1 {\n            count++\n            n /= 10\n        }\n  \
    \      if n == 1 {\n            count++\n            break\n        }\n      \
    \  n /= 10\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp82vtgegp_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp82vtgegp_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp82vtgegp_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp82vtgegp_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp82vtgegp_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074446
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n \
    \           result += n - i\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp17z1t4kt_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp17z1t4kt_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp17z1t4kt_test.go:37: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp17z1t4kt_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp17z1t4kt_test.go:37: expected '%!s(int=18000)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    x := n\n    var c int\n   \
    \ for x == 1 {\n        c++\n        x--\n    }\n    for x > 1 {\n        if x%10\
    \ == 1 {\n            c++\n        }\n        x/=10\n    }\n    return c\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpbo9nu0li_test.go:46: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpbo9nu0li_test.go:46:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpbo9nu0li_test.go:46: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpbo9nu0li_test.go:46:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n\n    var count int = 0\n\n    //\
    \ First count the number of 1-digit positive integers.\n    for i := 1; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            count++\n        }\n    }\n\n    //\
    \ Then count the number of 2-digit positive integers.\n    for i := 1; i <= n;\
    \ i++ {\n        if n%i == 0 && i%2 == 0 {\n            count++\n        }\n \
    \   }\n\n    // Then count the number of 3-digit positive integers.\n    for i\
    \ := 1; i <= n; i++ {\n        if n%i == 0 && i%2 == 0 && i%3 == 0 {\n       \
    \     count++\n        }\n    }\n\n    // Then count the number of 4-digit positive\
    \ integers.\n    for i := 1; i <= n; i++ {\n        if n%i == 0 && i%2 == 0 &&\
    \ i%3 == 0 && i%4 == 0 {\n            count++\n        }\n    }\n\n    // Then\
    \ count the number of 5-digit positive integers.\n    for i := 1; i <= n; i++\
    \ {\n        if n%i == 0 && i%2 == 0 && i%3 == 0 && i%4 == 0 && i%5 == 0 {\n \
    \           count++\n        }\n    }\n\n    // Then count the number of 6-digit\
    \ positive integers.\n    for i := 1; i <= n; i++ {\n        if n%i == 0 && i%2\
    \ == 0 && i%3 == 0 && i%4 == 0 && i%5 == 0 && i%6 == 0 {\n            count++\n\
    \        }\n    }\n\n    // Then count the number of 7-digit positive integers.\n\
    \    for i := 1; i <= n; i++ {\n        if n%i == 0 && i%2 == 0 && i%3 == 0 &&\
    \ i%4 == 0 && i%5 == 0 && i%6 == 0 && i%7 == 0 {\n            count++\n      \
    \  }\n    }\n\n    // Then count the number of 8-digit positive integers.\n  \
    \  for i := 1; i <= n; i++ {\n        if n%i == 0 && i%2 == 0 && i%3 == 0 && i%4\
    \ == 0 && i%5 == 0 && i%6 == 0 && i%7 == 0 && i%8 == 0 {\n            count++\n\
    \        }\n    }\n\n    // Then count the number of 9-digit positive integers.\n\
    \    for i := 1; i <= n; i++ {\n        if n%i == 0 && i%2 == 0 && i%3 == 0 &&\
    \ i%4 == 0 && i%5 == 0 && i%6 == 0 && i%7 == 0 && i%8 == 0 && i%9 == 0 {\n   \
    \         count++\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpamoyuhyg_test.go:100: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpamoyuhyg_test.go:100:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpamoyuhyg_test.go:100: expected '%!s(int=1800)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpamoyuhyg_test.go:100:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    i, ok := IsPositiveInt(n)\n    if ok {\n        for ii\
    \ := 1; ii * i < n; ii++ {\n            if n%ii == 1 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxyyi98__test.go:12:14: undefined: IsPositiveInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    i := 1\n    sum := 0\n    for i <= n {\n        if i%1000 == 0 {\n  \
    \          fmt.Printf(\"%d\\n\", i)\n        }\n        sum += isPos10(i)\n  \
    \      if i%100 == 0 {\n            fmt.Printf(\"%d\\t\", sum)\n            sum\
    \ = 0\n        }\n        i++\n    }\n    if sum != 0 {\n        fmt.Printf(\"\
    %d\\t\", sum)\n    }\n    return sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1h7v0s9l_test.go:17:16: undefined: isPos10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    s := 0\n    for i := 0; i < n; i++ {\n        if n%100 != 0 {\n\
    \            continue\n        }\n        if n%10 == 0 {\n            if s[i]\
    \ == 1 {\n                s++\n            }\n        } else {\n            if\
    \ s[i] != 1 {\n                s++\n            }\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkycp5za2_test.go:23:17: invalid operation: cannot index s (variable of
    type int)

    /tmp/tmpkycp5za2_test.go:27:17: invalid operation: cannot index s (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n\n    sum := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            sum += 2\n        }\n\n   \
    \     sum += i / 10\n    }\n\n    return sum\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp22j82vm2_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp22j82vm2_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp22j82vm2_test.go:44: expected '%!s(int=180)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp22j82vm2_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp22j82vm2_test.go:44: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    result := 0\n    for i := 1; i <= n; i += 1 {\n        if n%i == 0 {\n\
    \            result += i\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmppsvbwjg7_test.go:37: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppsvbwjg7_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmppsvbwjg7_test.go:37: expected '%!s(int=1800)', got '%!s(int=7)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppsvbwjg7_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var result int = 0\n    for i := n; i > 0; i-- {\n        if (i%10 ==\
    \ 1) || (i%10 == 1 && i%100 != 9) {\n            result++\n        }\n    }\n\
    \    return result\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpvdk_jo09_test.go:37: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpvdk_jo09_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpvdk_jo09_test.go:37: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpvdk_jo09_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n <= 1 {\n        return 0\n    }\n\n    return starts_one_ends_test(n)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmja0ogux_test.go:15:12: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n\n    counts := make([]int, 0)\n    for i := 0; i < n; i++ {\n   \
    \     if i%2 == 0 {\n            counts = append(counts, 1)\n        } else {\n\
    \            counts = append(counts, 0)\n        }\n    }\n    return len(counts)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmprom30rfs_test.go:46: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmprom30rfs_test.go:46:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmprom30rfs_test.go:46: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmprom30rfs_test.go:46:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    s := 0\n    for ; n > 0; n-- {\n        s *= 10\n        if s <= 1 &&\
    \ n%10 == 1 {\n            s += n\n        }\n    }\n    return s\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmppublo550_test.go:38: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmppublo550_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmppublo550_test.go:38: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmppublo550_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        panic(\"starts_one_ends called with n less than 0\"\
    )\n    }\n\n    if n < 10 {\n        return n\n    }\n\n    if n < 1000 {\n  \
    \      n /= 10\n        return starts_one_ends(n)\n    }\n\n    if n < 10000 {\n\
    \        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n    }\n\n\
    \    if n < 100000 {\n        n /= 10\n        n /= 10\n        n /= 10\n    \
    \    return starts_one_ends(n)\n    }\n\n    if n < 1000000 {\n        n /= 10\n\
    \        n /= 10\n        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n\
    \    }\n\n    if n < 10000000 {\n        n /= 10\n        n /= 10\n        n /=\
    \ 10\n        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n  \
    \  }\n\n    if n < 100000000 {\n        n /= 10\n        n /= 10\n        n /=\
    \ 10\n        n /= 10\n        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n\
    \    }\n\n    if n < 1000000000 {\n        n /= 10\n        n /= 10\n        n\
    \ /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n\
    \        return starts_one_ends(n)\n    }\n\n    if n < 10000000000 {\n      \
    \  n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n\
    \        n /= 10\n        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n\
    \    }\n\n    if n < 100000000000 {\n        n /= 10\n        n /= 10\n      \
    \  n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n\
    \        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n    }\n\n\
    \    if n < 1000000000000 {\n        n /= 10\n        n /= 10\n        n /= 10\n\
    \        n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n        n\
    \ /= 10\n        n /= 10\n        n /= 10\n        return starts_one_ends(n)\n\
    \    }\n\n    if n < 10000000000000 {\n        n /= 10\n        n /= 10\n    \
    \    n /= 10\n        n /= 10\n        n /= 10\n        n /= 10\n        n /=\
    \ 10\n        n /= 10\n        n /= \nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplg04a1aa_test.go:124:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n -= 1\n    sum1 := 0\n    sum2 := 0\n    n /= 10\n\n    for i := 0;\
    \ i < n; i++ {\n        sum1 = sum1 + i\n        if sum1 % 2 == 0 {\n        \
    \    sum2 = sum2 + 1\n        }\n        sum1 = sum1 - i\n        if sum1 % 2\
    \ == 0 {\n            sum2 = sum2 - 1\n        }\n    }\n\n    return sum2\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp8xq9qdzu_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp8xq9qdzu_test.go:47:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp8xq9qdzu_test.go:47: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp8xq9qdzu_test.go:47:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp8xq9qdzu_test.go:47: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int = 0\n    for i := n - 1; i <= n; i++ {\n        if i%2\
    \ == 1 {\n            count++\n        } else {\n            if i%10 == 1 && i%100\
    \ != 11 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpt8yl1hrw_test.go:41: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpt8yl1hrw_test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpt8yl1hrw_test.go:41: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpt8yl1hrw_test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    if n%2 == 0 {\n        if n%4\
    \ != 0 {\n            return 3\n        }\n        if n%100 != 0 {\n         \
    \   return 2\n        }\n        if n%400 != 0 {\n            return 1\n     \
    \   }\n        return 0\n    }\n    if n%10 != 0 {\n        return 2\n    }\n\
    \    if n%100 != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n        return\
    \ 1\n    }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n\
    \        return 1\n    }\n    if n%100 != 0 {\n        return 1\n    }\n    if\
    \ n%400 != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n        return 1\n\
    \    }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n  \
    \      return 1\n    }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100\
    \ != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n        return 1\n   \
    \ }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n     \
    \   return 1\n    }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400\
    \ != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n        return 1\n   \
    \ }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n     \
    \   return 1\n    }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100\
    \ != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n        return 1\n   \
    \ }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n     \
    \   return 1\n    }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400\
    \ != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n        return 1\n   \
    \ }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n     \
    \   return 1\n    }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100\
    \ != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n        return 1\n   \
    \ }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400 != 0 {\n     \
    \   return 1\n    }\n    if n%100 != 0 {\n        return 1\n    }\n    if n%400\
    \ != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n        return 1\n   \
    \ }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100 != 0 {\n     \
    \   return 1\n    }\n    if n%400 != 0 {\n        return 1\n    }\n    if n%100\
    \ != 0 {\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppqhts72q_test.go:150:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074447
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    s := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n    \
    \        s += i\n        }\n    }\n    return s\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpzxsuoccd_test.go:37: expected '%!s(int=18)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpzxsuoccd_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpzxsuoccd_test.go:37: expected '%!s(int=1800)', got '%!s(int=7)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpzxsuoccd_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 || i\
    \ == 1 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpd2x7co5y_test.go:37: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpd2x7co5y_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpd2x7co5y_test.go:37: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpd2x7co5y_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 || n > 100 {\n        return -1\n    }\n    s := 0\n    i :=\
    \ n\n    for i < 100 {\n        if i / 10 != 1 && i % 10 == 1 && i > 1 {\n   \
    \         s++\n        }\n        i++\n    }\n    return s\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpq8isx3gw_test.go:42: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpq8isx3gw_test.go:42:\
    \ expected '%!s(int=18)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpq8isx3gw_test.go:42: expected '%!s(int=180)', got '%!s(int=8)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpq8isx3gw_test.go:42:\
    \ expected '%!s(int=1800)', got '%!s(int=8)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpq8isx3gw_test.go:42: expected '%!s(int=18000)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    total := 0\n    i := 2\n    while i <= n {\n        if (i%10) == 1 {\n\
    \            total++\n        }\n        i += i\n    }\n    return total\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gawrf2l_test.go:13:11: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074448
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // return count of all starting 1s in n, plus count of all ending 1s\n\
    \    return n/(1+n/10)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp8fksl_tc_test.go:32: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp8fksl_tc_test.go:32:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp8fksl_tc_test.go:32: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp8fksl_tc_test.go:32:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    m := 0\n    for i := 1; i < n; i++ {\n        if n%10 == 1 {\n      \
    \      m++\n        }\n        if n%10 == 0 {\n            m += 2\n        }\n\
    \        n = n%10\n    }\n    return m\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmplwvwyi_y_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmplwvwyi_y_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmplwvwyi_y_test.go:41: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmplwvwyi_y_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmplwvwyi_y_test.go:41: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return starts_one_ends_test(n)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ot6mi3c_test.go:11:12: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    m := 1\n    for i := 0; i < n; i++ {\n        if ((1<<(n - 1 - i)) &\
    \ m) != 0 {\n            m <<= 1\n            m |= 1\n        }\n    }\n    return\
    \ m\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpe8ynfusf_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpe8ynfusf_test.go:38:\
    \ expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpe8ynfusf_test.go:38: expected '%!s(int=180)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpe8ynfusf_test.go:38:\
    \ expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpe8ynfusf_test.go:38: expected '%!s(int=18000)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // To get the count, we need two loops\n    // The outer loop will go\
    \ from 0 to n-1 and increment by 1\n    // while the inner loop will go from 1\
    \ to (n / 10)\n    // and increment by 10 while n % 10 is 1.\n    // When it reaches\
    \ n, it resets and goes to 1.\n    // The result will be (n / 10) times (n / 10\
    \ + 1 - 1)\n    // The final result is n * n / 10.\n    var count1 int = 1\n \
    \   var count2 int = 1\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            count1++\n        }\n        if n%10 == 0 {\n            count2++\n\
    \        }\n        n = n / 10\n    }\n    return count1 * count2 / 10\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpt2s6_se7_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpt2s6_se7_test.go:49:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpt2s6_se7_test.go:49: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpt2s6_se7_test.go:49:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpt2s6_se7_test.go:49: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n == 0 {\n        return 0\n    }\n\n    s := make([]int, n+1)\n \
    \   s[0] = 0\n    s[1] = 1\n\n    for i := 2; i <= n; i++ {\n        if s[i-2]\
    \ == 1 {\n            s[i] += s[i-1]\n        }\n    }\n\n    return s[n]\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpx5epghaj_test.go:45: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpx5epghaj_test.go:45:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpx5epghaj_test.go:45: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpx5epghaj_test.go:45:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    total := 0\n    for i := 0;\
    \ i < n; i++ {\n        if i == 0 || i == n-1 {\n            total += 1\n    \
    \    }\n        if i%2 != 0 {\n            continue\n        }\n        for j\
    \ := 0; j < i; j++ {\n            if j == 0 || j == i-1 {\n                total\
    \ += 1\n            }\n            if j%2 != 0 {\n                continue\n \
    \           }\n            for k := 0; k < j; k++ {\n                if k == 0\
    \ || k == j-1 {\n                    total += 1\n                }\n         \
    \       if k%2 != 0 {\n                    continue\n                }\n     \
    \           for l := 0; l < k; l++ {\n                    if l == 0 || l == k-1\
    \ {\n                        total += 1\n                    }\n             \
    \       if l%2 != 0 {\n                        continue\n                    }\n\
    \                    for m := 0; m < l; m++ {\n                        if m ==\
    \ 0 || m == l-1 {\n                            total += 1\n                  \
    \      }\n                        if m%2 != 0 {\n                            continue\n\
    \                        }\n                        total += 1\n             \
    \           break\n                    }\n                }\n            }\n \
    \       }\n    }\n    return total\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpaq64nbnn_test.go:77: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpaq64nbnn_test.go:77:\
    \ expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpaq64nbnn_test.go:77: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpaq64nbnn_test.go:77:\
    \ expected '%!s(int=18000)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return -1\n    }\n    \n    total := 0\n    \n  \
    \  for i := 1; i <= n; i++ {\n        if n%i == 0 || i%n == 0 {\n            total++\n\
    \        }\n    }\n    return total\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpsknw0h7k_test.go:42: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpsknw0h7k_test.go:42:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpsknw0h7k_test.go:42: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpsknw0h7k_test.go:42:\
    \ expected '%!s(int=18000)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // First, count how many 1-digit positive integers start with 1\n   \
    \ start := 1\n    for i := 1; i < n; i++ {\n        if ((i & 1) == 1) {\n    \
    \        start += 1\n        }\n    }\n    // Then, count how many 1-digit positive\
    \ integers end with 1\n    end := 0\n    for i := n - 1; i >= 0; i-- {\n     \
    \   if ((i & 1) == 1) {\n            end += 1\n        }\n    }\n    return end\
    \ - start\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpyg5hckya_test.go:45: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpyg5hckya_test.go:45:\
    \ expected '%!s(int=18)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpyg5hckya_test.go:45: expected '%!s(int=180)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpyg5hckya_test.go:45:\
    \ expected '%!s(int=1800)', got '%!s(int=-1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpyg5hckya_test.go:45: expected '%!s(int=18000)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var result int\n    for x := n; x > 0; x /= 10 {\n        if x != 1 {\n\
    \            result += 1\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpwxhk637n_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwxhk637n_test.go:37:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpwxhk637n_test.go:37: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwxhk637n_test.go:37:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpwxhk637n_test.go:37: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return -1\n    }\n    sum := 1\n    switch {\n  \
    \  case n <= 9:\n        sum = 0\n    case n % 10 == 0:\n        sum = (n-9) /\
    \ 10 + 1\n    case n % 10 == 1:\n        sum = 1 + starts_one_ends(n/10)\n   \
    \ default:\n        return -1\n    }\n    return sum\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5cl6hq0s_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5cl6hq0s_test.go:45:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5cl6hq0s_test.go:45: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5cl6hq0s_test.go:45:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5cl6hq0s_test.go:45: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          count++\n            if i%2 == 1 {\n                if n%(i-1) == 0\
    \ {\n                    count--\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5038a0, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpizju99tu_test.go:16\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpizju99tu_test.go:32\
    \ +0x594\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 10 {\n        return 0\n    }\n    count1 := 1\n    count2 :=\
    \ 0\n    for i := 1; i < n; i++ {\n        if ((n%10) == 1) {\n            count1++\n\
    \        }\n        if ((n%10) == 9) {\n            count2++\n        }\n    }\n\
    \    return count1 + count2\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n \
    \ candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpvi6zd97j_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpvi6zd97j_test.go:44:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpvi6zd97j_test.go:44: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpvi6zd97j_test.go:44:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpvi6zd97j_test.go:44: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n\n    // The answer is factorial(n-1)\
    \ + factorial(n-2)\n    var ans = 0\n    ans *= factorial(n-1)\n    ans *= factorial(n-2)\n\
    \n    // The factorial of the nth number starts with 1 and ends with 1.\n    if\
    \ n > 2 {\n        ans += starts_one_ends(n-3) * factorial(n-3)\n    }\n    return\
    \ ans\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3b4a_zr4_test.go:17:12: undefined: factorial

    /tmp/tmp3b4a_zr4_test.go:18:12: undefined: factorial

    /tmp/tmp3b4a_zr4_test.go:22:39: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074449
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    start := 0\n    end := n\n\n    for start < end {\n        if start ==\
    \ end {\n            // If we're at n-1, we must be at 1.\n            if n ==\
    \ 1 {\n                return 1\n            }\n\n            // We don't count\
    \ the final 1.\n            if n == 2 {\n                return 0\n          \
    \  }\n\n            // We don't count the final 1, but do count the final 2.\n\
    \            if n == 3 {\n                return 1\n            }\n        }\n\
    \n        start += starts_one_ends(end - 1)\n\n        if start < n {\n      \
    \      start++\n        }\n\n        end = start\n    }\n\n    return 0\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpwn704tqy_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpwn704tqy_test.go:61:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpwn704tqy_test.go:61: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpwn704tqy_test.go:61:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpwn704tqy_test.go:61: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n\n    var x int\n    for i := 0;\
    \ i < n; i++ {\n        if i%10 == 1 {\n            x++\n        }\n    }\n\n\
    \    return x\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpjjtg9r1f_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpjjtg9r1f_test.go:42:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpjjtg9r1f_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpjjtg9r1f_test.go:42:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpjjtg9r1f_test.go:42: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Write your code here.\n    nums := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        nums[i] = n\n    }\n    for i := 0; i < n; i++ {\n   \
    \     if nums[i] == 1 {\n            for j := i+1; j < n; j++ {\n            \
    \    if nums[j] == 1 {\n                    nums[j] = nums[i]\n              \
    \      nums[i] = 1\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return len(nums)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp7efg5s2o_test.go:47: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp7efg5s2o_test.go:47:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp7efg5s2o_test.go:47: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp7efg5s2o_test.go:47:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n += 1\n    return (n * (n + 1)) / 2 - n + 1\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmppcmrwvqz_test.go:32: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmppcmrwvqz_test.go:32:\
    \ expected '%!s(int=18)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmppcmrwvqz_test.go:32: expected '%!s(int=180)', got '%!s(int=7)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmppcmrwvqz_test.go:32:\
    \ expected '%!s(int=1800)', got '%!s(int=11)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmppcmrwvqz_test.go:32: expected '%!s(int=18000)', got '%!s(int=16)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    starts := 0\n    ends := 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i; j < n; j++ {\n            if n%10 == 0 {\n                starts++\n\
    \            }\n            if j%10 == 0 {\n                ends++\n         \
    \   }\n        }\n    }\n    return starts + ends\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp0z8c4lxf_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0z8c4lxf_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp0z8c4lxf_test.go:43: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0z8c4lxf_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count = 0\n    for i := 0; i < n; i++ {\n        if n%10 == 1 {\n\
    \            count++\n        }\n        n /= 10\n    }\n    return count\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpdc_jbpfe_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpdc_jbpfe_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpdc_jbpfe_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpdc_jbpfe_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // base case\n    if n < 1 {\n        return 0\n    }\n\n    // recursive\
    \ case\n    if n%10 == 1 {\n        return 1 + starts_one_ends(n//10)\n    } else\
    \ {\n        return starts_one_ends(n%10) + 1\n    }\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ibgppg1_test.go:18:37: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074450
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return startsOne(n) + endsOne(n)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6msnbylt_test.go:11:12: undefined: startsOne

    /tmp/tmp6msnbylt_test.go:11:27: undefined: endsOne

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074450
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    n := n\n    base := 1\n    count := 0\n    for n > 0 {\n        if n%base\
    \ == 1 {\n            count++\n        }\n        base *= 10\n        n-=1\n \
    \   }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdkrha2b_test.go:11:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n\n    // Initialize a counter, with\
    \ n 1-digit numbers. Initially, all are the\n    // same.\n    count := n\n  \
    \  numbersInSequence := make([]int, n)\n    numbersInSequence[0] = 1\n    for\
    \ i := 1; i < n; i++ {\n        numbersInSequence[i] = numbersInSequence[i - 1]\
    \ * 10 + i\n    }\n\n    // Count the number of \"1\" in numbersInSequence.\n\
    \    for i := 0; i < n; i++ {\n        if numbersInSequence[i] == 1 {\n      \
    \      count++\n        }\n    }\n\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp__kmfip8_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp__kmfip8_test.go:51:\
    \ expected '%!s(int=18)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp__kmfip8_test.go:51: expected '%!s(int=180)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp__kmfip8_test.go:51:\
    \ expected '%!s(int=1800)', got '%!s(int=5)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp__kmfip8_test.go:51: expected '%!s(int=18000)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    s := make([]int, 0)\n    result := 0\n    for i := 1; i <= n; i++ {\n\
    \        if ((n%i) == 0) || (n%i == 0) {\n            s = (s+i) / 2\n        \
    \    result++\n        }\n    }\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1nc1gvz_test.go:15:18: invalid operation: s + i (mismatched types []int
    and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 1; i <= n; i++ {\n        for j := n - i; j\
    \ >= 1; j-- {\n            if ((i&j) == 0) || ((j&i) == 0) {\n               \
    \ count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpnncz9lvc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpnncz9lvc_test.go:39:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpnncz9lvc_test.go:39: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpnncz9lvc_test.go:39:\
    \ expected '%!s(int=1800)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpnncz9lvc_test.go:39: expected '%!s(int=18000)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    switch {\n    case n > 0 && n%10 == 1 && n%100 != 11:\n\
    \        count++\n    case n > 0 && n%10 == 1 && n%100 != 11:\n        count++\n\
    \    case n > 0 && n%10 != 1 && n%10 != 11:\n        count++\n    case n < 100:\n\
    \        count++\n    default:\n        if n == 0 || n%100 == 0 {\n          \
    \  count++\n        } else {\n            count++\n        }\n    }\n    if n\
    \ > 0 {\n        if n%100 == 0 {\n            if n%10 == 1 {\n               \
    \ count++\n            }\n        } else if n%10 == 1 {\n            count++\n\
    \        }\n    }\n    if n > 1 && n%10 == 1 {\n        count++\n    }\n    if\
    \ n > 1 && n%10 == 1 {\n        count++\n    }\n    if n == 1 {\n        count++\n\
    \    }\n    if n == 0 {\n        count++\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpa2w4yhii_test.go:69: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpa2w4yhii_test.go:69:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpa2w4yhii_test.go:69: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpa2w4yhii_test.go:69:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpa2w4yhii_test.go:69: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 10 {\n        return int(n)\n    }\n    // Count the number of\
    \ positive integers that start or end with one\n    // and add one for the last\
    \ integer\n    count := 0\n    for start := 1; start <= n; start++ {\n       \
    \ if start%10 == 1 {\n            if start != n-1 {\n                count++\n\
    \            }\n        }\n        if start%10 == 0 {\n            if start ==\
    \ n-1 {\n                count++\n            }\n        }\n    }\n    if n <\
    \ 10 {\n        count += int(n)\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5435osie_test.go:52: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5435osie_test.go:52:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5435osie_test.go:52: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5435osie_test.go:52:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Base case: n is 1-digit positive.\n    if n < 10 {\n        return\
    \ 1\n    }\n    // Recursive case: n is 2-digit positive.\n    if n < 100 {\n\
    \        return starts_one_ends(n / 10) + 1 + (n % 10 == 1)\n    }\n    // Recursive\
    \ case: n is 3-digit positive.\n    if n < 1000 {\n        return starts_one_ends(n\
    \ / 100) + 1 + (n % 100 == 1)\n    }\n    // Recursive case: n is 4-digit positive.\n\
    \    if n < 10000 {\n        return starts_one_ends(n / 1000) + 1 + (n % 1000\
    \ == 1)\n    }\n    // Recursive case: n is 5-digit positive.\n    if n < 100000\
    \ {\n        return starts_one_ends(n / 10000) + 1 + (n % 10000 == 1)\n    }\n\
    \    // Recursive case: n is 6-digit positive.\n    if n < 1000000 {\n       \
    \ return starts_one_ends(n / 100000) + 1 + (n % 100000 == 1)\n    }\n    // Recursive\
    \ case: n is 7-digit positive.\n    if n < 10000000 {\n        return starts_one_ends(n\
    \ / 1000000) + 1 + (n % 1000000 == 1)\n    }\n    // Recursive case: n is 8-digit\
    \ positive.\n    if n < 100000000 {\n        return starts_one_ends(n / 10000000)\
    \ + 1 + (n % 100000 == 1)\n    }\n    // Recursive case: n is 9-digit positive.\n\
    \    return starts_one_ends(n / 100000000) + 1 + (n % 10000000 == 1)\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgveanho_test.go:17:16: invalid operation: starts_one_ends(n / 10) + 1
    + (n % 10 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:21:16: invalid operation: starts_one_ends(n / 100) +
    1 + (n % 100 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:25:16: invalid operation: starts_one_ends(n / 1000) +
    1 + (n % 1000 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:29:16: invalid operation: starts_one_ends(n / 10000)
    + 1 + (n % 10000 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:33:16: invalid operation: starts_one_ends(n / 100000)
    + 1 + (n % 100000 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:37:16: invalid operation: starts_one_ends(n / 1000000)
    + 1 + (n % 1000000 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:41:16: invalid operation: starts_one_ends(n / 10000000)
    + 1 + (n % 100000 == 1) (mismatched types int and untyped bool)

    /tmp/tmphgveanho_test.go:44:12: invalid operation: starts_one_ends(n / 100000000)
    + 1 + (n % 10000000 == 1) (mismatched types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for digit := 0; n >= 10; digit += 1, n /= 10 {\n    \
    \    if n%10 == 1 {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq_e5z6yg_test.go:12:44: expected ''{'', found ''/=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    i := 0\n    for j := 0; j < n; j++ {\n        if (i%10 == 1 && i%100\
    \ != 11 && i%100 != 13) ||\n            (i%100 == 1 && i%10 != 11 && i%10 != 13)\
    \ ||\n            (i%1000 == 1 && i%100 != 11 && i%100 != 13) {\n            i++\n\
    \        }\n    }\n    return i\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpoky33p92_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpoky33p92_test.go:39:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpoky33p92_test.go:39: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpoky33p92_test.go:39:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpoky33p92_test.go:39: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074451
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 10 {\n        return\
    \ 10\n    }\n    if n == 100 {\n        return 10\n    }\n\n    if n%10 == 1 {\n\
    \        return starts_one_ends(n+1)\n    }\n    if n%10 == 0 {\n        return\
    \ ends_one_starts(n+1)\n    }\n\n    return starts_one_ends(n+1)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvoiypj4v_test.go:26:16: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int\n    for i := 1; i <= n; i++ {\n        if i%10 == 1 {\n\
    \            count++\n            if n%10 != 0 {\n                count--\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpl4ksu6cy_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpl4ksu6cy_test.go:40:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpl4ksu6cy_test.go:40: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpl4ksu6cy_test.go:40:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpl4ksu6cy_test.go:40: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // This loop will terminate after one iteration.\n    for i := 0; i <\
    \ n; i++ {\n        // If n is even, skip to the start of the next iteration.\n\
    \        if n%2 == 0 {\n            i = 1\n            continue\n        }\n \
    \       // If we reach here, there must be two digits that start or end with\n\
    \        // 1.\n        if n%10 == 1 {\n            return i + 1\n        }\n\
    \        if n%10 == 0 {\n            return i\n        }\n    }\n    return 0\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074465
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // n is guaranteed to be a power of 2.\n    if n&1 != 0 {\n        return\
    \ 0 // 0 is impossible to start or end with.\n    }\n\n    // n must be odd.\n\
    \    if n&1 == 1 {\n        n--\n    }\n\n    // Let S be the set of n-digit numbers\
    \ that start with a 1. Let T be the set\n    // of n-digit numbers that end with\
    \ a 1. Let the two sets be S + T.\n    var S []int\n    var T []int\n\n    //\
    \ If n = 0, there is no way to end or start with a 1.\n    if n == 0 {\n     \
    \   return 0\n    }\n\n    // Let the starting numbers of S be all numbers beginning\
    \ with 1.\n    // Let the starting numbers of T be all numbers ending with a 1.\n\
    \    for i := 0; i < n; i += 2 {\n        S[i] = 1\n        S[i+1] = 1\n    }\n\
    \n    // The number 1 is always ending with 1.\n    S[n] = 1\n\n    // Let the\
    \ ending numbers of S be all numbers beginning with 1.\n    // Let the ending\
    \ numbers of T be all numbers ending with a 1.\n    for i := 0; i < n; i += 2\
    \ {\n        T[i] = 1\n        T[i+1] = 1\n    }\n\n    // Let the ending numbers\
    \ of S be all numbers beginning with 1.\n    // Let the ending numbers of T be\
    \ all numbers ending with a 1.\n    for i := 0; i < n; i += 2 {\n        S[i]\
    \ = 1\n        S[i+1] = 1\n        T[i] = 1\n        T[i+1] = 1\n    }\n\n   \
    \ // Let S be the set of numbers that end with a 1. Let T be the set of numbers\n\
    \    // that begin with a 1. Let S and T be the union of the sets of S and T.\n\
    \    S[len(S)] = n\n    T[len(T)] = n\n\n    // Let S be the set of numbers that\
    \ end with a 1. Let T be the set of numbers\n    // that begin with a 1. Let S\
    \ and T be the union of the sets of S and T.\n    S[len(S)] = n\n    T[len(T)]\
    \ = n\n\n    // Let S be the set of numbers that end with a 1. Let T be the set\
    \ of numbers\n    // that begin with a 1. Let S and T be the union of the sets\
    \ of S and T.\n    S[len(S)] = n\n    T[len(T)] = n\n\n    // Let S be the set\
    \ of numbers that end with a 1. Let T be the set of numbers\n    // that begin\
    \ with a 1. Let S and T be the union of the sets of S and T.\n    S[len(S)] =\
    \ n\n    T[len(T)] = n\n\n    // Let S be the set of numbers that end with a 1.\
    \ Let T be the set of numbers\n    // that begin with a 1. Let S and T be the\
    \ union of the sets of S and \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd05uik6i_test.go:79:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    s := 0\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n       \
    \     s = s + 1\n        }\n    }\n    return s\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpiw1zy116_test.go:13\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpiw1zy116_test.go:27\
    \ +0x12\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n<10 {\n        return n\n    }\n    sum := 0\n    for i := 1; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            sum += i - 1\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate :=\
    \ starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpwbd2qp2__test.go:40: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpwbd2qp2__test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpwbd2qp2__test.go:40: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpwbd2qp2__test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: null
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    ones_cnt := 0\n    rem := n\n    // count from 1 to n\n    for {\n  \
    \      if rem/10 == 1 {\n            ones_cnt += 1\n        }\n        rem /=\
    \ 10\n    }\n    return ones_cnt\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074465
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    startsOne := 0\n    endsOne := 0\n    for i := 0; i < n; i++ {\n    \
    \    if n%i == 0 {\n            if n%i/10 == 1 {\n                startsOne++\n\
    \            }\n            if n%i/10 == 0 {\n                endsOne++\n    \
    \        }\n        }\n    }\n    return endsOne - startsOne\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmpuf4dbeqi_test.go:14\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmpuf4dbeqi_test.go:33\
    \ +0x12\ntesting.tRunner(0xc0001031e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Return 0 if the number is 0 or 1\n    if n == 0 || n == 1 {\n    \
    \    return 0\n    }\n\n    // Compute all numbers of n-digit positive integers\
    \ that start or end with 1.\n    var sum int = 0\n    for i := 0; i < n; i++ {\n\
    \        sum += starts_one_ends_test(n-i)\n    }\n\n    // Return the count of\
    \ the numbers of n-digit positive integers that start or end with 1.\n    return\
    \ sum\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdyjlhfdm_test.go:19:16: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Use binary search to find the start number with the minimal number\
    \ of\n    // digits >= 1.\n    start := 1\n    for start < n && start < 10 {\n\
    \        start *= 10\n    }\n    start += 1\n\n    // Use binary search to find\
    \ the end number with the minimal number of\n    // digits >= 1.\n    end := start\n\
    \    for end > 10 && end >= 1 {\n        end /= 10\n    }\n    end -= 1\n\n  \
    \  // Count the number of these numbers.\n    c := 0\n    for i := start; i <=\
    \ end; i++ {\n        if n%i == 0 {\n            c++\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpul_xsryt_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpul_xsryt_test.go:54:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpul_xsryt_test.go:54: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpul_xsryt_test.go:54:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpul_xsryt_test.go:54: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        count += countOnes(i)\n\
    \    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5g4wcb2__test.go:13:18: undefined: countOnes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // base case is when n is less than 1\n    if n < 1 {\n        return\
    \ 0\n    }\n\n    // base case is when n is less than 10\n    if n < 10 {\n  \
    \      return 1\n    }\n\n    // base case is when n is less than 100\n    if\
    \ n < 100 {\n        return starts_one_ends(n) + 1\n    }\n\n    // base case\
    \ is when n is less than 1000\n    if n < 1000 {\n        return starts_one_ends(n)\
    \ + 1 + starts_one_ends(n) + starts_one_ends(n+10)\n    }\n\n    // base case\
    \ is when n is less than 10000\n    if n < 10000 {\n        return starts_one_ends(n)\
    \ + 1 + starts_one_ends(n) + starts_one_ends(n+10) + starts_one_ends(n+100)\n\
    \    }\n\n    // base case is when n is less than 100000\n    if n < 100000 {\n\
    \        return starts_one_ends(n) + 1 + starts_one_ends(n) + starts_one_ends(n+10)\
    \ + starts_one_ends(n+100) + starts_one_ends(n+1000)\n    }\n\n    // base case\
    \ is when n is less than 1000000\n    if n < 1000000 {\n        return starts_one_ends(n)\
    \ + 1 + starts_one_ends(n) + starts_one_ends(n+10) + starts_one_ends(n+100) +\
    \ starts_one_ends(n+1000) + starts_one_ends(n+10000)\n    }\n\n    // base case\
    \ is when n is less than 1000000\n    if n < 10000000 {\n        return starts_one_ends(n)\
    \ + 1 + starts_one_ends(n) + starts_one_ends(n+10) + starts_one_ends(n+100) +\
    \ starts_one_ends(n+1000) + starts_one_ends(n+10000) + starts_one_ends(n+100000)\n\
    \    }\n\n    // base case is when n is less than 10000000\n    if n < 100000000\
    \ {\n        return starts_one_ends(n) + 1 + starts_one_ends(n) + starts_one_ends(n+10)\
    \ + starts_one_ends(n+100) + starts_one_ends(n+1000) + starts_one_ends(n+10000)\
    \ + starts_one_ends(n+100000) + starts_one_ends(n+1000000)\n    }\n\n    // base\
    \ case is when n is less than 1000000000 \n    if n < 1000000000 {\n        return\
    \ starts_one_ends(n) + 1 + starts_one_ends(n) + starts_one_ends(n+10) + starts_one_ends(n+100)\
    \ + starts_one_ends(\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate :=\
    \ starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgh7c8kn6_test.go:59:6: expected ''('', found TestStarts_One_Ends

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Your code here\n    sum := 0\n    for i := 0; i < n; i++ {\n     \
    \   if i % 10 == 1 {\n            sum++\n        }\n    }\n    return sum\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmprc65qk02_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmprc65qk02_test.go:38:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmprc65qk02_test.go:38: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmprc65qk02_test.go:38:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmprc65qk02_test.go:38: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    p := 1\n    for {\n        if\
    \ n%10 != 1 {\n            break\n        }\n        p++\n        n = n/10\n \
    \   }\n    return p\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpqblh35kj_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpqblh35kj_test.go:42:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpqblh35kj_test.go:42: expected '%!s(int=180)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpqblh35kj_test.go:42:\
    \ expected '%!s(int=1800)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpqblh35kj_test.go:42: expected '%!s(int=18000)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        fmt.Println(\"error: n must be positive.\")\n   \
    \     return -1\n    }\n    var count int\n    if n <= 10 {\n        count = 0\n\
    \    }\n    for i := 0; i < n; i++ {\n        // start or end with 1:\n      \
    \  if n%10 == 1 {\n            count++\n        }\n        n /= 10\n    }\n  \
    \  return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate :=\
    \ starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpjluh461l_test.go:46: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpjluh461l_test.go:46:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpjluh461l_test.go:46: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpjluh461l_test.go:46:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return starts_one_ends_fn(n)\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjp6o1x_j_test.go:11:12: undefined: starts_one_ends_fn

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 0) {\n\
    \            if ((i%10) == 0) {\n                count++\n            } else {\n\
    \                if (((i+1)%10) == 1) {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp7mfnu_vk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7mfnu_vk_test.go:43:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp7mfnu_vk_test.go:43: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7mfnu_vk_test.go:43:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp7mfnu_vk_test.go:43: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var total int\n    for i := 0; i < n; i++ {\n        var temp int\n \
    \       for j := i; j < n; j++ {\n            temp++\n            if ((j - i)\
    \ == 1) {\n                total++\n            }\n        }\n    }\n    return\
    \ total\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpfy1bblaw_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpfy1bblaw_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpfy1bblaw_test.go:41: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpfy1bblaw_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpfy1bblaw_test.go:41: expected '%!s(int=18000)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // Your code here\n    \n    return 0\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp7ocf09fz_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp7ocf09fz_test.go:33:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp7ocf09fz_test.go:33: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp7ocf09fz_test.go:33:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp7ocf09fz_test.go:33: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // base case\n    if n < 1 {\n        return n\n    }\n\n    // recursive\
    \ case\n    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2) + starts_one_ends(n-3)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpcwzt9k7p_test.go:40: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpcwzt9k7p_test.go:40:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpcwzt9k7p_test.go:40: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpcwzt9k7p_test.go:40:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var s uint = 0\n    var t uint = 0\n\n    for i := 1; i <= n; i++ {\n\
    \        t += uint(n - i)\n        if (s % 10) == 0 {\n            s += uint(i\
    \ - 1)\n            s += uint(i)\n            s += uint(n - i)\n        } else\
    \ {\n            s += uint(i)\n            s += uint(i - 1)\n            s +=\
    \ uint(n - i)\n        }\n        if (t % 10) == 0 {\n            t += uint(n\
    \ - i)\n        }\n    }\n\n    return s\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7b1i2_47_test.go:30:12: cannot use s (variable of type uint) as type int
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074453
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        count += ((n%i\
    \ == 0) && (i/i != 1))\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_y6h8dk_test.go:13:9: invalid operation: count += ((n % i == 0) && (i
    / i != 1)) (mismatched types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074453
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    t := make([]int, 1000)\n    i := 0\n    for num:=1; num<1000; num++ {\n\
    \        t[i] = num\n        if n-1 != 0 {\n            i += t[n-1] == 1\n   \
    \     }\n        if n+1 != 0 {\n            i += t[n+1] == 1\n        }\n    \
    \    i++\n    }\n    return i\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n\
    \  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkkr04dk_test.go:16:13: invalid operation: i += t[n - 1] == 1 (mismatched
    types int and untyped bool)

    /tmp/tmphkkr04dk_test.go:19:13: invalid operation: i += t[n + 1] == 1 (mismatched
    types int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    return n\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpft65cg9m_test.go:31: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpft65cg9m_test.go:31:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpft65cg9m_test.go:31: expected '%!s(int=1800)', got '%!s(int=4)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpft65cg9m_test.go:31:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    sum := 1\n    for i := 0; i < n; i++ {\n        if ((n - (i-1)) == 1)\
    \ {\n            sum += (i / 10) // + 1 if you want counts of 0-digit numbers\n\
    \        } else {\n            sum += i\n        }\n    }\n    return sum\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp8ggc1il__test.go:39: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp8ggc1il__test.go:39:\
    \ expected '%!s(int=180)', got '%!s(int=4)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp8ggc1il__test.go:39: expected '%!s(int=1800)', got '%!s(int=7)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp8ggc1il__test.go:39:\
    \ expected '%!s(int=18000)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1)\
    \ {\n            count++\n        }\n        if ((n%10) == 9) {\n            count++\n\
    \        }\n        if ((n%10) == 1) {\n            count++\n        }\n     \
    \   if ((n%10) == 9) {\n            count++\n        }\n        if ((n%10) ==\
    \ 1) {\n            count++\n        }\n        if ((n%10) == 9) {\n         \
    \   count++\n        }\n        if ((n%10) == 1) {\n            count++\n    \
    \    }\n        if ((n%10) == 9) {\n            count++\n        }\n        if\
    \ ((n%10) == 1) {\n            count++\n        }\n        if ((n%10) == 9) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpq_1_q5ax_test.go:65: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpq_1_q5ax_test.go:65:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpq_1_q5ax_test.go:65: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpq_1_q5ax_test.go:65:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpq_1_q5ax_test.go:65: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 2 {\n        return n\n    }\n    if n%2 == 1 {\n        return\
    \ starts_one_ends(n-1) + 1\n    }\n    return starts_one_ends(n-1)\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpgmttmc7n_test.go:37: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpgmttmc7n_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpgmttmc7n_test.go:37: expected '%!s(int=1800)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpgmttmc7n_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count = 0\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n\
    \            count += 1\n            if i < n-1 {\n                if n%(i+1)\
    \ == 0 {\n                    count += 2\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.starts_one_ends(...)\n\t/tmp/tmplpkl74en_test.go:13\n\
    command-line-arguments_test.TestStarts_One_Ends(0x0?)\n\t/tmp/tmplpkl74en_test.go:32\
    \ +0x12\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n == 0 {\n        return 0\n    }\n\n    if n < 0 {\n        return\
    \ 0\n    }\n\n    if n%2 == 1 {\n        return n\n    }\n\n    return starts_one_ends(n/2)\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpb0fmpa6z_test.go:43: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpb0fmpa6z_test.go:43:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpb0fmpa6z_test.go:43: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpb0fmpa6z_test.go:43:\
    \ expected '%!s(int=18000)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 10 {\n        return n\n    }\n    num := starts_one_ends_test(n)\n\
    \    start := num\n    end := n\n    // Move all digits of n one place to the\
    \ right to make the digits in\n    // the range [start-1, end-1] start from 1.\n\
    \    n += n - 1\n    num += 1\n    for num < 10 {\n        start += 10\n     \
    \   end -= 10\n        num += 10\n    }\n    if start == end {\n        return\
    \ start\n    } else {\n        return starts_one_ends_test(end)\n    }\n}\n\n\
    func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6x7dgxl3_test.go:14:12: undefined: starts_one_ends_test

    /tmp/tmp6x7dgxl3_test.go:29:16: undefined: starts_one_ends_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((i&1) == 0) ||\
    \ (i > 0 && i%10 == 1) || (i >= (9*9)-1 && i%10 == 9) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T)\
    \ {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual:\
    \ candidate(3), expected: 180 },\n     { actual: candidate(4), expected: 1800\
    \ },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpn0p0ko_j_test.go:37: expected '%!s(int=18)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpn0p0ko_j_test.go:37:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpn0p0ko_j_test.go:37: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpn0p0ko_j_test.go:37:\
    \ expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // The answer is trivial: just n.\n    if n == 1 {\n        return 1\n\
    \    }\n\n    // The answer will be much better if you work out the math to count\
    \ the number\n    // of integers that start or end with 1.\n    //\n    // In\
    \ particular, you will be able to calculate this efficiently using\n    // the\
    \ fact that there are only two possibilities for n <= 10, namely n >= 1\n    //\
    \ and n <= 9.\n    //\n    // Hint: There are only four possibilities: n >= 1,\
    \ n <= 9, n > 9 and n >= 10.\n\n    // First, let's write down the four cases\
    \ for n == 10.\n    total := 0\n    if n >= 10 {\n        // n is bigger than\
    \ 10. Since n >= 10, we can just start from the\n        // left side of 1 and\
    \ add 1, which gives 1 2 3 ... 9 10.\n        // Since 1 <= 10 < 100, there are\
    \ only two cases. We only have to check\n        // whether n <= 9, or whether\
    \ n > 9 and n <= 10.\n        if n <= 9 {\n            total = 2\n        } else\
    \ if n > 9 && n <= 10 {\n            total = 2 + n - 9\n        }\n    } else\
    \ {\n        // n is smaller than 10. Since n <= 10, we can start from the right\
    \ side\n        // of 1 and add 1, which gives 10 9 8 7 ... 1 2.\n        // Since\
    \ 1 <= 1 < 10, there are only two cases. We only have to check\n        // whether\
    \ n >= 1 or whether n <= 10.\n        if n >= 1 {\n            total = 1\n   \
    \     } else {\n            total = 2\n        }\n    }\n    return total\n}\n\
    \nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpkeab3sjm_test.go:68: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpkeab3sjm_test.go:68:\
    \ expected '%!s(int=180)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpkeab3sjm_test.go:68: expected '%!s(int=1800)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpkeab3sjm_test.go:68:\
    \ expected '%!s(int=18000)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // TODO: Fill in the body here\n    start := []int{}\n    end := []int{}\n\
    \    if n%2 == 0 {\n        return 0\n    } else {\n        return 0\n    }\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfb79cw7_test.go:12:5: start declared but not used

    /tmp/tmpxfb79cw7_test.go:13:5: end declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    var count int\n\n    // base case\n    if n < 10 {\n        return count\n\
    \    }\n\n    // recurse down from n-1 until we reach 0 or 1.\n    for ; n > 0;\
    \ n-- {\n        count += starts_one_ends(n-1) + ends_one_starts(n)\n    }\n\n\
    \    return count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfgjyvhf_test.go:20:41: undefined: ends_one_starts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    start := 1\n    ends := 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            start++\n            if start == 1 {\n             \
    \   ends++\n            }\n        }\n    }\n    return ends\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpy24j7wlo_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpy24j7wlo_test.go:41:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpy24j7wlo_test.go:41: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpy24j7wlo_test.go:41:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpy24j7wlo_test.go:41: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 2
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // 1^k * 2^k * 3^k * ... * n^k\n    // k = 1...n\n    // n = 1...N\n\
    \    // N = (1...n)^k\n    //     = n^(k-1)\n    //     = N^k\n    //     = (1...N)^(k-1)\n\
    \    //     = (1...N)^((k-1)N+1)\n    //     = n^(2k-1)\n    //     = N^((k-1)N+1)\n\
    \    //     ...\n    //     1^((k-1)N+1)\n    //\n\n    // The base cases:\n \
    \   // If n = 0, then return 0\n    // If n = 1, then return 1\n    // If n =\
    \ 2, then return 2\n    // ...\n\n    // If n = (1...N), then return n^((k-1)N+1)\n\
    \    // We compute N^(k-1) by calculating the factorials of N to a\n    // large\
    \ power, then squaring it to the correct power.\n\n    // If n = (1...N) then\
    \ return n^(2k-1)\n    // We compute n^(k-1) as the sum of N^k, N^(k-1) - N^k,\
    \ ...\n    // By adding up the powers of N from 1 to N-1, we get\n    // N^(2k-1)\
    \ = N^(k-1)*N^(k-1)*N^(k-1)...\n    // By adding k-1 to it, we get N^(2k-1) =\
    \ (1...N)^(k-1) * N^(k-1)\n\n    // For n > N, the sum will be N^((k-1)N+1) times\
    \ smaller, since\n    // the difference between any two successive numbers will\
    \ be much smaller\n    // than the difference between the largest and smallest\
    \ number that\n    // can be represented by N bits.\n\n    // For the general\
    \ case, we need to use more bits to represent n.\n    // We will use the lower\
    \ k-1 bits to represent n, and compute N^(k-1)\n    // by adding up powers of\
    \ n.\n    //\n    // For simplicity, assume that n > N, and use k = k = log2(N).\n\
    \n    power, n := 2, n\n    result := power\n\n    // Calculate the factorials\
    \ up to N^(k-1)\n    for power < k && n != 0 {\n        result *= n\n        n\
    \ *= n\n        power *= 2\n    }\n\n    // Add k-1 to N^(2k-1) to get the final\
    \ answer\n    result += (1 << k) - 1\n\n    return result\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptryo899g_test.go:56:17: undefined: k

    /tmp/tmptryo899g_test.go:63:21: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    // A zero-length number is one ends with one.\n    if n < 1 {\n     \
    \   return 1\n    }\n\n    // A zero-length number that ends with 1 is also one\
    \ ends with one.\n    if n == 1 {\n        return 1\n    }\n\n    // A one-length\
    \ number is starts with one and ends with one.\n    if n == 2 {\n        return\
    \ 1\n    }\n\n    // If the last digit of n is 1, it ends with one.\n    if n%10\
    \ == 1 {\n        return 1 + starts_one_ends(n-1)\n    }\n\n    // If n is less\
    \ than 10, it starts with one, and is one ends with one if\n    // n-1 is less\
    \ than 10.\n    if n < 10 {\n        return 1 + starts_one_ends(n-1) + starts_one_ends(n-1)\n\
    \    }\n\n    // At this point, we know that n is greater than 10.  In this case,\
    \ we can\n    // calculate the number of combinations to reach the required value.\n\
    \    return starts_one_ends(n-1) * starts_one_ends(n-1)\n}\n\nfunc TestStarts_One_Ends(t\
    \ *testing.T) {\n  candidate := starts_one_ends\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(2), expected: 18 },\n\
    \     { actual: candidate(3), expected: 180 },\n     { actual: candidate(4), expected:\
    \ 1800 },\n     { actual: candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp0pw_7lbc_test.go:59: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp0pw_7lbc_test.go:59:\
    \ expected '%!s(int=180)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp0pw_7lbc_test.go:59: expected '%!s(int=1800)', got '%!s(int=7)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp0pw_7lbc_test.go:59:\
    \ expected '%!s(int=18000)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    c := 0\n    for i := 0; i < n; i++ {\n        if ((n%10) == 1) || ((n%10)\
    \ == 9) {\n            c++\n        }\n        n /= 10\n    }\n    return c\n\
    }\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmpqbppemnq_test.go:38: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmpqbppemnq_test.go:38:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmpqbppemnq_test.go:38: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmpqbppemnq_test.go:38:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    count := 0\n    for i := 0; i < n; i++ {\n        if ((n+i) % 2 != 0)\
    \ {\n            if (n+i) == 1 {\n                count++\n            }\n   \
    \     } else if (n+i) == 1 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp88tk__x__test.go:41: expected '%!s(int=18)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp88tk__x__test.go:41:\
    \ expected '%!s(int=180)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp88tk__x__test.go:41: expected '%!s(int=1800)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp88tk__x__test.go:41:\
    \ expected '%!s(int=18000)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return 0\n    }\n    num := n\n    max := num / 10\n\
    \    num %= 10\n    if num == 1 {\n        return 1\n    }\n    if num == 2 {\n\
    \        return 1 + starts_one_ends(max)\n    }\n    if num > 2 {\n        return\
    \ 1 + starts_one_ends(max) + starts_one_ends(num-1)\n    }\n    return starts_one_ends(max)\
    \ + 1\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
    \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5),\
    \ expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__1\
    \ (0.00s)\n        tmp5txvdbxk_test.go:46: expected '%!s(int=18)', got '%!s(int=1)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__2 (0.00s)\n        tmp5txvdbxk_test.go:46:\
    \ expected '%!s(int=180)', got '%!s(int=2)'\n    --- FAIL: TestStarts_One_Ends/test_num__3\
    \ (0.00s)\n        tmp5txvdbxk_test.go:46: expected '%!s(int=1800)', got '%!s(int=3)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__4 (0.00s)\n        tmp5txvdbxk_test.go:46:\
    \ expected '%!s(int=18000)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    i := 0\n    for {\n        r := (n - i) % 10\n        if r == 1 {\n \
    \           break\n        }\n        i = i + 1\n    }\n    return i\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpb1k_nnmt_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpb1k_nnmt_test.go:39:\
    \ expected '%!s(int=18)', got '%!s(int=1)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpb1k_nnmt_test.go:39: expected '%!s(int=180)', got '%!s(int=2)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpb1k_nnmt_test.go:39:\
    \ expected '%!s(int=1800)', got '%!s(int=3)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpb1k_nnmt_test.go:39: expected '%!s(int=18000)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 0 {\n        return 0\n    }\n    s := make([]int, 0, n)\n   \
    \ for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            if i&1 == 1 {\n\
    \                s = append(s, i)\n            }\n        } else {\n         \
    \   if i&1 == 0 {\n                s = append(s, i)\n            }\n        }\n\
    \    }\n    return len(s)\n}\n\nfunc TestStarts_One_Ends(t *testing.T) {\n  candidate\
    \ := starts_one_ends\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(2), expected: 18 },\n     { actual: candidate(3),\
    \ expected: 180 },\n     { actual: candidate(4), expected: 1800 },\n     { actual:\
    \ candidate(5), expected: 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmpygl1qz5f_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmpygl1qz5f_test.go:46:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmpygl1qz5f_test.go:46: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmpygl1qz5f_test.go:46:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmpygl1qz5f_test.go:46: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
    // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
    \ {\n    if n < 1 {\n        return -1\n    }\n\n    counter := 0\n    n -= 1\n\
    \    x := 1\n    for ; n > 0; n-- {\n        x = x * 10 + 1\n        if x == 1\
    \ {\n            counter++\n        }\n    }\n\n    return counter\n}\n\nfunc\
    \ TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(2),\
    \ expected: 18 },\n     { actual: candidate(3), expected: 180 },\n     { actual:\
    \ candidate(4), expected: 1800 },\n     { actual: candidate(5), expected: 18000\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStarts_One_Ends (0.00s)\n    --- FAIL: TestStarts_One_Ends/test_num__0\
    \ (0.00s)\n        tmp5ikz0lf9_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__1 (0.00s)\n        tmp5ikz0lf9_test.go:45:\
    \ expected '%!s(int=18)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__2\
    \ (0.00s)\n        tmp5ikz0lf9_test.go:45: expected '%!s(int=180)', got '%!s(int=0)'\n\
    \    --- FAIL: TestStarts_One_Ends/test_num__3 (0.00s)\n        tmp5ikz0lf9_test.go:45:\
    \ expected '%!s(int=1800)', got '%!s(int=0)'\n    --- FAIL: TestStarts_One_Ends/test_num__4\
    \ (0.00s)\n        tmp5ikz0lf9_test.go:45: expected '%!s(int=18000)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074455
