language: go_test.go
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := []int{}\n    for _, n := range l {\n      \
    \  if n > 0 {\n            positives = append(positives, n)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i := range l {\n   \
    \     if l[i] >= 0 {\n            pos[i] = l[i]\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp3fy17jjk_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp3fy17jjk_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp3fy17jjk_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v >= 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpiod9m8jg_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v >= 0 {\n            p = append(p, v)\n        }\n    }\n    return p\n\
    }\n</code>\n<|/ a tags=go dscore=1 |>\n<| c |>\nThanks for your input. My requirement\
    \ is that I should not be able to modify the original list. I tried your code\
    \ and it did not work. I tried this in a go playground.\n<|/ c |>\n<| c |>\nI\
    \ have made some modifications to your code and it works. Thanks again for the\
    \ input.\n<|/ c |>\n<| c |>\nPlease do not edit code into your question. Instead\
    \ [post an answer](http://stackoverflow.com/help/self-answer) below. See [here](https://meta.stackexchange.com/questions/17845/etiquette-for-answering-your-own-question)\
    \ why this is important.\n<|/ c |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n)\n\ntype Sum \nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9yzflhhl_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073381
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpi694mun7_test.go:38: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpi694mun7_test.go:38: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpi694mun7_test.go:38: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Create a slice to hold the result to return at the end.\n\
    \    pos := make([]int, len(l))\n    for i, x := range l {\n        // If x is\
    \ negative, ignore it and move onto the next element.\n        if x < 0 {\n  \
    \          continue\n        }\n\n        // Otherwise, add the element to the\
    \ result slice.\n        pos[i] = x\n    }\n\n    // Return only positive numbers.\n\
    \    return pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpoxohkpnc_test.go:46: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpoxohkpnc_test.go:46: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpoxohkpnc_test.go:46: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    for _, i := range l {\n        if i >=\
    \ 0 {\n            out = append(out, i)\n        }\n    }\n    return out\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp3swwva3q_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] > 0 {\n            r = append(r, l[i])\n        }\n \
    \   }\n    return r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l[0 : len(l)-1]\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512580, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512580,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmptlg6k6kc_test.go:14\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmptlg6k6kc_test.go:27\
    \ +0xd9\ntesting.tRunner(0xc0001a0340, 0x527e80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, n := range l {\n\
    \        if n >= 0 {\n            ret = append(ret, int(n))\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp435drjf__test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v >= 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n`\n\t_, err := testdir.WriteFile(testdata, \"testdata\", true)\n\tif err\
    \ != nil {\n\t\tt.Fatal(err)\n\t}\n\n\terr = testdir.WriteFile(packagefile, \"\
    package test;\\n\\nfunc main() { go }\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\
    \t}\n\n\terr = testdir.WriteFile(packagefile2, \"package test2;\\n\\nimport ()\\\
    n\\nfunc main() { go }\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err\
    \ = testdir.Syscall(\"cp\", packagefile, packagefile2)\n\tif err != nil {\n\t\t\
    t.Fatal(err)\n\t}\n\n\terr = testdir.WriteFile(\"test.go\", `package test;\n\n\
    import (\n\t\"testing\"\n)\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmp_a9eal8v_test.go:22:1: expected declaration,\
    \ found `\n\t_, err := testdir.WriteFile(testdata, \"testdata\", true)\n\tif err\
    \ != nil {\n\t\tt.Fatal(err)\n\t}\n\n\terr = testdir.WriteFile(packagefile, \"\
    package test;\\n\\nfunc main() { go }\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\
    \t}\n\n\terr = testdir.WriteFile(packagefile2, \"package test2;\\n\\nimport ()\\\
    n\\nfunc main() { go }\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err\
    \ = testdir.Syscall(\"cp\", packagefile, packagefile2)\n\tif err != nil {\n\t\t\
    t.Fatal(err)\n\t}\n\n\terr = testdir.WriteFile(\"test.go\", `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073381
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v >= 0 {\n            pos[i] = v\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp5ewl0hq8_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp5ewl0hq8_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp5ewl0hq8_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // TODO: Write the easiest possible implementation!\n  \
    \  return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpxxzmhtly_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpxxzmhtly_test.go:34: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpxxzmhtly_test.go:34:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    var found bool\n    for _, v := range\
    \ l {\n        if v > 0 {\n            if !found {\n                out = append(out,\
    \ v)\n                found = true\n            } else {\n                out\
    \ = append(out, 0)\n            }\n        } else {\n            out = append(out,\
    \ 0)\n        }\n    }\n    return out\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp32zpjgve_test.go:47: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp32zpjgve_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp32zpjgve_test.go:47: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0)\n    for _, i := range l {\n       \
    \ if i > 0 {\n            p = append(p, i)\n        }\n    }\n    return p\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i >= 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpei_dyqjx_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var i int\n    pos := make([]int, len(l))\n    for i = 0;\
    \ i < (len(l)-1); i++ {\n        if l[i] < 0 {\n            pos[i] = l[i]\n  \
    \      } else {\n            pos[i] = (l[i] + 1) & len(l) - 1\n        }\n   \
    \ }\n    return pos\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp24g_ehx5_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp24g_ehx5_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=-1) %!s(int=-5) %!s(int=2) %!s(int=-1)\
    \ %!s(int=-1) %!s(int=9) %!s(int=0) %!s(int=7) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmp24g_ehx5_test.go:41:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v >= 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpsbp6y5i__test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v >= 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp0yoeh0k6_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, x := range\
    \ l {\n        if x > 0 {\n            result = append(result, x)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for i := 0; i < len(l); i++ {\n     \
    \   if l[i] > 0 {\n            ret = append(ret, l[i])\n        }\n    }\n   \
    \ return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v >= 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp0yoeh0k6_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := []int{}\n    for _, val := range l {\n    \
    \    if val >= 0 {\n            positives = append(positives, val)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpw8m_0ob9_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    var result []int\n    for i := 0; i < n;\
    \ i++ {\n        if l[i] > 0 {\n            result = append(result, l[i])\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v >= 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpuni4p97a_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, len(l))\n    for i, n := range l {\n  \
    \      if n >= 0 {\n            p[i] = n\n        }\n    }\n    return p\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpt4g2odpa_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpt4g2odpa_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpt4g2odpa_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, n := range l {\n\
    \        if n >= 0 {\n            pos[i] = n\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpbvsn2wzg_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpbvsn2wzg_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpbvsn2wzg_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n >= 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpob1pfw0u_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            p[i] = l[i]\n        }\n    }\n    return p\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp631sxn9l_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp631sxn9l_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp631sxn9l_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, num := range l {\n        if\
    \ num > 0 {\n            ret = append(ret, num)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, v := range l {\n        if v\
    \ >= 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpc3fhd66c_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, x := range l {\n  \
    \      if x >= 0 {\n            result = append(result, x)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpkk0nimts_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i := range l {\n   \
    \     if l[i] > 0 {\n            pos[i] = l[i]\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnu9hqf2i_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnu9hqf2i_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnu9hqf2i_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpzk95aekz_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, n := range l {\n  \
    \      if n > 0 {\n            r[i] = n\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpjq4itvmb_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpjq4itvmb_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpjq4itvmb_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpad9n36c9_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] > 0 {\n            result[i] = l[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpt1zow3jp_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var aSlice []int\n    for _, i := range l {\n        if\
    \ i >= 0 {\n            aSlice = append(aSlice, i)\n        }\n    }\n    return\
    \ aSlice\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp42eiuza1_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    var size int = len(l)\n    for i :=\
    \ 0; i < size; i++ {\n        if l[i] > 0 {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0, len(l))\n    for _, num := range l {\n\
    \        if num >= 0 {\n            p = append(p, num)\n        }\n    }\n   \
    \ return p\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmptuadsyyi_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v >= 0 {\n            ret[i] = v\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmplg0ucpwu_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmplg0ucpwu_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmplg0ucpwu_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) == 0 {\n        return nil\n    }\n    l := []int{}\n\
    \    for _, v := range l {\n        if v > 0 {\n            l = append(l, v)\n\
    \        }\n    }\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpys4sm3rm_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, num := range l {\n\
    \        if num >= 0 {\n            pos[i] = num\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp37d9k_1x_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp37d9k_1x_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp37d9k_1x_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, e := range l {\n        if\
    \ e > 0 {\n            result = append(result, e)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            positives = append(positives, v)\n    \
    \    }\n    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, v := range l {\n        if\
    \ v >= 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp2w2u7wby_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    pos := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if v >= 0 {\n            if !pos[v] {\n            \
    \    ret = append(ret, v)\n                pos[v] = true\n            }\n    \
    \    }\n    }\n    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp5gppofcg_test.go:43: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            n = append(n, v)\n        }\n    }\n    return n\n}\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] > 0 {\n            result[i] = l[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpt1zow3jp_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] > 0 {\n            ret = append(ret, l[i])\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    s := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            s = append(s, v)\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, x := range l {\n\
    \        if x >= 0 {\n            ret = append(ret, x)\n        }\n    }\n   \
    \ return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpckye4lyx_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := []int{}\n    for _, value := range l {\n        if\
    \ value >= 0 {\n            pos = append(pos, value)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmphgv6xevo_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpad9n36c9_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v >= 0 {\n            ret = append(ret, v)\n        }\n    }\n   \
    \ return ret\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpw_gg_qrd_test.go:38: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v >= 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp0yoeh0k6_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Write your code here.\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            return append(l, l[i])\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp44bkm2ow_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=4)]'\n\
    \    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp44bkm2ow_test.go:39:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)\
    \ %!s(int=5)]'\n    --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmp44bkm2ow_test.go:39:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073386
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, e := range l {\n        if\
    \ e > 0 {\n            result = append(result, e)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    list := make([]int, 0)\n    for _, v := range l {\n    \
    \    if v > 0 {\n            list = append(list, v)\n        }\n    }\n    return\
    \ list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for _, v := range l {\n        if v >= 0 {\n           \
    \ return l\n        }\n    }\n    return nil\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6epojenc_test.go:38: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6epojenc_test.go:38: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    if n <= 0 {\n        return []int{}\n \
    \   }\n    if l[0] < 0 {\n        n -= 1\n        l[n] = -l[n]\n    }\n    pos\
    \ := 0\n    for pos <= n-1 {\n        if l[pos] < 0 {\n            pos -= 1\n\
    \            continue\n        }\n        if pos == n-1 {\n            return\
    \ l[:pos+1]\n        }\n    }\n    return l[:pos+1]\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmp7dzae1s4_test.go:24\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmp7dzae1s4_test.go:42\
    \ +0x56c\ntesting.tRunner(0xc0001924e0, 0x529160)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    out := []int{}\n    for _, n := range l {\n        if n\
    \ >= 0 {\n            out = append(out, n)\n        }\n    }\n    return out\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpcb3po_q8_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    m := make(map[int]int)\n    for _, v := range l {\n    \
    \    m[v] = m[v] + 1\n    }\n\n    ans := make([]int, 0)\n    for k, v := range\
    \ m {\n        if v == 1 {\n            ans = append(ans, k)\n        }\n    }\n\
    \n    return ans\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpqdyvnj47_test.go:44: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpqdyvnj47_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=-5) %!s(int=2) %!s(int=9) %!s(int=123) %!s(int=1)\
    \ %!s(int=5) %!s(int=-10) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpqdyvnj47_test.go:44: expected '[]', got '[%!s(int=-2) %!s(int=-1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, n := range l {\n     \
    \   if n > 0 {\n            pos = append(pos, n)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positive := make([]int, 0, len(l))\n    positive := append(positive,\
    \ l...)\n    positive = positive[:len(positive):len(positive)]\n    positive =\
    \ positive[:0]\n    sort.Ints(positive)\n    return positive\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkvhw_ku_test.go:15:14: no new variables on left side of :=

    /tmp/tmphkvhw_ku_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var v []int\n    for _, i := range l {\n        if i >=\
    \ 0 {\n            v = append(v, i)\n        }\n    }\n    return v\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpep64rpwc_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, value := range l {\n      \
    \  if value >= 0 {\n            result = append(result, value)\n        }\n  \
    \  }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nHow would you modify this\
    \ if l is empty? You would have to return a nil slice or else you would get a\
    \ panic with the \"index out of range error\"\n<|/ c |>\n<| c |>\n: What if the\
    \ input is a nil slice? Or an immutable slice? Your code will return an unexpected\
    \ result for such cases. It would be better to return an empty slice.\n<|/ c |>\n\
    <| c |>\nGood point. I was thinking more along the lines of your \"For a non-empty\
    \ input, return nil slice, else panic\" solution.\n<|/ c |>\n<| c |>\nI would\
    \ add an additional check at the end before returning the result to see if `len(l)\
    \ == 0` since that implies `l` is a nil slice. `if len(l) == 0 {return nil}`\n\
    <|/ c |>\n<| c |>\n: Your solution is correct, if the input slice is empty. But\
    \ it does not work for other cases. For example, if the input is an empty map,\
    \ the code will panic with runtime error \"index out of range\". So I updated\
    \ my solution and added a check for nil slices and an empty map.\n<|/ c |>\n<|\
    \ a dscore=5 tags=go,slice |>\nTo add to's answer, you can also use reduce for\
    \ this:\n<code>\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi7oa8wyc_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073386
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, value := range l {\n\
    \        if value > 0 {\n            result = append(result, value)\n        }\n\
    \    }\n    return result\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    out := make([]int, len(l))\n    for i := range l {\n   \
    \     if l[i] > 0 {\n            out[i] = l[i]\n        }\n    }\n    return out\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp50p5u0bj_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp50p5u0bj_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp50p5u0bj_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for _, val := range l {\n        if val > 0 {\n        \
    \    return l\n        }\n    }\n    return nil\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nI see there are two answers here that just show a solution for the given\
    \ input. This is a bit more general (if you had negative ints in your input you'd\
    \ want to remove them too), but this one works if you also have negatives in the\
    \ input.\n<code>\nvar input = `\n    1\n    3\n    -2 \n    -5 \n    6\n    -1\n\
    \    -2\n    -5 \n    3\n    -1\n    -2\n    9\n    0 \n    123 \n    1 \n   \
    \ -10`\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfjexo5nc_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073386
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    filtered := make([]int, 0)\n    for _, item := range l {\n\
    \        if item > 0 {\n            filtered = append(filtered, item)\n      \
    \  }\n    }\n    return filtered\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, x := range l {\n        if x >=\
    \ 0 {\n            r = append(r, x)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpbgoizq5p_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, n := range l {\n     \
    \   if n >= 0 {\n            pos = append(pos, n)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpf1_mveul_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    r := make([]int, n)\n    for i, v := range\
    \ l {\n        if v > 0 {\n            r[i] = v\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp9mfngdok_test.go:40: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp9mfngdok_test.go:40: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp9mfngdok_test.go:40: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            positives = append(positives, v)\n    \
    \    }\n    }\n    return positives\n}\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v >= 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpk_e9lguv_test.go:38: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Write code here\n    if l == nil || len(l) == 0 {\n \
    \       return nil\n    }\n    ret := []int{}\n    for _, num1 := range l {\n\
    \        if num1 >= 0 {\n            ret = append(ret, num1)\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpvjpn61yy_test.go:43: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, x := range l {\n\
    \        if x > 0 {\n            pos[i] = x\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp9qwlkq6c_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp9qwlkq6c_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp9qwlkq6c_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073387
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, num := range l {\n        if\
    \ num > 0 {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073388
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpyanyodrg_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073388
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            p = append(p, v)\n        }\n    }\n    return p\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073388
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    x := make([]int, len(l))\n    pos := 0\n    for _, i :=\
    \ range l {\n        if i >= 0 {\n            x[pos] = i\n            pos++\n\
    \        }\n    }\n    return x\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpp2bxjt9k_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpp2bxjt9k_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpp2bxjt9k_test.go:41: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for _, v := range l {\n        if v < 0 {\n            l\
    \ = append(l, 0)\n        }\n    }\n    return l\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnkglyoj2_test.go:38: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpnkglyoj2_test.go:38:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n\
    \        tmpnkglyoj2_test.go:38: expected '[]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n >= 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpob1pfw0u_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, v := range l {\n        if\
    \ v >= 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp2w2u7wby_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, x := range l {\n        if x >=\
    \ 0 {\n            ret = append(ret, x)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp6ekxjl3o_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            p[i] = v\n        }\n    }\n    return p\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpssdwuyam_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpssdwuyam_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpssdwuyam_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, num := range l {\n        if\
    \ num > 0 {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073388
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    pos := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        if l[i] > 0 {\n            pos[i] = l[i]\n        }\n\
    \    }\n    return pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpgbadp119_test.go:40: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpgbadp119_test.go:40: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpgbadp119_test.go:40: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, value := range l {\n      \
    \  if value > 0 {\n            result = append(result, value)\n        }\n   \
    \ }\n    return result\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the selected answer. It works.\n<|/ c |>\n<| a tags=go,slice |>\nUse a for loop\
    \ over the slice:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt4jyka48_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    found := false\n    for\
    \ _, i := range l {\n        if i >0 {\n            found = true\n        } else\
    \ {\n            r = append(r, i)\n        }\n    }\n    if !found {\n       \
    \ r = append(r, 0)\n    }\n    return r\n}\n`\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps12mwvlz_test.go:28:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, num := range l {\n\
    \        if num >= 0 {\n            result = append(result, num)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpz78746k7_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, i := range l {\n     \
    \   if i >= 0 {\n            res = append(res, i)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpt73hy082_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    pos := 0\n    neg := 0\n    for _, v\
    \ := range l {\n        if v >= 0 {\n            out[pos] = v\n            pos++\n\
    \        } else {\n            out[neg] = v\n            neg++\n        }\n  \
    \  }\n    return out[:pos]\n}\n</code>\n<|/ a tags=go,arrays dscore=1 |>\n<| a\
    \ tags=go,arrays |>\nThis is one possible solution:\n<code>\npackage main\n\n\
    import \"fmt\"\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6wk0p3fo_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    t := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v < 0 {\n            v = -v\n        }\n        t[i] = v\n    }\n  \
    \  return t\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpd_bit9ye_test.go:40: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpd_bit9ye_test.go:40: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=10)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpd_bit9ye_test.go:40: expected '[]', got '[%!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var output []int\n    for _, x := range l {\n        if\
    \ x > 0 {\n            output = append(output, x)\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, len(l))\n    negatives := make([]int,\
    \ len(l))\n    for i, v := range l {\n        if v > 0 {\n            positives[i]\
    \ = v\n        } else {\n            negatives[i] = -v\n        }\n    }\n   \
    \ return append(positives, negatives...)\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp50olc7g9_test.go:42: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp50olc7g9_test.go:42: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=10)]'\n\
    \    --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmp50olc7g9_test.go:42:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos []int\n    for i, num := range l {\n        if num\
    \ >= 0 {\n            pos = append(pos, num)\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09084y0r_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            l = append(l, v)\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_chssxaf_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    i := 0\n    j := 0\n    length := len(l)\n    l := make([]int,\
    \ 0, length)\n    for ; i < length; i++ {\n        if l[i] < 0 {\n           \
    \ l[j++] = l[i]\n        }\n    }\n    l = l[:j]\n    return l\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpicyvajso_test.go:20:16: expected '']'', found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, len(l))\n    for i := range l {\n   \
    \     if l[i] > 0 {\n            copy(ret[i:], l[i:])\n            l = ret\n \
    \           break\n        }\n    }\n    return l\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptsegn_mg_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmptsegn_mg_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmptsegn_mg_test.go:41:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0)\n    for _, num := range l {\n   \
    \     if num > 0 {\n            ret = append(ret, num)\n        }\n    }\n   \
    \ return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073390
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for idx, i := range l {\n\
    \        if i >= 0 {\n            l[idx] = i\n        }\n    }\n    return l\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ofq24ci_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result = make([]int, len(l))\n    for i := range l {\n\
    \        if l[i] > 0 {\n            result[i] = l[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpo9b0hg7__test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpo9b0hg7__test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpo9b0hg7__test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, len(l))\n    i := 0\n    for _, v :=\
    \ range l {\n        if v > 0 {\n            ret[i] = v\n            i++\n   \
    \     }\n    }\n    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpc3z670uy_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpc3z670uy_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpc3z670uy_test.go:41: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, n := range l {\n\
    \        if n >= 0 {\n            positives = append(positives, n)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp6jc358dw_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, num := range l\
    \ {\n        if num > 0 {\n            result[i] = num\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpq_067bzc_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpq_067bzc_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpq_067bzc_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var p []int\n    for _, i := range l {\n        if i >=\
    \ 0 {\n            p = append(p, i)\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmprddb2g5c_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0)\n    for _, x := range l {\n       \
    \ if x > 0:\n            l = append(p, x)\n        }\n    }\n    return l\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfjteyvn1_test.go:16:17: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpyanyodrg_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073388
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := 0\n    pos := false\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            n = i\n            pos = true\n            break\n\
    \        }\n    }\n\n    if !pos {\n        return nil\n    }\n\n    r := make([]int,\
    \ n+1)\n    for i := range r {\n        r[i] = l[n]\n        n++\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmparyvqnn8_test.go:52: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, value := range\
    \ l {\n        if value > 0 {\n            result = append(result, value)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Write your code in Go.\n    pos := make([]int, 0)\n \
    \   for _, n := range l {\n        if n > 0 {\n            pos = append(pos, n)\n\
    \        }\n    }\n    return pos\n}\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, i := range l {\n     \
    \   if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := []int{}\n    for _, i := range l {\n      \
    \  if i > 0 {\n            positives = append(positives, i)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, len(l))\n    for i := range res {\n \
    \       if l[i] > 0 {\n            res[i] = l[i]\n        } else {\n         \
    \   res[i] = -1\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpha6ixbv1_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpha6ixbv1_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-1) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=-1) %!s(int=123) %!s(int=1) %!s(int=-1)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpha6ixbv1_test.go:41:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive = []int{}\n    for _, v := range l {\n    \
    \    if v > 0 {\n            positive = append(positive, v)\n        }\n    }\n\
    \    return positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var output []int\n    for _, num := range l {\n        if\
    \ num > 0 {\n            output = append(output, num)\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073392
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positive := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] >= 0 {\n            positive[i] = l[i]\n        }\n \
    \   }\n    return positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp90hrnotr_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp90hrnotr_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp90hrnotr_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v < 0 {\n            r[i] = 0\n            continue\n        }\n   \
    \     r[i] = v\n    }\n    return r\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpil7lk9m8_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpil7lk9m8_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpil7lk9m8_test.go:41: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            res[i] = v\n        }\n    }\n    return res\n\
    }\n</code>\n<|/ a tags=arrays,go dscore=3 |>\n<| a tags=arrays,go |>\nSince you\
    \ asked about performance, there are a few different ways you can optimize your\
    \ current solution. One is to use a map instead of slices. This would allow you\
    \ to replace your current loop with:\n<code>\nfor i := 0; i < len(a); i++ {\n\
    \    if _, ok := numbers[a[i]]; ok {\n        numbers[a[i]]++\n    }\n}\n</code>\n\
    Another is to create an empty set and use that to determine whether an element\
    \ is present in the slice:\n<code>\nvar s map[int]bool\nfor i := 0; i < len(a);\
    \ i++ {\n    if _, ok := s[a[i]]; ok {\n        s[a[i]] = true\n    }\n}\n</code>\n\
    The third way is to create two slices, one that has all elements equal to zero\
    \ and one that has all elements greater than zero, and then compare them:\n<code>\n\
    var zeros []int\nvar positives []int\n\nfor i := 0; i < len(a); i++ {\n    if\
    \ a[i] > 0 {\n        positives = append(positives, a[i])\n    } else {\n    \
    \    zeros = append(zeros, a[i])\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Nice, thanks for your answer!  I wonder if there's any kind of built-in `map`\
    \ type for ints.\n<|/ c |>\n<| c |>\nI'm unaware of any, but you could use a slice\
    \ of \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q759gr6_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    k := len(l)\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        if l[i] > 0 {\n            res = append(res, l[i])\n        }\n \
    \   }\n    return res\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := 0\n    for _, v := range l {\n        if v > 0 {\n\
    \            n++\n        }\n    }\n    result := make([]int, n)\n    for _, v\
    \ := range l {\n        if v > 0 {\n            result[n] = v\n            n++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmpfp86bm2k_test.go:23\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmpfp86bm2k_test.go:37\
    \ +0x5fb\ntesting.tRunner(0xc00019b040, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073392
- exit_code: null
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var i int\n    for ; i < len(l); i++ {\n        if l[i]\
    \ >= 0 {\n            l = append(l, l[i])\n        }\n    }\n    return l\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073405
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for _, i := range l {\n        if i > 0 {\n            return\
    \ append(l, i)\n        }\n    }\n    return l\n}\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmplsn61jr3_test.go:37: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=4)]'\n\
    \    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmplsn61jr3_test.go:37:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)\
    \ %!s(int=5)]'\n    --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmplsn61jr3_test.go:37:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            l[i] = v\n        }\n    }\n    return l\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0z2jllk_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var new_list []int\n\n    for _, i := range l {\n      \
    \  if i >= 0 {\n            new_list = append(new_list, i)\n        }\n    }\n\
    \n    return new_list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpczaetish_test.go:41: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for index, value := range\
    \ l {\n        if value > 0 {\n            result[index] = value\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp3_fzacnh_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp3_fzacnh_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp3_fzacnh_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpad9n36c9_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0, len(l))\n    for _, num := range l\
    \ {\n        if num > 0 {\n            res = append(res, num)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v >= 0 {\n            p = append(p, v)\n        }\n    }\n    return p\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpcnjgz93m_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073385
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0, len(l))\n    for i, v := range l {\n\
    \        if v >= 0 {\n            pos = append(pos, v)\n        }\n    }\n   \
    \ return pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpokkmfmqs_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positiveIndex := -1\n    for index, value := range l {\n\
    \        if value >= 0 {\n            positiveIndex = index\n            break\n\
    \        }\n    }\n    if positiveIndex >= 0 {\n        return l[0:positiveIndex]\n\
    \    }\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp1cz52_4e_test.go:43: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2)]'\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp1cz52_4e_test.go:43: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmp1cz52_4e_test.go:43:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    pos := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        if l[i] > 0 {\n            pos[i] = l[i]\n        }\n\
    \    }\n    return pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpgbadp119_test.go:40: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpgbadp119_test.go:40: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpgbadp119_test.go:40: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := len(l)\n    if n < 1 {\n        return []int{}\n  \
    \  }\n    pos := 0\n    posList := []int{}\n    for i := 0; i < n; i++ {\n   \
    \     if l[i] > 0 {\n            posList = append(posList, l[i])\n        } else\
    \ {\n            pos = i\n        }\n    }\n    return append([]int{}, posList[pos:]...)\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [10:8] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [10:8]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmpn1cnufxq_test.go:27\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmpn1cnufxq_test.go:38\
    \ +0x83a\ntesting.tRunner(0xc0001a01a0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, x := range l {\n        if x >=\
    \ 0 {\n            r = append(r, x)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpnz0p3_8g_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v >= 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpuni4p97a_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073383
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    copy(pos, l)\n    pos =\
    \ filterPositive(pos)\n    return pos\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspjmwflt_test.go:16:11: undefined: filterPositive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, value := range l {\n      \
    \  if value > 0 {\n            result = append(result, value)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for i := 0; i < len(l); i++ {\n        if l[i] > 0 {\n \
    \           break\n        }\n    }\n    return l[0:i]\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp69bj0a0t_test.go:19:16: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var neg []int\n\n    for _, i := range l {\n        if i\
    \ < 0 {\n            neg = append(neg, i)\n        }\n    }\n\n    if len(neg)\
    \ == 0 {\n        return []int{}\n    }\n\n    var result []int\n    var ok bool\n\
    \n    for _, i := range l {\n        if !ok {\n            ok = true\n       \
    \     continue\n        }\n\n        if i == 0 {\n            break\n        }\n\
    \n        result = append(result, i)\n    }\n\n    if ok {\n        result = append(result,\
    \ 0)\n    }\n\n    return append(neg, result...)\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpcak6of3w_test.go:65: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=0)]'\n\
    \    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpcak6of3w_test.go:65:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[%!s(int=-5) %!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpcak6of3w_test.go:65: expected '[]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i] > 0 {\n            result = append(result, l[i])\n        }\n\
    \    }\n\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            p[i] = l[i]\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpxtd928v4_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpxtd928v4_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpxtd928v4_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, val := range l {\n\
    \        if val >= 0 {\n            r[i] = val\n        }\n    }\n    return r\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp4_oml0jn_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp4_oml0jn_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp4_oml0jn_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for i, val := range l {\n\
    \        if val >= 0 {\n            r = append(r, val)\n        }\n    }\n   \
    \ return r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4e1uo42i_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, x := range l {\n     \
    \   if x > 0 {\n            pos = append(pos, x)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073394
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, value := range l {\n      \
    \  if value > 0 {\n            result = append(result, value)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := []int{}\n    for _, n := range l {\n        if n\
    \ >= 0 {\n            pos = append(pos, n)\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmp063m7q9j_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var n int\n    var res []int\n\n    for _, v := range l\
    \ {\n        if v < 0 {\n            continue\n        }\n        if v == 0 {\n\
    \            res = append(res, 0)\n            continue\n        }\n        if\
    \ v >= 0 {\n            n++\n            v = -v\n        }\n\n        if n ==\
    \ 0 {\n            res = append(res, v)\n        } else if n > 0 {\n         \
    \   res = append(res, v)\n        }\n\n        n = -1\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpwt0e5d9k_test.go:57: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpwt0e5d9k_test.go:57: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=-5)\
    \ %!s(int=-3) %!s(int=-2) %!s(int=-3) %!s(int=-3) %!s(int=-9) %!s(int=0) %!s(int=-123)\
    \ %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0, len(l))\n    for _, n := range l {\n\
    \        if n >= 0 {\n            res = append(res, n)\n        }\n    }\n   \
    \ return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpm25p5_3e_test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positive := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positive = append(positive, v)\n        }\n \
    \   }\n    return positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l := make([]int, 0, len(l))\n    for _, n := range l {\n\
    \        if n >= 0 {\n            l = append(l, n)\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxgc5w38f_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] >= 0 {\n            l[i] = l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21g3g8ut_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var tmp []int\n    for _, v := range l {\n        if v >=\
    \ 0 {\n            tmp = append(tmp, v)\n        }\n    }\n    return tmp\n}\n\
    </code>\n<|/ a tags=go |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"sort\"\n)\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxqaofdj9_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := 0\n    for _, v := range l {\n        if v > 0 {\n\
    \            n = n + 1\n        }\n    }\n    p := make([]int, 0, n)\n    for\
    \ _, v := range l {\n        if v > 0 {\n            p = append(p, v)\n      \
    \  }\n    }\n    return p\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073394
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    n := 0\n    for _, i := range l {\n        if i > 0 {\n\
    \            l[n] = i\n            n++\n        }\n    }\n    return l[:n]\n}\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073394
