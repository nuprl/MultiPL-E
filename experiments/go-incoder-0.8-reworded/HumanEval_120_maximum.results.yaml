language: go_test.go
name: HumanEval_120_maximum
results:
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    arr := arr[0:k]\n    max := arr[0]\n \
    \   for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_z3rqxq_test.go:30:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < 1 {\n        return nil\n    }\n    var result []int\n\
    \    var result []int\n    min := arr[0]\n    max := arr[0]\n    for _, v := range\
    \ arr {\n        if v > max {\n            max = v\n        }\n        if v <\
    \ min {\n            min = v\n        }\n    }\n    min = min - min % k\n    max\
    \ = max - max % k\n    for _, v := range arr {\n        if v > max {\n       \
    \     max = v\n        }\n        if v < min {\n            min = v\n        }\n\
    \    }\n    temp = arr[:len(arr) - k]\n    for _, v := range temp {\n        result\
    \ = append(result, v)\n    }\n    for _, v := range arr {\n        if v == min\
    \ {\n            result = append(result, v)\n        }\n        if v == max {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,arrays,go |>\nThe easiest\
    \ way:\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxcodkkut_test.go:63:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return []int{}\n    }\n\n    max := arr[0]\n\
    \    idx := 1\n    i := 0\n    j := len(arr) - 1\n\n    for i < j {\n        if\
    \ arr[i] > arr[j] {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n\n\
    \        i++\n        j--\n    }\n\n    for idx < k {\n        if arr[idx] > max\
    \ {\n            max = arr[idx]\n        }\n\n        idx++\n    }\n\n    return\
    \ arr[0:idx]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp67yr5ehm_test.go:76: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp67yr5ehm_test.go:76: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp67yr5ehm_test.go:76: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp67yr5ehm_test.go:76:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=-3) %!s(int=-123)\
    \ %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp67yr5ehm_test.go:76:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=2) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp67yr5ehm_test.go:76: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=-8)\
    \ %!s(int=-13) %!s(int=3) %!s(int=0) %!s(int=15) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp67yr5ehm_test.go:76: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-10) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp67yr5ehm_test.go:76: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmp67yr5ehm_test.go:76:\
    \ expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := []int{}\n    max := append(max, arr...)\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        max := append(max, arr[0])\n        arr = arr[1:]\n\
    \        for _, v := range max {\n            if v > arr[0] {\n              \
    \  max := append(max, v)\n                arr = arr[1:]\n            } else {\n\
    \                arr = append(arr, v)\n            }\n        }\n    }\n    return\
    \ max\n}\n</code>\n<|/ a dscore=1 tags=go |>\n<| a tags=go |>\nFor those looking\
    \ for a quick way to do this with slices you can use a sort.Slice and pass a custom\
    \ function as the comparator to it.\n<code>\nsort.Slice(arr, func(i, j int) bool\
    \ {\n    if arr[i] > arr[j] {\n        return true\n    } else if arr[i] < arr[j]\
    \ {\n        return false\n    } else {\n        return j > i\n    }\n})\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 tags=go |>\nThe above answers don't actually\
    \ answer the OP's question, and were written before Go had generics.  I wrote\
    \ an answer to this same question before generics were released, but was wrong;\
    \ see this other answer that shows the problem with generic functions.  I posted\
    \ my answer here since it is the same as the one posted by Oleg.\nThe correct\
    \ answer is to create a wrapper function for slices that can return the element\
    \ at index, but without creating a new slice every time you do so.  Something\
    \ like this:\n<code>\ntype SliceEx []int\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpibo555y0_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    result := make([]int, k)\n    for i := k\
    \ - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n            result[i] = arr[i]\n\
    \        } else {\n            result[i] = arr[i-1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdl5nv4io_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpdl5nv4io_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpdl5nv4io_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpdl5nv4io_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpdl5nv4io_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=20) %!s(int=20) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpdl5nv4io_test.go:59: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0)\
    \ %!s(int=15) %!s(int=15) %!s(int=3) %!s(int=3) %!s(int=-8) %!s(int=0)]'\n   \
    \ --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpdl5nv4io_test.go:59: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpdl5nv4io_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdl5nv4io_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpdl5nv4io_test.go:59: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    sort.Sort(arr)\n    output := make([]int, k)\n    last := len(arr) -\
    \ k\n    i := 0\n    for i < k {\n        if arr[i] > arr[i+k] {\n           \
    \ output[i] = arr[i]\n        } else {\n            output[i] = arr[i+k]\n   \
    \     }\n        i++\n    }\n    for i < last {\n        output[i] = arr[i]\n\
    \    }\n    return output\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not\
    \ appear to be a solution to the question.\n<|/ c |>\n<| c |>\nThis appears to\
    \ be the answer to \"why doesn't my code work?\".\n<|/ c |>\n<| c |>\nIt doesn't\
    \ return the right answer for certain cases. I believe you need to sort the whole\
    \ list.\n<|/ c |>\n<| a tags=go |>\nI think this code can solve the problem \n\
    <code>\npackage main\n\nimport (\n    \"sort\"\n    \"math\"\n)\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpapb574ok_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[:k]\n    for _, i := range arr[k:] {\n        if i > max[len(max)-1]\
    \ {\n            max = append(max, i)\n        }\n    }\n    return max\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp0bntz8sg_test.go:26\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp0bntz8sg_test.go:50 +0xe65\n\
    testing.tRunner(0xc0001924e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n\n    // O(n)\n    if k\
    \ == 1 {\n        return arr\n    }\n    \n    // Sort the array with the largest\
    \ element at first position.\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    \n    var ret []int\n    \n    // Find the k largest elements.\n    for i\
    \ := 1; i < k; i++ {\n        // Find the element in the sorted array which is\
    \ greater than current index.\n        current := sort.Search(sort.Reverse(arr),\
    \ func(item int) bool {\n            return item > arr[i-1]\n        })\n\n  \
    \      // Swap the element with the previous largest element.\n        sort.Swap(arr,\
    \ 0, current)\n        \n        // Append the current element to the return array.\n\
    \        ret = append(ret, arr[0])\n        \n        // Move the first element\
    \ to the back.\n        sort.Reverse(arr[1:])\n    }\n    \n    // Return the\
    \ array which has the maximum k elements.\n    return ret\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps1oy0aqm_test.go:34:5: undefined: sort

    /tmp/tmps1oy0aqm_test.go:41:20: undefined: sort

    /tmp/tmps1oy0aqm_test.go:46:9: undefined: sort

    /tmp/tmps1oy0aqm_test.go:52:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := -1000\n    for _, value := range\
    \ arr {\n        if value > max {\n            max = value\n        }\n    }\n\
    \    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmphqupp2oy_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmphqupp2oy_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmphqupp2oy_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmphqupp2oy_test.go:60: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmphqupp2oy_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmphqupp2oy_test.go:60: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmphqupp2oy_test.go:60: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 || len(arr) <= k {\n        return arr\n    }\n    var result\
    \ []int\n    k %= len(arr)\n    for _, v := range arr[:k] {\n        if max :=\
    \ 0\n            for _, b := range arr[k+1:] {\n                if b > v {\n \
    \                   max = b\n                } else {\n                    break\n\
    \                }\n            }\n            result = append(result, max)\n\
    \        }\n    }\n    return append(result, arr[len(arr) - k+1])\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihsh71hd_test.go:31:13: expected operand, found ''for''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        fmt.Println(\"Sorry, please try again\")\n\
    \        return nil\n    }\n    var result []int\n    max := arr[0]\n    for i\
    \ := 1; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n    }\n    for i := 1; i < k; i++ {\n        if arr[i] > max {\n   \
    \         result = append(result, max)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprgs_8xzd_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmprgs_8xzd_test.go:66:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmprgs_8xzd_test.go:66: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmprgs_8xzd_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprgs_8xzd_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmprgs_8xzd_test.go:66: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmprgs_8xzd_test.go:66: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmprgs_8xzd_test.go:66:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmprgs_8xzd_test.go:66: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmprgs_8xzd_test.go:66:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb7e8lfzn_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    arr := arr[:k]\n    max := arr[0]\n    for\
    \ _, v := range arr[1:] {\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32lj1aef_test.go:25:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    result := []int{}\n    for _, v := range arr {\n      \
    \  max = v\n        for _, v2 := range arr {\n            if v2 < max {\n    \
    \            max = v2\n            }\n        }\n        result = append(result,\
    \ max)\n        if k > 0 && len(result) > k {\n            break\n        }\n\
    \    }\n    return result\n}\n</code>\n<|/ a tags=arrays,algorithm,big-o,c++,c\
    \ |>\n<| c |>\nPlease don't just post a code snippet. You should add an explanation\
    \ of what you are doing or how this solution works.\n<|/ c |>\n<| c |>\nJust to\
    \ clarify, the author of the question asked for an O(n) solution. An O(n) solution\
    \ is a simple sorting algorithm, like quicksort, which has linear time complexity.\
    \ For a more detailed explanation look here: https://stackoverflow.com/a/14690099/141116\n\
    <|/ c |>\n<| a |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;\nint\
    \ main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n\
    \        scanf(\"%d\",&n);\n        int a[n];\n        int b=n;\n        for(int\
    \ i=0;i<n;i++)\n            scanf(\"%d\",&a[i]);\n        for(int i=0;i<n;i++){\n\
    \            int max=a[i];\n            for(int j=i;j<n;j++){\n              \
    \  if(a[j]>max)\n                    max=a[j];\n            }\n            for(int\
    \ j=0;j<b;j++){\n                if(a[i]==max)\n                    b--;\n   \
    \         }\n        }\n        printf(\"%d\\n\",b);\n    }\n    return 0;\n}\n\
    </code>\n<|/ a dscore=1 tags=arrays,algorithm,big-o,c++,c |>\n<| a tags=arrays,algorithm,big-o,c++,c\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int\
    \ n, *arr;\n    cout<<\"Enter Size of Array : \";\n    cin>>n;\n    arr=new int\
    \ [n];\n    for(int i=0;i<n;i++)\n    {\n        cout<<\"Enter Array Element :\
    \ \";\n        cin>>arr[i];\n    }\n    int max=0,min;\n    for(int i=0;i<n;i++)\n\
    \    {\n        if(arr[i]>max)\n        {\n            max=arr[i];\n        }\n\
    \        if(arr[i]<min)\n        {\n            min=arr[i];\n        }\n    }\n\
    \    cout\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuhj06178_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    for _, v := range arr[1:] {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    if k < 1 || k < len(arr) || k > len(arr)\
    \ {\n        return []int{}\n    }\n    var result []int\n    for i := k-1; i\
    \ >= 0; i-- {\n        result = append(result, max)\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp50r0gd29_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp50r0gd29_test.go:63: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmp50r0gd29_test.go:63:\
    \ expected '[%!s(int=2)]', got '[]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp50r0gd29_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp50r0gd29_test.go:63:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp50r0gd29_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp50r0gd29_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp50r0gd29_test.go:63: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp50r0gd29_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp50r0gd29_test.go:63: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[len(arr)-1]\n        arr = arr[:len(arr)-1]\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpsr3kgfsq_test.go:56: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-4) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpsr3kgfsq_test.go:56: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpsr3kgfsq_test.go:56: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpsr3kgfsq_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=-3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpsr3kgfsq_test.go:56:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpsr3kgfsq_test.go:56: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=-8)\
    \ %!s(int=-13) %!s(int=3) %!s(int=0) %!s(int=15) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpsr3kgfsq_test.go:56: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-10) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpsr3kgfsq_test.go:56: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpsr3kgfsq_test.go:56:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var i int\n    var result []int\n    \n    result := make([]int, k)\n\
    \    \n    for i = 0; i < k; i++ {\n        result[i] = arr[0]\n    }\n    \n\
    \    for i = k; i > 0; i-- {\n        if arr[i] > arr[i - 1] {\n            result[i-2]\
    \ = arr[i]\n        }\n    }\n    \n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap8ecf0_test.go:27:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    result := make([]int,\
    \ k)\n    for i := range result {\n        result[i] = arr[len(arr)-1-i]\n   \
    \ }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpmhxmj7n8_test.go:57: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-4) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpmhxmj7n8_test.go:57: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpmhxmj7n8_test.go:57: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpmhxmj7n8_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=-3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpmhxmj7n8_test.go:57:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpmhxmj7n8_test.go:57: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=-8)\
    \ %!s(int=-13) %!s(int=3) %!s(int=0) %!s(int=15) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpmhxmj7n8_test.go:57: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-10) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpmhxmj7n8_test.go:57: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpmhxmj7n8_test.go:57:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[:k]\n    for i := 0; i < len(arr)-k; i++ {\n        if arr[i]\
    \ > max[len(max)-1] {\n            max[len(max)-1] = arr[i]\n        } else {\n\
    \            max = append(max, arr[i])\n        }\n    }\n    return max\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp0h2k16xj_test.go:26\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp0h2k16xj_test.go:52 +0xe65\n\
    testing.tRunner(0xc0001a01a0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    m := make([]int, len(arr))\n    max := make([]int,\
    \ k)\n\n    for i := 0; i < len(arr); i++ {\n        m[i] = arr[i]\n    }\n\n\
    \    for i := 0; i < k; i++ {\n        max[i] = 0\n    }\n\n    for i := 0; i\
    \ < k; i++ {\n        if max[i] < m[i] {\n            max[i] = m[i]\n        }\n\
    \    }\n\n    for i := 0; i < k; i++ {\n        m[i] = max[i]\n    }\n\n    return\
    \ m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp3j9vgn_4_test.go:72: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp3j9vgn_4_test.go:72: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp3j9vgn_4_test.go:72: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp3j9vgn_4_test.go:72: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=0) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp3j9vgn_4_test.go:72: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp3j9vgn_4_test.go:72:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n   \
    \     tmp3j9vgn_4_test.go:72: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp3j9vgn_4_test.go:72: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp3j9vgn_4_test.go:72: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp3j9vgn_4_test.go:72:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\n    ---\
    \ FAIL: TestMaximum/test_num__10 (0.00s)\n        tmp3j9vgn_4_test.go:72: expected\
    \ '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243) %!s(int=-400)\
    \ %!s("
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, 0, k)\n    if len(arr) < k {\n        return arr\n\
    \    }\n    for i := 0; i < k; i++ {\n        if len(result) == 0 {\n        \
    \    result = append(result, arr[i])\n            continue\n        }\n      \
    \  if arr[i] > result[len(result)-1] {\n            result = append(result, arr[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp74eluma3_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n\
    \        tmp74eluma3_test.go:63: expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmp74eluma3_test.go:63:\
    \ expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp74eluma3_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n      \
    \  tmp74eluma3_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]',\
    \ got '[%!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp74eluma3_test.go:63: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp74eluma3_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp74eluma3_test.go:63: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp74eluma3_test.go:63: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    max := arr[0]\n    j := 0\n    for _, v := range\
    \ arr {\n        if v > max {\n            max = v\n            result = append(result,\
    \ max)\n            j = 1\n        } else {\n            result = append(result,\
    \ v)\n        }\n        if j == k {\n            break\n        }\n    }\n  \
    \  if j != k {\n        result = append(result, max)\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpiq46h2fw_test.go:68: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpiq46h2fw_test.go:68: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpiq46h2fw_test.go:68: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpiq46h2fw_test.go:68:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=123)]'\n  \
    \  --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpiq46h2fw_test.go:68:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpiq46h2fw_test.go:68: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpiq46h2fw_test.go:68: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10) %!s(int=5)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpiq46h2fw_test.go:68: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmpiq46h2fw_test.go:68: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpiq46h2fw_test.go:68: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=-10) %!s(int=10) %!s(int=10)]'\n    --- FAIL: TestMaximum/test_num__10\
    \ (0.00s)\n        tmpiq46h2fw_test.go:68: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-"
  timestamp: 1660073680
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // code here\n    if k == 0 || len(arr) == 0 {\n        return []int{}\n\
    \    }\n    max := arr[0]\n    result := make([]int, 0)\n    for i := 0; i < k;\
    \ i++ {\n        max := arr[i]\n        j := 0\n        for ; j < len(arr) &&\
    \ max < arr[j]; j++ {\n            max = arr[j]\n        }\n        result = append(result,\
    \ max)\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqp1zf36d_test.go:28:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < 1 {\n        return arr\n    }\n    if len(arr) > k {\n\
    \        return arr[0:k]\n    }\n    max := arr[0]\n    rest := arr[1:]\n    for\
    \ len(rest) > 0 {\n        if max < rest[0] {\n            max = rest[0]\n   \
    \     }\n        rest = rest[1:]\n    }\n    return append([]int{max}, rest...)\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp30csrr95_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp30csrr95_test.go:64:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__2 (0.00s)\n        tmp30csrr95_test.go:64: expected\
    \ '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp30csrr95_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp30csrr95_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp30csrr95_test.go:64: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n       \
    \ tmp30csrr95_test.go:64: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp30csrr95_test.go:64:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp30csrr95_test.go:64: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp30csrr95_test.go:64:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, len(arr))\n    max := arr[0]\n    for i := 0; i\
    \ < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n   \
    \     }\n        if max > k {\n            break\n        }\n    }\n    for i\
    \ := len(arr) - 1; i >= 0; i-- {\n        if arr[i] > max {\n            max =\
    \ arr[i]\n        }\n        if max > k {\n            break\n        }\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if max > k {\n            result[len(result)-1]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp92__uewf_test.go:76: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp92__uewf_test.go:76: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp92__uewf_test.go:76: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp92__uewf_test.go:76: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp92__uewf_test.go:76: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp92__uewf_test.go:76:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n   \
    \     tmp92__uewf_test.go:76: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp92__uewf_test.go:76: expected '[%!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp92__uewf_test.go:76: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp92__uewf_test.go:76:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\n    ---\
    \ FAIL: TestMaximum/test_num__10 (0.00s)\n        tmp92__uewf_test.go:76: expected\
    \ '[]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[k:]\n    for i := len(arr) - k; i < len(arr); i++ {\n    \
    \    max = append(max, arr[i])\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxbqfsoyr_test.go:54: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpxbqfsoyr_test.go:54: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpxbqfsoyr_test.go:54: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpxbqfsoyr_test.go:54: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxbqfsoyr_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxbqfsoyr_test.go:54:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxbqfsoyr_test.go:54: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=2)\
    \ %!s(int=5) %!s(int=3) %!s(int=-10) %!s(int=3) %!s(int=-10)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpxbqfsoyr_test.go:54: expected '[%!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=5) %!s(int=-7) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmpxbqfsoyr_test.go:54: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n\
    \        tmpxbqfsoyr_test.go:54: expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=-23) %!s(int=243) %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = maxInt(arr[i])\n    }\n\n    for i := k; i < len(arr); i++ {\n        result[i]\
    \ = maxInt(arr[i], result[i-1])\n    }\n\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9aeb83m_test.go:27:21: undefined: maxInt

    /tmp/tmpt9aeb83m_test.go:31:21: undefined: maxInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    result := make([]int,\
    \ k)\n    for i, v := range arr[:k] {\n        result[i] = v\n    }\n    for i,\
    \ v := range arr[k:] {\n        if v > result[k] {\n            result[k] = v\n\
    \        }\n    }\n    return result\n}\n</code>\nAnd for the last example, let's\
    \ assume k is 3, so it becomes:\n<code>\n maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
    \ 3)\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv2ktwx1j_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    l := len(arr)\n    max := arr[0]\n    ret := make([]int, k, max)\n  \
    \  if k == 0 || l == 0 {\n        return ret\n    }\n    if k >= l {\n       \
    \ ret[k] = arr[l-1]\n        return ret\n    }\n    max := arr[k]\n    i, j :=\
    \ 0, k\n    for i <= l-1 {\n        if arr[i] > max {\n            max = arr[i]\n\
    \            j = i\n        }\n        if j == k {\n            ret[k] = max\n\
    \            i = i + 1\n            break\n        }\n        if arr[i] > arr[j]\
    \ {\n            max = arr[i]\n        } else {\n            max = arr[j]\n  \
    \      }\n        j = i\n    }\n    return ret\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpywm_ov8j_test.go:34:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    result.Sort()\n    for i := len(result)\
    \ - 1; i >= 0; i-- {\n        result[i] = arr[len(result)-i]\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=go,algorithm dscore=1 |>\n<| a tags=go,algorithm\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpveul6u2d_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[0]\n        arr = arr[1:]\n    }\n   \
    \ for _, i := range arr {\n        for j := 0; j < k; j++ {\n            if result[j]\
    \ < i {\n                result[j] = i\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0_vs7c94_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp0_vs7c94_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0_vs7c94_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0_vs7c94_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0_vs7c94_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0_vs7c94_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    l := len(arr)\n    for i := 1; i < k; i++ {\n \
    \       max_val := 0\n        max_idx := -1\n        for j := 0; j < l; j++ {\n\
    \            if arr[j] > arr[j+i] {\n                if max_idx < j {\n      \
    \              max_idx = j\n                    max_val = arr[j]\n           \
    \     }\n            }\n        }\n        result = append(result, arr[k-i]...)\n\
    \        result = append(result, arr[k-i]...)\n        result[max_idx] = max_val\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8f4h9oa_test.go:37:33: cannot use arr[k - i] (variable of type int) as
    type []int in argument to append

    /tmp/tmpc8f4h9oa_test.go:38:33: cannot use arr[k - i] (variable of type int) as
    type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    \n    var result []int\n    if k > len(arr)\
    \ {\n        return arr\n    }\n    \n    for index, value := range arr {\n  \
    \      if index >= k {\n            break\n        }\n        if result != nil\
    \ {\n            result = append(result, value)\n        } else {\n          \
    \  result = append(result, value)\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbof5wewl_test.go:68: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpbof5wewl_test.go:68: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpbof5wewl_test.go:68: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpbof5wewl_test.go:68:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpbof5wewl_test.go:68:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpbof5wewl_test.go:68: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpbof5wewl_test.go:68: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpbof5wewl_test.go:68: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbof5wewl_test.go:68:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return arr\n    }\n    max := arr[0]\n   \
    \ max := arr[0]\n    for i := 1; i < k; i++ {\n        if arr[i] > max {\n   \
    \         max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupr3bm8l_test.go:28:9: no new variables on left side of :=

    /tmp/tmpupr3bm8l_test.go:34:12: cannot use max (variable of type int) as type
    []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    max := len(arr)\n    max -= 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            arr[i], arr[i+1] = arr[i+1],\
    \ arr[i]\n        }\n    }\n    ret := make([]int, k)\n    for i := range ret\
    \ {\n        ret[i] = arr[i+1]\n    }\n    return ret\n}\n</code>\n<|/ a dscore=3\
    \ tags=sorting,algorithm,mergesort,language-agnostic,python |>\n<| c |>\nIt's\
    \ O(n*log(n)), it can easily be improved to O(n) by just removing the if condition\
    \ in the loop\n<|/ c |>\n<| c |>\nThanks for pointing this out, I'll update the\
    \ answer.\n<|/ c |>\n<| a tags=sorting,algorithm,mergesort,language-agnostic,python\
    \ |>\nHere is a solution in Python that uses the quicksort algorithm to find the\
    \ maximum of two numbers:\n<code>\ndef max_num(a, b):\n    a = [n for n in (a\
    \ for a in reversed(a) if a>b)]\n    b = [n for n in (b for b in reversed(b) if\
    \ b>a)]\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return\
    \ a\n    quicksort(a, 0, len(a)-1)\n    quicksort(b, 0, len(b)-1)\n    return\
    \ max(a, b)\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\ndef max(a,b):\n    if\
    \ a>b:\n        if b>a:\n            return a\n        else:\n            return\
    \ b\n    else:\n        return b\n\ndef merge(a,b):\n    c=[]\n    i=j=0\n   \
    \ while i<len(a) and j<len(b):\n        if a[i] > b[j]:\n            c.append(a[i])\n\
    \            i=i+1\n        else:\n            c.append(b[j])\n            j=j+1\n\
    \    c += a[i:]\n    c += b[j:]\n    return c\n\ndef max_merge(arr):\n    if len(arr)==1:\n\
    \        return arr\n    if len(arr)==2:\n        return max(a=arr[0],b=arr[1])\n\
    \    mid=(len(arr)//2)\n    m=max_merge(arr[:mid])\n    n=max_merge(arr[mid:])\n\
    \    return max(a,b)\n\nprint(max_merge([1,2,3,4,5,6,7,8,9]))\n</code>\n<|/ a\
    \ tags=sorting,algorithm,mergesort,language-agnostic,python dscore=1 |>\n<| a\
    \ dscore=1 |>\nI solved this using two pointers starting from the middle. \n<code>\n\
    def max(a,b):\n    mid=(a+b)/\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb2bdfdxy_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return []int{}\n    }\n\n    if k == 0 {\n\
    \        return arr\n    }\n\n    max := arr[:0]\n    current := 0\n    arrLen\
    \ := len(arr)\n    max := append(max, arr[0])\n\n    for current < arrLen {\n\
    \        if arr[current] > arr[0] {\n            max := append(max, arr[current])\n\
    \            current += 1\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8ou7ba4_test.go:35:9: no new variables on left side of :=

    /tmp/tmpi8ou7ba4_test.go:39:13: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr2 := make([]int, k)\n    for i := range arr2 {\n        arr2[i] =\
    \ arr[i]\n    }\n    arr2 := arr2[:k]\n\n    max := arr2[0]\n    for i := range\
    \ arr2 {\n        if arr2[i] > max {\n            max = arr2[i]\n        }\n \
    \   }\n    return arr2\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as answer, but also provide an explanation what your code does and\
    \ how it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nThis is a great solution and one that I've used for similar\
    \ problems. Thank you!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <algorithm>\n\
    \ntemplate <typename iterator>\niterator find_kMax(iterator begin, iterator end,\
    \ int k)\n{\n    // sort the array\n    std::sort(begin, end, [](iterator i, iterator\
    \ j)\n    {\n        return *i < *j;\n    });\n    // remove first k elements\n\
    \    for (size_t i = k; i < begin; ++i)\n    {\n        auto elem = *begin;\n\
    \        *begin = *begin++;\n        std::pop_heap(begin, end, [](iterator i,\
    \ iterator j)\n        {\n            return *i < *j;\n        });\n        //\
    \ remove first element that has been popped\n        if (begin == end)\n     \
    \   {\n            return false;\n        }\n    }\n    // now return max element\
    \ from the array\n    return begin;\n}\n</code>\n<|/ a tags=list,algorithm,c |>\n\
    <| c |>\nThis is not C!\n<|/ c |>\n<| c |>\nIt's C++. I was too lazy to write\
    \ this in C :)\n<|/ c |>\n<| c |>\nOk, I wrote this in C++ for fun. I think OP\
    \ was looking for an answer in the context of C.\n<|/ c |>\n<| c |>\nBut it's\
    \ an answer to a different question. Not what OP wants.\n<|/ c |>\n<| a dscore=0\
    \ tags=list,algorithm,c |>\n<code>\nint kMax(List l, int k){\n    int temp=l[0];\n\
    \    for(int i=0;i<k;i++)\n    {\n        for(int j=i+1;j<l.length;j++)\n    \
    \    {\n            if(l[i]>l[j])\n            {\n                temp=l[i];\n\
    \                l[i]=l[j];\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp411mcam1_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return sort.IntSlice(arr).Take(k).ToList()\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tsv0dvf_test.go:24:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr2 := make([]int, k)\n    max := -1\n    pos := 0\n    for idx := 0;\
    \ idx < k; idx++ {\n        if arr[idx] > max {\n            pos = idx\n     \
    \       max = arr[idx]\n        }\n    }\n    arr2[pos] = max\n    for idx :=\
    \ 0; idx < k; idx++ {\n        arr2[pos] = arr[idx]\n    }\n    return arr2\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpyv3qont7_test.go:33\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpyv3qont7_test.go:57 +0x793\n\
    testing.tRunner(0xc0001a0340, 0x528d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := arr[0]\n    index := 0\n    for\
    \ index <= k-1 {\n        if max < arr[index] {\n            max = arr[index]\n\
    \        }\n        index += 1\n    }\n    result[0] = max\n    for index := 1;\
    \ index <= k; index++ {\n        if arr[index] > max {\n            max = arr[index]\n\
    \        }\n        result[index] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp06xp3s7t_test.go:35\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp06xp3s7t_test.go:50 +0x20c\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    max := make([]int, k)\n    max := arr\n\
    \    for i := 0; i < len(max); i++ {\n        for j := 0; j < len(arr); j++ {\n\
    \            if arr[j] > max[i] {\n                max[i] = arr[j]\n         \
    \   }\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnc5ay5yq_test.go:26:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(arr)\n    fmt.Println(k)\n    return nil\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[-3 -4 5]\n3\n[4 -4 4]\n2\n[-3 2 1 2 -1 -2 1]\n1\n[123 -123 20 0 1 2 -3]\n\
    3\n[-123 20 0 1 2 -3]\n4\n[5 15 0 3 -13 -8 0]\n7\n[-1 0 2 5 3 -10]\n2\n[1 0 5\
    \ -7]\n1\n[4 -4]\n2\n[-10 10]\n2\n[1 2 3 -23 243 -400 0]\n0\n--- FAIL: TestMaximum\
    \ (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n        tmppgb_aim4_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmppgb_aim4_test.go:52: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmppgb_aim4_test.go:52:\
    \ expected '[%!s(int=2)]', got '[]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmppgb_aim4_test.go:52: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmppgb_aim4_test.go:52:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmppgb_aim4_test.go:52: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmppgb_aim4_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmppgb_aim4_test.go:52: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmppgb_aim4_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmppgb_aim4_test.go:52: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    var maxList []int\n    if len(arr) > k {\n\
    \        maxList = arr[0:k]\n    } else if len(arr) < k {\n        maxList = append(arr[0:len(arr)-k],\
    \ arr[len(arr):])\n    } else {\n        maxList = arr[0:len(arr)]\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(maxList)))\n    return maxList\n}\n</code>\n\
    <|/ a tags=list,python,algorithm,sorting,merge |>\n<| a tags=list,python,algorithm,sorting,merge\
    \ dscore=0 |>\nThis answer is based on my earlier answer. \n<code>\ndef maximum_list(arr,k):\n\
    \    maximum=[]\n    for i in range(len(arr)):\n        maximum.append(arr[k])\n\
    \        if len(maximum)==k:\n            return maximum\n        else:\n    \
    \        maximum.append(max(maximum))\n    return maximum\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\ndef merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr)\
    \ // 2\n        merge_sort(arr[0:mid])\n        merge_sort(arr[mid:])\n      \
    \  merge(arr[0:mid],arr[mid:])\n    return arr\n\ndef merge(arr,result):\n   \
    \ i = 0\n    j = 0\n    while i < len(arr) and j < len(result):\n        if arr[i]\
    \ < result[j]:\n            result.append(arr[i])\n            i += 1\n      \
    \  else:\n            result.append(result[j])\n            j += 1\n    result\
    \ += arr[i:]\n    result += result[j:]\n</code>\n<|/ a dscore=0 tags=list,python,algorithm,sorting,merge\
    \ |>\n<| a tags=list,python,algorithm,sorting,merge |>\nMy solution:\n<code>\n\
    def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n    \
    \    merge_sort(arr[0:mid])\n        merge_sort(arr[mid:])\n        merge(arr[0:mid],arr[mid:])\n\
    \    return arr\n\ndef merge(arr,result):\n    i = 0\n    j = 0\n    while i <\
    \ len(arr) and j < len(result):\n        if arr[i] < result[j]:\n            result.append(arr[i])\n\
    \            i += 1\n        else:\n            result.append(result[j])\n   \
    \         j += 1\n    result += arr[i:]\n    result += result[j:]\n\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI used an iterative approach in Python. The\
    \ solution runs in O(N) time.\n<code>\ndef maximum_list(input,k):\n    def maxi(x):\n\
    \        if x == []:\n            return []\n        else:\n            return\
    \ [x[0]] + maxi(x[1:])\n    def merge(x,y):\n        len\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihfbx0ev_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // init result and index\n    var result []int\n    var index int\n \
    \   // start from the middle and find the maximum\n    for index < k {\n     \
    \   for i := index; i < k; i++ {\n            if arr[i] > arr[i+1] {\n       \
    \         result = append(result, arr[i])\n                index = i\n       \
    \     }\n        }\n    }\n    if index < k {\n        result = append(result,\
    \ arr[index])\n    }\n    return result\n}\n</code>\n<|/ a tags=sorting,algorithm,big-o,pseudocode,sorting\
    \ dscore=0 |>\n<| c |>\nThe complexity of this algorithm is O(k*log(n)), which\
    \ is much more inefficient than O(n) though. O(n) can be achieved by binary search,\
    \ but O(k*log(n)) requires sorting first and doing k comparisons.\n<|/ c |>\n\
    <| a |>\nI wrote the following python program for doing this.\n<code>\ndef maxSubArr(self,\
    \ arr, n):\n    #arr = [1,3,5,7,8,9,11,15,16,17,18,19,21,22]\n    #arr = [1,3,5,7,8,9,11]\n\
    \    #arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n\
    \    #arr = [0,0,0,0,0]\n\n    ans = []\n\n    for i in range(0, n):\n       \
    \ max = -99999999\n\n        for j in range(i, n):\n            if j == i or arr[j]\
    \ > max:   \n                max = arr[j]\n        ans.append(max)\n\n    return\
    \ ans\n</code>\n<|/ a dscore=0 tags=sorting,algorithm,big-o,pseudocode,sorting\
    \ |>\n<| c |>\nWelcome to SO! While this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=sorting,algorithm,big-o,pseudocode,sorting\
    \ |>\n<code>\npublic int maximum(int arr[], int k) {\n    int[] max_arr = new\
    \ int[k];\n    int max_val = -99999999;\n    for(int i = 0; i < k; i++) {\n  \
    \      max_arr[i] = -99999999;\n    }\n    for(int i = 1; i < arr.length; i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n\n    for(int i = arr.length - 1; i >= 0; i--) {\n        if(arr[i] >\
    \ max_arr[k - 1]) {\n            int temp = arr[i];\n            arr[i] = max_arr[k\
    \ - 1];\n            max_arr[k - 1] = temp;\n            k--;\n        }\n   \
    \ }\n    for(int i = 0; i < max_arr.length; i++) {\n        System.out.print(max_arr[i]\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpagiwedc9_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, k)\n    max := arr[0]\n    i := 0\n    for _, v := range\
    \ arr {\n        if v > max {\n            max = v\n        }\n        m[i] =\
    \ max\n        i++\n    }\n    return m\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp6on4qac8_test.go:31\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp6on4qac8_test.go:45 +0x5bf\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    n := len(arr)\n    max := make([]int, 0,\
    \ k)\n    for i := 0; i < n; i++ {\n        if n > k {\n            max = append(max,\
    \ arr[i])\n            n = n - 1\n        } else {\n            if arr[i] > max[0]\
    \ {\n                max[0] = arr[i]\n            }\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5147c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5147c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp_7y_8bbb_test.go:32\n\
    command-line-arguments_test.TestMaximum(0xc0001a0340?)\n\t/tmp/tmp_7y_8bbb_test.go:47\
    \ +0x154f\ntesting.tRunner(0xc0001a0340, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := arr[0]\n    result [0] = max\n \
    \   for i := 1; i < k; i++ {\n        max := arr[0]\n        for _, val := range\
    \ arr {\n            if val > max {\n                max = val\n            }\n\
    \        }\n        result[i] = max\n    }\n    return result\n}\n</code>\n<|/\
    \ a tags=python,sorting,list dscore=3 |>\n<| c |>\nThe only problem with your\
    \ code is that it doesn't return the last element in the list. I guess, this would\
    \ be an issue if there were more than 1 element in list.\n<|/ c |>\n<| c |>\n\
    This solution is incorrect in Python 3 and will raise `IndexError: list index\
    \ out of range` on that version\n<|/ c |>\n<| a tags=python,sorting,list dscore=2\
    \ |>\nHere's one with reduce from functools package:\n<code>\ndef biggest_number(l):\n\
    \    return reduce(\n        lambda x, y: y if x > y else x,\n        l,\n   \
    \     lambda x, y: y if x == y else x,\n    )\n</code>\n<|/ a |>\n<| a |>\nYou\
    \ can use itertools, a python module for handling iterables:\n<code>\nfrom itertools\
    \ import chain\n\ndef max(xs):\n    maxes = chain([0], maxes)\n    maxes.extend([x\
    \ for x in xs if x < maxes[-1]])\n    return maxes\n</code>\n<|/ a dscore=2 tags=python,sorting,list\
    \ |>\n<| a tags=python,sorting,list |>\nHere is a solution using recursion, without\
    \ using additional modules.\n<code>\ndef max_list(lst):\n    if len(lst) == 0:\n\
    \        return []\n    if lst[0] > max_list(lst[1:]):\n        return max_list(lst[1:])\n\
    \    return [lst[0]]\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nJust wanted\
    \ to add this for people who don't know how to use lambda functions or how reduce\
    \ works. You can find the documentation here: https://docs.python.org/3/library/functions.html\n\
    The lambda function takes two parameters: the original list and the operation\
    \ you want to apply on it. \nFor example:\n<code>\nfrom functools import reduce\n\
    \ndef max_list(lis):\n    return reduce(lambda x,y: x if x > y else y, lis)\n\
    </code>\nIt will return the biggest number in the list you passed into it.\n<|/\
    \ a tags=python,sorting,list |>\n<| a tags=python,sorting,list |>\nThe simplest\
    \ method would be to use list comprehension to do this\n<code>\n>>> max_nums =\
    \ [max(l) for l in mylist]\n</code>\n<|/ a d\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3_aj773_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    ans := make([]int, k)\n    max := 0\n    last := 0\n\n    for i := 0;\
    \ i < k; i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > arr[last] {\n                last = j\n            }\n        }\n        ans[i]\
    \ = arr[last]\n        max = max > arr[last] ? max : arr[last]\n        last =\
    \ k\n    }\n    for i := 0; i < k; i++ {\n        ans[i] = max\n    }\n    return\
    \ ans\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmka81zjj_test.go:35:31: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    if len(arr) < k {\n        return nil\n\
    \    }\n\n    max := arr[0]\n    for _, x := range arr {\n        if x > max {\n\
    \            max = x\n        }\n    }\n\n    for j := 0; j < k; j++ {\n     \
    \   result[j] = max\n    }\n\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxbu0r41h_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxbu0r41h_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxbu0r41h_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxbu0r41h_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpxbu0r41h_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpxbu0r41h_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpxbu0r41h_test.go:66: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    m := 0\n    n := 0\n    for _, v := range\
    \ arr {\n        m += v\n        n++\n    }\n    if m <= n {\n        return arr[:n]\n\
    \    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpx_k__igd_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpx_k__igd_test.go:60: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpx_k__igd_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpx_k__igd_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpx_k__igd_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpx_k__igd_test.go:60:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpx_k__igd_test.go:60: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpx_k__igd_test.go:60: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpx_k__igd_test.go:60: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmpx_k__igd_test.go:60:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr2 := make([]int, k, k)\n    var maxLen int\n    for idx := range arr2\
    \ {\n        maxLen = len(arr2)\n        for i := 0; i < len(arr); i++ {\n   \
    \         if arr[i] > arr2[idx] {\n                arr2[idx] = arr[i]\n      \
    \          if idx == k-1 {\n                    break\n                }\n   \
    \         }\n            if arr[i] < arr2[idx] {\n                if i < maxLen\
    \ {\n                    maxLen = i\n                }\n            }\n      \
    \  }\n    }\n    result := make([]int, 0, maxLen)\n    for idx, val := range arr2\
    \ {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bp5w197_test.go:43:9: idx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        k = len(arr)\n    }\n    return Maximum(arr,\
    \ k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwxjc5es_test.go:27:12: undefined: Maximum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    max := 0\n    max := -1\n    index := 0\n\
    \    count := 0\n    if k > len(arr) {\n        return arr\n    }\n\n    for index,\
    \ value := range arr {\n        count += value\n        if max < count {\n   \
    \         max = count\n        }\n        if count == k {\n            break\n\
    \        }\n    }\n\n    return arr[:index+k+1]\n}\n</code>\n<|/ a dscore=2 tags=slice,go\
    \ |>\n<| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    sort\"\n)\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjj7k57gg_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := -1\n    for i := 0; i < k; i++ {\n\
    \        if len(arr) > 0 {\n            max = arr[0]\n            arr = []int{}\n\
    \        } else {\n            continue\n        }\n        for j := 1; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n        result = append(result, max)\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0coy2t0o_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp0coy2t0o_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0coy2t0o_test.go:66: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0coy2t0o_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n \
    \       tmp0coy2t0o_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-123)]'\n    --- FAIL:\
    \ TestMaximum/test_num__5 (0.00s)\n        tmp0coy2t0o_test.go:66: expected '[%!s(int=-13)\
    \ %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0coy2t0o_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0) %!s(int=-1)]'\n\
    \    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp0coy2t0o_test.go:66:\
    \ expected '[%!s(int=5)]', got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp0coy2t0o_test.go:66: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp0coy2t0o_test.go:66: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    if len(arr) <= k {\n        return arr\n\
    \    }\n    for i := 0; i < k; i++ {\n        if arr[i] > result[i] {\n      \
    \      result[i] = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpezkfxa0y_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpezkfxa0y_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpezkfxa0y_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpezkfxa0y_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=0)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpezkfxa0y_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpezkfxa0y_test.go:59: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpezkfxa0y_test.go:59: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpezkfxa0y_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpezkfxa0y_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k || k > len(arr) {\n        return []int{}\n    }\n  \
    \  max := arr[0]\n    for i := 0; i < k; i++ {\n        if max < arr[i] {\n  \
    \          max = arr[i]\n        }\n    }\n    return arr[0:k] + []int{max}\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdizg63n7_test.go:33:15: invalid operation: operator + not defined on arr[0:k]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var max []int\n    if len(arr) <= k {\n        return arr\n    }\n  \
    \  for i := 0; i < k; i++ {\n        if arr[i] > max[0] {\n            max = append(max,\
    \ arr[i])\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpz_uzfdb0_test.go:29\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpz_uzfdb0_test.go:44 +0xd45\n\
    testing.tRunner(0xc0001031e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) || k == 0 || len(arr) <= 0 {\n        return nil\n  \
    \  }\n    result := make([]int, k)\n    max := arr[0]\n    for i := range arr\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if\
    \ i-k >= 0 && arr[i-1] < max {\n            result[i-1] = max\n            max\
    \ = arr[i-1]\n        }\n    }\n    for i := range result {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 1 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5ca0, 0x7, 0x0?}, 0x1)\n\
    \t/tmp/tmp1r07ef0q_test.go:34 +0xe7\ncommand-line-arguments_test.TestMaximum(0xc0001a01a0?)\n\
    \t/tmp/tmp1r07ef0q_test.go:53 +0x1b2\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here\n    m := make([]int, k)\n    var max int\n \
    \   for i := 0; i < k; i++ {\n        max = arr[0]\n        for j := 0; j < k;\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \     }\n        }\n        m[i] = max\n    }\n    return m\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmph0dlaaqq_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmph0dlaaqq_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmph0dlaaqq_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmph0dlaaqq_test.go:62:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmph0dlaaqq_test.go:62: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmph0dlaaqq_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmph0dlaaqq_test.go:62: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmph0dlaaqq_test.go:62:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmph0dlaaqq_test.go:62: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return nil\n    }\n    max := arr[0]\n   \
    \ var result []int\n    var i int\n    for i = 1; i < len(arr); i++ {\n      \
    \  if arr[i] > max {\n            max = arr[i]\n            result = make([]int,\
    \ k)\n            copy(result, arr[0:i])\n            copy(result[i:], arr[i:])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of range [3:2]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5147c0, 0xc000014378})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5147c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpziqsuwf4_test.go:35\n\
    command-line-arguments_test.TestMaximum(0xc0001a01a0?)\n\t/tmp/tmpziqsuwf4_test.go:54\
    \ +0x1885\ntesting.tRunner(0xc0001a01a0, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    ret := make([]int, k)\n    if len(arr) == 0 || k == 0 {\n        return\
    \ ret\n    }\n\n    m := 0\n    max := arr[0]\n    for i := 1; i < len(arr); i++\
    \ {\n        if arr[i] > max {\n            m = i\n            max = arr[i]\n\
    \        }\n    }\n\n    for i := m; i < k; i++ {\n        ret[i] = max\n    }\n\
    \n    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpjt_g8le1_test.go:68: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpjt_g8le1_test.go:68: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpjt_g8le1_test.go:68:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpjt_g8le1_test.go:68:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpjt_g8le1_test.go:68: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpjt_g8le1_test.go:68:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpjt_g8le1_test.go:68: expected '[%!s(int=5)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpjt_g8le1_test.go:68:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpjt_g8le1_test.go:68: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    m := make([]int, k)\n\
    \    for i, v := range arr[:k] {\n        m[i] = v\n    }\n    if len(arr) <=\
    \ k {\n        copy(m, arr[k:])\n    }\n    for i, v := range arr[:k] {\n    \
    \    if m[i] > v {\n            m[i] = v\n        }\n    }\n    return m\n}\n\
    </code>\n<|/ a tags=algorithm,sorting,merge,python,arrays |>\n<| a tags=algorithm,sorting,merge,python,arrays\
    \ |>\nA Python solution:\n<code>\ndef max2(x,y):\n    if x <= y:\n        return\
    \ x \n    else:\n        return y\n\ndef merge(a,b):\n    i = j = 0\n    final\
    \ = []\n    while i < len(a) and j < len(b):\n        val = max2(a[i],b[j])\n\
    \        final.append(val)\n        i = i + 1\n        j = j + 1\n    while i\
    \ < len(a):\n        final.append(a[i])\n        i = i + 1\n    while j < len(b):\n\
    \        final.append(b[j])\n        j = j + 1\n\n    return final\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=algorithm,sorting,merge,python,arrays |>\nAn easy\
    \ to understand java solution (using streams api)\n<code>\n    int[] arr = {4,7,8,11,2,10};\n\
    \    int k = 3;\n    List<Integer> maximum = IntStream.of(arr)\n            .limit(k)\n\
    \            .sorted()\n            .collect(Collectors.toList());\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=algorithm,sorting,merge,python,arrays |>\nThis is\
    \ my solution to merge two sorted arrays:\n<code>\ndef merge2(ar1, ar2, n):\n\
    \    \"\"\"Merge two sorted arrays.\"\"\"\n    i = 0\n    j = 0\n    merged =\
    \ []\n    while i < n and j < n:\n        if ar1[i] > ar2[j]:\n            merged.append(ar2[j])\n\
    \            j += 1\n        else:\n            merged.append(ar1[i])\n      \
    \      i += 1\n    while i < n:\n        merged.append(ar1[i])\n        i += 1\n\
    \    while j < n:\n        merged.append(ar2[j])\n        j += 1\n    return merged\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nMy solution is very similar to Vincent's\
    \ but the difference is how it is done in python.\n<code>\ndef mergeSort(arr):\n\
    \    if len(arr) <= 1:\n        return arr\n    else:\n        mid = int(len(arr)/2)\n\
    \        left_half = mergeSort(arr[:\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgjnlnnjj_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    index := 0\n    for i := 1; i < k; i++ {\n       \
    \ if arr[i] > max {\n            max = arr[i]\n            index = i\n       \
    \ }\n    }\n    arr[index] = arr[k]\n    copy(arr[index+1:], arr[index+1:k+1])\n\
    \    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpr9r9bhll_test.go:32\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpr9r9bhll_test.go:44 +0x6f\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(\"Maximum test\", arr)\n    if len(arr) == 0 || k <= 0 ||\
    \ k > len(arr) {\n        return nil\n    }\n    max := arr[0]\n    rest := arr[1:]\n\
    \    for i := range rest {\n        if rest[i] > max {\n            max = rest[i]\n\
    \        }\n    }\n    return arr[0:k]\n}\n</code>\n<|/ a |>\n<| a tags=arrays,algorithm\
    \ |>\nA recursive solution that should work:\n<code>\ndef maximum(arr, k, result=None):\n\
    \    if result == None:\n        result = [0] * k\n    if k == 0 or len(arr) ==\
    \ 0:\n        return result\n    max = arr[0]\n    for i in range(1, k):\n   \
    \     if arr[i] > arr[i-1]:\n            result[k-1] = max\n            max =\
    \ arr[i]\n    maximum(arr[1:], k-1, result)\n    result[k-1] = max\n    return\
    \ result\n\nprint maximum([1, 2, 3, 4, 5], 2)\n>>> [4, 3, 2, 1]\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\nA simple iterative solution\n<code>\ndef maximum(arr,k):\n\
    \    max = arr[0]\n    arr = arr[1:]\n    for i in range(k):\n        if arr[i]\
    \ > max:\n            max = arr[i]\n    return max\n</code>\n<|/ a tags=arrays,algorithm\
    \ |>\n<| a tags=arrays,algorithm dscore=0 |>\nHere is an iterative solution in\
    \ O(n):\n<code>\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmtmclx0t_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) || k > 0 {\n        fmt.Printf(\"k is out of range\"\
    )\n        return nil\n    }\n    result := make([]int, k)\n    max := -1000\n\
    \    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    for i := k - 1; i >= 0; i-- {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n\
    \        if arr[i] == max {\n            result[i] = max\n        }\n    }\n \
    \   return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "k is out of rangek is out of rangek is out of rangek is out of rangek is\
    \ out of rangek is out of rangek is out of rangek is out of rangek is out of rangek\
    \ is out of range--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0\
    \ (0.00s)\n        tmpaaqj_cg1_test.go:71: expected '[%!s(int=-4) %!s(int=-3)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n    \
    \    tmpaaqj_cg1_test.go:71: expected '[%!s(int=4) %!s(int=4)]', got '[]'\n  \
    \  --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpaaqj_cg1_test.go:71:\
    \ expected '[%!s(int=2)]', got '[]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpaaqj_cg1_test.go:71: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpaaqj_cg1_test.go:71:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpaaqj_cg1_test.go:71: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpaaqj_cg1_test.go:71:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpaaqj_cg1_test.go:71: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpaaqj_cg1_test.go:71:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpaaqj_cg1_test.go:71: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return arr\n    }\n    max := arr[0]\n   \
    \ for i := 1; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return append(arr, max)\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpx4agjcxy_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpx4agjcxy_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpx4agjcxy_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1) %!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpx4agjcxy_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=123)]'\n  \
    \  --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpx4agjcxy_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpx4agjcxy_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpx4agjcxy_test.go:59: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpx4agjcxy_test.go:59: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=5) %!s(int=-7) %!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpx4agjcxy_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpx4agjcxy_test.go:59:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=-10) %!s(int=10) %!s(int=10)]'\n\
    \    --- FAIL: TestMaximum/test_num__10 (0.00"
  timestamp: 1660073684
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(\"given arr\", arr)\n    fmt.Println(\"given k\", k)\n  \
    \  fmt.Println(\"length of arr\", len(arr))\n    fmt.Println(\"length of k\",\
    \ k)\n    fmt.Println(\"length of arr without k\", len(arr) - k)\n    fmt.Println(\"\
    length of arr without k rounded up\", len(arr) - (k-1))\n    fmt.Println(\"length\
    \ of arr without k rounded down\", len(arr) - int(math.Ceil(k)))\n    fmt.Println(\"\
    length of arr without k rounded down\", len(arr) - int(math.Floor(k)))\n\n   \
    \ if len(arr) < k {\n        return arr\n    }\n    var result []int\n    if len(arr)\
    \ < k {\n        return arr\n    }\n    if len(arr) == k {\n        result = []int{arr[0]}\n\
    \        return append(result, arr...)\n    }\n    maxNumber := arr[0]\n    for\
    \ _, v := range arr[1:] {\n        if v > maxNumber {\n            maxNumber =\
    \ v\n        }\n    }\n    result = []int{maxNumber}\n    sort.Ints(result)\n\
    \    return append(result, arr...)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp070gtfdh_test.go:30:72: undefined: math

    /tmp/tmp070gtfdh_test.go:31:72: undefined: math

    /tmp/tmp070gtfdh_test.go:51:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    for _, v := range arr[:k] {\n        biggest := v\n        for _, v2\
    \ := range arr[k:] {\n            if biggest > v2 {\n                biggest =\
    \ v\n            }\n        }\n        arr[k] = biggest\n    }\n    return arr\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpxohiwix9_test.go:31\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpxohiwix9_test.go:43 +0x49\n\
    testing.tRunner(0xc0001a01a0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 || k <= 0 {\n        return nil\n    }\n    k %= len(arr)\n\
    \    max := arr[0]\n    max := arr[0]\n    for i := 0; i < k; i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return append(arr,\
    \ max)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxdspl32_test.go:29:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, k)\n    max := make([]int, k, k)\n    if len(arr) ==\
    \ 0 {\n        return m\n    }\n    if len(arr) == k {\n        return arr\n \
    \   }\n    for _, x := range arr {\n        m[k] = x\n        max[0] = 0\n   \
    \     for i := 1; i < k; i++ {\n            if x > m[i-1] {\n                m[k]\
    \ = m[i-1]\n            } else {\n                m[k] = x\n            }\n  \
    \          if m[k] > max[i-1] {\n                max[i] = max[i-1]\n         \
    \   } else {\n                max[i] = m[k]\n            }\n        }\n    }\n\
    \    return max\n}\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000143a8?, 0x3, 0x3}, 0x2)\n\
    \t/tmp/tmptm503peh_test.go:33 +0x7f\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmptm503peh_test.go:58 +0xcd\ntesting.tRunner(0xc0001924e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    i := 0\n    max := arr[0]\n    max := -1\n\n    // sort arr then pick\
    \ the top k\n    for i < len(arr) {\n        if max < arr[i] {\n            max\
    \ = arr[i]\n        }\n        i++\n    }\n\n    // append the remaining elements\n\
    \    for i < len(arr) {\n        if max < arr[i] {\n            max = arr[i]\n\
    \        }\n        i++\n    }\n\n    return arr[0:k+1]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpah54_oqo_test.go:26:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return nil\n    }\n    var ans []int\n   \
    \ var index int\n    for _, v := range arr {\n        if index >= k {\n      \
    \      ans = append(ans, v)\n            index = 0\n        } else {\n       \
    \     if v > ans[index] {\n                ans = append(ans, v)\n            \
    \    index++\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5147c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5147c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpein9siz2_test.go:34\n\
    command-line-arguments_test.TestMaximum(0xc0001a01a0?)\n\t/tmp/tmpein9siz2_test.go:50\
    \ +0x1f52\ntesting.tRunner(0xc0001a01a0, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 || len(arr) <= k {\n        return nil\n    }\n\n    max :=\
    \ arr[0]\n    result := make([]int, k)\n    for i := range result {\n        result[i]\
    \ = max\n    }\n\n    for i := 1; i < k; i++ {\n        if arr[i] > max {\n  \
    \          max = arr[i]\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp_g5cl9q6_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmp_g5cl9q6_test.go:66:\
    \ expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp_g5cl9q6_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp_g5cl9q6_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=20) %!s(int=20)]'\n \
    \   --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp_g5cl9q6_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n   \
    \     tmp_g5cl9q6_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp_g5cl9q6_test.go:66:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp_g5cl9q6_test.go:66: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp_g5cl9q6_test.go:66:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, 0, k)\n    if len(arr) < k {\n        return arr\n\
    \    }\n    for i := 0; i < k; i++ {\n        maxNum := arr[0]\n        for _,\
    \ j := range arr {\n            if j > maxNum {\n                maxNum = j\n\
    \            }\n        }\n        result = append(result, maxNum)\n        arr[len(arr)-1]\
    \ = maxNum\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmplv1dh2ev_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmplv1dh2ev_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmplv1dh2ev_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmplv1dh2ev_test.go:64: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmplv1dh2ev_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmplv1dh2ev_test.go:64: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmplv1dh2ev_test.go:64: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, 0, k)\n    for _, v := range arr {\n        if m ==\
    \ 0 || v > m[len(m)-1] {\n            m = append(m, v)\n        }\n    }\n   \
    \ return m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq47_lrd_test.go:26:17: cannot convert 0 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    ret := make([]int, k)\n    for i := 0; i < len(arr); i++ {\n        for\
    \ j := 0; j < k; j++ {\n            if arr[i] > ret[j] {\n                ret[j]\
    \ = arr[i]\n            }\n        }\n    }\n    return ret\n}\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpcshzkngf_test.go:57: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpcshzkngf_test.go:57: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpcshzkngf_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpcshzkngf_test.go:57: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpcshzkngf_test.go:57:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpcshzkngf_test.go:57: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpcshzkngf_test.go:57: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := arr[0]\n    i := 0\n    for _, elem\
    \ := range arr {\n        if elem > max {\n            max = elem\n        }\n\
    \        if k > i && elem > max {\n            result[k] = max\n            i\
    \ = 0\n            max = elem\n        } else if k > i {\n            i += 1\n\
    \        }\n    }\n    if k > i {\n        result[k] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp3tlx0cvl_test.go:68: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp3tlx0cvl_test.go:68: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp3tlx0cvl_test.go:68: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp3tlx0cvl_test.go:68:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp3tlx0cvl_test.go:68:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp3tlx0cvl_test.go:68: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp3tlx0cvl_test.go:68: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp3tlx0cvl_test.go:68: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp3tlx0cvl_test.go:68:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp3tlx0cvl_test.go:68: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    return make([]int, 0)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpj_z2r3t3_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpj_z2r3t3_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpj_z2r3t3_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpj_z2r3t3_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpj_z2r3t3_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpj_z2r3t3_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpj_z2r3t3_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpj_z2r3t3_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpj_z2r3t3_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpj_z2r3t3_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    s := sort.IntSlice(arr)\n    var maxArr []int\n    for i := 0; i < k;\
    \ i++ {\n        maxArr = append(maxArr, s.Get(i))\n    }\n    return maxArr\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fkq40f2_test.go:24:10: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    r := make([]int, k)\n    for i := 0; i < k; i++ {\n        r[i] = arr[len(arr)-1-i]\n\
    \    }\n    return r\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdkk3qha_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    max := arr[k]\n   \
    \ if k == 0 {\n        return arr\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return\
    \ append(arr, max)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpjaetuziq_test.go:27\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpjaetuziq_test.go:46 +0x49\n\
    testing.tRunner(0xc0001a01a0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    result := make([]int,\
    \ 0, k)\n    for i := range arr {\n        result := append(result, arr[i])\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0f64msv_test.go:29:9: result declared but not used

    /tmp/tmpt0f64msv_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := len(arr) - k\n    max += 1 // To make sure that the return list\
    \ is length k\n    max -= 1 // To make sure that the first element of the return\
    \ list is maximum\n    result := make([]int, max)\n    i := 0\n    for _, v :=\
    \ range arr {\n        if v > arr[i] {\n            i++\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 0 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp13vk9lr2_test.go:32\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp13vk9lr2_test.go:45 +0xe52\n\
    testing.tRunner(0xc000103860, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Do not write main() function.\n    // Write some code here.\n    max\
    \ := arr[:k]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max[i]\
    \ {\n            max = arr[:i]\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp93sm9nyd_test.go:28\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp93sm9nyd_test.go:43 +0xe12\n\
    testing.tRunner(0xc0001924e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    i := 0\n    for i < len(arr) {\n        if i ==\
    \ k {\n            result = append(result, arr[i])\n        } else {\n       \
    \     result = append(result, arr[i])\n            i++\n        }\n    }\n   \
    \ for i := len(result) - 1; i >= k; i-- {\n        if result[i] > result[i+1]\
    \ {\n            result[i], result[i+1] = result[i+1], result[i]\n        }\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=5 |>\n<| a tags=algorithm,sorting,python\
    \ |>\n<code>\ndef maximum(a,b):\n  return max(a,b) if len(a)>len(b) else max(b,a)\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis will fail for empty lists.\n<|/ c |>\n\
    <| a |>\n<code>\ndef maximum(a, b):\n    if a > b:\n        a, b = b, a\n    return\
    \ b if len(a) == 0 else max(a[:len(a) - len(b)], b[:len(a) - len(b)])\n</code>\n\
    <|/ a tags=algorithm,sorting,python dscore=4 |>\n<| a dscore=4 |>\nA simple recursive\
    \ approach works nicely here.  \n<code>\ndef maximum(li):\n    if not li:\n  \
    \      return li\n    if len(li) == 1:\n        return li\n    return maximum(li[1:])\
    \ if li[0] > li[-1] else maximum([li[0]] + li[1:])\n</code>\n<|/ a tags=algorithm,sorting,python\
    \ |>\n<| a tags=algorithm,sorting,python dscore=3 |>\nA simple recursive approach\
    \ works nicely here.  \n<code>\ndef maximum(li):\n    if not li:\n        return\
    \ li\n    if len(li) == 1:\n        return li\n    return maximum(li[1:]) if li[0]\
    \ > li[-1] else maximum([li[0]] + li[1:])\n</code>\n<|/ a |>\n<| a tags=algorithm,sorting,python\
    \ |>\n<code>\ndef maximum(a, b):\n   if a > b:\n       a, b = b, a\n   if len(a)\
    \ == 0 or len(b) == 0:\n       return b\n   return max(a[:len(a) - len(b)], b[:len(a)\
    \ - len(b)])\n</code>\n<|/ a dscore=3 |>\n<| a |>\nPython 3 version\n<code>\n\
    def maximum(arr:list):\n    length = len(arr)\n    maximum = arr[0]\n    if length\
    \ <= 1:\n        return maximum\n    else:\n        maximum = max(maximum, maximum)\n\
    \    return maximum(arr[1:], maximum)\n</code>\n<|/ a dscore=3 tags=algorithm,sorting,python\
    \ |>\n<| a tags=algorithm,sorting\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyrv09v5n_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073685
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        if i\
    \ >= len(arr) {\n            break\n        }\n        if arr[i] > arr[i+1] {\n\
    \            i, result := i, append(result, arr[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gjwcaam_test.go:30:13: i declared but not used

    /tmp/tmp5gjwcaam_test.go:30:16: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO:\n    // 1. Write your code here.\n    return arr\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5pl9s7jn_test.go:52: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp5pl9s7jn_test.go:52: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp5pl9s7jn_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp5pl9s7jn_test.go:52: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5pl9s7jn_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp5pl9s7jn_test.go:52:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp5pl9s7jn_test.go:52: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp5pl9s7jn_test.go:52: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp5pl9s7jn_test.go:52: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmp5pl9s7jn_test.go:52:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n       \
    \     max = v\n        }\n    }\n    max -= len(arr)\n    if k > max {\n     \
    \   k = max\n    }\n    var result []int\n    for i := k; i > 0; i-- {\n     \
    \   result = append(result, arr[0])\n    }\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i+1])\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5147c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5147c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp3r95omae_test.go:39\n\
    command-line-arguments_test.TestMaximum(0xc000103520?)\n\t/tmp/tmp3r95omae_test.go:56\
    \ +0x2472\ntesting.tRunner(0xc000103520, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return nil\n    }\n    if k > len(arr) {\n\
    \        k = len(arr)\n    }\n    result := make([]int, k)\n    max := arr[0]\n\
    \    position := 0\n    for _, v := range arr {\n        if v > max {\n      \
    \      max = v\n        }\n        result[position] = v\n        position++\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpq8g8ebih_test.go:37\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpq8g8ebih_test.go:51 +0x53f\n\
    testing.tRunner(0xc0001036c0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrSorted := make([]int, len(arr))\n    var index int\n    arrMax :=\
    \ arr[0]\n    for i := range arr {\n        arrSorted[i] = arr[i]\n        if\
    \ arrSorted[i] > arrMax {\n            index = i\n            arrMax = arrSorted[i]\n\
    \        }\n    }\n    arrSorted[index] = arrMax\n    return arrSorted[0:k]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpghe0cff9_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpghe0cff9_test.go:61: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpghe0cff9_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpghe0cff9_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpghe0cff9_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpghe0cff9_test.go:61: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpghe0cff9_test.go:61: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpghe0cff9_test.go:61: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpghe0cff9_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073686
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(\"arr: \", arr)\n    fmt.Println(\"k: \", k)\n    arr1 :=\
    \ make([]int, k)\n    max := arr[0]\n    i := 0\n    for ; i < k; i++ {\n    \
    \    if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    arr1 =\
    \ append(arr1, max)\n    for i < k {\n        if arr[i] > max {\n            arr1\
    \ = append(arr1, arr[i])\n        }\n    }\n    fmt.Println(\"arr1: \", arr1)\n\
    \    arr1 := append(arr1, arr[0]...)\n    sort.Sort(arr1)\n    return arr1\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3h_s0s41_test.go:41:10: no new variables on left side of :=

    /tmp/tmp3h_s0s41_test.go:41:26: cannot use arr[0] (variable of type int) as type
    []int in argument to append

    /tmp/tmp3h_s0s41_test.go:42:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073686
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr){\n        return []int{}\n    }\n    result := []int{}\n\
    \    for i := 0; i < k; i++ {\n        if result[len(result)-1] < arr[len(result)-1]{\n\
    \            result = append(result, arr[len(result)-1])\n        }\n    }\n \
    \   for _, element := range arr[:k] {\n        if element > result[len(result)-1]\
    \ {\n            result = append(result, element)\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=go,sorting,slice |>\n<| a dscore=0 tags=go,sorting,slice\
    \ |>\nYou can find the maximum value of a slice with the function sort.Slice().\n\
    The function takes as input the slice and a function that will be called on each\
    \ element of the slice. The function should return a value that will be used as\
    \ comparator (the sort order) for the elements of the slice.\nIn your case:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpecz1a67a_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073686
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return []int{arr[0], arr[len(arr) - 1]}\n\
    \    }\n    maximum := arr[0]\n    max := 0\n    for _, value := range arr {\n\
    \        if value > max {\n            maximum = value\n            max = 1\n\
    \        } else {\n            max += 1\n        }\n    }\n    if max > k {\n\
    \        return []int{maximum, arr[len(arr) - k]}\n    }\n    maximum := arr[0]\n\
    \    max := 0\n    for _, value := range arr {\n        if value < maximum {\n\
    \            maximum = value\n            max = 1\n        } else {\n        \
    \    max += 1\n        }\n    }\n    if max > k {\n        return []int{maximum,\
    \ arr[len(arr) - k]}\n    }\n    return arr\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk1ji5jza_test.go:40:13: no new variables on left side of :=

    /tmp/tmpk1ji5jza_test.go:41:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    max := arr[0]\n    for _, number := range arr[1:]\
    \ {\n        if number > max {\n            max = number\n        } else {\n \
    \           break\n        }\n    }\n    return arr[0:k+1]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvm3cbpop_test.go:25:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(arr)\n    fmt.Println(k)\n    return sortList(arr, k)\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8soygreo_test.go:26:12: undefined: sortList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    var result []int\n\n    for _, value :=\
    \ range arr {\n        if k == 0 {\n            result = append(result, value)\n\
    \            k -= 1\n        } else {\n            if value > result[len(result)-1]\
    \ {\n                result = append(result, value)\n                k -= 1\n\
    \            }\n        }\n    }\n    if k == 0 {\n        result = append(result,\
    \ arr[len(arr)-1])\n    }\n    sort.Sort(resultSliceByK(arr))\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff5v1nqq_test.go:41:5: undefined: sort

    /tmp/tmpff5v1nqq_test.go:41:15: undefined: resultSliceByK

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k < 0 || k > len(arr) {\n        return nil\n    }\n\n    m := make([]int,\
    \ k)\n\n    // Find the max numbers in arr.\n    for idx := range arr {\n    \
    \    m[idx] = arr[idx]\n    }\n\n    // Add the max numbers in arr to m.\n   \
    \ for idx := range arr {\n        if idx > 0 {\n            if arr[idx] > m[idx\
    \ - 1] {\n                m[idx] = arr[id]\n            }\n        }\n    }\n\n\
    \    return m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswq8dpon_test.go:39:30: undefined: id

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if len(arr) == 0 {\n        result = make([]int,\
    \ k)\n        return\n    }\n    max := arr[0]\n    for _, v := range arr {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    for i := 0;\
    \ i < k; i++ {\n        result = append(result, max)\n    }\n    return\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe0116zkx_test.go:27:9:\
    \ not enough return values\n\thave ()\n\twant ([]int)\n/tmp/tmpe0116zkx_test.go:38:5:\
    \ not enough return values\n\thave ()\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 || k > len(arr) {\n        return []int{}\n    }\n\n\
    \    max := arr[0]\n    max := arr[0]\n    for _, v := range arr[1:] {\n     \
    \   if v > max {\n            max = v\n        }\n    }\n\n    var ret []int\n\
    \    for i := 0; i < k; i++ {\n        if max != arr[i] {\n            ret = append(ret,\
    \ max)\n            max = arr[i]\n        } else {\n            max = arr[i]\n\
    \        }\n    }\n    return append(ret, max)\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hzmrx8y_test.go:29:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var max []int\n    if len(arr) < k {\n        return arr\n    }\n   \
    \ for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    for i := 0; i < k; i++ {\n        if arr[i] < max {\n \
    \           arr[i] = max\n        }\n    }\n    return arr\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_5wy880_test.go:29:21: invalid operation: arr[i] > max (mismatched types
    int and []int)

    /tmp/tmpa_5wy880_test.go:30:19: cannot use arr[i] (variable of type int) as type
    []int in assignment

    /tmp/tmpa_5wy880_test.go:34:21: invalid operation: arr[i] < max (mismatched types
    int and []int)

    /tmp/tmpa_5wy880_test.go:35:22: cannot use max (variable of type []int) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    maximum := make([]int, k, len(arr))\n    max := -1\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        maximum[i] = max\n    }\n    return maximum\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpc8olot8d_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpc8olot8d_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=-1)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpc8olot8d_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpc8olot8d_test.go:58:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-1)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpc8olot8d_test.go:58: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpc8olot8d_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpc8olot8d_test.go:58: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpc8olot8d_test.go:58: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpc8olot8d_test.go:58:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=-1) %!s(int=10)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrLength := len(arr)\n    if arrLength <= 0 {\n        return nil\n\
    \    }\n\n    if k <= 0 || k >= arrLength {\n        return nil\n    }\n\n   \
    \ max := arr[0]\n    i := 0\n    j := 0\n    for i < arrLength && j < k {\n  \
    \      if arr[i] > max {\n            max = arr[i]\n            j = i\n      \
    \  }\n        i++\n    }\n\n    return arr[:j]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpz4sxvwey_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpz4sxvwey_test.go:70:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpz4sxvwey_test.go:70: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpz4sxvwey_test.go:70:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpz4sxvwey_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpz4sxvwey_test.go:70: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    ---\
    \ FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpz4sxvwey_test.go:70: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpz4sxvwey_test.go:70: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpz4sxvwey_test.go:70:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpz4sxvwey_test.go:70: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return nil\n    }\n    max := arr[0]\n   \
    \ for _, v := range arr[1:] {\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    return arr[0:k+1]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:4] with capacity 3 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with capacity 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpa8chyn5j_test.go:33\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpa8chyn5j_test.go:43 +0x5a\n\
    testing.tRunner(0xc0001a01a0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    ans := make([]int, 0, k)\n    for i, val := range arr {\n        if val\
    \ >= 0 {\n            ans = append(ans, val)\n        }\n    }\n    sort.Slice(ans,\
    \ func(i, j int) bool {\n        return ans[j] < ans[i]\n    })\n    return ans\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5q5y4kq_test.go:25:9: i declared but not used

    /tmp/tmpy5q5y4kq_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var ret []int\n    k += 1\n    for i, item := range arr {\n        if\
    \ item > ret {\n            ret = append(ret, item)\n        }\n        if k ==\
    \ i {\n            break\n        }\n    }\n    return ret\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7v5r2zp_test.go:27:19: invalid operation: item > ret (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073687
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(arr)\n    fmt.Println(k)\n    \n    max := 0\n    result\
    \ := make([]int, k)\n\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[-3 -4 5]\n3\n[4 -4 4]\n2\n[-3 2 1 2 -1 -2 1]\n1\n[123 -123 20 0 1 2 -3]\n\
    3\n[-123 20 0 1 2 -3]\n4\n[5 15 0 3 -13 -8 0]\n7\n[-1 0 2 5 3 -10]\n2\n[1 0 5\
    \ -7]\n1\n[4 -4]\n2\n[-10 10]\n2\n[1 2 3 -23 243 -400 0]\n0\n--- FAIL: TestMaximum\
    \ (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n        tmpev9agqk4_test.go:62:\
    \ expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpev9agqk4_test.go:62:\
    \ expected '[%!s(int=2)]', got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpev9agqk4_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpev9agqk4_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=20) %!s(int=20) %!s(int=20)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpev9agqk4_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpev9agqk4_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpev9agqk4_test.go:62: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpev9agqk4_test.go:62:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpev9agqk4_test.go:62: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := arr[0]\n    i := 0\n\n    for ;\
    \ i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n\n    for ; i < len(arr); i++ {\n        if arr[i] > max {\n         \
    \   result = append(result, max)\n            max = arr[i]\n        }\n    }\n\
    \n    result = append(result, max)\n\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpzj7129ph_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpzj7129ph_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpzj7129ph_test.go:69: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=-3) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n  \
    \      tmpzj7129ph_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpzj7129ph_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=20)]'\n\
    \    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpzj7129ph_test.go:69:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n\
    \        tmpzj7129ph_test.go:69: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpzj7129ph_test.go:69: expected '[%!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n   \
    \     tmpzj7129ph_test.go:69: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n   \
    \     tmpzj7129ph_test.go:69: expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=10)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n \
    \       tmpzj7129ph_test.go:69: expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=243)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    l := len(arr)\n    if l < 1 || k > l {\n        return nil\n    }\n \
    \   max := arr[0]\n    result := make([]int, 0, k)\n    for i := 0; i < k; i++\
    \ {\n        for j := i; j < l; j++ {\n            if arr[j] > max {\n       \
    \         max = arr[j]\n                result = append(result, max)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1xyrbc7k_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp1xyrbc7k_test.go:64:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp1xyrbc7k_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1xyrbc7k_test.go:64:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)]'\n\
    \    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp1xyrbc7k_test.go:64:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n\
    \        tmp1xyrbc7k_test.go:64: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n   \
    \     tmp1xyrbc7k_test.go:64: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1xyrbc7k_test.go:64:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    \n    max := 0\n    max := arr[0]\n    \n    for\
    \ _, n := range arr {\n        if n > max {\n            max = n\n        }\n\
    \    }\n    for i := range arr {\n        if arr[i] > max {\n            max =\
    \ arr[i]\n        }\n    }\n    for i := range arr {\n        if arr[i] > max\
    \ && arr[i] < arr[max] {\n            max = arr[i]\n        }\n    }\n    for\
    \ i := range arr {\n        if arr[i] > max {\n            result = []int{arr[i]}\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8pp93u2_test.go:27:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    \n    // 1. sort arr lexicographically \n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    sort.Sort(intSlice(arr))\n\
    \    \n    // 2. find kth max element\n    var max int\n    for i := 0; i < k;\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n            result\
    \ = append(result, max)\n        }\n    }\n    \n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppht4kk5v_test.go:30:5: undefined: sort

    /tmp/tmppht4kk5v_test.go:30:15: undefined: intSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if k > len(arr) {\n        return result\n    }\n\
    \    for i := 0; i < k; i++ {\n        max = arr[0]\n        for _, element :=\
    \ range arr {\n            if element > max {\n                max = element\n\
    \            }\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThe fastest way without sorting\n\
    <code>\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0lcbvjbo_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    i := 0\n    max := 0\n    for _, v := range\
    \ arr {\n        if v > max {\n            max = v\n        }\n        if i >=\
    \ k {\n            result[i-k] = max\n        } else {\n            result[i]\
    \ = max\n        }\n        i++\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpot1f2ekc_test.go:32\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpot1f2ekc_test.go:50 +0x5e5\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k < 0 || len(arr) == 0 {\n        return []int{}\n    }\n    max :=\
    \ arr[0]\n    max_idx := 0\n    for idx, val := range arr {\n        if val >\
    \ max {\n            max = val\n            max_idx = idx\n        }\n    }\n\
    \    arr := arr[0 : len(arr)-max_idx+k+1]\n    copy(arr, arr[k:len(arr)])\n  \
    \  return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmy0ucm8u_test.go:35:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    // Sort the arr\n    if len(arr) < k ||\
    \ k < 0 {\n        return arr\n    }\n    if len(arr) == 0 {\n        return result\n\
    \    }\n    sort.SliceStable(arr, func(i, j int) bool {\n        return arr[i]\
    \ > arr[j]\n    })\n    // Get the first k elements in arr\n    for i := 0; i\
    \ < k; i++ {\n        result[i] = arr[i]\n    }\n    // Get the last k elements\
    \ in arr\n    for i := len(arr) - k; i < len(arr); i++ {\n        result[i] =\
    \ arr[i]\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgji2kxm7_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return maximumHelper(arr, k, 0, len(arr))\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkb23eqoc_test.go:24:12: undefined: maximumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    for i := len(arr) - k; i < len(arr); i++ {\n        arr[i], arr[len(arr)-1]\
    \ = arr[len(arr)-1], arr[i]\n    }\n    return arr[:k] // return k numbers in\
    \ arr\n}\n</code>\n<|/ a |>\n<| c |>\nNice one, but I see two problems: 1. the\
    \ output is reversed and 2. it won't return an empty slice if the input list is\
    \ empty. Not sure if it matters much, but I thought I'd mention it.\n<|/ c |>\n\
    <| a dscore=1 |>\nFor my purposes, I ended up using the following code:\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"math\"\n    \"sort\"\
    \n)\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsaorvnkr_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073688
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := []int{}\n    for i := 0; i < k; i++ {\n        max <- arr[0]\n\
    \    }\n    for _, val := range arr {\n        max <- val\n    }\n    return max\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmputqn1sgn_test.go:26:9: invalid operation: cannot send to non-channel max
    (variable of type []int)

    /tmp/tmputqn1sgn_test.go:29:9: invalid operation: cannot send to non-channel max
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 || k < 1 {\n        return nil\n    }\n    if k > len(arr)\
    \ {\n        return nil\n    }\n\n    max := arr[0]\n    for _, elem := range\
    \ arr[1:] {\n        if elem > max {\n            max = elem\n        }\n    }\n\
    \    return append(arr, max)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpjxac93sz_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpjxac93sz_test.go:63: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpjxac93sz_test.go:63: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpjxac93sz_test.go:63:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=123)]'\n  \
    \  --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpjxac93sz_test.go:63:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpjxac93sz_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpjxac93sz_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10) %!s(int=5)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpjxac93sz_test.go:63: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=5) %!s(int=-7) %!s(int=5)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpjxac93sz_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpjxac93sz_test.go:63:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=-10) %!s(int=10) %!s(int=10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n    return append(maximumSlice(arr[:k],\
    \ k), arr[k:]...)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9va43oa__test.go:27:19: undefined: maximumSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    var i int = 0\n    for i < k {\n      \
    \  result[i] = arr[i]\n        i += 1\n    }\n\n    for i := k; i < len(arr);\
    \ i++ {\n        result[i] = arr[i - 1]\n    }\n\n    sort.Sort(MaxSlice(result))\n\
    \    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpks_ibi4u_test.go:35:5: undefined: sort

    /tmp/tmpks_ibi4u_test.go:35:15: undefined: MaxSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return []int{}\n    }\n    \n    var max []int\n\
    \    var pos int\n    var maxVal int\n    for i := 0; i < k; i++ {\n        maxVal,\
    \ pos = maximumElement(arr, pos)\n        max = append(max, maxVal)\n    }\n \
    \   return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiol_b7t9_test.go:32:23: undefined: maximumElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    if k > len(arr) {\n        return nil\n    }\n   \
    \ for i := 0; i < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n\
    \        }\n    }\n    return append([]int{max}, arr[k:])\n}\n</cell>\n<cell>\n\
    def maximum2(arr,k):\n    if k > len(arr):\n        return []\n    else:\n   \
    \     largest = arr[0]\n        max_index = 0\n        for i in range(k):\n  \
    \          if largest < arr[i]:\n                largest = arr[i]\n          \
    \      max_index = i\n        return arr[:max_index+1] + largest\n</cell>\n<cell>\n\
    print(maximum([]int{-3, -4, 5}, 3))\nprint(maximum([]int{4, -4, 4}, 2))\nprint(maximum([]int{-3,\
    \ 2, 1, 2, -1, -2, 1}, 1))\nprint(maximum2([]int{3, -10, 10},2))\n</cell>\n<text>\n\
    \u6700\u5927\u503C\n\n\n</text>\n<cell>\ndef max2(arr):\n    largest = arr[0]\n\
    \    max_index = 0\n    for index in range(1, len(arr)):\n        if largest <\
    \ arr[index]:\n            largest = arr[index]\n            max_index = index\n\
    \    return largest\n</cell>\n<cell>\nmax2([]int{3, -10, 10})\n</cell>\n<text>\n\
    \u6700\u5C0F\u503C\n\n\n</text>\n<cell>\ndef min2(arr):\n    smallest = arr[0]\n\
    \    smallest_index = 0\n    for index in range(1, len(arr)):\n        if smallest\
    \ > arr[index]:\n            smallest = arr[index]\n            smallest_index\
    \ = index\n    return smallest\n</cell>\n<cell>\nmin2([]int{3, -10, 10})\n</cell>\n\
    <text>\n\u622A\u53D6\u5B57\u7B26\u4E32\n\n\n</text>\n<cell>\ndef max_substring(string,\
    \ start, end):\n    if len(string) <= 1:\n        return string\n    else:\n \
    \       if start > end:\n            return max_substring(string[1:], start, len(string))\n\
    \        else:\n            return max_substring(string[1:], start, end)\n</cell>\n\
    <cell>\nmax_substring(\"abc\", 0, 3)\n</cell>\n<cell>\nmax_substring(\"abc\",\
    \ 0, 2)\n</cell>\n<cell>\nmax_substring(\"abc\", 0, 1)\n</cell>\n<cell>\nmax_substring(\"\
    abc\", 0, 0)\n</cell>\n<text>\n\u53CC\u6307\u9488\n\n\n</text>\n<cell>\ndef max_sub_string(string,\
    \ start, end):\n    if start >= end:\n        return string\n    else:\n     \
    \   left_index\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4kkxehr6_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return []int{}\n    }\n    max := arr[0]\n\
    \    for _, v := range arr[1:] {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    return arr[:k+1]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:4] with capacity 3 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with capacity 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp8czog5hj_test.go:33\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp8czog5hj_test.go:43 +0x5a\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[:k]\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > max[0] {\n            max[0] = arr[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmplne9iyky_test.go:26\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmplne9iyky_test.go:50 +0x306\n\
    testing.tRunner(0xc0001036c0, 0x527f38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    sort.Ints(arr)\n    max := arr[:k]\n    if k == 0 {\n        return arr\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i-1] > arr[i] {\n\
    \            max = append(max, arr[i])\n        } else {\n            sort.Ints(max)\n\
    \            max = max[:i]\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2n1pqmi_test.go:24:5: undefined: sort

    /tmp/tmpe2n1pqmi_test.go:33:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    var maxNum int = 0\n    maxNum = len(arr)\n\
    \n    for i := 0; i < k; i++ {\n        max = arr[0]\n        for j := 1; j <\
    \ len(arr); j++ {\n            if arr[j] > max {\n                max = arr[j]\n\
    \            }\n        }\n        arr = append(arr, max)\n    }\n\n    return\
    \ arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp441aguz9_test.go:25:9: maxNum declared but not used

    /tmp/tmp441aguz9_test.go:29:9: undefined: max

    /tmp/tmp441aguz9_test.go:31:25: undefined: max

    /tmp/tmp441aguz9_test.go:32:17: undefined: max

    /tmp/tmp441aguz9_test.go:35:27: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n    max := arr[0]\n  \
    \  result := make([]int, k)\n    for i := range result {\n        result[i] =\
    \ max\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n        if max > result[len(result)-1] {\n\
    \            result[len(result)-1] = max\n        }\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512640, 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp78l6ot94_test.go:36\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp78l6ot94_test.go:60 +0x4ca\n\
    testing.tRunner(0xc0001a0340, 0x527f38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // O(n)\n    var result []int\n    if len(arr) <= k {\n        result\
    \ = append(result, arr...)\n        return arr\n    }\n    sort.Sort(IntSlice(arr))\n\
    \    result := arr[k:]\n    for i := range arr {\n        if arr[i] > result[len(result)-1]\
    \ {\n            result = append(result, arr[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5fefrx1y_test.go:30:5: undefined: sort

    /tmp/tmp5fefrx1y_test.go:30:15: undefined: IntSlice

    /tmp/tmp5fefrx1y_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n\n    // Sort the array\n\
    \    sort.Slice(arr, func(i, j int) bool {\n        return arr[i] > arr[j]\n \
    \   })\n\n    // Find max number in the k first elements\n    maxIndex := k\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > arr[maxIndex] {\n  \
    \          maxIndex = i\n        }\n    }\n\n    // Append max number at the end\n\
    \    arr = append(arr, arr[maxIndex])\n\n    return arr\n}\n</code>\n<|/ a |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nI guess it needs more explanation to understand better\
    \ and why your code is more efficient and more efficient than other. Anyway it's\
    \ a great code thanks!\n<|/ c |>\n<| a tags=sorting,algorithm,go |>\nTry this\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4r28ds1c_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    var m int\n    var j int\n    var x int\n    var\
    \ max int\n    // sort the arr\n    for j := 0; j < k; j++ {\n        max = -1\n\
    \        x = 0\n        for i := 0; i < k; i++ {\n            if arr[i] > max\
    \ {\n                max = arr[i]\n                x = i\n            }\n    \
    \    }\n        result = append(result, max)\n    }\n    // rearrange the arr\n\
    \    for j = 0 ; j < k-1 ; j++ {\n        x = -1\n        for i := 0; i < k; i++\
    \ {\n            if arr[i] > arr[x] {\n                x =  i\n            }\n\
    \        }\n        result = append(result, arr[x])\n        arr[result[k]] =\
    \ arr[x]\n    }\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4clzp8e_test.go:25:9: m declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i < k; i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n \
    \   for _, val := range arr {\n        if val > max {\n            max = val\n\
    \        }\n    }\n    for _, val := range arr {\n        if val == max {\n  \
    \          result[i] = val\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_7g898o_test.go:38:20: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    result := make([]int, k)\n    j := len(arr)\
    \ - 1\n    for i := k - 1; i > 0; i-- {\n        max := arr[j]\n        if max\
    \ < arr[i] {\n            max = arr[i]\n        }\n        result[i] = max\n \
    \       j--\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpzfuuy907_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpzfuuy907_test.go:61: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpzfuuy907_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpzfuuy907_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpzfuuy907_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=20) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpzfuuy907_test.go:61: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpzfuuy907_test.go:61: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpzfuuy907_test.go:61: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpzfuuy907_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpzfuuy907_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, k)\n    k := k - 1\n\n    for i := 0; i < k; i++ {\n\
    \        m[i] = arr[i]\n    }\n\n    for i := k; i < len(arr); i++ {\n       \
    \ m[i] = m[i-1]\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > m[k] {\n            m[k] = arr[i]\n            k--\n        }\n    }\n\n \
    \   return m[0:k]\n}\n</code>\n<|/ a tags=sorting,algorithm,c++,arrays |>\n<|\
    \ c |>\nYour example code does not return the expected output. Try it with k=1.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,c++,arrays |>\nYou can do it with a single\
    \ pass, in O(n) time. I assume you mean k smallest and not k largest.\n<code>\n\
    int* kSmallest(int* arr, size_t count, int k) {\n    int* sorted = new int[k];\n\
    \    size_t pos = 0;\n    for (int i = 0; i < count; ++i) {\n        if (pos <\
    \ k) {\n            sorted[pos] = arr[i];\n            pos++;\n        }\n   \
    \     if (pos == k) {\n            pos = 0;\n            int minPos = i;\n   \
    \         for (size_t j = i; j < count; ++j) {\n                if (sorted[minPos]>arr[j])\
    \ {\n                    minPos = j;\n                }\n            }\n     \
    \       sorted[minPos] = arr[i];\n        }\n    }\n    return sorted;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis solution does not return a sorted array, it returns\
    \ a pointer to a sorted array.\n<|/ c |>\n<| c |>\nThe original question states\
    \ \"a sorted list\".\n<|/ c |>\n<| a dscore=2 |>\nThe approach I use is quite\
    \ similar to your approach, but instead of sorting I iterate through the list\
    \ until I find the smallest element and the insert it at the appropriate position.\
    \ \n<code>\nint* kSmallest(int* arr, size_t count, int k) {\n    int* sorted =\
    \ new int[k];\n    size_t pos = 0;\n    for (int i = 0; i < count; ++i) {\n  \
    \      while (pos < k) {\n            if (sorted[pos]<arr[i])\n              \
    \  break;\n            pos++;\n        }\n        sorted[pos]=arr[i];\n      \
    \  pos++;\n    }\n    return sorted;\n}\n</code>\n<|/ a tags=sorting,algorithm,c++,arrays\
    \ |>\n<| c |>\nThe function `kSmallest` does not return a sorted array, it returns\
    \ a pointer to a sorted array.\n<|/ c |>\n<| c |>\nNot in my \nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiq55tktn_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here.\n    return arr[:k]\n}\n</code>\nMy Results:\n\
    <code>\npackage maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ioat5o9_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    result := make([]int,\
    \ k)\n    for i, v := range arr {\n        result[i] = v\n    }\n    max := 0\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > arr[max] {\n       \
    \     max = i\n        }\n    }\n    if max >= len(arr) {\n        return nil\n\
    \    }\n    for i := k; i < max; i++ {\n        result[i] = arr[max]\n    }\n\
    \    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5bf0, 0x3, 0x0?}, 0x2)\n\
    \t/tmp/tmpvh42tfd8_test.go:29 +0x125\ncommand-line-arguments_test.TestMaximum(0xc0001a01a0?)\n\
    \t/tmp/tmpvh42tfd8_test.go:54 +0xfd\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    for _, num := range arr {\n        if len(result)\
    \ == 0 {\n            result = append(result, num)\n            continue\n   \
    \     }\n        if num > result[len(result)-1] {\n            result = append(result,\
    \ num)\n        }\n    }\n    if len(result) > k {\n        result = append(result,\
    \ result[k-1])\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5157c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5157c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp3no40twr_test.go:35\n\
    command-line-arguments_test.TestMaximum(0xc0001a0340?)\n\t/tmp/tmp3no40twr_test.go:57\
    \ +0x25f1\ntesting.tRunner(0xc0001a0340, 0x52b0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return []int{arr[0], arr[len(arr)-1]}\n \
    \   }\n    max := arr[0]\n    max := maximumSubArrayWithK(arr[1:], max)\n    for\
    \ i := 1; i < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n\
    \        }\n    }\n    return []int{max}\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wvtmwlt_test.go:28:9: no new variables on left side of :=

    /tmp/tmp8wvtmwlt_test.go:28:12: undefined: maximumSubArrayWithK

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    maximumIndex_ := 0\n    maxNumberIndex_ := 0\n    n := len(arr)\n   \
    \ maximumArr := []int{}\n    for _, arrItem := range arr {\n        if maxNumberIndex_\
    \ < k {\n            maximumArr = append(maximumArr, arrItem)\n            maxNumberIndex_\
    \ = maxNumberIndex_ + 1\n        } else {\n            maximumArr[maximumIndex_]\
    \ = max(arrItem, maximumArr[maximumIndex_])\n            maxNumberIndex_ = maxNumberIndex_\
    \ - 1\n        }\n    }\n    return maximumArr\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpxe_px5_test.go:26:5: n declared but not used

    /tmp/tmpjpxe_px5_test.go:33:41: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n\n    max := arr[0]\n\
    \    max := arr[0]\n    for _, x := range arr[1:] {\n        if x > max {\n  \
    \          max = x\n        }\n    }\n    return append(arr[0:k], max)\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4c2g_sw_test.go:29:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1gynz89n_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp1gynz89n_test.go:51: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp1gynz89n_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1gynz89n_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1gynz89n_test.go:51:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp1gynz89n_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp1gynz89n_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp1gynz89n_test.go:51: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1gynz89n_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    ret := make([]int, k)\n    if len(arr) == 0 {\n  \
    \      return ret\n    }\n    max := arr[0]\n    for _, value := range arr {\n\
    \        if value > max {\n            max = value\n        }\n    }\n    for\
    \ i := 0; i < k; i++ {\n        ret[i] = max\n    }\n    for _, value := range\
    \ arr {\n        if value > max {\n            max = value\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdo0v95ym_test.go:29:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    maxList := make([]int, k)\n    for _, n\
    \ := range arr {\n        if n > maxList[len(maxList)-1] {\n            maxList[len(maxList)-1]\
    \ = n\n        }\n    }\n    return maxList\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpzrbwkqdg_test.go:27\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpzrbwkqdg_test.go:51 +0x505\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    result := make([]int, 0, k)\n    result := append(result,\
    \ arr...)\n    sort.Ints(result)\n    return result\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=arrays,python,sorting,algorithm |>\nYou could try a combination of quicksort\
    \ and mergesort for the sorting process.\nQuicksort sorts the array by partitioning\
    \ the array into two \"partitions\", left and right. It takes the partition with\
    \ the higher numbers and swaps it with the highest element of the partition in\
    \ the left partition and then the element in the right partition is put in the\
    \ right partition. The left partition is then recursively called on the left partition\
    \ until it is empty. The right partition is then recursively called on the right\
    \ partition until it is empty. \nMergesort sorts by merging the two sorted partitions.\
    \ If the two partitions are equal, then the arrays are sorted.\nThe quick sort\
    \ algorithm has the following steps:\n<code>\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkw7_xixe_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    max := arr[0]\n    if k <= 0 {\n        return []int{}\n\
    \    }\n    for _, v := range arr {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    result := []int{}\n    for len(result) < k {\n        index\
    \ := sort.Search(len(arr), func(i int) bool {\n            return arr[i] >= max\n\
    \        })\n        result = append(result, arr[index])\n        max = arr[index]\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm34oh41t_test.go:25:9: no new variables on left side of :=

    /tmp/tmpm34oh41t_test.go:36:18: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Your code here\n    max := make([]int, k)\n    index := k - 1\n  \
    \  for _, v := range arr {\n        for j := k - 1; j > 0; j-- {\n           \
    \ if v > arr[j] {\n                max[index] = v\n                index--\n \
    \               break\n            }\n        }\n    }\n    return max\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't run in O(n).\n<|/ c |>\n<| c |>\nI think\
    \ you're right that it doesn't run in O(n), but if you look closely on the code,\
    \ it's actually O(k), with k = k-1, hence the time complexity is O(k).\n<|/ c\
    \ |>\n<| c |>\nYes, O(k) is true, but you claim it's O(n).\n<|/ c |>\n<| c |>\n\
    I'm sorry, I didn't mean to say that it's O(n). What I meant was that it's O(k),\
    \ with k = k-1, hence the time complexity is O(k).\n<|/ c |>\n<| c |>\nSorry for\
    \ misunderstanding. I will update the answer soon. Thanks for the reminder.\n\
    <|/ c |>\n<| a |>\n<code>\nimport \"fmt\"\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw2w_uk02_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k >= len(arr) {\n        return arr\n    }\n    max := arr[0]\n  \
    \  maxIndex := 0\n    for i := 1; i < k; i++ {\n        if arr[i] > max {\n  \
    \          max = arr[i]\n            maxIndex = i\n        }\n    }\n    result\
    \ := make([]int, maxIndex+1)\n    for i := 0; i < maxIndex; i++ {\n        result[i]\
    \ = arr[maxIndex]\n        arr[maxIndex] = arr[i]\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpiew7_cmv_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpiew7_cmv_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpiew7_cmv_test.go:66:\
    \ expected '[%!s(int=2)]', got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpiew7_cmv_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpiew7_cmv_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpiew7_cmv_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpiew7_cmv_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpiew7_cmv_test.go:66:\
    \ expected '[%!s(int=5)]', got '[%!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmpiew7_cmv_test.go:66: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n\
    \        tmpiew7_cmv_test.go:66: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return sortNums(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc1zzr_ui_test.go:24:12: undefined: sortNums

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k, len(arr))\n    result.sort()\n    for i, j :=\
    \ 0, len(result) - 1; i < j; i, j = i+1, j-1 {\n        if result[i] > result[j]\
    \ {\n            result[i], result[j] = result[j], result[i]\n        }\n    }\n\
    \    return result\n}\n</code>\n<|/ a |>\n<| c |>\nThis is an O(n^2) algorithm\
    \ which is undesirable.\n<|/ c |>\n<| a tags=algorithm |>\nIf you know that you're\
    \ going to be dealing with lists of length k, then the simplest approach would\
    \ be to keep track of the max k numbers as you loop through the list.  The simplest\
    \ way would be to keep a max array and a counter that tracks how many elements\
    \ you have seen so far.  You can keep track of them both simultaneously by keeping\
    \ 2 variables - a running max and current max.\nFor example:\n<code>\nmax = []\n\
    maxCount = 0\n\nfor element in list:\n  if element > max[maxCount]:\n    max[maxCount]\
    \ = element\n    maxCount++\n\nprint max\n</code>\nThe above code will update\
    \ max and maxCount simultaneously, so if you need you can also return the max\
    \ array (assuming you have already sorted it), but if you don't need the max array\
    \ and just want to know how many elements you have seen so far, you might as well\
    \ just keep track of the counter variable itself.\n<|/ a dscore=0 |>\n<| c |>\n\
    This is an O(n^2) algorithm which is undesirable.\n<|/ c |>\n<| c |>\nI agree,\
    \ which is why I stated \"If you know that you're going to be dealing with lists\
    \ of length k\".  The OP didn't say what the range of values is, so I thought\
    \ I should provide a general solution.  I edited my answer to reflect that fact.\n\
    <|/ c |>\n<| a dscore=0 tags=algorithm |>\nI solved it by using Python and using\
    \ two nested for loops. First loop finds the largest array in every element of\
    \ the list and then the second loop checks if the array is equal to k or less\
    \ (if k is 1 then array is equal to 1 element array) and the third loop prints\
    \ it. It is quite simple and straight forward but it can be optimised by using\
    \ multiple variables or maybe sorting first and then printing. \n<code>\ndef maximum(l,\
    \ n):\n    if n == 0:\n        print(l[0])\n    else:\n        for i in range(len(l)):\n\
    \            maximum(l[:i], n - 1)\n            if l[i] == n or l == []:\n   \
    \             maximum(l[(i + 1):], n - 1)\n\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n</code>\n<|/ a |>\n<| a dscore=0 \nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1os9h5rt_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    arr2 := make([]int, k)\n\n    for _, v := range arr\
    \ {\n        if v > max {\n            max = v\n        }\n        arr2[k] = v\n\
    \        k++\n    }\n\n    return arr2\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmph2epap1b_test.go:31\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmph2epap1b_test.go:45 +0x5f3\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        max :=\
    \ arr[0]\n        for _, v := range arr {\n            if v > max {\n        \
    \        max = v\n            }\n        }\n        result[i] = max\n    }\n \
    \   return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp456fvxny_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp456fvxny_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp456fvxny_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp456fvxny_test.go:60: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp456fvxny_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp456fvxny_test.go:60: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp456fvxny_test.go:60: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // init maxLen and max\n    maxLen := len(arr)\n    max := arr[0]\n \
    \   // sort arr\n    for i := 1; i < maxLen; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n    }\n    maxLen--\n    // init maxResult\n\
    \    maxResult := make([]int, k)\n    // copy max to maxResult\n    maxResult[0]\
    \ = max\n    // calculate result\n    for i := 1; i < k; i++ {\n        maxResult[i]\
    \ = arr[0]\n        arr[0] = arr[i]\n        // update max\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n    }\n    // set maxResult to\
    \ arr\n    maxResult = arr[:maxLen]\n    return maxResult\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0001ce060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0001ce060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000194180, 0x7, 0x7}, 0x0)\n\
    \t/tmp/tmplynb9in2_test.go:37 +0xf3\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmplynb9in2_test.go:69 +0x48f\ntesting.tRunner(0xc00019aea0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    n := len(arr)\n    if n < 1 || k < 1 {\n\
    \        return []int{}\n    }\n    if k >= n {\n        return arr\n    }\n \
    \   if k == 0 {\n        return arr\n    }\n    maxNum := arr[0]\n    max := 1\n\
    \    for i := 1; i < n; i++ {\n        if arr[i] > maxNum {\n            max =\
    \ i\n            maxNum = arr[i]\n        }\n    }\n    return append(arr[:max],\
    \ maximum(arr[max:], k-1)...)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp52ya0ahk_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp52ya0ahk_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp52ya0ahk_test.go:69: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp52ya0ahk_test.go:69:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp52ya0ahk_test.go:69:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp52ya0ahk_test.go:69: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp52ya0ahk_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0) %!s(int=2)\
    \ %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp52ya0ahk_test.go:69:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp52ya0ahk_test.go:69: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n    pivot := arr[len(arr)-1]\n\
    \    max := []int{}\n    for _, item := range arr[:len(arr)-k] {\n        if item\
    \ > pivot {\n            max = append(max, item)\n        }\n    }\n    return\
    \ append(arr, max)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvj0fqqc6_test.go:34:24: cannot use max (variable of type []int) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    max := arr[0]\n    i := 0\n    for _, n := range\
    \ arr {\n        if n >= max {\n            result = append(result, max)\n   \
    \         max = n\n        } else {\n            max = n\n        }\n        i++\n\
    \    }\n    result = append(result, max)\n    if k < len(result) || k > len(arr)\
    \ {\n        return []int{}\n    }\n    return result[k:k+len(result)]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:6] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:6] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5147c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5147c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp913101io_test.go:40\n\
    command-line-arguments_test.TestMaximum(0xc0001a0340?)\n\t/tmp/tmp913101io_test.go:50\
    \ +0x22c5\ntesting.tRunner(0xc0001a0340, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    max1 := arr[:k]\n \
    \   max2 := arr[k:]\n\n    j := 0\n    m := 0\n    for i := 0; i < k; i++ {\n\
    \        if max1[i] > max2[j] {\n            max1[i], max2[j] = max2[j], max1[i]\n\
    \            m += 1\n        }\n        j += 1\n    }\n\n    if m == k {\n   \
    \     return max1\n    } else {\n        return append(max1[:m], max2[k:]...)\n\
    \    }\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0001d6000?, 0x450b3e?, 0x5d4290?},\
    \ 0x5e3ea0?)\n\t/tmp/tmpeonwu7bb_test.go:33 +0x170\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpeonwu7bb_test.go:54 +0x72\ntesting.tRunner(0xc000199040, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    max_index := 0\n    max_index := 0\n\n    for _, element\
    \ := range arr[1:] {\n        if element > max {\n            max = element\n\
    \            max_index = k - 1\n        }\n        if element == max {\n     \
    \       max_index += 1\n        }\n    }\n\n    return arr[0:max_index+1]\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp757mcv7q_test.go:26:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    arrCopy := make([]int, len(arr))\n    k\
    \ := 0\n    for i, _ := range arrCopy {\n        arrCopy[i] = arr[i]\n       \
    \ if i > k {\n            arrCopy[i] = arrCopy[i - 1]\n        }\n    }\n    sort.SliceStable(arrCopy,\
    \ func(i, j int) bool {\n        return arrCopy[i] > arrCopy[j]\n    })\n    return\
    \ arrCopy[:k]\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis is an old question\
    \ but for anyone looking to improve on top of this, here's my answer which I think\
    \ will be faster than sorting:\n<code>\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxjz9bbf1_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // sort from right to left\n    sort.Sort(arrSlice(arr)); \n    // k\
    \ can be more than len(arr)\n    if k >= len(arr) {\n        return arr[:k] \n\
    \    }\n    result := make([]int, k)\n    i := 0\n    for j := len(arr); j < k;\
    \ j++ {\n        if arr[i] > arr[j] {\n            result[j] = arr[j]\n      \
    \      i++\n        } else {\n            result[j] = arr[i]\n        }\n    }\n\
    \    return result \n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkqhgthi_test.go:25:5: undefined: sort

    /tmp/tmplkqhgthi_test.go:25:15: undefined: arrSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return nil\n    }\n    var result []int\n\
    \    max := arr[0]\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n            result = make([]int, 0, i+1)\n        }\n\
    \        result = append(result, max)\n    }\n    return append(result, max)\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpsruk6lon_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n\
    \        tmpsruk6lon_test.go:62: expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n   \
    \     tmpsruk6lon_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=-3) %!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpsruk6lon_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n\
    \        tmpsruk6lon_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]',\
    \ got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpsruk6lon_test.go:62: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpsruk6lon_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpsruk6lon_test.go:62: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpsruk6lon_test.go:62: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n   \
    \     tmpsruk6lon_test.go:62: expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)\
    \ %!s(int=10)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmpsruk6lon_test.go:62:\
    \ expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    for i := 0; i < k; i++ {\n        max := arr[0]\n        index := 1\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n                index = i\n            }\n        }\n        arr = append(arr[:index],\
    \ arr[index+1:]...)\n    }\n    return arr\n}\n</code>\n<|/ a tags=go,sorting,arrays,list\
    \ dscore=0 |>\n<| c |>\nI'm not the one who voted down, but I think that this\
    \ can be solved much faster with a single pass of the array.\n<|/ c |>\n<| c |>\n\
    This is an algorithmic solution but it doesn't scale well for large arrays and\
    \ large number of elements. My answer is scalable up to a number of elements up\
    \ to a million.\n<|/ c |>\n<| a dscore=0 tags=go,sorting,arrays,list |>\nThis\
    \ can be done in a single pass of the array without copying it to an auxiliary\
    \ array.\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprydhba_l_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073692
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    // return\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_ufpqpu_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    \n    return arr\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpcierj1ib_test.go:52: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpcierj1ib_test.go:52: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpcierj1ib_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpcierj1ib_test.go:52: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpcierj1ib_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpcierj1ib_test.go:52:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpcierj1ib_test.go:52: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpcierj1ib_test.go:52: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpcierj1ib_test.go:52: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmpcierj1ib_test.go:52:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return []int{}\n    }\n    max := arr[0]\n\
    \    for _, i := range arr[1:] {\n        if i > max {\n            max = i\n\
    \        }\n    }\n    return arr[0:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp91thigj2_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp91thigj2_test.go:59:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__2 (0.00s)\n        tmp91thigj2_test.go:59: expected\
    \ '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp91thigj2_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp91thigj2_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp91thigj2_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp91thigj2_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp91thigj2_test.go:59: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp91thigj2_test.go:59: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp91thigj2_test.go:59:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    for _, v := range arr {\n        result = append(result,\
    \ v)\n    }\n    for i := range result {\n        result[i] = result[i]\n    }\n\
    \    if len(result) > k {\n        result = result[:k]\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm4v2sic_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    for _, x := range arr[1:] {\n        if x > max {\n\
    \            max = x\n        }\n    }\n    return arr[0:k+2]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:5] with capacity 3 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:5] with capacity 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp4vmd6pl9_test.go:30\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp4vmd6pl9_test.go:40 +0x5a\n\
    testing.tRunner(0xc0001a0340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return maximumHelper(arr, k, 0)\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvg87adlx_test.go:24:12: undefined: maximumHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n < 1 {\n        return []int{}\n    }\n\n    result\
    \ := make([]int, k, n)\n    max := arr[0]\n    for _, e := range arr {\n     \
    \   if e > max {\n            max = e\n        }\n    }\n    if k > n {\n    \
    \    return arr\n    }\n    for i := k; i < n; i++ {\n        result[i] = max\n\
    \    }\n    for i := n - 1; i >= k; i-- {\n        result[i] = arr[i]\n    }\n\
    \    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000014390?, 0x3, 0x3}, 0x2)\n\
    \t/tmp/tmpqq5_0rsr_test.go:40 +0x89\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpqq5_0rsr_test.go:56 +0xcd\ntesting.tRunner(0xc0001a01a0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[:k]\n    for i := 0; i < k; i++ {\n        if arr[i] > max[1]\
    \ {\n            max = append(max, arr[i])\n        }\n    }\n    return max\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpq8taevwk_test.go:26\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpq8taevwk_test.go:42 +0x10ac\n\
    testing.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return []int{}\n    }\n\n    max := arr[0]\n\
    \    result := make([]int, 0, k)\n\n    for _, value := range arr[1:] {\n    \
    \    if value > max {\n            max = value\n            result = append(result,\
    \ max)\n        }\n    }\n\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvf7ycxig_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpvf7ycxig_test.go:64:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpvf7ycxig_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpvf7ycxig_test.go:64:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)]'\n\
    \    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvf7ycxig_test.go:64:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n\
    \        tmpvf7ycxig_test.go:64: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n   \
    \     tmpvf7ycxig_test.go:64: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpvf7ycxig_test.go:64:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\n    --- FAIL: TestMaximum/test_num__10\
    \ (0.00s)\n        tmpvf7ycxig_test.go:64: expected '[]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=243)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := []int{}\n    for i := 0; i < k; i++ {\n        max = append(max,\
    \ arr[len(max)-1])\n        arr = arr[:len(max)-1]\n    }\n    for _, v := range\
    \ arr {\n        if v > max[0] {\n            max = []int{}\n        }\n     \
    \   max = append(max, v)\n    }\n    return max\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nYou can use this logic:\n<code>\ndef maxSubArray(arr, n):\n    if(n <= 1):\n\
    \        return [0]\n    ans = [0]\n    l = len(arr)\n    for i in range(0, l):\n\
    \        if(l - i >= n):\n            ans.append(arr[max(0,i-n-1):l])\n      \
    \  else:\n            ans.append(maxSubArray(arr, n-len(arr[i+1:l])) + arr[i+1])\n\
    \    return ans\n\nif __name__ == \"__main__\":\n    print(maxSubArray([-3, 2,\
    \ 1, 2, -1, -2, 1], 1))\n</code>\n<|/ a tags=sorting,algorithm,python |>\n<| a\
    \ dscore=0 tags=sorting,algorithm,python |>\n<code>\ndef MaxSlice(arr, start,\
    \ end):\n    arr = sorted(arr)\n    return arr[start:end]\n\ndef MaxSlice2(arr,\
    \ start, end):\n    arr = sorted(arr)\n    return arr[max(start, 0):end]\n\ndef\
    \ MaxSlice3(arr, start, end):\n    arr = sorted(arr)\n    return arr[:min(end,\
    \ len(arr))]\n\ndef MaxSlice4(arr, start, end):\n    arr = sorted(arr)\n    return\
    \ arr[:max(start, 0)]\n\ndef MaxSlice5(arr, start, end):\n    arr = sorted(arr)\n\
    \    return arr[:min(max(start, 0), len(arr))]\n\ndef MaxSlice6(arr, start, end):\n\
    \    arr = sorted(arr)\n    return arr[:max(max(start, 0), len(arr))]\n\ndef MaxSlice7(arr,\
    \ start, end):\n    arr = sorted(arr)\n    return arr[:max(min(end, len(arr)),\
    \ 0)]\n\ndef MaxSlice8(arr, start, end):\n    arr = sorted(arr)\n    return arr[:min(max(min(end,\
    \ len(arr)), 0), len(arr))]\n\ndef MaxSlice9(arr, start, end):\n    arr = sorted(arr)\n\
    \    return arr[:min(max(min(end, len(arr)), 0), len(arr))]\n\ndef MaxSlice10(arr,\
    \ start, end):\n    arr = sorted(arr)\n    return arr[:min(max(min(max(start,\
    \ 0), len(arr)), 0), len(arr))]\n\ndef MaxSlice11(arr, start, end):\n    arr =\
    \ sorted(arr)\n    return arr[:min(max(min(max(min(end, len(arr)), 0), len(arr)),\
    \ 0), len(arr))]\n\ndef MaxSlice12(arr, start, end):\n    arr = sorted(arr)\n\
    \    return arr[:min(max(min(\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd3nc8ajb_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) < k {\n        return arr\n    }\n    max := arr[0]\n   \
    \ res := make([]int, k)\n    for i := 0; i < k; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n        res[i] = max\n    }\n    return\
    \ res\n}\n</code>\n<|/ a tags=python,mergesort,sorting,algorithm |>\n<| c |>\n\
    `maximum`'s implementation is not `O(log n)`. When `arr` is sorted, the first\
    \ and last elements are equal, resulting in `k+1` comparisons for `maximum`.\n\
    <|/ c |>\n<| c |>\nI made it O(k log n), by adding another \"if\" in the loop\
    \ to check that (i+1 == k), and to return res if k is reached without finding\
    \ any solution.\n<|/ c |>\n<| c |>\nNo, you are missing the point, that maximum\
    \ needs to be implemented as a bottom-up merge sort or some other recursive algorithm.\
    \ Your implementation is not `O(k log n)`.\n<|/ c |>\n<| c |>\nI'm very curious,\
    \ what do you mean by \"bottom-up merge sort\"? I'm familiar with Quicksort and\
    \ Mergesort, but I haven't seen such implementation before. Maybe my lack of understanding\
    \ about the concept of merge sort makes this solution not \"bottom-up\"?\n<|/\
    \ c |>\n<| c |>\nSorry, I made a mistake while reading your code. As it turns\
    \ out, I implemented quicksort on my own when I thought of the problem and you\
    \ just forgot that it's called `maximum`. You remember `maximum` but not `quicksort`,\
    \ right?\n<|/ c |>\n<| a dscore=1 |>\nIt's better to use slice instead of copying\
    \ array (so you don't need to care about array size).\nIt also makes code simpler\
    \ (you don't need additional condition to check  i+1 == k).\n<code>\ndef maximum(arr,\
    \ n):\n    k = len(arr) - n + 1\n    maximums = arr[:k] if k > 0 else []\n   \
    \ maximums.extend(arr[k:])\n    return maximums\n</code>\n<|/ a tags=python,mergesort,sorting,algorithm\
    \ |>\n<| c |>\nHow is `maximum(arr, n)` better than `arr[:k]`? Does that perform\
    \ any better than's answer?\n<|/ c |>\n<| c |>\n- it uses O(1) memory instead\
    \ of O(n) memory for slice. I think that slice is much better than copying array.\
    \ I don't \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvugnxbpc_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    if len(arr) == 0 {\n        return result\n\
    \    }\n\n    max := arr[0]\n    index := 0\n\n    for _, num := range arr {\n\
    \        if num > max {\n            max = num\n            index = k\n      \
    \  }\n    }\n\n    result[index] = max\n    return result\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,go\
    \ |>\n<| a |>\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptgxhl4gi_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    if k < len(arr) {\n     \
    \   return arr[:k+1]\n    }\n    return arr\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0cszhifs_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp0cszhifs_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0cszhifs_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0cszhifs_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n  \
    \      tmp0cszhifs_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]',\
    \ got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0cszhifs_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0cszhifs_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0) %!s(int=2)]'\n\
    \    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp0cszhifs_test.go:59:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp0cszhifs_test.go:59: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n\
    \        tmp0cszhifs_test.go:59: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(arr)\n    fmt.Println(k)\n    \n    // Create a copy to ensure\
    \ we don't modify the original array\n    var max_arr []int\n    \n    // Store\
    \ the max number \n    max_arr = append(max_arr, arr[0])\n    \n    // Iterate\
    \ through all remaining numbers\n    for i := 1; i < len(arr); i++ {\n       \
    \ // If current number is greater than previous max number, store current as new\
    \ max\n        if arr[i] > max_arr[k-1] {\n            max_arr = append(max_arr,\
    \ arr[i])\n        }\n    }\n    \n    return max_arr\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[-3 -4 5]\n3\n--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index\
    \ out of range [2] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [2] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000014360?, 0x3, 0x5d4330?},\
    \ 0x3)\n\t/tmp/tmpxfzmp5d7_test.go:36 +0x1dc\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpxfzmp5d7_test.go:51 +0x72\ntesting.tRunner(0xc0001964e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr := make([]int, k, len(arr))\n    max := arr[0]\n    i := 0\n    for\
    \ _, j := range arr {\n        if j > max {\n            max = j\n        }\n\
    \    }\n    for i < len(arr) && i < k {\n        if arr[i] > max {\n         \
    \   max = arr[i]\n        }\n        i++\n    }\n    return arr[:i]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3dry2er5_test.go:24:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 1 {\n        return arr\n    }\n\n    largestCount := 0\n   \
    \ var largestVal int\n\n    for i := range arr {\n        if i > largestVal {\n\
    \            largestVal = i\n            largestCount = 1\n        } else {\n\
    \            largestCount++\n            if largestCount > k {\n             \
    \   break\n            }\n        }\n    }\n\n    if largestCount > k {\n    \
    \    largestCount = k\n    }\n\n    var result []int\n    for i := 0; i < largestCount;\
    \ i++ {\n        result = append(result, largestVal)\n    }\n    for i := 0; i\
    \ < k; i++ {\n        result = append(result, arr[i])\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpa81ydzp7_test.go:80: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpa81ydzp7_test.go:80: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpa81ydzp7_test.go:80: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpa81ydzp7_test.go:80: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=6) %!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpa81ydzp7_test.go:80:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=5)\
    \ %!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpa81ydzp7_test.go:80: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=6)\
    \ %!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpa81ydzp7_test.go:80:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=-1) %!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpa81ydzp7_test.go:80:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=5) %!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpa81ydzp7_test.go:80:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=1) %!s(int=4) %!s(int=-4)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpa81ydzp7_test.go:80:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=1) %!s(int=-10) %!s(int=10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k >= len(arr) {\n        return []int{}\n    }\n    max := arr[0]\n\
    \    idx := 1\n    for idx, val := range arr {\n        if val > max {\n     \
    \       max = val\n        }\n        if idx == k {\n            break\n     \
    \   }\n    }\n    return []int{max}\n}\n</code>\n<|/ a tags=algorithm,go,arrays\
    \ dscore=4 |>\n<| c |>\nI like this solution but a golang solution would be more\
    \ useful\n<|/ c |>\n<| c |>\nThe first solution looks good but I don't think it\
    \ is optimal. Could you elaborate on how you are getting the `idx` value? I see\
    \ that `k` is the number of elements but I don't see how you are finding the largest\
    \ element in `arr` by comparing each element with its successor and finding the\
    \ largest value in that list. Could you please explain?\n<|/ c |>\n<| a |>\nYou\
    \ can use map and append the elements one by one.\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp16_347w6_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073693
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Your code goes here\n    \n    return arr\n}\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp25x7bx0b_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp25x7bx0b_test.go:51: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp25x7bx0b_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp25x7bx0b_test.go:51: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp25x7bx0b_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp25x7bx0b_test.go:51:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp25x7bx0b_test.go:51: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp25x7bx0b_test.go:51: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp25x7bx0b_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmp25x7bx0b_test.go:51:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return []int{}\n    }\n    max := arr[0]\n\
    \    max := arr[0]\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n\
    \            max = arr[i]\n        }\n    }\n    k := 0\n    result := []int{}\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n            k++\n            arr = append(result, max)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwnhggoy_test.go:28:9: no new variables on left side of :=

    /tmp/tmpqwnhggoy_test.go:34:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var max []int\n    if len(arr) == 0 {\n        return max\n    }\n  \
    \  \n    for _, v := range arr {\n        m := v\n        for _, v2 := range arr\
    \ {\n            if v > v2 {\n                m = v2\n            }\n        }\n\
    \        if m > max[len(max)-1] {\n            max = append(max, m)\n        }\n\
    \    }\n    sort.Ints(max)\n    return max[0:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr34p3u44_test.go:40:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := make([]int, k)\n    if len(arr) < k {\n        return arr\n  \
    \  }\n    for i := 0; i < k; i++ {\n        max[i] = arr[0]\n        arr = arr[1:]\n\
    \    }\n    for _, v := range arr {\n        if v > max[0] {\n            max[0]\
    \ = v\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpypu9sem6_test.go:33\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpypu9sem6_test.go:57 +0x6e8\n\
    testing.tRunner(0xc0001a0340, 0x527f38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    r := make([]int, k)\n    max := -1000\n    i := 0\n    for len(arr) >\
    \ 0 {\n        max = arr[0]\n        for i := 0; i < k; i++ {\n            if\
    \ arr[i] > max {\n                max = arr[i]\n            }\n        }\n   \
    \     r[len(r)-1] = max\n        arr = arr[1:]\n    }\n    return r\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6h6etqti_test.go:26:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    maximums := make([]int,\
    \ k)\n    k := 0\n    var index int\n    var currentMax int\n    for index, current\
    \ := range arr {\n        if index == 0 {\n            maximums[index] = current\n\
    \        } else {\n            if current > currentMax {\n                maximums[k]\
    \ = current\n                k += 1\n            }\n            currentMax = current\n\
    \        }\n    }\n    for i < k {\n        maximums[i] = arr[len(arr) - i - 1]\n\
    \    }\n    return maximums\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,go\
    \ |>\n<| a tags=arrays,sorting,algorithm,go |>\nIn Go you can do this using go's\
    \ built-in sort and slices packages.\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"sort\"\n)\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27i77x1x_test.go:47:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[:k]\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n   \
    \ for _, v := range arr {\n        for i := 0; i < k; i++ {\n            if v\
    \ < arr[i] {\n                max[i] = v\n                break\n            }\n\
    \        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpagkakstu_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    sort.Sort(Sort(arr))\n    return arr[0:k+1]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13swbu6l_test.go:24:5: undefined: sort

    /tmp/tmp13swbu6l_test.go:24:15: undefined: Sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // code here\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    var\
    \ result []int\n    for i := 0; i < k; i++ {\n        max := arr[i]\n        var\
    \ maxIndex int\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    for i := 0; i < len(arr); i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    return result\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ dscore=2 |>\n<| c |>\nThis is much more elegant than the accepted answer.\n\
    <|/ c |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\ndef max_array(arr,k):\n\
    \    arr = sorted(arr, reverse=True)\n    size = k\n    while len(arr)>size:\n\
    \        size = len(arr)//2\n        arr.pop(size)\n        arr = sorted(arr,\
    \ reverse=True)\n    return arr[:k]\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere\
    \ is a C++ code I wrote. Hope it helps. \n<code>\n#include <bits/stdc++.h>\nusing\
    \ namespace std;\n\nvoid maxArray(int* arr, int n, int k){\n    int i;\n    int\
    \ j = 0;\n    int temp = 0;\n    for(i = 0; i < n; i++){\n        if(arr[i]>arr[k]){\n\
    \            arr[j] = arr[i];\n            j++;\n            arr[i] = temp;\n\
    \            temp = 0;\n        }\n        else{\n            if(j == k){\n  \
    \              arr[j] = arr[i];\n                j++;\n                arr[i]\
    \ = temp;\n                temp = 0;\n            }\n            else{\n     \
    \           temp = arr[i];\n            }\n        }\n    }\n    arr[j] = arr[i];\n\
    }\n\nint main()\n{\n    int n, k;\n    cin >> n >> k;\n    int *arr = new int[n];\n\
    \    for(int i = 0; i < n; i++){\n        cin >> arr[i];\n    }\n    maxArray(arr,\
    \ n, k);\n    for(int i = 0; i < k; i++){\n        cout << arr[i] << \" \";\n\
    \    }\n    return 0;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,sorting,arrays\
    \ |>\n<| a tags=algorithm,sorting,arrays |>\nA more efficient approach would be\
    \ to first sort the array and then apply a sliding window approach to find the\
    \ maximum. After finding the maximum, the window is shifted to leave the original\
    \ maximum and then \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxebdw1uq_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    var i int\n    var j int\n    var max []int\n\
    \    for i = 0 ; i <= len(arr) ; i++ {\n        j := 0\n        for j = 0 ; j\
    \ < k ; j++ {\n            if arr[i] > arr[j] {\n                max = append(max,\
    \ arr[j])\n            }\n        }\n    }\n    return max\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't return the \"largest\" k numbers, it returns the *largest*\
    \ k numbers in the array. That is not what the question asks.\n<|/ c |>\n<| c\
    \ |>\nIt seems like the question was changed after I posted this.  I did a test\
    \ using these test cases and it gave the output `[4, -4, 4]`.  I edited my answer\
    \ to include the test case I was using in case anyone is still looking for this.\n\
    <|/ c |>\n<| c |>\nYes. Thanks for the comment. I made an edit to my answer to\
    \ include my test case so future visitors can see that I was able to get the output\
    \ I was looking for.\n<|/ c |>\n<| a tags=algorithm,go |>\n<code>\npackage main\n\
    \nimport \"fmt\"\nimport \"time\"\nimport \"math/big\"\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyotxnm8b_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    largest = arr[0]\n    i := 1\n    for ;\
    \ i < k; i++ {\n        if arr[i] > largest {\n            largest = arr[i]\n\
    \        }\n    }\n    j := k\n    for ; j < len(arr); j++ {\n        if arr[j]\
    \ > largest {\n            largest = arr[j]\n        }\n    }\n    return append(arr[:i],\
    \ largest)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15rmsywo_test.go:25:5: undefined: largest

    /tmp/tmp15rmsywo_test.go:28:21: undefined: largest

    /tmp/tmp15rmsywo_test.go:29:13: undefined: largest

    /tmp/tmp15rmsywo_test.go:34:21: undefined: largest

    /tmp/tmp15rmsywo_test.go:35:13: undefined: largest

    /tmp/tmp15rmsywo_test.go:38:28: undefined: largest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, k)\n    for k := range m {\n        m[k] = arr[k]\n\
    \    }\n    return m[len(m)-k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9tpoffl_test.go:28:12: cannot use m[len(m) - k] (variable of type int)
    as type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr := make([]int, k)\n    if len(arr) == 0 {\n        return arr\n \
    \   }\n    max := arr[0]\n    for i := 0; i < k; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n\
    \        arr[i] = max\n    }\n    return arr\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nThis can be accomplished in O(n) time complexity using the following\
    \ two steps.\n\nFind the minimum element in the array\nFind the index of the minimum\
    \ element in the array\n\nOnce you have the index of the minimum element in the\
    \ array and minimum element you can create a slice of the original array.\n<code>\n\
    var arr = [-6, -2, 4, -7, -5, -9, -2, 5, -7, -4, -1, -8, -1, -2, -4, -3, -4, -8]\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpju0r7jk9_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    if len(arr) <= k {\n        return result\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = arr[0]\n    }\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] > result[i-1] {\n           \
    \ result[i-1] = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp0p4fb4_g_test.go:32\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmp0p4fb4_g_test.go:48 +0x4f2\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    for i := 0; i < len(arr); i++ {\n     \
    \   max, index := max(arr, i, result)\n        result[index] = arr[i]\n    }\n\
    \    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz2l5eh6_test.go:26:23: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    return append(arr[:k], max...)\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjow165yz_test.go:30:28: cannot use max (variable of type int) as type
    []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        j :=\
    \ len(arr) - 1\n        max := arr[j]\n        for j >= 0 && arr[j] <= max {\n\
    \            j--\n            max = arr[j]\n        }\n        result[i] = max\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpds4rq3uy_test.go:30\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpds4rq3uy_test.go:44 +0xe33\n\
    testing.tRunner(0xc0001a01a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := make([]int, k)\n    for i, j := 0, len(arr) - 1; i < j; i, j = i+1,\
    \ j-1 {\n        if arr[i] > arr[j] {\n            m[k] = arr[i]\n           \
    \ i--\n        } else {\n            m[k] = arr[j]\n            j--\n        }\n\
    \    }\n    return m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpd2w61kvf_test.go:30\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpd2w61kvf_test.go:44 +0x75\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k < 0 || len(arr) < k {\n        return nil\n    }\n    max := arr[0]\n\
    \    for _, n := range arr {\n        if n > max {\n            max = n\n    \
    \    }\n    }\n    return arr[0:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp35tx4ohb_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp35tx4ohb_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp35tx4ohb_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp35tx4ohb_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp35tx4ohb_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp35tx4ohb_test.go:59: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp35tx4ohb_test.go:59: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp35tx4ohb_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp35tx4ohb_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    sort.Ints(arr)\n    result := make([]int, k)\n    max := arr[0]\n   \
    \ k := 0\n    for _, val := range arr {\n        if val > max {\n            max\
    \ = val\n            k = k + 1\n        }\n        result[k] = val\n    }\n  \
    \  return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_2xmzsrk_test.go:24:5: undefined: sort

    /tmp/tmp_2xmzsrk_test.go:27:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    result := make([]int, k, k)\n    if len(arr) == 0 || len(arr) < k ||\
    \ k < 1 {\n        return result\n    }\n    var maxi int\n    for i := k - 1;\
    \ i > 0; i-- {\n        maxi = i\n        for j := i; j < k; j++ {\n         \
    \   if arr[j] > arr[maxi] {\n                maxi = j\n            }\n       \
    \ }\n        result[i] = arr[maxi]\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp6kntz1bx_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp6kntz1bx_test.go:64: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp6kntz1bx_test.go:64: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp6kntz1bx_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=20)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp6kntz1bx_test.go:64:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=20) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp6kntz1bx_test.go:64: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=15)\
    \ %!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp6kntz1bx_test.go:64: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp6kntz1bx_test.go:64: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp6kntz1bx_test.go:64:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp6kntz1bx_test.go:64: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if k > len(arr) {\n        fmt.Println(\"wrong\
    \ k, k > arr len\")\n        return nil\n    }\n    for i := 0; i < k; i++ {\n\
    \        maxIdx := 0\n        maxElem := 0\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > maxElem {\n                maxElem = arr[j]\n\
    \                maxIdx = j\n            }\n        }\n        result = append(result,\
    \ maxElem)\n        arr = append(arr[:maxIdx], arr[k+1:]...)\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of range [4:3]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5c08?, 0x0?, 0x0?}, 0x3)\n\
    \t/tmp/tmpc226h1i1_test.go:39 +0x2b2\ncommand-line-arguments_test.TestMaximum(0xc0001a0340?)\n\
    \t/tmp/tmpc226h1i1_test.go:51 +0x8a\ntesting.tRunner(0xc0001a0340, 0x5290f0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073695
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    max := arr[:k]\n    for _,i := range arr\
    \ {\n        if i>=max {\n            max = i\n        }\n    }\n    return arr[:k]\n\
    }\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_e8joh6_test.go:27:15: invalid operation: i >= max (mismatched types
    int and []int)

    /tmp/tmp0_e8joh6_test.go:28:19: cannot use i (variable of type int) as type []int
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
