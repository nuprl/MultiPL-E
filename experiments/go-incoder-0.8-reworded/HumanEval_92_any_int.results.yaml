language: go_test.go
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x==y {\n        if y==z {\n            return true\n        }\n       \
    \ return false\n    }\n    if y==z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpl_d1rod0_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpl_d1rod0_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpl_d1rod0_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpl_d1rod0_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z {\n        if x == z {\n            return true\n    \
    \    } else {\n            return false\n        }\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp3dqicwzo_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp3dqicwzo_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp3dqicwzo_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp3dqicwzo_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp3dqicwzo_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp3dqicwzo_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z || z == x {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwsw6cz8o_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwsw6cz8o_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpwsw6cz8o_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpwsw6cz8o_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwsw6cz8o_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpwue80_1r_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwue80_1r_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073691
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return ((x - y) * (x + y) * (y - z) * (z + y) == (x+y+z+x+y+z)*(x*x+y*y+z*z+x*y+y*z+x*z+y*z))\n\
    }\n`\n\nvar runTemplate = `package run\n\nimport (\n    \"testing\"\n)\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9an3gare_test.go:23:1: expected declaration, found `


    var runTemplate = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y > z {\n        return false\n    }\n    if x > 0 && y == z {\n\
    \        return true\n    }\n    if x == 0 && y == 0 && z == 0 {\n        return\
    \ true\n    }\n    return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpth6cqz3c_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpth6cqz3c_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpth6cqz3c_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpth6cqz3c_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y+z {\n        return true\n    }\n    if x < y || y < z {\n     \
    \   return false\n    }\n    if x < 0 || y < 0 {\n        return true\n    }\n\
    \    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkxnemfsx_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpkxnemfsx_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpkxnemfsx_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpkxnemfsx_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Code here\n    return (x == y+z && isInt(x) && isInt(y) && isInt(z))\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd1qe1o91_test.go:22:25: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y {\n        if y == y+z {\n            if x == int(x) && y == int(y)\
    \ && z == int(z) {\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dtbk18h_test.go:23:21: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp_dtbk18h_test.go:23:36: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp_dtbk18h_test.go:23:51: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return math.Mod(float64(x+y), z) == float64(x) && math.Mod(float64(y+z), z)\
    \ == float64(y)\n}\n`\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4uweq74j_test.go:23:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y) && (y == z) {\n        if x < 0 || x >= float64(int(1) << 63)\
    \ ||\n            y < 0 || y >= float64(int(1) << 63) ||\n            z < 0 ||\
    \ z >= float64(int(1) << 63) {\n                return false\n        }\n    \
    \    return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6n00u15d_test.go:22:34: int(1) << 63 (constant 9223372036854775808 of
    type int) overflows int

    /tmp/tmp6n00u15d_test.go:23:35: int(1) << 63 (constant 9223372036854775808 of
    type int) overflows int

    /tmp/tmp6n00u15d_test.go:24:35: int(1) << 63 (constant 9223372036854775808 of
    type int) overflows int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x\
    \ + y + z == 3)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpab21qz2a_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpab21qz2a_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpab21qz2a_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpab21qz2a_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpab21qz2a_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            if math.Trunc(x) == math.Trunc(y)\
    \ && math.Trunc(x) == math.Trunc(z) {\n                return true\n         \
    \   } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }\n    } else {\n        return false\n   \
    \ }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp39r9w8e4_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x==y {\n        return true\n    }\n    if x==z {\n        return true\n\
    \    }\n    if y==z {\n        return true\n    }\n    if x>0 && y>0 && z>0 {\n\
    \        if x < y && y < z {\n            return true\n        }\n    }\n    if\
    \ x<0 && y<0 && z<0 {\n        if x < y && y < z {\n            return true\n\
    \        }\n    }\n    return false\n}\n</code>\n<|/ a tags=floating-point,floating-point-precision,floating-point-conversion,floating-point-exceptions,go\
    \ dscore=1 |>\n<| c |>\nI think you misunderstood my question. The question is\
    \ asking for an efficient method to find if a floating-point number is a sum of\
    \ two other floating-point numbers. The \"any_int\" function you gave doesn't\
    \ do that and it would return true for cases where the two numbers were not equal.\n\
    <|/ c |>\n<| a dscore=1 tags=floating-point,floating-point-precision,floating-point-conversion,floating-point-exceptions,go\
    \ |>\nAs mentioned in other answers, this isn't something you can reasonably do\
    \ with floats. \nYou should be able to use integers instead, though. \n<code>\n\
    const MAXINT = 2 ^ 63 - 1\nconst MAXINT2 = 2 ^ 31 - 1\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7kyg2frs_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Declare variables\n    var a bool = false\n    var b bool = false\n   \
    \ var c bool = false\n\n    // Make sure the values are integers\n    if int(x)\
    \ == x && int(y) == y && int(z) == z {\n        // Check if they are equal to\
    \ the sum of the other two\n        if x+y == z {\n            a = true\n    \
    \    }\n\n        if y+x == z {\n            b = true\n        }\n\n        if\
    \ x+y == z {\n            c = true\n        }\n    }\n\n    return a || b || c\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bwehqnv_test.go:27:18: invalid operation: int(x) == x (mismatched types
    int and float64)

    /tmp/tmp5bwehqnv_test.go:27:33: invalid operation: int(y) == y (mismatched types
    int and float64)

    /tmp/tmp5bwehqnv_test.go:27:48: invalid operation: int(z) == z (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y && y == y+z && z == z+x {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpg5uxd4sw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpg5uxd4sw_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpg5uxd4sw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpg5uxd4sw_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpg5uxd4sw_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x >= y && x >= z && y >= z && x >= int64(y) && y >= int64(z) && z >=\
    \ int64(x)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1rcvudyc_test.go:21:47: invalid operation: x >= int64(y) (mismatched types
    float64 and int64)

    /tmp/tmp1rcvudyc_test.go:21:64: invalid operation: y >= int64(z) (mismatched types
    float64 and int64)

    /tmp/tmp1rcvudyc_test.go:21:81: invalid operation: z >= int64(x) (mismatched types
    float64 and int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x != x || y != y) || (z != z) {\n        return false;\n    }\n\n    if\
    \ x == y && x == z {\n        return true;\n    }\n\n    if y == z {\n       \
    \ return true;\n    }\n\n    if x == y {\n        return false;\n    }\n\n   \
    \ if y == z {\n        return false;\n    }\n\n    if (x != x || y != y) && (x\
    \ != z && y != z) {\n        return false;\n    }\n\n    if (x != x || y != y)\
    \ && (x == z && y != z) {\n        return false;\n    }\n\n    if (x != x || y\
    \ == y) && (x == z && y != z) {\n        return false;\n    }\n\n    if (x ==\
    \ y || y == z) && (x == z && y == z) {\n        return true;\n    }\n\n    if\
    \ (x == y || y == z) && (x == z || y == z) {\n        return false;\n    }\n\n\
    \    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n  \
    \  }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n        return false;\n\
    \    }\n\n    if (x == y || y == z) && (x == z || y == z) {\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo1k30cun_test.go:139:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpppi857_n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpppi857_n_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpppi857_n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == z || y == z\
    \ {\n        return false\n    }\n    if x < y && x < z {\n        return true\n\
    \    }\n    if y < x && y < z {\n        return true\n    }\n    if x > z && x\
    \ < y {\n        return true\n    }\n    if y > x && y > z {\n        return true\n\
    \    }\n    if x > y && y > x {\n        return true\n    }\n    if y > x && x\
    \ > z {\n        return true\n    }\n    if z > x && z > y {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpghaqmfkc_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpghaqmfkc_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpghaqmfkc_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpghaqmfkc_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpghaqmfkc_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpghaqmfkc_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 || x < 0 || y < 0 || z < 0 || x > 180 || y >\
    \ 180 || z > 180 {\n        fmt.Println(\"All parameters must be within range.\\\
    n\")\n        return false\n    }\n    x := int(x)\n    y := int(y)\n    z :=\
    \ int(z)\n    if x == 0 || y == 0 || z == 0 {\n        fmt.Println(\"All parameters\
    \ must be integers.\\n\")\n        return false\n    }\n    if x > 180 || y >\
    \ 180 || z > 180 {\n        fmt.Println(\"All parameters must be within range.\\\
    n\")\n        return false\n    }\n    if x+y == z {\n        return true\n  \
    \  } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81i2rwgx_test.go:25:7: no new variables on left side of :=

    /tmp/tmp81i2rwgx_test.go:25:10: cannot use int(x) (value of type int) as type
    float64 in assignment

    /tmp/tmp81i2rwgx_test.go:26:7: no new variables on left side of :=

    /tmp/tmp81i2rwgx_test.go:26:10: cannot use int(y) (value of type int) as type
    float64 in assignment

    /tmp/tmp81i2rwgx_test.go:27:7: no new variables on left side of :=

    /tmp/tmp81i2rwgx_test.go:27:10: cannot use int(z) (value of type int) as type
    float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    switch {\n    case\
    \ x == 0 || y == 0 || z == 0:\n        return false\n    case x < 0 || y < 0 ||\
    \ z < 0:\n        return false\n    case x < y && y < z:\n        return true\n\
    \    case x == y && y == z:\n        return true\n    case x > y || y > z:\n \
    \       return false\n    case x == y || y == z || z == x:\n        return true\n\
    \    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0geon4e4_test.go:38:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 && y == 0 && z == 0 {\n        return true\n    }\n    if x == 0\
    \ || y == 0 || z == 0 {\n        return false\n    }\n    total := x + y + z\n\
    \    if total == 0 {\n        return false\n    }\n    if total < x {\n      \
    \  return true\n    }\n    if total > z {\n        return false\n    }\n    if\
    \ total < y {\n        return true\n    }\n    return false\n}\n`},\n        {`package\
    \ any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpthwu9_a4_test.go:42:1: expected declaration,\
    \ found `},\n        {`\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   switch {\n    case x > 0 && y > 0 && z > 0:\n        return (x+y+z == x+y+z)\n\
    \    case x > 0 && y > 0 && z > 0:\n        return (x+y+z == x+y+z)\n    case\
    \ x > 0 && y > 0 && z < 0:\n        return (x+y+z == x+y+z)\n    case x > 0 &&\
    \ y < 0 && z > 0:\n        return (x+y+z == x+y+z)\n    case x > 0 && y < 0 &&\
    \ z < 0:\n        return (x+y+z == x+y+z)\n    case x < 0 && y > 0 && z > 0:\n\
    \        return (x+y+z == x+y+z)\n    case x < 0 && y > 0 && z < 0:\n        return\
    \ (x+y+z == x+y+z)\n    case x < 0 && y < 0 && z > 0:\n        return (x+y+z ==\
    \ x+y+z)\n    case x < 0 && y < 0 && z < 0:\n        return (x+y+z == x+y+z)\n\
    \    default:\n        return false\n    }\n}\n`\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdystuw8r_test.go:44:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y && x < z {\n        if x == (y + z) {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else if y < x &&\
    \ y < z {\n        if y == (x + z) {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if z == (x + y)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx7rfh6il_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx7rfh6il_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpx7rfh6il_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpx7rfh6il_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpx7rfh6il_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z) {\n        return false\n\
    \    }\n    if math.IsNaN(x+y) || math.IsNaN(x+z) || math.IsNaN(y+z) {\n     \
    \   return false\n    }\n    if math.IsNaN(x-y+z) || math.IsNaN(x-z) || math.IsNaN(y-z)\
    \ || math.IsNaN(x-z) || math.IsNaN(y-z) {\n        return false\n    }\n    if\
    \ math.IsNaN(x-y) || (math.IsNaN(x-z) && math.IsNaN(x-z) || math.IsNaN(y-z) &&\
    \ math.IsNaN(y-z)) {\n        return false\n    }\n    if x == 0 || y == 0 ||\
    \ z == 0 {\n        return false\n    }\n    if x == math.Inf(1) && y == math.Inf(1)\
    \ && z == math.Inf(1) {\n        return true\n    }\n    if x == math.Inf(1) ||\
    \ y == math.Inf(1) || z == math.Inf(1) {\n        return false\n    }\n    if\
    \ x == 0 || y == 0 || z == 0 || math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z)\
    \ {\n        return false\n    }\n    if x >= math.Inf(1) || y >= math.Inf(1)\
    \ || z >= math.Inf(1) {\n        return false\n    }\n    if x <= 0 || y <= 0\
    \ || z <= 0 || math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z) {\n        return\
    \ false\n    }\n    if x != 0 && x != math.Inf(1) && y != 0 && y != math.Inf(1)\
    \ && z != 0 && z != math.Inf(1) {\n        return true\n    }\n    if x == 0 &&\
    \ y == 0 && z == 0 {\n        return true\n    }\n    if x == 0 || y == 0 || z\
    \ == 0 {\n        return false\n    }\n    if x == math.Inf(1) || y == math.Inf(1)\
    \ || z == math.Inf(1) {\n        return false\n    }\n    if x == math.Inf(1)\
    \ && y == 0 && z == 0 {\n        return true\n    }\n    if x == math.Inf(1) &&\
    \ y == math.Inf(1) && z == 0 {\n        return true\n    }\n    if x == 0 && y\
    \ == math.Inf(1) && z == 0 {\n        return true\n    }\n    if x == 0 && y ==\
    \ 0 && z == math.Inf(1) {\n        return true\n    }\n    if x == 0 && y == 0\
    \ && z == 0 {\n        return true\n    }\n    if x == math.Inf(1) && y == math.Inf(1)\
    \ && z == math.Inf(1) {\n        return true\n    }\n    if x == math.Inf(1) &&\
    \ y == 0 && z == math.Inf(1) {\n        return true\n    }\n    if x == math.In\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4yti3x27_test.go:85:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 || x >= float64(math.MaxInt64) || y >= float64(math.MaxInt64)\
    \ || z >= float64(math.MaxInt64) {\n        return false\n    }\n    if x == y+z\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt7b2b83_test.go:21:48: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y && y == y+z && z == z+x {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n</code>\n<|/ a tags=go,floating-point,floating-accuracy\
    \ dscore=2 |>\n<| c |>\nWhile this is a good solution to my specific problem,\
    \ I still think this solution does not meet the requirements of my question. Your\
    \ solution relies on the fact that the last digit is the sum of two digits. But\
    \ this doesn't hold true in some cases, like 0.2, 0.4, 0.6, 0.8 and so on. Those\
    \ numbers could also have the sum of two digits if the last digit is a 5 or a\
    \ 3, but this solution does not recognize those cases.\n<|/ c |>\n<| c |>\nYes,\
    \ I understood that from the question, that's why I said \"In some cases, like\
    \ the 0.2, 0.4, 0.6, 0.8 and so on cases, this solution does not work.\"\n<|/\
    \ c |>\n<| a tags=go,floating-point,floating-accuracy |>\nMy solution is as follows:\n\
    \nFirst I find the number of digits in the number\nFind out if its possible to\
    \ divide the number by 10^(n-1)\nIf yes then divide the number by 10^(n-1)\nCheck\
    \ if the number is divisible by 10 by repeatedly dividing it with 10\nCheck if\
    \ the number is divisible by 100 by repeatedly dividing it with 100\nCheck if\
    \ the number is divisible by 1000 by repeatedly dividing it with 1000\nIf the\
    \ number is divisible by 1 then its true\nElse its false\n\nI used the following\
    \ code\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n)\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwr8e4hf_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return (x\
    \ == y || x == z) && y != 0 && z != 0\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpz58hoda6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpz58hoda6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpz58hoda6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpz58hoda6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpz58hoda6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpz58hoda6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpz58hoda6_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y + z != (x + y) + z {\n        return false\n    }\n    if x < 0 ||\
    \ y < 0 || z < 0 {\n        return false\n    }\n    if x == y && x == z {\n \
    \       return true\n    }\n    if x == y || x == z {\n        return true\n \
    \   }\n    if y == z {\n        return true\n    }\n    return false\n}\n`\n}\n\
    \nvar func_call_tests = []testcase{\n    {\n        Name: \"func_call_test\",\n\
    \        Calls: `\n            func (s *S) TestOne() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestTwo() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestThree() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestFour() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestFive() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestSix() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestSeven() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestEight() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestNine() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestTen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestEleven() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestTwelve() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestThirteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestFourteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestFifteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestSixteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestSeventeen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestEighteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestNineteen() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestTwenty() {\n                s.M(23)\n\
    \            }\n            func (s *S) TestThirty() {\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpp5gwe6ar_test.go:38:1: expected declaration,\
    \ found `\n}\n\nvar func_call_tests = []testcase{\n    {\n        Name: \"func_call_test\"\
    ,\n        Calls: `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (fmt.Sprintf(\"%v+%v\", x, y) == fmt.Sprintf(\"%v+%v\", z)) && x ==\
    \ y && x >= 0 && x < 10 && y >= 0 && y < 10\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp05tzyz4y_test.go:21:43: fmt.Sprintf format %v reads arg #2, but call has
    1 arg

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpq82w8pvu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpq82w8pvu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073689
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n    return (x ==\
    \ x+y && x == x+z) || (y == y+z && y == x+z) || (z == x+y && z == y+z)\n}\n</code>\n\
    <|/ a dscore=1 tags=floating-point,go |>\n<| c |>\nThanks for your help, I will\
    \ look into this.\n<|/ c |>\n<| c |>\nYou're welcome! One small issue I noticed\
    \ was that `any_int` only checks to see if the numbers are equal (assuming you\
    \ didn't want to compare the numbers to their sum), so it would return `true`\
    \ for any number that had two decimal places added (such as `3.6`) but `3.6` and\
    \ `3.6000000000004` would return `true`. So I added an additional `||` operator\
    \ to check the length of the numbers (`len(x)>2 && len(y)>2 && len(z)>`)\n<|/\
    \ c |>\n<| a |>\nThe most efficient solution is to use bit operations and a bitfield\
    \ of 32 (or 64) bits to store these values. It's simple and efficient.\nThe reason\
    \ for using bitfields is that they allow the code to work faster in cases where\
    \ you have to do lots of comparisons/subtractions/additions. For example, a naive\
    \ implementation in Python:\n<code>\ndef any_int(x, y, z):\n    return ((x + y)\
    \ == z) or ((x == y) and (y == z))\n</code>\nwill run slow.\nBitfield implementation\
    \ in Go:\n<code>\ntype bits \nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpibdaokli_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z) || (x == y && z == 0)\n}\n`\n\nvar any_int_test.go = `package\
    \ any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx89zqb9s_test.go:23:1: expected declaration, found `


    var any_int_test.go = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073901
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y && y == y+z && x == x+z {\n        return true\n    }\n    return\
    \ false\n}\n</cell>\n<text>\n6. Problem Statement\nThe data file contains records\
    \ representing a patient and their admission information. The fields in the file\
    \ are:\n\nname - the patient's name\nage - the patient's age (in years)\nsex -\
    \ the patient's sex\nweight - the patient's weight (in kilograms)\nHeight - the\
    \ patient's height (in centimeters)\nIQ - the patient's IQ\nResults - the patient's\
    \ results (ie. the diagnosis the patient is in)\n\nFor each row in the data file\
    \ a record consists of the following fields:\n\nname - the patient's name\nage\
    \ - the patient's age (in years)\nsex - the patient's sex\nweight - the patient's\
    \ weight (in kilograms)\nHeight - the patient's height (in centimeters)\nIQ -\
    \ the patient's IQ\nResults - the patient's results (ie. the diagnosis the patient\
    \ is in)\n\nExample\nFor this exam we will use the following data file:\n\nHenry\
    \ Smith 21 F 1.2 175 25 F\nAnnie Jones 22 M 3.2 180 28 M\nPeter Jackson 33 M 1.5\
    \ 175 25 F\nDenise Brady 41 F 2.1 175 26 M\nJames Martin 34 F 1.3 175 25 F\nPeter\
    \ Jackson 24 M 3.2 180 28 M\nEthan Kennedy 25 M 3.3 180 30 F\nHenry Smith 24 F\
    \ 2.3 185 26 M\nAnnie Jones 23 M 3.2 180 28 M\nPeter Jackson 23 F 1.4 175 25 M\n\
    Denise Brady 36 F 2.2 175 26 M\nJames Martin 36 M 1.6 175 25 F\nPeter Jackson\
    \ 24 M 3.2 180 28 M\nEthan Kennedy 22 M 3.3 180 30 F\nHenry Smith 22 F 2.2 175\
    \ 26 M\nAnnie Jones 33 M 3.2 180 28 M\nPeter Jackson 21 F 1.3 175 25 F\nDenise\
    \ Brady 33 M 3.2 180 28 M\nJames Martin \nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdnq2k9ou_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z || x > y || x > z || y > z || x < y || x\
    \ < z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpn3inr1pb_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpn3inr1pb_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpn3inr1pb_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpn3inr1pb_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpn3inr1pb_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || (x == z && y == z)\n}\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpucu5ywpo_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpucu5ywpo_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpucu5ywpo_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpucu5ywpo_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpucu5ywpo_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpucu5ywpo_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   result := x == y + z\n    if !result {\n        fmt.Printf(\"any_int: x, y,\
    \ z are %f, %f, %f. Expected %f, %f, %f.\\n\", x, y, z, x, y, z)\n    }\n    result\
    \ &= x == int(x) & y == int(y) & z == int(z)\n    if !result {\n        fmt.Printf(\"\
    any_int: x, y, z are %f, %f, %f. Expected %f, %f, %f.\\n\", x, y, z, x, y, z)\n\
    \    }\n    result &= x == int(x) >> int(y) >> int(z)\n    if !result {\n    \
    \    fmt.Printf(\"any_int: x, y, z are %f, %f, %f. Expected %f, %f, %f.\\n\",\
    \ x, y, z, x, y, z)\n    }\n    return result\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvx0l_1di_test.go:25:20: invalid operation: int(x) & y (mismatched types
    int and float64)

    /tmp/tmpvx0l_1di_test.go:25:34: invalid operation: int(y) & z (mismatched types
    int and float64)

    /tmp/tmpvx0l_1di_test.go:29:20: invalid operation: x == int(x) >> int(y) >> int(z)
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return math.Abs(x - y) <= math.MaxInt64 && math.Abs(x - z) <= math.MaxInt64\
    \ && math.Abs(y - z) <= math.MaxInt64\n}\n</code>\n<|/ a tags=go,floating-point-precision\
    \ |>\n<| c |>\n`math.MaxInt64` is only available if you're compiling Go 1.11 or\
    \ newer.\n<|/ c |>\n<| c |>\nThanks for pointing this out. I had thought the question\
    \ was about Go, but you're right it's really about a general problem with floating\
    \ point numbers\n<|/ c |>\n<| c |>\nAlso note that `float64` has an exact representation,\
    \ so this test is just testing whether the `float64` values are equal, not whether\
    \ they add up to an exact `float64` value.\n<|/ c |>\n<| a |>\nSince all numbers\
    \ are integers and are between -1 and 1, you may easily check if any of them are\
    \ \"close enough\" to any integer. Example:\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"math\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4gdlny9u_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var a int\n    var b int\n    var c int\n    if a == int(x + y + z) {\n  \
    \      a = int(x + y + z)\n        b = int(x + y + z)\n        c = int(x + y +\
    \ z)\n    } else {\n        a = int(x + y + z)\n        b = int(x + y + z)\n \
    \       c = int(x + y + z)\n    }\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpa8aml8o0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpa8aml8o0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpa8aml8o0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpa8aml8o0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpa8aml8o0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == 0 || y == 0 || z == 0) || (x < 0 || y < 0 || z < 0) || (x > 0 &&\
    \ y > 0 && z > 0) {\n        return false\n    }\n    \n    x /= y\n    y /= z\n\
    \    \n    if x == 0 {\n        return false\n    }\n    \n    if y == 0 {\n \
    \       return true\n    }\n    \n    if z == 0 {\n        return true\n    }\n\
    \    \n    x %= y\n    y %= z\n    z %= x\n    \n    if x == y || x == z {\n \
    \       return true\n    }\n    \n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3469goha_test.go:40:5: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmp3469goha_test.go:41:5: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmp3469goha_test.go:42:5: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    // All\
    \ numbers must be integers.\n    if x < 0 || y < 0 || z < 0 {\n        return\
    \ false\n    }\n\n    // Return true if the sum of the other two numbers is equal\
    \ to the sum of all numbers to the power of 2.\n    return (y == x + z && y !=\
    \ 0 || y == x-z && y != 0) || (x == y-z && x != 0 || x == x+z && x != 0)\n}\n\
    `\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp63t7q__4_test.go:33:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x >= y) || (x == y) && (x >= z) && (x == z)\n}\n`\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaelagh8k_test.go:23:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x > y || x > z {\n        return false\n    }\n    if y > z {\n       \
    \ return true\n    }\n    if x == y || x == z {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpbjyslver_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpbjyslver_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpbjyslver_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpbjyslver_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpbjyslver_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpbjyslver_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpbjyslver_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z || z == x {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwsw6cz8o_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpwsw6cz8o_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpwsw6cz8o_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpwsw6cz8o_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpwsw6cz8o_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y {\n        if x < z {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if y < z {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n`),\n}\n\nvar tests = []\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi5k4awm8_test.go:35:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z {\n        return true\n    }\n\n    if x >= y && x <=\
    \ z {\n        return true\n    }\n\n    return false\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis would work for this specific case, but doesn't handle cases\
    \ with more or less than 3 arguments. You could easily change the implementation\
    \ to allow an arbitrary number of arguments and still solve the problem.\n<|/\
    \ c |>\n<| c |>\nI rewrote it for arbitrary numbers of arguments.\n<|/ c |>\n\
    <| c |>\nThis is great because it's short and simple. Unfortunately, it won't\
    \ work for my case: I do have a finite number of inputs, so I just need to check\
    \ whether at least one of the inputs is the sum of the others. In your example,\
    \ all 3 arguments should add up to 4, so the function should return `true`. But\
    \ your new function would return `true` for: any_int(4, 5, 2), any_int(5, 2, 2),\
    \ any_int(5, 2, 5), any_int(2, 2, 2), and so on...\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I updated the answer to solve that case as well. I think the new solution\
    \ I wrote is more flexible and easier to understand.\n<|/ c |>\n<| a |>\nThe simplest\
    \ way would be:\n<code>\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbyzrg4fq_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073902
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Return true if any of the numbers are equal to the sum of the other two.\n\
    \    if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return\
    \ x == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmptpks5vcf_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmptpks5vcf_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmptpks5vcf_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        if x > y || x > z {\n            return false\n\
    \        }\n    }\n    return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpaftj6wlz_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpaftj6wlz_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpaftj6wlz_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpaftj6wlz_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpaftj6wlz_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // If the sum is 0, then none of the numbers is equal to sum.\n    if x+y+z\
    \ == 0 {\n        return true\n    }\n    // If any of the numbers are not integral,\
    \ they're not equal.\n    if x < 0 || y < 0 || z < 0 {\n        return false\n\
    \    }\n    // If any of the numbers are equal, then the sum is equal to the sum\
    \ of those numbers.\n    if x+y+z == x+y+z {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpvpzwzs0x_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpvpzwzs0x_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpvpzwzs0x_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpvpzwzs0x_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpvpzwzs0x_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpvpzwzs0x_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073903
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if math.Abs(x-y-z)\
    \ <= 1e-12 {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8k2fbiq_test.go:24:8: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y+z && x < math.MaxInt8 && x > math.MaxInt64 && y < math.MaxInt8 &&\
    \ y > math.MaxInt64 && z < math.MaxInt8 && z > math.MaxInt64 {\n        return\
    \ true\n    }\n    return false\n}\n`\n\texpected := \"false\"\n\n\ttest, _ :=\
    \ NewTest(\"test\")\n\ttest.WriteInputFromFile(\"any_int_test\", golden)\n\trun.Report(test.Name(),\
    \ test.Input(), expected, test.Line())\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9ozgmrr_test.go:26:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073903
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    return\
    \ (x == y + z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpvpjjnogt_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpvpjjnogt_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpvpjjnogt_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y || y == y+z || z == z+x {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmphxfld7lz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmphxfld7lz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmphxfld7lz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmphxfld7lz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmphxfld7lz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y == z {\n        return true\n    }\n\n    if x > z {\n        return\
    \ false\n    }\n\n    if x < -z {\n        return false\n    }\n\n    if y > z\
    \ {\n        return false\n    }\n\n    if y < -z {\n        return false\n  \
    \  }\n\n    if x == y {\n        return true\n    }\n\n    if x == -y {\n    \
    \    return true\n    }\n\n    if y == -x {\n        return true\n    }\n\n  \
    \  if x == 0 {\n        return true\n    }\n\n    if y == 0 {\n        return\
    \ true\n    }\n\n    if z == 0 {\n        return true\n    }\n\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx6355o3c_test.go:90: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx6355o3c_test.go:90:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx6355o3c_test.go:90: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpx6355o3c_test.go:90:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpx6355o3c_test.go:90: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y+z {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpie8bjsrh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpie8bjsrh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpie8bjsrh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0.0 && y == 0.0 && z == 0.0 {\n        return true\n    }\n    return\
    \ x == y || x == z || y == z || x == 0.0 && y == 0.0 || y == 0.0 && z == 0.0 ||\
    \ z == 0.0 && x == 0.0\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpf10kyj53_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpf10kyj53_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpf10kyj53_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpf10kyj53_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpf10kyj53_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x != 0.0 && (y == 0 || z != 0.0) && (x+y == z+0.0)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp05l43rif_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp05l43rif_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp05l43rif_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp05l43rif_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n`\n)\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8eilh_j__test.go:23:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x != 0 && y != 0 && z != 0 {\n        return x == z + y || x == z - y\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpccccmgd0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpccccmgd0_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 && y == 0 && z == 0 {\n        return true\n    }\n    if x == 0\
    \ || y == 0 || z == 0 {\n        return false\n    }\n    if x != x || y != y\
    \ || z != z {\n        return false\n    }\n    if x + y == z {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpa0_dt9m4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpa0_dt9m4_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpa0_dt9m4_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpa0_dt9m4_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x != 0 || y != 0 || z != 0 || x == y || x == z || y == z\n}\n`\n)\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcnpy3_fu_test.go:23:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073904
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if y == z {\n            return true\n        }\n   \
    \     return false\n    }\n    if x > y {\n        if x < z {\n            return\
    \ true\n        }\n        return false\n    }\n    if x > z {\n        if y <\
    \ z {\n            return true\n        }\n        return false\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmptwtosydr_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n        tmptwtosydr_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmptwtosydr_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmptwtosydr_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmptwtosydr_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmptwtosydr_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmptwtosydr_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        if x < 0 || y <= 0 || z <= 0 {\n            return\
    \ false\n        }\n        if x < y {\n            return true\n        }\n \
    \       if x < z {\n            return true\n        }\n        if y < z {\n \
    \           return true\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsywotouv_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpsywotouv_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpsywotouv_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (math.Abs(x) + math.Abs(y) + math.Abs(z)) < 1E-6\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahqdfstj_test.go:21:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   result := z + y + x\n    if result > 0 || result < 0 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpuc8g3ete_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpuc8g3ete_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpuc8g3ete_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpuc8g3ete_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpuc8g3ete_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0.0 && y == 0.0 && z == 0.0 {\n        return true\n    }\n    if\
    \ x < 0.0 {\n        if y < 0.0 {\n            if z < 0.0 {\n                return\
    \ true\n            } else {\n                return false\n            }\n  \
    \      } else {\n            return false\n        }\n    } else {\n        if\
    \ y > 0.0 {\n            if z > 0.0 {\n                return true\n         \
    \   } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpxyfg6cb__test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpxyfg6cb__test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpxyfg6cb__test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpxyfg6cb__test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpxyfg6cb__test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpxyfg6cb__test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073905
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z) || float64(x) == float64(y)\
    \ || float64(x) == float64(z) || float64(y) == float64(z)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnl8y7ud_test.go:21:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            if x == int(x) {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf5fsvw__test.go:23:21: invalid operation: x == int(x) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x /= float64(100)\n    y /= float64(100)\n    z /= float64(100)\n\n    return\
    \ (x == y + z) || (x == y || x == z) || (x == -y || x == -z) || (x == -y || x\
    \ == -z) || (x == +y || x == +z) || (x == +y || x == +z) || (x == -y || x == -z)\
    \ || (x == -y || x == -z) || (x == +y || x == +z)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpb6vayb7d_test.go:25:158: redundant or: x == -z || x == -z

    /tmp/tmpb6vayb7d_test.go:25:147: redundant or: x == -y || x == -y

    /tmp/tmpb6vayb7d_test.go:25:134: redundant or: x == +z || x == +z

    /tmp/tmpb6vayb7d_test.go:25:123: redundant or: x == +y || x == +y

    /tmp/tmpb6vayb7d_test.go:25:110: redundant or: x == +z || x == +z

    /tmp/tmpb6vayb7d_test.go:25:99: redundant or: x == +y || x == +y

    /tmp/tmpb6vayb7d_test.go:25:86: redundant or: x == -z || x == -z

    /tmp/tmpb6vayb7d_test.go:25:75: redundant or: x == -y || x == -y

    /tmp/tmpb6vayb7d_test.go:25:62: redundant or: x == -z || x == -z

    /tmp/tmpb6vayb7d_test.go:25:51: redundant or: x == -y || x == -y

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x==0 || y==0 || z==0 {\n        return true\n    }\n    if x>0 && y>0 &&\
    \ z>0 {\n        return x+y+z==27\n    }\n    return x+y==z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpwhy3k9fg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpwhy3k9fg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpwhy3k9fg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpwhy3k9fg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y {\n        if y < z {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if y > z {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpepjbfhzs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpepjbfhzs_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpepjbfhzs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpepjbfhzs_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpepjbfhzs_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073906
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n    if x + y +\
    \ z == 0 || x + y == 0 || z == 0 || x == 0 || y == 0 || z == 0 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpdnh7oz5b_test.go:24:40: redundant or: z == 0 || z == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z || x == int(x) && y == int(y) && z == int(z)\n\
    }\n`},\n\t{\"any_int_test\", `package any_int_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpx96x2ljl_test.go:23:1: expected declaration,\
    \ found `},\n\t{\"any_int_test\", `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || (y == x && z == int(math.Abs(x-y)))\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpel0m280i_test.go:21:42: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073905
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmph_3b2rbi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmph_3b2rbi_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmph_3b2rbi_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmph_3b2rbi_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Return false if any of the numbers is non-integer.\n    if x == 0 || y\
    \ == 0 || z == 0 {\n        return false\n    }\n    // Return true if all three\
    \ numbers are integers.\n    if x == y && y == z {\n        return true\n    }\n\
    \    // Return false if any two numbers are non-integers.\n    if x < 0 || y <\
    \ 0 || z < 0 {\n        return false\n    }\n    // Return false if all numbers\
    \ are not integers.\n    if x != y || y != z {\n        return false\n    }\n\
    \    // Return true if all numbers are integers.\n    return true\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpozeom1jx_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpozeom1jx_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpozeom1jx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpozeom1jx_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpozeom1jx_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpozeom1jx_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073906
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == ((y + z) / 2)) && x >= -10000000 && x <= 10000000 && (y >= -10000000\
    \ && y <= 10000000) && x >= -10000000 && x <= 10000000 && (z >= -10000000 && z\
    \ <= 10000000)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpd_szjsg9_test.go:21:54: redundant and: x <= 10000000 && x <= 10000000

    /tmp/tmpd_szjsg9_test.go:21:36: redundant and: x >= -10000000 && x >= -10000000

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == z && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp6yyfxqel_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp6yyfxqel_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp6yyfxqel_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp6yyfxqel_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp6yyfxqel_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp6yyfxqel_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x int, y int, z int\n\n    // Check for valid inputs.\n    if x < 0 || y <=\
    \ 0 || z <= 0 {\n        return false\n    }\n\n    // Check that inputs are integers.\n\
    \    if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n\n    // Ensure\
    \ inputs are integers.\n    if x < 0 || y < 0 || z < 0 {\n        return false\n\
    \    }\n\n    // Convert to integers.\n    x = int(x)\n    y = int(y)\n    z =\
    \ int(z)\n\n    // Return true if any of inputs is equal to the sum of the other\
    \ two.\n    if x + y == z {\n        return true\n    }\n\n    // Return false\
    \ in any other case.\n    return false\n}\n\"\"\"\n\n# Create a function to test\
    \ that all inputs are integers.\ntest_function = \"\"\"\npackage any_int_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa1z50nbe_test.go:21:7: expected '';'', found int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // This can be made more efficient by first checking if one of the numbers\
    \ is equal to zero.\n    if x == 0 || y == 0 || z == 0 {\n        return false\n\
    \    }\n    x := int(x)\n    y := int(y)\n    z := int(z)\n    return (x + y +\
    \ z) == x\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xvdzwiy_test.go:25:7: no new variables on left side of :=

    /tmp/tmp6xvdzwiy_test.go:25:10: cannot use int(x) (value of type int) as type
    float64 in assignment

    /tmp/tmp6xvdzwiy_test.go:26:7: no new variables on left side of :=

    /tmp/tmp6xvdzwiy_test.go:26:10: cannot use int(y) (value of type int) as type
    float64 in assignment

    /tmp/tmp6xvdzwiy_test.go:27:7: no new variables on left side of :=

    /tmp/tmp6xvdzwiy_test.go:27:10: cannot use int(z) (value of type int) as type
    float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return float64(x + y + z) == float64(x + y + z)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpwxsiw5ly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpwxsiw5ly_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpwxsiw5ly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpwxsiw5ly_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpwxsiw5ly_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   result := false\n\n    if x == y {\n        result = true\n    }\n    if y\
    \ == z {\n        result = true\n    }\n    if z == x {\n        result = true\n\
    \    }\n\n    if !result {\n        fmt.Println(\"Error, one of the arguments\
    \ is not an integer\")\n    }\n    return result\n}\n</code>\n<|/ a tags=go |>\n\
    <| a tags=go |>\nYou can use math/bits to convert all three numbers to int and\
    \ compare:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/bits\"\n\
    )\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp945ta8os_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x := int(x)\n    y := int(y)\n    z := int(z)\n    return x >= y && x <= z\
    \ && x >= z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtab5p5r_test.go:21:7: no new variables on left side of :=

    /tmp/tmpbtab5p5r_test.go:21:10: cannot use int(x) (value of type int) as type
    float64 in assignment

    /tmp/tmpbtab5p5r_test.go:22:7: no new variables on left side of :=

    /tmp/tmpbtab5p5r_test.go:22:10: cannot use int(y) (value of type int) as type
    float64 in assignment

    /tmp/tmpbtab5p5r_test.go:23:7: no new variables on left side of :=

    /tmp/tmpbtab5p5r_test.go:23:10: cannot use int(z) (value of type int) as type
    float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || x == z {\n        return true\n    }\n    if x < 0 || y < 0 ||\
    \ z < 0 {\n        return false\n    }\n    return (x == float64(x + y + z)) ||\
    \ (x == float64(x - y + z)) || (x == float64(x - z - y)) || (x == float64(x -\
    \ y - z)) || (x == float64(x + y - z)) || (x == float64(x + z - y)) || (x == float64(x\
    \ + y - z)) || (x == float64(x + z - y)) || (x == float64(x - y + z)) || (x ==\
    \ float64(x - z - y)) || (x == float64(x + y - z))\n}\n`\n\nvar test_packages_test_file_1_8\
    \ = `package test_packages_test_file_1\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd_wcskum_test.go:29:1: expected declaration, found `


    var test_packages_test_file_1_8 = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Initialize variables.\n    var int1, int2, int3 int\n\n    // Check if\
    \ the numbers are integers.\n    if math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z)\
    \ {\n        return false\n    }\n    if x < 0 || y < 0 || z < 0 {\n        return\
    \ false\n    }\n    if x == 0 || y == 0 || z == 0 {\n        return false\n  \
    \  }\n    if x > math.MaxFloat64 {\n        return false\n    }\n    if y > math.MaxFloat64\
    \ {\n        return false\n    }\n    if z > math.MaxFloat64 {\n        return\
    \ false\n    }\n\n    // Perform the calculations.\n    int1 = int(math.Floor(x))\n\
    \    int2 = int(math.Floor(y))\n    int3 = int(math.Floor(z))\n\n    // Check\
    \ if the sum is the same as the third number.\n    if int1 + int2 == int3 {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n`\n}\n\nvar\
    \ anyIntTests = []string{\n    `\npackage any_int_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpeptri17f_test.go:56:1: expected declaration,\
    \ found `\n}\n\nvar anyIntTests = []string{\n    `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x >= y && y >= z) || (x <= y && y <= z)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpmin15sze_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpmin15sze_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpmin15sze_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpmin15sze_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x < y\
    \ && y < z && x < z {\n        return true\n    }\n    return false\n}\n</cell>\n\
    <cell>\n# Now that our function is a part of the package, we can test it!\n\n\
    import any_int_test\n\n_, expected = any_int_test.any_int(3, 5, 2)\nresult = any_int_test.any_int(3,\
    \ 5, 2)\n\n# Assert that the test failed and what it did with our expected result\n\
    assert result == expected, \"Incorrect result from any_int()!\"\nprint(\"Well\
    \ done!\")\n</cell>\n<cell>\n# Let's rerun our test but this time with different\
    \ inputs. We're going to use random values from the Python random module.\nimport\
    \ random\n\n# Create a list that holds random integers from 0 to 10\nrandom_list\
    \ = list()\nfor i in range(20):\n    random_list.append(random.randint(0, 10))\n\
    \n# Test our any_int function agains the random list\n_, expected = any_int_test.any_int(*random_list)\n\
    result = any_int_test.any_int(*random_list)\n\n# Assert that the test failed and\
    \ what it did with our expected result\nassert result == expected, \"Incorrect\
    \ result from any_int()!\"\nprint(\"Well done!\")\n</cell>\n<text>\nNow it's time\
    \ to talk about how Python packages help us organize our code. We already mentioned\
    \ that functions are a way to group related code together. By defining a function\
    \ in a package, we are able to call this function in multiple other python scripts,\
    \ and if we have any test cases, we can easily run them in any IDE (like PyCharm)\
    \ without having to copy-paste code!\n\nAs an example, a package that we've been\
    \ using to organize our code is called any_int_test. Let's use that to test our\
    \ any_int() function.\n\n\n</text>\n<cell>\nimport any_int_test\n\n# Create a\
    \ list that holds random integers from 0 to 10\nrandom_list = list()\nfor i in\
    \ range(20):\n    random_list.append(random.randint(0, 10))\n\n# Test our any_int\
    \ function agains the random list\n_, expected = any_int_test.any_int(*random_list)\n\
    result = any_int_test.any_int(*random_list)\n\n# Assert that the test failed and\
    \ what it did with our expected result\nassert result == expected, \"Incorrect\
    \ result from any_int()!\"\nprint(\"Well done!\")\n</cell>\n<text>\nIn the above\
    \ example, our any_int() function is located in the any_int_test package. Let's\
    \ rerun our test but this time with different inputs. We're going to use random\
    \ values from the Python random module.\n\n\n</text>\n<cell>\nimport random\n\n\
    # Create a list that holds random integers from 0 to 10\nrandom_list = \nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx082bu6u_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073906
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == float64(x + y)) && (x == float64(x + z)) && (x == float64(x +\
    \ y))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpa91b1gp7_test.go:21:13: redundant and: x == float64(x+y) && x == float64(x+y)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 {\n        return y == z\n    }\n    return x == y || (x == z &&\
    \ y == 0)\n}\n`\n        expectedOutput = []byte(`package test\n\nimport \"testing\"\
    \n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmp_m2aj235_test.go:26:1: expected declaration,\
    \ found `\n        expectedOutput = []byte(`\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y > x || y < 0 || z > x || z < 0 {\n        return false\n   \
    \ }\n    if x < y {\n        if x == y && z == x {\n            return true\n\
    \        }\n        if x == y {\n            return true\n        }\n        return\
    \ false\n    }\n    if x > z {\n        if x == y && z == x {\n            return\
    \ true\n        }\n        if x == y {\n            return false\n        }\n\
    \        return true\n    }\n    return true\n}\n`\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkzjg6nhw_test.go:44:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y+z {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpie8bjsrh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpie8bjsrh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpie8bjsrh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073904
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    return\
    \ math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwtezu85_test.go:25:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return x\
    \ == y + z\n}\n</code>\n<|/ a tags=go,floating-point |>\n<| a tags=go,floating-point\
    \ |>\nThe simplest way to check whether a number is within a certain range is\
    \ to compare it to an upper and lower bound. There are a number of ways to do\
    \ this, but a commonly used method is to use math/cmp.\nFor example:\n<code>\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmos2qmo6_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   z /= x\n    z /= y\n    if x == y {\n        return true\n    }\n    return\
    \ z == 0 || x == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpw2xgxaxl_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpw2xgxaxl_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpw2xgxaxl_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpw2xgxaxl_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpw2xgxaxl_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpw2xgxaxl_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x != y && x != z && y != z {\n        return false\n    }\n    if x !=\
    \ x && y != y {\n        return false\n    }\n    if x == x && y == y && z ==\
    \ z {\n        return true\n    }\n    return false\n}\n</cell>\n<text>\nTesting\
    \ this function\n\n\n</text>\n<cell>\nany_int_test.any_int_test(any_int, 3.5,\
    \ 3.5, 3.5, 3.5)\n</cell>\n<text>\nExercise: Implement a function that tests if\
    \ the first two numbers are equal, and returns true if so.  If the first two numbers\
    \ are not equal, the function should return false.  If the first two numbers are\
    \ equal, but are not both integers, return false.  If the first two numbers are\
    \ equal and are both integers, return true.  All numbers should be integers.\n\
    \n\n</text>\n<cell>\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjjghqygo_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   result := x * y + z == x + y\n    if result {\n        if x == int(x && y\
    \ && z) {\n            return true\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a tags=math,go,numbers,function dscore=4 |>\n<| a tags=math,go,numbers,function\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"strings\"\
    \n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpei_6tw0j_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Convert all numbers to integers first.\n    x := int(math.Floor(x))\n \
    \   y := int(math.Floor(y))\n    z := int(math.Floor(z))\n\n    // Check that\
    \ all numbers are integers.\n    if x == 0 || y == 0 || z == 0 {\n        fmt.Println(\"\
    x: \", x, \"| y: \", y, \"| z: \", z)\n        panic(\"any_int: All values should\
    \ be integer numbers!\")\n    }\n\n    // Check that all numbers are equal to\
    \ each other.\n    if x != y && x != z {\n        return true\n    }\n    if y\
    \ != z {\n        return true\n    }\n\n    // Return true if all numbers are\
    \ equal to the sum.\n    if x+y == z {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9l9e2m7_test.go:22:7: no new variables on left side of :=

    /tmp/tmpx9l9e2m7_test.go:22:14: undefined: math

    /tmp/tmpx9l9e2m7_test.go:23:7: no new variables on left side of :=

    /tmp/tmpx9l9e2m7_test.go:23:14: undefined: math

    /tmp/tmpx9l9e2m7_test.go:24:7: no new variables on left side of :=

    /tmp/tmpx9l9e2m7_test.go:24:14: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if y == z {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp1uleulgf_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp1uleulgf_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp1uleulgf_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp1uleulgf_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp1uleulgf_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp1uleulgf_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == 0 || y == 0 || z == 0) || (x < 0 || y < 0 || z < 0) || (x == y ||\
    \ x == z) {\n        return true\n    }\n    return false\n}\n`\n\t})\n\tdefer\
    \ testdir.Cleanup()\n\n\ttestdir.Run(t, \"\", func(t *testing.T) {\n\t\terr :=\
    \ testdir.MkTmpDir()\n\t\trequire.NoError(t, err)\n\n\t\toutFile, err := ioutil.TempFile(\"\
    \", \"any_int_test.go\")\n\t\trequire.NoError(t, err)\n\n\t\t_, err = outFile.Write([]byte(code))\n\
    \t\trequire.NoError(t, err)\n\t\trequire.NoError(t, outFile.Close())\n\t\tdefer\
    \ func() {\n\t\t\trequire.NoError(t, outFile.Close())\n\t\t}()\n\n\t\tcmd := exec.Command(\"\
    go\", \"build\", \"-o\", outFile.Name(), \"./\")\n\t\tcmd.Dir = testdir.TempDir()\n\
    \t\tcmd.Stdout = os.Stdout\n\t\tcmd.Stderr = os.Stderr\n\t\terr = cmd.Run()\n\t\
    \trequire.NoError(t, err)\n\n\t\trequire.Equal(t, false, any_int(1, 2, 3))\n\t\
    \trequire.Equal(t, true, any_int(1, 3, 3))\n\t\trequire.Equal(t, true, any_int(1,\
    \ 2, 4))\n\t\trequire.Equal(t, true, any_int(3, 2, 2))\n\t\trequire.Equal(t, false,\
    \ any_int(3, -2, 1))\n\t\trequire.Equal(t, false, any_int(3.6, -2.2, 2))\n\t})\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfi38_aaf_test.go:26:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073907
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return z == x && z == y\n    }\n    return false\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpbxljzkq3_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpbxljzkq3_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpbxljzkq3_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpbxljzkq3_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpbxljzkq3_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpbxljzkq3_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    if x <\
    \ 0 || y < 0 || z < 0 {\n        return false\n    }\n\n    return any_int(int(x),\
    \ int(y), int(z))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8nn2g3g_test.go:29:20: cannot use int(x) (value of type int) as type
    float64 in argument to any_int

    /tmp/tmpl8nn2g3g_test.go:29:28: cannot use int(y) (value of type int) as type
    float64 in argument to any_int

    /tmp/tmpl8nn2g3g_test.go:29:36: cannot use int(z) (value of type int) as type
    float64 in argument to any_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073908
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   z := (x + y + z) / 3.0\n    return x >= z && x <= z &&\n        y >= z &&\
    \ y <= z &&\n        z >= z && z <= z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1txhf24j_test.go:21:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 && y == 0 && z == 0 {\n        return true\n    }\n    if x == 0\
    \ || y == 0 || z == 0 {\n        return false\n    }\n    return x == y+z\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmplfwcv5bt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmplfwcv5bt_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmplfwcv5bt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    total :=\
    \ x + y + z\n    return !(x != total || y != total || z != total)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpairoeblv_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpairoeblv_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpairoeblv_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpairoeblv_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpairoeblv_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x %= 1\n    y %= 1\n    z %= 1\n    return ((x*x + y*y + z*z) == (x+y+z))\
    \ || ((x*x + y*y) == (x+y)) || ((x*x + y*y + z*z) == (x+y+z))\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipmcu8qx_test.go:21:5: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmpipmcu8qx_test.go:22:5: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmpipmcu8qx_test.go:23:5: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0.0 || y == 0.0 || z == 0.0 {\n        return false\n    }\n    \n\
    \    return ((x == y) || (x == z)) && x != 0.0\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpzujv5ch3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpzujv5ch3_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpzujv5ch3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpzujv5ch3_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpzujv5ch3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpzujv5ch3_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpzujv5ch3_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return any_int_test(float64(x), float64(y), float64(z))\n}\n\nvar any_int_tests\
    \ = []bool{\n    true, false, true,\n    true, true, true,\n    false, false,\
    \ false,\n    false, true, false,\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld1df7pb_test.go:21:12: undefined: any_int_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x >= y && x >= z && y >= z {\n        if x > y && x > z {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq4ipurn4_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpq4ipurn4_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpq4ipurn4_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true // or x == z\n    }\n    if x < y {\n   \
    \     return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp3v7ettke_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp3v7ettke_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp3v7ettke_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3v7ettke_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp3v7ettke_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp3v7ettke_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    s := x\
    \ + y + z\n    if s == x || s == y || s == z {\n        return true\n    }\n\n\
    \    return false\n}\n</cell>\n<text>\nExercise 2\nCreate two functions to perform\
    \ arithmetic operations. Each function should take a value x and y as inputs and\
    \ return the result.\n\nThe function sum(x, y) should return the sum of x and\
    \ y\nThe function mul(x, y) should return the product of x and y\n\n\n</text>\n\
    <text>\nExercise 3\nWrite a function called my_sqrt(x) which returns the square\
    \ root of x. Your function should handle cases where x is 0 or negative.\n\n\n\
    </text>\n<text>\nExercise 4\nWrite a function called factorial(x) that takes an\
    \ integer x and returns the factorial of x. Your function should handle cases\
    \ where x is 0 or negative.\n\n\n</text>\n<text>\nExercise 5\nWrite a function\
    \ called my_ceil(x) that returns the ceiling of x.\n\n\n</text>\n<text>\nExercise\
    \ 6\nWrite a function called my_floor(x) that returns the floor of x.\n\n\n</text>\n\
    <text>\nExercise 7\nWrite a function called my_round(x) that returns the nearest\
    \ integer to x.\n\n\n</text>\n<text>\nExercise 8\nWrite a function called my_exp(x)\
    \ that returns the base 10 exponent of x.\n\n\n</text>\n<text>\nExercise 9\nWrite\
    \ a function called my_log(x) that returns the base e logarithm of x.\n\n\n</text>\n\
    <text>\nExercise 10\nWrite a function called my_pow(x, y) that returns the base^y\
    \ power of x.\n\n\n</text>\n<text>\nExercise 11\nWrite a function called my_sqrt(x)\
    \ which returns the square root of x. Your function should handle cases where\
    \ x is 0 or negative.\n\n\n</text>\n<text>\nExercise 12\nWrite a function called\
    \ my_factorial(x) that takes an integer x and returns the factorial of x. Your\
    \ function should handle cases where x is 0 or negative.\n\n\n</text>\n<text>\n\
    Exercise 13\nWrite a function called my_ceil(x) that returns the ceiling of x.\n\
    \n\n</text>\n<text>\nExercise 14\nWrite a function called my_floor(x) that returns\
    \ the floor of x.\n\n\n</text>\n<text>\nExercise 15\nWrite a function called my_round(x)\
    \ that returns the nearest integer to x.\n\n\n</text>\n<text>\nExercise 16\nWrite\
    \ a function called my_exp(x) that returns the base 10 exponent of x.\n\n\n</text>\n\
    <text>\nExercise 17\nWrite a function called my_log(x) that returns the base e\
    \ logarithm of x.\n\n\n</text>\n<text>\nExercise 18\nWrite a function called my_pow(x,\
    \ y) that returns the base^y power of x.\n\n\n</text>\n<text>\nExercise 19\nWrite\
    \ a function called my_\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp59a1adpi_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == 0 || y == 0 || z == 0) || (x == y && y == z) {\n        return true\n\
    \    }\n    if x < y && x < z {\n        return any_int(y, z, x)\n    } else if\
    \ y < z && y < x {\n        return any_int(z, x, y)\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp8eyd6_72_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp8eyd6_72_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp8eyd6_72_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp8eyd6_72_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp8eyd6_72_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp8eyd6_72_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x := int(x)\n    y := int(y)\n    z := int(z)\n    return (x | y | z) == (x\
    \ + y + z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw3vz4pyz_test.go:21:7: no new variables on left side of :=

    /tmp/tmpw3vz4pyz_test.go:21:10: cannot use int(x) (value of type int) as type
    float64 in assignment

    /tmp/tmpw3vz4pyz_test.go:22:7: no new variables on left side of :=

    /tmp/tmpw3vz4pyz_test.go:22:10: cannot use int(y) (value of type int) as type
    float64 in assignment

    /tmp/tmpw3vz4pyz_test.go:23:7: no new variables on left side of :=

    /tmp/tmpw3vz4pyz_test.go:23:10: cannot use int(z) (value of type int) as type
    float64 in assignment

    /tmp/tmpw3vz4pyz_test.go:24:13: invalid operation: operator | not defined on x
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return !(x < 0 || y < 0 || z < 0 || x == y || x == z || y == z)\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpbje7yiy1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpbje7yiy1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpbje7yiy1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpbje7yiy1_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpbje7yiy1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpbje7yiy1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || (x + y == z && IsInteger(x))\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kozys4a_test.go:21:37: undefined: IsInteger

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return ((x + y == z) && (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0))\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuml4nouj_test.go:21:30: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmpuml4nouj_test.go:21:46: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmpuml4nouj_test.go:21:62: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == sum(y, z)) && (is_integer(x) && is_integer(y) && is_integer(z))\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplmvo049_test.go:21:18: undefined: sum

    /tmp/tmpplmvo049_test.go:21:33: undefined: is_integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a tags=go,testing |>\n<| c |>\n`func any_int(x int, y int, z int) bool` would\
    \ be more idiomatic (and shorter).\n<|/ c |>\n<| c |>\nThe downside is that you\
    \ also have to add `type Any int` to every place you want to use this function.\n\
    <|/ c |>\n<| c |>\nYou could also just declare it as `func any_int(x interface{},\
    \ y interface{}, z interface{}) bool`\n<|/ c |>\n<| a |>\nI personally use \n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf4wlyo7k_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 {\n        return true\n    }\n    return (x == y + z)\
    \ || (x == y + z && y != 0)\n}\n`\n\nvar any_int_test_golang = `\npackage any_int_test\n\
    \nimport \"testing\"\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51bol9f7_test.go:26:1: expected declaration, found `


    var any_int_test_golang = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073909
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n    if x+y+z !=\
    \ x+y+z {\n        return false\n    }\n    if x > int64(float64(y)) || y > int64(float64(z))\
    \ {\n        return false\n    }\n    if x > int64(float64(x)) || y > int64(float64(z))\
    \ {\n        return false\n    }\n    if x < int64(float64(y)) || y < int64(float64(z))\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ignmu0e_test.go:27:12: invalid operation: x > int64(float64(y)) (mismatched
    types float64 and int64)

    /tmp/tmp0ignmu0e_test.go:27:37: invalid operation: y > int64(float64(z)) (mismatched
    types float64 and int64)

    /tmp/tmp0ignmu0e_test.go:30:12: invalid operation: x > int64(float64(x)) (mismatched
    types float64 and int64)

    /tmp/tmp0ignmu0e_test.go:30:37: invalid operation: y > int64(float64(z)) (mismatched
    types float64 and int64)

    /tmp/tmp0ignmu0e_test.go:33:12: invalid operation: x < int64(float64(y)) (mismatched
    types float64 and int64)

    /tmp/tmp0ignmu0e_test.go:33:37: invalid operation: y < int64(float64(z)) (mismatched
    types float64 and int64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    return x\
    \ == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpyhkbgg1c_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpyhkbgg1c_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpyhkbgg1c_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpyhkbgg1c_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpyhkbgg1c_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    sum := x\
    \ + y + z\n    if sum < 0 {\n        sum *= -1\n    }\n    return true\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpn2jl9dpg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpn2jl9dpg_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpn2jl9dpg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpn2jl9dpg_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpn2jl9dpg_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x := int(math.Trunc(x))\n    y := int(math.Trunc(y))\n    z := int(math.Trunc(z))\n\
    \n    if x+y == z {\n        return true\n    }\n\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcmx11z5v_test.go:21:7: no new variables on left side of :=

    /tmp/tmpcmx11z5v_test.go:21:14: undefined: math

    /tmp/tmpcmx11z5v_test.go:22:7: no new variables on left side of :=

    /tmp/tmpcmx11z5v_test.go:22:14: undefined: math

    /tmp/tmpcmx11z5v_test.go:23:7: no new variables on left side of :=

    /tmp/tmpcmx11z5v_test.go:23:14: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == sum(x, y) && isInt(x) && isInt(y) && isInt(z)) || x == sum(y,\
    \ z) && isInt(x) && isInt(y) && isInt(z) || y == sum(x, z) && isInt(x) && isInt(y)\
    \ && isInt(z)\n}\n`\n    )\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4xjp3dy__test.go:23:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x != y && x != z {\n        return false\n    }\n\n    if x == y && x ==\
    \ z {\n        return true\n    }\n\n    if x < y && x < z {\n        return true\n\
    \    }\n\n    if y < x && y < z {\n        return true\n    }\n\n    if x < y\
    \ && y < z {\n        return false\n    }\n\n    if y < x && x < z {\n       \
    \ return false\n    }\n\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp99imk509_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp99imk509_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp99imk509_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp99imk509_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp99imk509_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp99imk509_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z && y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpm3oaf5uk_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpm3oaf5uk_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpm3oaf5uk_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpm3oaf5uk_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpm3oaf5uk_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpm3oaf5uk_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpklqh4lwo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpklqh4lwo_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpklqh4lwo_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x >= x && y >= y && z >= z && z == x+y+z\n}\n`\n\nvar goFile = `\n\
    package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcpl6vuo0_test.go:23:1: expected declaration, found `


    var goFile = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n    if x == z {\n        return true\n\
    \    }\n    return false\n}\n`\n\tif _, err := NewParser(test.in, test.lang, test.out);\
    \ err != nil {\n\t\tt.Fatalf(\"NewParser: %v\", err)\n\t}\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqsuci0aq_test.go:29:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    x /= z\n\
    \    y /= z\n    if x < y {\n        return false\n    }\n    if x > y {\n   \
    \     return true\n    }\n    if x == y {\n        return true\n    }\n    if\
    \ x == 0 || y == 0 {\n        return false\n    }\n    return any_int(x/y, y,\
    \ z/x)\n}\n\"\"\"\n        my_program = make_program(program)\n        my_program.add_function(\"\
    any_int\", function_info)\n        my_program.add_function(\"any_int_test\", function_info)\n\
    \        return my_program.build()\n\n    def test_any_int_test_returns_true_when_the_numbers_are_equal(self):\n\
    \        program = \"\"\"\npackage any_int_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkqoxrwrn_test.go:40:1: expected declaration, found ""

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == x+y && x == x+z && y == y+z && x%1 == 0 && y%1 == 0 && z%1 ==\
    \ 0)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2t1pilay_test.go:21:49: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmp2t1pilay_test.go:21:61: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmp2t1pilay_test.go:21:73: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            // We already know that x !=\
    \ z, so we can just return that here.\n            return true\n        }\n  \
    \      if y < z {\n            return false\n        }\n        if x < z {\n \
    \           return false\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmphed052kh_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmphed052kh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmphed052kh_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmphed052kh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmphed052kh_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmphed052kh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Do the arithmetic and return the result.\n    return x == float64(y + z)\
    \ && y == float64(x + z) && z == float64(x + y)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpt3ky4hsq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpt3ky4hsq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpt3ky4hsq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpt3ky4hsq_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpt3ky4hsq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y != z {\n        return false\n    }\n    if x != x {\n        return\
    \ false\n    }\n    if y != y {\n        return false\n    }\n    if z != z {\n\
    \        return false\n    }\n    if x != int(x) {\n        return false\n   \
    \ }\n    if y != int(y) {\n        return false\n    }\n    if z != int(z) {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdp6wbnvk_test.go:33:13: invalid operation: x != int(x) (mismatched types
    float64 and int)

    /tmp/tmpdp6wbnvk_test.go:36:13: invalid operation: y != int(y) (mismatched types
    float64 and int)

    /tmp/tmpdp6wbnvk_test.go:39:13: invalid operation: z != int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n    return (x +\
    \ y + z) == (x * y * z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n\
    \        tmpst9h2q_j_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpst9h2q_j_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpst9h2q_j_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpst9h2q_j_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == 0 || y == 0 || z == 0) && x >= 0 && y >= 0 && z >= 0 {\n        return\
    \ true\n    }\n    // Return false if any of the numbers is not an integer.\n\
    \    for _, x := range []float64{x, y, z} {\n        if x == 0 || x == 1 {\n \
    \           return false\n        }\n    }\n    // Return true only if all three\
    \ numbers are integers.\n    return x == x + y && x == x + z\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp2es3ckfj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp2es3ckfj_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp2es3ckfj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp2es3ckfj_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp2es3ckfj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x > y && x > z {\n        if y > z {\n            return true\n       \
    \ }\n        return false\n    }\n    if y > x && y > z {\n        return true\n\
    \    }\n    if z > x && z > y {\n        return true\n    }\n    return false\n\
    }\n`\n    )\n    out, err := os.Create(test.name)\n    if err != nil {\n     \
    \   t.Fatalf(\"Unable to write test file: %v\", err)\n    }\n    defer out.Close()\n\
    \n    err = out.Write(data)\n    if err != nil {\n        t.Fatalf(\"Unable to\
    \ write test file: %v\", err)\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiqq_rpe2_test.go:35:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y || x == z) && x == x\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpi_s0zc61_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpi_s0zc61_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmpi_s0zc61_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpi_s0zc61_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpi_s0zc61_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpi_s0zc61_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpi_s0zc61_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            fmt.Println(\"x==z\")\n    \
    \        return true\n        } else {\n            fmt.Println(\"z==x\")\n  \
    \          return false\n        }\n    }\n\n    fmt.Println(\"x!=y\")\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x!=y\nx!=y\nx!=y\nx!=y\nx!=y\nx==z\nx!=y\nx!=y\nx!=y\nx!=y\n--- FAIL: TestAny_Int\
    \ (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n        tmptrm76t2t_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmptrm76t2t_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmptrm76t2t_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmptrm76t2t_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmptrm76t2t_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmptrm76t2t_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x > y && x > z {\n        return true\n    }\n    if y > x && y > z {\n\
    \        return true\n    }\n    if z > x && z > y {\n        return true\n  \
    \  }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7vq1qp7x_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7vq1qp7x_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp7vq1qp7x_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp7vq1qp7x_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y+z {\n        return true\n    }\n    return false\n}\n`\n\nvar any_int_func_string\
    \ = `\npackage any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ioohawa_test.go:26:1: expected declaration, found `


    var any_int_func_string = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == sum(x, y)) && is_int(x)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5cfr2677_test.go:21:18: undefined: sum

    /tmp/tmp5cfr2677_test.go:21:32: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y != z {\n        return false\n    }\n    if x < 0 || x > 1 {\n    \
    \    return false\n    }\n    if y < 0 || y > 1 {\n        return false\n    }\n\
    \    if x < y || x > z {\n        return false\n    }\n    if y < x || y > z {\n\
    \        return false\n    }\n    if x == y && z == 1 {\n        return true\n\
    \    }\n    if x == z && y == 1 {\n        return true\n    }\n    return false\n\
    }\n`)\n    b.WriteGoFile(\"any_int_test.go\", \"any_int_test\", \"\")\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc6774i76_test.go:44:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        return true\n    }\n\n    if x == z {\n        return\
    \ true\n    }\n\n    if y == z {\n        return true\n    }\n\n    if x == 0\
    \ || y == 0 || z == 0 || x == y || y == z || x == z || y > z {\n        return\
    \ false\n    }\n\n    if x < 0 || y < 0 || z < 0 {\n        return false\n   \
    \ }\n\n    if x > 0 && y > 0 && z > 0 && x > y && y > z && z > x {\n        return\
    \ true\n    }\n\n    if x <= 0 && y <= 0 && z <= 0 && x <= y && y <= z && z <=\
    \ x {\n        return true\n    }\n\n    if x < y && y < z && z < x {\n      \
    \  return true\n    }\n\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpeg38wm03_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpeg38wm03_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpeg38wm03_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpeg38wm03_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpeg38wm03_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z && x != 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpn7cdi_g9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpn7cdi_g9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpn7cdi_g9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpn7cdi_g9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpn7cdi_g9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpn7cdi_g9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x > y {\n        if y > z {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if y > z {\n     \
    \       return false\n        } else {\n            return true\n        }\n \
    \   }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpws4g2cpg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpws4g2cpg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpws4g2cpg_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpws4g2cpg_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpws4g2cpg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpws4g2cpg_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == x+y || x == x+z || y == y+z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp4kecg61f_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp4kecg61f_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp4kecg61f_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp4kecg61f_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp4kecg61f_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // If x equals y, and x equals z and y equals z then return true.\n    //\
    \ Otherwise, return false.\n    return x == y && x == z && y == z\n}\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp4k6zdbbv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp4k6zdbbv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp4k6zdbbv_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp4k6zdbbv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp4k6zdbbv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp4k6zdbbv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // If not all numbers are integers, return false regardless of whether the\n\
    \    // other numbers are equal.\n    if !(is_int(x) && is_int(y) && is_int(z))\
    \ {\n        return false\n    }\n    // If one is equal to the sum of the other\
    \ two, return true.\n    if x == y || x == z {\n        return true\n    }\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxof5qkk_test.go:23:10: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z && x > 0 && y > 0 && z > 0 {\n        return true\n    }\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpzd6q2wzb_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpzd6q2wzb_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpzd6q2wzb_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n`\n\nvar test_any_int_no_code = `package\
    \ any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1jydm8x6_test.go:23:1: expected declaration, found `


    var test_any_int_no_code = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        fmt.Println(\"x == y && y == z\")\n       \
    \ return true;\n    }\n    if x > y || y > z {\n        fmt.Println(\"x > y ||\
    \ y > z\")\n        return false;\n    }\n    if x < y || y < z {\n        fmt.Println(\"\
    x < y || y < z\")\n        return true;\n    }\n    if x == y && y == z {\n  \
    \      fmt.Println(\"x == y && y == z\")\n        return true;\n    }\n    if\
    \ x == z {\n        fmt.Println(\"x == z\")\n        return true;\n    }\n   \
    \ if y != z {\n        fmt.Println(\"y != z\")\n        return false;\n    }\n\
    \    if x == 0 || y == 0 || z == 0 {\n        fmt.Println(\"x == 0 || y == 0 ||\
    \ z == 0\")\n        return false;\n    }\n    if x == y && y == z && x == z {\n\
    \        fmt.Println(\"x == y && y == z && x == z\")\n        return true;\n \
    \   }\n    if x > y && x < z && y > z {\n        fmt.Println(\"x > y && x < z\
    \ && y > z\")\n        return true;\n    }\n    if x < y && x > z && y < z {\n\
    \        fmt.Println(\"x < y && x > z && y < z\")\n        return true;\n    }\n\
    \    if x == y && x == z && y == z {\n        fmt.Println(\"x == y && x == z &&\
    \ y == z\")\n        return true;\n    }\n    if x > y || x < z || y < z || y\
    \ > z {\n        fmt.Println(\"x > y || x < z || y < z || y > z\")\n        return\
    \ false;\n    }\n    if x == 0 || y == 0 || z == 0 {\n        fmt.Println(\"x\
    \ == 0 || y == 0 || z == 0\")\n        return false;\n    }\n    if x == y ||\
    \ y == z || x == z {\n        fmt.Println(\"x == y || y == z || x == z\")\n  \
    \      return true;\n    }\n    if x > y && x < z && y > z && z > x {\n      \
    \  fmt.Println(\"x > y && x < z && y > z && z > x\")\n        return true;\n \
    \   }\n    if x < y && x > z && y < z && z > x {\n        fmt.Println(\"x < y\
    \ && x > z && y < z && z > x\")\n        return true;\n    }\n    if x == y &&\
    \ x == z && y == z && z > x {\n        fmt.Println(\"x == y && x == z && y ==\
    \ z && z > x\")\n        return true;\n    }\n    if x > y && x < z && y > z &&\
    \ z < x {\n        fmt.Println(\"x > y && x < z && y > z && z < x\")\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_icf55kb_test.go:92:6: expected ''('', found TestAny_Int

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    if x == y || y == z\
    \ {\n        return false\n    }\n    if x < y && y < z {\n        return false\n\
    \    }\n    return true\n}\n`\n    func TestAllFunctions(t *testing.T) {\n   \
    \     c := new(Command)\n        c.AddImport(\"math\", \"math\")\n        out,\
    \ err := c.Run(true)\n        if err != nil {\n            t.Errorf(\"Unexpected\
    \ error from test: %v\", err)\n            return\n        }\n        fmt.Println(out)\n\
    \    }\n\n    func TestAllFunctions(t *testing.T) {\n        c := new(Command)\n\
    \        out, err := c.Run(true)\n        if err != nil {\n            t.Errorf(\"\
    Unexpected error from test: %v\", err)\n            return\n        }\n      \
    \  fmt.Println(out)\n    }\n\n    func TestAllFunctions(t *testing.T) {\n    \
    \    c := new(Command)\n        out, err := c.Run(true)\n        if err != nil\
    \ {\n            t.Errorf(\"Unexpected error from test: %v\", err)\n         \
    \   return\n        }\n        fmt.Println(out)\n    }\n\n    func TestAllFunctions(t\
    \ *testing.T) {\n        c := new(Command)\n        out, err := c.Run(true)\n\
    \        if err != nil {\n            t.Errorf(\"Unexpected error from test: %v\"\
    , err)\n            return\n        }\n        fmt.Println(out)\n    }\n\n   \
    \ func TestAllFunctions(t *testing.T) {\n        c := new(Command)\n        out,\
    \ err := c.Run(true)\n        if err != nil {\n            t.Errorf(\"Unexpected\
    \ error from test: %v\", err)\n            return\n        }\n        fmt.Println(out)\n\
    \    }\n\n    func TestAllFunctions(t *testing.T) {\n        c := new(Command)\n\
    \        out, err := c.Run(true)\n        if err != nil {\n            t.Errorf(\"\
    Unexpected error from test: %v\", err)\n            return\n        }\n      \
    \  fmt.Println(out)\n    }\n\n    func TestAllFunctions(t *testing.T) {\n    \
    \    c := new(Command)\n        out, err := c.Run(true)\n        if err != nil\
    \ {\n            t.Errorf(\"Unexpected error from test: %v\", err)\n         \
    \   return\n        }\n        fmt.Println(out)\n    }\n\n    func TestAllFunctions(t\
    \ *testing.T) {\n        c := new(Command)\n        out, err := c.Run(true)\n\
    \        if err != nil {\n            t.Errorf(\"Unexpected error from test: %v\"\
    , err)\n            return\n        }\n        fmt.Println(out)\n    }\n\n   \
    \ \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4l70bx8j_test.go:32:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum, err := check_integer(x, y, z)\n    if err != nil {\n        fmt.Println(err)\n\
    \        return false\n    }\n    return sum == x || sum == y || sum == z\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitb774b6_test.go:21:17: undefined: check_integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        if x%1 == 0 && y%1 == 0 && z%1 == 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfea8j_sw_test.go:22:12: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmpfea8j_sw_test.go:22:24: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmpfea8j_sw_test.go:22:36: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        if x == x {\n            return true\n    \
    \    } else {\n            return false\n        }\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpjmv0asau_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpjmv0asau_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpjmv0asau_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpjmv0asau_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpjmv0asau_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpjmv0asau_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   z := float64(z) + float64(y)\n    y := float64(y) + float64(x)\n    x := float64(x)\
    \ + float64(z)\n    if x == y || y == x || x == z {\n        fmt.Printf(\"any_int\
    \ got %v %v %v\\n\", x, y, z)\n    }\n    s := x == y || y == x || x == z\n  \
    \  return s\n}\n`\n\nvar all_int_test_go = `package all_int_test\n\nimport (\n\
    \    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5zb50e2f_test.go:30:1: expected declaration, found `


    var all_int_test_go = `

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n`\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm1d7865p_test.go:26:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x != 0 && y != 0 && z != 0 &&\n        float64(x+y+z) == float64(x+y+z)\
    \ &&\n        float64(x+y+z) == float64(x+y+z) &&\n        float64(x+y+z) == float64(x+y+z)\
    \ &&\n        float64(x+y+z) == float64(x+y+z) &&\n        float64(x+y+z) == float64(x+y+z)\
    \ &&\n        float64(x+y+z) == float64(x+y+z) &&\n        float64(x+y+z) == float64(x+y+z)\
    \ &&\n        float64(x+y+z) == float64(x+y+z) &&\n        float64(x+y+z) == float64(x+y+z)\
    \ &&\n        float64(x+y+z) == float64(x+y+z) &&\n        float64(x+y+z) == float64(x+y+z))\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp3r8u8mut_test.go:31:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:30:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:29:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:28:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:27:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:26:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:25:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:24:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:23:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    /tmp/tmp3r8u8mut_test.go:22:9: redundant and: float64(x+y+z) == float64(x+y+z)
    && float64(x+y+z) == float64(x+y+z)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z || x == z {\n        return true\n    }\n    if x != x\
    \ || y != y || z != z {\n        return false\n    }\n    x -= y\n    y -= z\n\
    \    z -= x\n    if (x/y == 0) || (y/z == 0) || (z/x == 0) {\n        return false\n\
    \    }\n    if x < 0 {\n        x, y = y, z\n    }\n    if y < 0 {\n        x,\
    \ y, z = z, x\n    }\n    if z < 0 {\n        x, y, z = z, x\n    }\n    for i\
    \ := 0; i < 6; i++ {\n        if x < y && y < z && z < x {\n            return\
    \ true\n        }\n        if x < z && z < y && y < x {\n            return true\n\
    \        }\n        if y < z && z < x && x < y {\n            return true\n  \
    \      }\n        if z < x && x < z && y < z {\n            return true\n    \
    \    }\n        if x < y && y < z && y < x {\n            return true\n      \
    \  }\n        if x < z && z < y && z < x {\n            return true\n        }\n\
    \        if y < z && y < x && x < z {\n            return true\n        }\n  \
    \      if z < x && x < y && z < y {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexc2wl9o_test.go:37:19: assignment mismatch: 3 variables but 2 values

    /tmp/tmpexc2wl9o_test.go:40:19: assignment mismatch: 3 variables but 2 values

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp77gqbm_1_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp77gqbm_1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < 0 || y < 0 || z < 0 {\n        return false\n    }\n    return ((x\
    \ + y + z) == (x+y+z)) || ((x*y + z*z) == (x*y+z*z))\n}\n`\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpva_rqg3w_test.go:26:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpikfrirbs_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpikfrirbs_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y || x == y-z {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp_ysgu_sf_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp_ysgu_sf_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp_ysgu_sf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp_ysgu_sf_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp_ysgu_sf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x := int(x)\n    y := int(y)\n    z := int(z)\n\n    return (x != 0 || y !=\
    \ 0 || z != 0) &&\n        (x < y && x < z && y < z)\n}\n\"\"\")\n\n    def test_any_int_package(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_int_test.pb.go\"\
    )\n\n    def test_any_int_package_errors(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_int_error_test.pb.go\", expect_errors=True)\n\
    \n    def test_any_int_proto_package(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_int_proto_test.pb.go\")\n\n    def test_any_int_proto_package_errors(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_int_proto_error_test.pb.go\"\
    , expect_errors=True)\n\n    def test_any_string_proto_package(self):\n      \
    \  self._write_testfile()\n        self.run_testfile(\"any_string_proto_test.pb.go\"\
    )\n\n    def test_any_string_proto_package_errors(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_string_proto_error_test.pb.go\", expect_errors=True)\n\
    \n    def test_any_string_proto_package(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_string_proto_test.pb.go\")\n\n    def test_any_string_proto_package_errors(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_string_proto_error_test.pb.go\"\
    , expect_errors=True)\n\n    def test_any_bool_proto_package(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_bool_proto_test.pb.go\")\n\n    def test_any_bool_proto_package_errors(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_bool_proto_error_test.pb.go\"\
    , expect_errors=True)\n\n    def test_any_enum_proto_package(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_enum_proto_test.pb.go\")\n\n    def test_any_enum_proto_package_errors(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_enum_proto_error_test.pb.go\"\
    , expect_errors=True)\n\n    def test_any_message_proto_package(self):\n     \
    \   self._write_testfile()\n        self.run_testfile(\"any_message_proto_test.pb.go\"\
    )\n\n    def test_any_message_proto_package_errors(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_message_proto_error_test.pb.go\", expect_errors=True)\n\
    \n    def test_any_string_proto_package(self):\n        self._write_testfile()\n\
    \        self.run_testfile(\"any_string_proto_test.pb.go\")\n\n    def test_any_string_proto_package_errors(self):\n\
    \        self._write_testfile()\n        self.run_testfile(\"any_string_proto_error_test.pb.go\"\
    , expect_errors=True)\n\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8mtp0c93_test.go:28:1: expected declaration, found ""

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var sumOfX float64\n    var sumOfY float64\n    var sumOfZ float64\n    if\
    \ x > 0 && y > 0 {\n        sumOfX = x + y\n        sumOfY = x + z\n        sumOfZ\
    \ = y + z\n    } else if x < 0 && y > 0 {\n        sumOfX = x - y\n        sumOfY\
    \ = x - z\n        sumOfZ = y - z\n    } else if x < 0 && y < 0 {\n        sumOfX\
    \ = x - y\n        sumOfY = y - z\n        sumOfZ = x - z\n    } else {\n    \
    \    return false\n    }\n    return (sumOfX == sumOfY && sumOfY == sumOfZ &&\
    \ isInt(sumOfX))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3szw0p9n_test.go:39:53: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y {\n        if x == z {\n            return true\n        }\n   \
    \     return false\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpx_xmx680_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpx_xmx680_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073690
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Check that all numbers are integers.\n    if x > 0 || x < 0 || y > 0 ||\
    \ y < 0 || z > 0 || z < 0 {\n        return false\n    }\n    // Return true if\
    \ either of the numbers is equal to the sum of the other two.\n    if x == 0 ||\
    \ y == 0 || z == 0 {\n        return false\n    }\n    return ((x + y + z) ==\
    \ (x + y + z * 3))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpinunmnv2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpinunmnv2_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpinunmnv2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpinunmnv2_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpinunmnv2_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z {\n        return true\n    }\n    if x == z {\n     \
    \   return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp077de39__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmp077de39__test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmp077de39__test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp077de39__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp077de39__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y {\n        x, y = y, x\n    }\n    if x < z {\n        x, z = z,\
    \ x\n    }\n    if y < z {\n        y, z = z, y\n    }\n    return x == y+z\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_m5_ro8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp8_m5_ro8_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp8_m5_ro8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum := x + y + z\n    return !(sum % 1.0)\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd958trzl_test.go:22:14: invalid operation: operator % not defined on sum
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y && x > z {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n\
    \        tmpp24yo5_0_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpp24yo5_0_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpp24yo5_0_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpp24yo5_0_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpppi857_n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpppi857_n_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpppi857_n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == 0 || y == 0 || z == 0) ||\n        (x == y || y == z || x ==\
    \ z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmplsw5wg5v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmplsw5wg5v_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmplsw5wg5v_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmplsw5wg5v_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmplsw5wg5v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y == z {\n        return true\n    } else {\n        return false\n \
    \   }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpxijt98ds_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpxijt98ds_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpxijt98ds_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpxijt98ds_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y+z) || (x==y) && (x==z)\n}\n</code>\n<|/ a dscore=1 tags=go\
    \ |>\n<| a tags=go |>\nI wrote a function which is very similar to the other answers\
    \ here but it works well for me.\n<code>\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppvokl7c9_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y || y == z {\n        return true\n    }\n    if x < 0 || y < 0 ||\
    \ z < 0 {\n        return false\n    }\n    return x >= y && y >= z\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpsoip64f1_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpsoip64f1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpsoip64f1_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpsoip64f1_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n    if x ==\
    \ y || x == z {\n        return true\n    }\n    return false\n}\n`),\n\t\t\t\
    },\n\t\t},\n\t\t{\n\t\t\tname:   \"any_int test 2\",\n\t\t\tinput:  \"package\
    \ any_int_test\",\n\t\t\toutput: `package any_int_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpf1r059l6_test.go:29:1: expected declaration,\
    \ found `),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"any_int test 2\",\n\t\t\t\
    input:  \"package any_int_test\",\n\t\t\toutput: `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == x+y && x == x+z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmprg2v2ujs_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmprg2v2ujs_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmprg2v2ujs_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmprg2v2ujs_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmprg2v2ujs_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n\n    if x == y || x == z {\n\
    \        return false\n    }\n\n    // Return false if any of the numbers is greater\
    \ than the sum of the other two.\n    if x > y+z {\n        return false\n   \
    \ }\n\n    if x > y || x > z {\n        return true\n    }\n\n    // Return false\
    \ if none of the numbers is greater than the sum of the other two.\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpxuta2atn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpxuta2atn_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpxuta2atn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x -= y\n    y -= z\n    z -= x\n    return x == z && y == z && is_int(x)\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstsqjzd__test.go:24:32: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 || y == 0 || z == 0 {\n        return false\n    }\n\n    if x ==\
    \ y + z {\n        return true\n    }\n\n    if x < 0 || y < 0 || z < 0 {\n  \
    \      return false\n    }\n\n    if x == y && y == z && z == 0 {\n        return\
    \ true\n    }\n\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp7xkm17u2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp7xkm17u2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp7xkm17u2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y || x == z || y == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpkogkkqrg_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpkogkkqrg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   t := float64(0)\n    if x > y {\n        t += x\n    }\n    if y > z {\n \
    \       t += y\n    }\n    if z > t {\n        t += z\n    }\n    return x ==\
    \ t || y == t || z == t\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpumexj4dd_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n        tmpumexj4dd_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpumexj4dd_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpumexj4dd_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y && x < z {\n        return true\n    }\n    if y < x && y < z {\n\
    \        return true\n    }\n    if z < x && z < y {\n        return true\n  \
    \  }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7x_6t26g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7x_6t26g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp7x_6t26g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp7x_6t26g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp7x_6t26g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Only need to check one condition here because if one condition is false,\
    \ the other must be true already.\n    return x >= y && y >= z && !(x%1 == 0 &&\
    \ y%1 == 0 && z%1 == 0)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wkpecww_test.go:22:34: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmp_wkpecww_test.go:22:46: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmp_wkpecww_test.go:22:58: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x < y && x < z {\n        return true\n    }\n    if y < x && y < z {\n\
    \        return true\n    }\n    if z < x && z < y {\n        return true\n  \
    \  }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp7x_6t26g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp7x_6t26g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp7x_6t26g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp7x_6t26g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmp7x_6t26g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Write your code here.\n    \n    // If the sum of three numbers is equal\
    \ to the sum of those numbers, return true\n    // Otherwise, return false\n \
    \   var a1 float64\n    var a2 float64\n    var a3 float64\n    \n    a1 = x +\
    \ y\n    a2 = x + z\n    a3 = y + z\n    \n    if a1 == a2 && a1 == a3 {\n   \
    \     return true\n    }\n    \n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpordmmovb_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpordmmovb_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__5\
    \ (0.00s)\n        tmpordmmovb_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpordmmovb_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmpordmmovb_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmpordmmovb_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y && y == y+z && x == x+z {\n        if math.Truncate(x) == x {\n\
    \            if math.Truncate(y) == y {\n                if math.Truncate(z) ==\
    \ z {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n</code>\n<|/ a tags=go,testing,testing |>\n\
    <| c |>\nThis does not work for me in golang 1.11.3, I get `panic: runtime error:\
    \ invalid memory address or nil pointer dereference` when I try to use this function.\n\
    <|/ c |>\n<| c |>\nI wonder why this answer was accepted then, since it doesn't\
    \ even compile (syntax errors). As far as I can see, there are now other answers\
    \ that do not work.\n<|/ c |>\n<| a tags=go,testing,testing |>\n<code>\npackage\
    \ any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2yftbox_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x := int(x)\n    y := int(y)\n    z := int(z)\n    return (x+y) == z\n}\n\
    `\n        )\n\n        output <- fmt.Sprintf(\n            `package any_int_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmpnkiqxssp_test.go:26:1: expected declaration,\
    \ found `\n        )\n\n        output <- fmt.Sprintf(\n            `\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == x+y && x == x+z && x == y+z\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmplf3pjm8t_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmplf3pjm8t_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmplf3pjm8t_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmplf3pjm8t_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmplf3pjm8t_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073916
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 && y == 0 && z == 0 {\n        return true\n    }\n    if x == 0\
    \ || y == 0 || z == 0 {\n        return false\n    }\n\n    if x != float64(x)\
    \ || y != float64(y) || z != float64(z) {\n        return false\n    }\n    if\
    \ x*x + y*y == z*z {\n        return true\n    }\n    return false\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is basically a very concise solution. I would argue that\
    \ `AnyInt` is more readable than `AnyIntAnyInt` however.\n<|/ c |>\n<| c |>\n\
    This solution works great! Just in case you are wondering, the reason why I used\
    \ `AnyIntAnyInt` was because I wanted to be able to pass 3 arguments and `AnyIntAnyInt`\
    \ takes only one argument. The solution by doesn't require you to pass 3 arguments\
    \ and is shorter.\n<|/ c |>\n<| a tags=go,testing,functional-testing dscore=5\
    \ |>\nAgree with the existing answers, a very simple solution is just using the\
    \ Go testing framework which provides builtin tests for exactly this use case\
    \ (a test for whether any of the arguments passed to a function is equal to some\
    \ value).\n<code>\npackage main\n\nimport (\n    \"testing\"\n)\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpek2nk8og_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == x+y && y == y+z && z == z+x {\n        return true\n    }\n    return\
    \ false\n}\n</code>\n<|/ a dscore=4 tags=python,algorithm |>\n<| c |>\nThis approach\
    \ fails in some cases, e.g. `any_int(1.9, 2.8, 3.5)` returns `True`. However `any_int(2.8,\
    \ 3.5, 1.9)` should return `False`\n<|/ c |>\n<| c |>\nYeah, I wasn't trying to\
    \ be sophisticated here. It's been over 7 years, and I still haven't found a better\
    \ solution.\n<|/ c |>\n<| a tags=python,algorithm |>\nThis is more a hack than\
    \ an answer, but you can use regex:\n<code>\nimport re\n\ndef any_int(x,y,z):\n\
    \    int_pattern = re.compile(r'\\d+')\n    return bool(int_pattern.match(str(x))\
    \ + int_pattern.match(str(y)) + int_pattern.match(str(z)))\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nI think this approach is cleaner because you only have to import\
    \ the module once\n<|/ c |>\n<| c |>\nI see what you did there! I was thinking\
    \ too much about performance to think about that. Very clean indeed\n<|/ c |>\n\
    <| c |>\nI agree, I think regex is the right way to solve this problem and I don't\
    \ think there is any performance impact at all.\n<|/ c |>\n<| c |>\nThis only\
    \ works if you have a fixed number of variables.  It fails on `any_int(1.9, 2.8,\
    \ 3.5)` returning `True` instead of `False`\n<|/ c |>\n<| a tags=python,algorithm\
    \ dscore=3 |>\nMy approach would be to create three functions, one for each variable.\
    \  For example, all_int(x,y,z) returns true if all three are integers, else returns\
    \ false.  Then just call that one function to check against all three values.\n\
    <|/ a |>\n<| c |>\nI think this approach is cleaner because you only have to import\
    \ the module once\n<|/ c |>\n<| c |>\nThis is true, unless you have a lot of variables\
    \ to check.  My solution would become very unreadable very quickly.  I don't think\
    \ there is any performance impact at all.\n<|/ c |>\n<| c |>\nI agree, I think\
    \ regex is the right way to solve this problem and I don't think there is any\
    \ performance impact at all.\n<|/ c |>\n<| a dscore=3 |>\nI like using set for\
    \ this, since it handles duplicates as well as the expected behavior of the function\
    \ returning \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp39ah0_23_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if math.IsNaN(x) || math.IsNaN(y) || math.IsNaN(z) {\n        // The NaN is\
    \ accepted and counted as a number.\n        return true\n    }\n    if x == y\
    \ && y == z {\n        // If the numbers are equal, all numbers are equal, and\
    \ the numbers are integers.\n        return true\n    }\n    if x < y {\n    \
    \    // If the first number is less than the second, then it can't be the sum\
    \ of the other two.\n        return false\n    }\n    if y > z {\n        // If\
    \ the second number is less than the first, then it can't be the sum of the other\
    \ two.\n        return false\n    }\n    if x > y {\n        // If the third number\
    \ is less than the second, then it can't be the sum of the other two.\n      \
    \  return false\n    }\n    // If the numbers are the same or all numbers are\
    \ equal, then the numbers cannot be the sum of the other two.\n    return true\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmk2176c7_test.go:21:8: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == float64(x + y) && y == float64(x + z) && z == float64(y + z))\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpfzrn2tes_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpfzrn2tes_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpfzrn2tes_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpfzrn2tes_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpfzrn2tes_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073916
