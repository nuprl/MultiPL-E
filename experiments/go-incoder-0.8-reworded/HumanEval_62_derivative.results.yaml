language: go_test.go
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var dx []int\n\
    \    for _, x := range xs {\n        dx = append(dx, x*x)\n    }\n    return dx\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpow73cw8c_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=9) %!s(int=1) %!s(int=4) %!s(int=16) %!s(int=25)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpow73cw8c_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpow73cw8c_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=9) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpow73cw8c_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=9)\
    \ %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpow73cw8c_test.go:40: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return nil\n    }\n\n    var result []int\n\n    for i := 1; i\
    \ < len(xs); i++ {\n        result = append(result, xs[i] - xs[i-1])\n    }\n\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpy97n2jgf_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpy97n2jgf_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpy97n2jgf_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpy97n2jgf_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\n\
    \    var result []int\n    for i := 0; i < degree; i++ {\n        for j := i +\
    \ 1; j < degree; j++ {\n            result[j] = result[j-1] * xs[i] + xs[j] *\
    \ xs[j]\n        }\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpwld8nfg1_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpwld8nfg1_test.go:33\
    \ +0x50\ntesting.tRunner(0xc0000da1a0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs, len(xs)<2\
    \ {\n        return nil\n    }\n    var dst []int\n    dst := make([]int, len(xs)-1)\n\
    \    for i := 0; i < len(xs); i++ {\n        dst[i] = xs[i] - xs[i+1]\n    }\n\
    \    return dst\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp08ny9ndi_test.go:16:8: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative_result\
    \ := make([]int, len(xs)-1)\n    for i := 0; i < len(xs)-1; i++ {\n        derivative_result[i]\
    \ = xs[i+1] - xs[i]*xs[i+1]\n    }\n    return derivative_result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpepahlqhh_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=0) %!s(int=-4) %!s(int=-15)]'\n   \
    \ --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpepahlqhh_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=-3)]'\n    ---\
    \ FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpepahlqhh_test.go:40: expected\
    \ '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-4) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmpepahlqhh_test.go:40: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[%!s(int=-4) %!s(int=-1) %!s(int=0) %!s(int=4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return nil\n    }\n    y := make([]int, len(xs))\n    if len(xs)%2\
    \ == 1 {\n        y[len(xs)-1] = 1\n    }\n    for i := 0; i < len(xs)/2; i++\
    \ {\n        j := len(xs) - 1 - i\n        y[j] = xs[i]\n        y[j] += y[j]*xs[i+2]\n\
    \    }\n    return y\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpct1cfzmj_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpct1cfzmj_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=4)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpct1cfzmj_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpct1cfzmj_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res = []int{}\n\
    \    for _, x := range xs {\n        res += make([]int, len(xs)+1)\n        res[len(res)-1]\
    \ = x\n        for i := len(res) - 2; i >= 0; i-- {\n            res[i] = res[i+1]*res[i]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnhbr8bv_test.go:18:9: invalid operation: operator + not defined on res
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // if empty list\
    \ is provided, return empty list\n    if len(xs) == 0 {\n        return []int{}\n\
    \    }\n\n    // if single number is provided return it\n    if len(xs) == 1 {\n\
    \        return xs\n    }\n\n    // initialize derivative\n    der := make([]int,\
    \ len(xs))\n\n    // iterate from end and add to derivative\n    for i := len(xs)-1;\
    \ i >= 0; i-- {\n        der[i] = xs[i+1] * xs[i]\n    }\n\n    return der\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpp1d9y1v5_test.go:31\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpp1d9y1v5_test.go:44\
    \ +0x612\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs)-1)\n    ds[0], ds[len(xs)-1] = 1, 0\n    for i := 1; i < len(xs); i++\
    \ {\n        ds[i] = (float(xs[i-1]) - xs[i]) / xs[i-1]\n    }\n    return ds\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp62zng4dq_test.go:19:18: undefined: float

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        result[i] = xs[i]\n  \
    \      for j := i + 1; j < len(xs); j++ {\n            result[i] += xs[j] * result[j]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpiqg_s6d5_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpiqg_s6d5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpiqg_s6d5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpiqg_s6d5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpiqg_s6d5_test.go:43: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    dxs := make([]int,\
    \ len(xs))\n    if len(xs) == 0 {\n        return dxs\n    }\n    dxs[0] = 1\n\
    \    for i := 1; i < len(xs); i++ {\n        dxs[i] = dxs[i-1] * xs[i] - xs[i]\n\
    \    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp98o9if_4_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=0) %!s(int=-2) %!s(int=-12) %!s(int=-65)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp98o9if_4_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=0) %!s(int=-3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp98o9if_4_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=-1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp98o9if_4_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=-1) %!s(int=0) %!s(int=-4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp98o9if_4_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    m := len(xs) - 1\n    if m == 0 {\n      \
    \  return nil\n    }\n    product := 1\n    for i := m - 1; i > 0; i-- {\n   \
    \     product *= m\n    }\n    return append(make([]int, product), len(xs)-m-1)\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpz6obf2ka_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__1\
    \ (0.00s)\n        tmpz6obf2ka_test.go:47: expected '[%!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpz6obf2ka_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmpz6obf2ka_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int"
  timestamp: 1660074064
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if 0 == len(xs)\
    \ || 1 == len(xs) {\n        return xs\n    }\n    if 0 == len(xs) {\n       \
    \ return []int{1, 1}\n    }\n    if 1 == len(xs) {\n        return xs\n    }\n\
    \n    xs := append([]int{}, xs...)\n    x := xs[0]\n    xs = xs[1:]\n\n    d :=\
    \ []int{1, 1}\n    for i := 0; i < len(xs)-1; i++ {\n        x0 := xs[i]\n   \
    \     x1 := xs[i+1]\n        d = append(d, x1*x)\n        x += x0 - x1*x\n   \
    \ }\n    d = append(d, xs[i+1]*x)\n    return d\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00uqjw7c_test.go:26:8: no new variables on left side of :=

    /tmp/tmp00uqjw7c_test.go:37:22: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ || len(xs) < 2 {\n        return xs\n    }\n\n    var ds []int\n    for i :=\
    \ len(xs)-1; i >= 0; i-- {\n        ds = append(ds, xs[i+1] - xs[i]*xs[i-1])\n\
    \    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpx0zgvbky_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpx0zgvbky_test.go:34\
    \ +0x8e5\ntesting.tRunner(0xc000103380, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\n\
    \    var derivative []int\n    derivative := make([]int, degree)\n    for i :=\
    \ 0; i < degree; i++ {\n        if i == 0 {\n            derivative[i] = xs[i]\n\
    \        } else {\n            derivative[i] = derivative[i-1] * xs[i]\n     \
    \   }\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph3nca4jf_test.go:18:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{0, 0, 0}\n    }\n\n    p := make([]int, len(xs))\n\
    \    for i := range xs {\n        p[i] = 1\n    }\n    p := p[:]\n    p := append(p,\
    \ xs...)\n\n    for i := range p {\n        p[i] = p[i]*xs[i] - p[i-1]\n    }\n\
    \n    return p\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hktg7hw_test.go:24:7: no new variables on left side of :=

    /tmp/tmp6hktg7hw_test.go:25:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    deriv := make([]int, n+1)\n    deriv[0] = 1\n    for i := 0; i < n; i++ {\n\
    \        deriv[i+1] = deriv[i] * xs[i]\n    }\n    return deriv[n]\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq21ub36_test.go:22:12: cannot use deriv[n] (variable of type int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\n\
    \    result := make([]int, 0, degree)\n    if degree == 0 {\n        return nil\n\
    \    }\n    derivative := make([]int, degree)\n    result[0] = xs[0]\n    for\
    \ i := 1; i < degree; i++ {\n        derivative := append(derivative, xs[i-1]*xs[i]\
    \ - result[i-1]*result[i])\n        result = append(result, derivative)\n    }\n\
    \    return result\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=polynomials,go |>\n\
    I see that many people have posted a solution, but I would like to post a solution\
    \ that is more simple.\nJust write your polynomial as a string and just count\
    \ your symbols. Like that:\n<code>\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzg75schw_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    if n == 0 {\n        return nil\n    }\n\n    r := make([]int, n+1)\n   \
    \ r[n] = 1\n    for i := 1; i < n; i++ {\n        r[i] = xs[i]\n        for j\
    \ := n - 1; j > i; j-- {\n            r[i] += xs[j] * r[j]\n        }\n    }\n\
    \    return r\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpgw9b6tck_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpgw9b6tck_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpgw9b6tck_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpgw9b6tck_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpgw9b6tck_test.go:49: expected '[]', got '[%!s(int=0) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return xs\n    }\n    x := xs[0]\n    out := make([]int, len(xs))\n\
    \    for i := 0; i < len(xs); i++ {\n        out[i] = xs[i+1]\n    }\n    out[len(xs)-1]\
    \ = x\n    return out\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpsh8l5nfi_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpsh8l5nfi_test.go:35\
    \ +0x635\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0] = xs[0]\n    for i := 0; i < len(xs); i++ {\n        d[i+1]\
    \ = i * xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpgnbruiym_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpgnbruiym_test.go:31\
    \ +0x69f\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0] = xs[0]\n    d[len(xs)-1] = xs[len(xs)-1]\n\n    for i :=\
    \ 1; i < len(xs)-1; i++ {\n        d[i] = xs[i] - xs[i-1] * d[i-1]\n    }\n\n\
    \    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp687b2fko_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=-8) %!s(int=10) %!s(int=-16) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp687b2fko_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp687b2fko_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=-7) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp687b2fko_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=-7) %!s(int=15) %!s(int=-15) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp687b2fko_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    if n < 1 {\n        return []int{}\n    }\n    derivative := make([]int,\
    \ n)\n    derivative[0] = xs[0]\n    for i := 0; i < n; i++ {\n        derivative[i]\
    \ = derivative[i-1]\n    }\n    for i := 1; i < n; i++ {\n        derivative[i]\
    \ = derivative[i] - xs[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmptmjt5lv6_test.go:23\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmptmjt5lv6_test.go:38\
    \ +0x2ec\ntesting.tRunner(0xc000103520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    p := make([]int,\
    \ len(xs))\n    for i := range xs {\n        p[i] = 1\n    }\n    for i := 0;\
    \ i < len(xs); i++ {\n        for j := i+1; j < len(xs); j++ {\n            p[j]\
    \ += xs[i] * xs[j]\n        }\n    }\n    return p\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpqp4sn2cv_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=25) %!s(int=51)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpqp4sn2cv_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=10)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpqp4sn2cv_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=7) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpqp4sn2cv_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=7) %!s(int=6) %!s(int=1) %!s(int=25)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqp4sn2cv_test.go:45: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074065
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    dxs := make([]int,\
    \ len(xs))\n    dxs[0], dxs[1] = 0, 1\n    for i := 2; i < len(xs); i++ {\n  \
    \      dxs[i] = (dxs[i-1] * xs[i] - dxs[i-2]) * (xs[i] - 1)\n    }\n    return\
    \ dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp3xps_4yv_test.go:17\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp3xps_4yv_test.go:35\
    \ +0x279\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074065
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return xs\n    }\n    return append([]int{}, xs[1:]...)\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp421hkxu9_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp421hkxu9_test.go:39: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp421hkxu9_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp421hkxu9_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp421hkxu9_test.go:39: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs))\n    derivative[0] = 1\n    for i := 0; i < len(xs); i++\
    \ {\n        derivative[i+1] = derivative[i] * xs[i]\n    }\n    return derivative\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpg032t346_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpg032t346_test.go:31\
    \ +0x6ac\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    for _, x := range xs {\n        result = append(result, x*xs[len(xs)-1])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp2wazq0v9_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=15) %!s(int=5) %!s(int=10) %!s(int=20) %!s(int=25)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp2wazq0v9_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=6) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp2wazq0v9_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp2wazq0v9_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=12)\
    \ %!s(int=8) %!s(int=4) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp2wazq0v9_test.go:40: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073862
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    ds := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        ds = append(ds,\
    \ xs[i] - xs[i-1]*ds[i])\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpatxzx7ku_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpatxzx7ku_test.go:31\
    \ +0x495\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var xds []int\n\
    \    m := len(xs)\n    if m == 0 {\n        xds = []int{}\n        return xds\n\
    \    }\n\n    // xs[0], xs[1], xs[2] are the coefficients of x^0\n    // and xs[1]\
    \ and xs[2] are the coefficients of x^1.\n    var x0 int, x1 int\n    if xs[0]\
    \ != 0 {\n        x0 = xs[0]\n        xx0 := xs[0]\n    } else {\n        xx0\
    \ = 1\n        x0 = 1\n    }\n    if xs[1] != 0 {\n        x1 = xs[1]\n    } else\
    \ {\n        x1 = 0\n    }\n\n    xds = []int{}\n\n    for i := 0; i < m-1; i++\
    \ {\n        xds[i] = x0\n        xds[i+1] = xds[i] + x1*xs[i] + xds[i+1]*xs[i+1]\n\
    \    }\n    return xds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppkfnlavx_test.go:25:15: expected '';'', found '',''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    return make([]int,\
    \ len(xs)-1)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmps42seg49_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmps42seg49_test.go:36: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmps42seg49_test.go:36: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmps42seg49_test.go:36: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs))\n    derivative[0] = xs[0]\n    for i := 0; i < len(xs);\
    \ i++ {\n        derivative[i] = xs[i+1]\n    }\n    return derivative\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmphx8dctc5_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmphx8dctc5_test.go:31\
    \ +0x68c\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    if n < 1 {\n        return []int{}\n    }\n    derivative := make([]int,\
    \ n-1)\n    for i := 0; i < n; i++ {\n        // First term of i-th derivative.\n\
    \        derivative[i] = xs[i]\n\n        // Second term of i-th derivative.\n\
    \        derivative[i+1] = xs[i+1] * xs[i]\n    }\n    return derivative\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpawvd7qja_test.go:26\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpawvd7qja_test.go:38\
    \ +0x2c6\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs))\n    for i := range result {\n        result[i] = 1\n        for j\
    \ := range xs {\n            if i == j {\n                continue\n         \
    \   }\n            result[i] *= xs[j]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpzz6bu2qq_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=40) %!s(int=120) %!s(int=60) %!s(int=30) %!s(int=24)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzz6bu2qq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=6) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzz6bu2qq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzz6bu2qq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=24) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpzz6bu2qq_test.go:46: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // We use recursion\
    \ here.\n    if len(xs) == 0 {\n        return make([]int, 0)\n    }\n    dxs\
    \ := make([]int, len(xs))\n    dxs[0], dxs[len(xs)-1] = xs[0], xs[0]\n    for\
    \ i := 1; i < len(xs); i++ {\n        dxs[i] = (2*dxs[i-1] - dxs[i])/(xs[i]*xs[i-1])\n\
    \    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x503980, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503980, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpk5kyqdvm_test.go:23\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpk5kyqdvm_test.go:38\
    \ +0x6ed\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    derivative := make([]int, n)\n    for i := range derivative {\n        derivative[i]\
    \ = 1\n    }\n    for i := n - 2; i >= 0; i-- {\n        derivative [i] = derivative\
    \ [i + 1] * xs[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpbkmjmmnh_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=24) %!s(int=8) %!s(int=8) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbkmjmmnh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbkmjmmnh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=6) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbkmjmmnh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpbkmjmmnh_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs))\n    ds[0] = 1\n    for i := range xs {\n        ds[i+1] = xs[i]\n\
    \    }\n    ds[len(ds)-1] = 1\n    for i := range ds {\n        ds[i] *= ds[i]\n\
    \    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpol6q04i5_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpol6q04i5_test.go:35\
    \ +0x72c\ntesting.tRunner(0xc0000cc4e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res []int\n\
    \    res := make([]int, len(xs))\n\n    for i, x := range xs {\n        res[i]\
    \ = xs[i] - xs[i-1]\n    }\n\n    return res\n}\n</code>\n<code>\npackage derivative_test\n\
    \nimport (\n    \"testing\"\n)\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx_xp_ytr_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int,\
    \ n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] - d[i-1]\
    \ * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp8v7o_aou_test.go:21\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp8v7o_aou_test.go:39\
    \ +0x233\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\
    \ - 1\n    diff := make([]int, degree+1)\n    for i := 0; i < degree; i++ {\n\
    \        diff[i] = xs[i]\n    }\n    diff[degree] = 1\n    for i := degree; i\
    \ > 0; i-- {\n        diff[i] = diff[i-1] * xs[i] - diff[i]\n    }\n    return\
    \ diff\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpj0hdbh55_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=19)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpj0hdbh55_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=0) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpj0hdbh55_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpj0hdbh55_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj0hdbh55_test.go:45: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        panic(\"no derivative for polynomials\")\n    }\n\n    var dx []int\n\
    \    if len(xs) == 2 {\n        dx = []int{1, 0}\n    }\n    if len(xs) == 3 {\n\
    \        dx = []int{1, -2}\n    }\n    if len(xs) == 4 {\n        dx = []int{3,\
    \ -6, 1}\n    }\n    if len(xs) == 5 {\n        dx = []int{5, -36, 21, -16}\n\
    \    }\n    if len(xs) == 6 {\n        dx = []int{7, -703, 127, -2611, -53}\n\
    \    }\n\n    return append(dx,\n        xs[1]*derivative(xs[0:len(xs)-1]),\n\
    \        xs[2]*derivative(xs[0:len(xs)-2]),\n        xs[3]*derivative(xs[0:len(xs)-3]),\n\
    \        xs[4]*derivative(xs[0:len(xs)-4]),\n        xs[5]*derivative(xs[0:len(xs)-5]),\n\
    \        xs[6]*derivative(xs[0:len(xs)-6]))\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzvv8se2q_test.go:38:9: invalid operation: xs[1] * derivative(xs[0:len(xs)
    - 1]) (mismatched types int and []int)

    /tmp/tmpzvv8se2q_test.go:39:9: invalid operation: xs[2] * derivative(xs[0:len(xs)
    - 2]) (mismatched types int and []int)

    /tmp/tmpzvv8se2q_test.go:40:9: invalid operation: xs[3] * derivative(xs[0:len(xs)
    - 3]) (mismatched types int and []int)

    /tmp/tmpzvv8se2q_test.go:41:9: invalid operation: xs[4] * derivative(xs[0:len(xs)
    - 4]) (mismatched types int and []int)

    /tmp/tmpzvv8se2q_test.go:42:9: invalid operation: xs[5] * derivative(xs[0:len(xs)
    - 5]) (mismatched types int and []int)

    /tmp/tmpzvv8se2q_test.go:43:9: invalid operation: xs[6] * derivative(xs[0:len(xs)
    - 6]) (mismatched types int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    for _, x := range xs {\n        result = append(result, 1)\n        result\
    \ = append(result, x) // first derivate\n        result = append(result, x^2)\
    \ // x^2 derivative\n        result = append(result, x*(2-x)) // 2*x-x derivative\n\
    \        result = append(result, 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4uli29n7_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=-3) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=6) %!s(int=-8)\
    \ %!s(int=1) %!s(int=1) %!s(int=5) %!s(int=7) %!s(int=-15) %!s(int=1)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4uli29n7_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=-3) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4uli29n7_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=-3) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp4uli29n7_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=-3) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=4)\
    \ %!s(int=6) %!s(int=-8) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp4uli29n7_test.go:44: expected '[]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return nil\n    }\n\n    i := 0\n    for ; i < len(xs); i++ {\n\
    \        xs[i] += xs[i+1]\n    }\n\n    d := make([]int, len(xs)-1)\n    for i\
    \ := 0; i < len(xs); i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return\
    \ d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpit8b_06c_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpit8b_06c_test.go:39\
    \ +0x75f\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return xs\n    }\n    delta := make([]int, len(xs))\n    delta\
    \ := append(delta, 1)\n    delta := append(delta, int(xs[1]))\n    for i := 2;\
    \ i < len(xs); i++ {\n        delta[0] = delta[0]*xs[i] - delta[1]\n        delta[1]\
    \ = delta[1]\n    }\n    return delta\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3_8whv__test.go:20:11: no new variables on left side of :=

    /tmp/tmpj3_8whv__test.go:21:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    len, _ := len(xs),\
    \ len(xs) + len(xs)\n    result := make([]int, len)\n    last1 := make([]int,\
    \ len)\n    last2 := make([]int, len)\n    for i := 0; i < len; i++ {\n      \
    \  if i > 0 {\n            last2[i] = xs[i-1]\n        }\n        result[i] =\
    \ xs[i]\n        if i == 1 {\n            last1[i] = xs[i] - xs[i-1]\n       \
    \ }\n    }\n    for i := 0; i < len; i++ {\n        result[i] = result[i]*last1[i]\
    \ + last2[i]\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpgd9ivb_q_test.go:52: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpgd9ivb_q_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpgd9ivb_q_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpgd9ivb_q_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpgd9ivb_q_test.go:52: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // initialize\
    \ derivative vector to the first one\n    derivative := make([]int, 1, len(xs))\n\
    \    derivative[0] = xs[0]\n\n    // compute derivative\n    for i := 0; i < len(xs);\
    \ i++ {\n        derivative[0] *= xs[i]\n    }\n\n    return derivative\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpgeywzixh_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=360)]'\n    --- FAIL: TestDerivative/test_num__1\
    \ (0.00s)\n        tmpgeywzixh_test.go:45: expected '[%!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n     \
    \   tmpgeywzixh_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=18)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpgeywzixh_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpgeywzixh_test.go:45:\
    \ expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // empty case\n\
    \    if len(xs) == 0 {\n        return []int{}\n    }\n\n    // return the first\
    \ one and multiply it with all others.\n    return append([]int{}, xs...)\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpe2ydymxc_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpe2ydymxc_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpe2ydymxc_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpe2ydymxc_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpe2ydymxc_test.go:42: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074066
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    s := make([]int,\
    \ len(xs)+1)\n    s[0] = 1\n    for i := 1; i < len(xs); i++ {\n        s[i] =\
    \ s[i-1] * xs[i-1] + s[i]\n    }\n    return s[len(s)-1]\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7c8mp2n_test.go:21:12: cannot use s[len(s) - 1] (variable of type int)
    as type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074066
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        d[i] = xs[i+1] - xs[i]\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpp6vr5qt__test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpp6vr5qt__test.go:30\
    \ +0x67f\ntesting.tRunner(0xc0000cc4e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073861
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return xs\n    }\n    ds := make([]int, len(xs)-1)\n    ds[0],\
    \ ds[len(xs)-2], ds[len(xs)-1] = 0, 0, 1\n    for i, v := range xs {\n       \
    \ ds[i+1] = ds[i] * v\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp6a_bfgl4_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp6a_bfgl4_test.go:34\
    \ +0x85\ntesting.tRunner(0xc0000cc4e0, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074067
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 1 {\n        return nil\n    }\n    dxs := make([]int, len(xs))\n    degree\
    \ := len(xs) - 1 // degree of a polynomial is len(xs) - 1\n    d := degree //\
    \ 2\n    dxs[d] = xs[d]\n    for d > 0 {\n        if xs[d] != 0 {\n          \
    \  dxs[d] = dxs[d]*xs[d] + xs[d+1]\n        }\n        d -= 1 // decrement the\
    \ degree of the polynomial\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpe66gl6o9_test.go:25\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpe66gl6o9_test.go:39\
    \ +0x6a5\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074067
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var derivative\
    \ []int\n    if len(xs) < 1 {\n        return []int{}\n    }\n    var m int =\
    \ len(xs)\n    for m > 1 {\n        derivative := append(derivative, derivative(xs[m-1]))\n\
    \        xs = append(xs, 0)\n        m = m - 1\n    }\n    derivative := append(derivative,\
    \ derivative(xs[m-1]))\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp02nrtqfq_test.go:22:9: derivative declared but not used

    /tmp/tmp02nrtqfq_test.go:22:42: invalid operation: cannot call non-function derivative
    (variable of type []int)

    /tmp/tmp02nrtqfq_test.go:26:16: no new variables on left side of :=

    /tmp/tmp02nrtqfq_test.go:26:38: invalid operation: cannot call non-function derivative
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074067
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    dxs := make([]int,\
    \ len(xs))\n    degree := len(xs) // 2\n    for i := 0; i < degree; i++ {\n  \
    \      dxs[i+1] = (xs[i+1] - xs[i]) / (xs[i] - xs[i+1])\n    }\n    return dxs\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp069keviz_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp069keviz_test.go:31\
    \ +0x797\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var ds []int\n\
    \    for _, x := range xs {\n        ds = append(ds, x*x)\n    }\n    return ds\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpbbf_5g6f_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=9) %!s(int=1) %!s(int=4) %!s(int=16) %!s(int=25)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbbf_5g6f_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbbf_5g6f_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=9) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbbf_5g6f_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=9)\
    \ %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpbbf_5g6f_test.go:40: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074068
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return []int{}\n    }\n    result := make([]int, len(xs))\n   \
    \ derivativeResult := make([]int, len(xs))\n    var j int\n    for i := 0; i <\
    \ len(xs); i++ {\n        for j := 0; j < i; j++ {\n            derivativeResult[i]\
    \ += xs[i] * derivativeResult[j]\n        }\n        result[i] = derivativeResult[i]\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm7j84xpz_test.go:21:9: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074067
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs==nil {\n\
    \        return nil\n    }\n\n    n := len(xs)\n    d := make([]int, 0, n)\n \
    \   for i := n - 1; i >= 0; i-- {\n        if i%2 == 0 {\n            d := append(d,\
    \ xs[i])\n        } else {\n            d := append(d, xs[i]*d[i/2])\n       \
    \ }\n    }\n\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_jztmwc_test.go:24:13: d declared but not used

    /tmp/tmpa_jztmwc_test.go:26:13: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074067
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{}\n    }\n\n    n := len(xs)\n    ds := make([]int,\
    \ n-1)\n\n    for i := 0; i < n; i++ {\n        ds[i] = xs[i+1] - xs[i]\n    }\n\
    \    for i := n - 2; i >= 0; i-- {\n        ds[i] = xs[i] + ds[i+1]*i\n    }\n\
    \    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpstarbj8v_test.go:24\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpstarbj8v_test.go:39\
    \ +0x772\ntesting.tRunner(0xc000103380, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    result := make([]int, len(xs)-1)\n \
    \   copy(result, xs[:len(xs)-1])\n    for i := len(xs)-2; i >= 0; i-- {\n    \
    \    result[i] += xs[i]\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmps6zw681p_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=6) %!s(int=2) %!s(int=4) %!s(int=8)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmps6zw681p_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmps6zw681p_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmps6zw681p_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=4) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074068
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{0, 1}\n    }\n\n    x := len(xs) - 2\n    f := xs[x]\n\
    \    derivatives := make([]int, x)\n    for i := 0; i < x; i++ {\n        derivatives[i]\
    \ = derivative ([x]int{xs[i], x, x*x})\n    }\n\n    return derivatives\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzyt644x9_test.go:21:5:\
    \ f declared but not used\n/tmp/tmpzyt644x9_test.go:24:26: cannot use derivative([x]int{\u2026\
    }) (value of type []int) as type int in assignment\n/tmp/tmpzyt644x9_test.go:24:39:\
    \ invalid array length x\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 1 {\n        return nil\n    }\n    if len(xs) == 1 {\n        return nil\n\
    \    }\n\n    d := make([]int, len(xs)-1)\n    for i := len(xs) - 1; i > 0; i--\
    \ {\n        d[i] = xs[i]\n    }\n    d[0] = 1\n    for i := len(xs)-2; i > 0;\
    \ i-- {\n        d[i] = d[i+1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpan3x8_5l_test.go:25\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpan3x8_5l_test.go:41\
    \ +0x706\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    dxs := make([]int,\
    \ len(xs))\n    dxs[0] = 1\n    for i := 1; i < len(xs); i++ {\n        dxs[i]\
    \ = dxs[i-1] * xs[i] - xs[i-1]\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpis21waa1_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=-2) %!s(int=-5) %!s(int=-22) %!s(int=-114)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpis21waa1_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpis21waa1_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=-1) %!s(int=-3)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpis21waa1_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=-1) %!s(int=-3) %!s(int=-1) %!s(int=-4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpis21waa1_test.go:41: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs)%2\
    \ != 0 {\n        return nil\n    }\n    var ders []int\n    for i := 1; i < len(xs);\
    \ i += 2 {\n        ders = append(ders, xs[i+1] - xs[i-1]*(xs[i]+xs[i-1]))\n \
    \   }\n    return ders\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmppzo30hif_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmppzo30hif_test.go:43: expected '[%!s(int=2) %!s(int=6)]', got '[]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmppzo30hif_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmppzo30hif_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    return deriv(xs,\
    \ len(xs))\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4_2xujc_test.go:16:12: undefined: deriv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Find power\
    \ of 2 where it is evenly divisible by 2\n    var p int\n    for i, x := range\
    \ xs {\n        if x&1 == 0 {\n            p = i\n        }\n    }\n    // Find\
    \ power of 2 where it is evenly divisible by 2\n    d := 0\n    for _, x := range\
    \ xs {\n        if x&1 == 0 {\n            d += p/2\n        }\n    }\n    //\
    \ If there is more than one\n    if d+1 != len(xs) {\n        // Find power of\
    \ 2 where it is evenly divisible by 2\n        d *= 2\n        // Find power of\
    \ 2 where it is evenly divisible by 2\n        var d int\n        for i, x :=\
    \ range xs {\n            if x&1 == 0 {\n                d += i/2\n          \
    \  }\n        }\n        // If there is more than one\n        if d != len(xs)\
    \ {\n            // If it is even use previous power of 2\n            return\
    \ append([]int{xs[len(xs)-1]}, derivative(xs[:len(xs)-1])...)\n        }\n   \
    \ }\n    // Use previous power of 2\n    return append([]int{xs[len(xs)-1]}, derivative(xs[:len(xs)-1])...)\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative({0xc00007e620, 0x0, 0x0?})\n\t\
    /tmp/tmp3ff9cn3d_test.go:48 +0x150\ncommand-line-arguments_test.derivative({0xc00008de20,\
    \ 0x1, 0x44e628?})\n\t/tmp/tmp3ff9cn3d_test.go:48 +0xa5\ncommand-line-arguments_test.derivative({0xc00008de20,\
    \ 0x2, 0x4509d9?})\n\t/tmp/tmp3ff9cn3d_test.go:44 +0x19e\ncommand-line-arguments_test.derivative({0xc00008de20,\
    \ 0x3, 0x4b3193?})\n\t/tmp/tmp3ff9cn3d_test.go:44 +0x19e\ncommand-line-arguments_test.derivative({0xc00008de20,\
    \ 0x4, 0x5e3ea0?})\n\t/tmp/tmp3ff9cn3d_test.go:44 +0x19e\ncommand-line-arguments_test.derivative({0xc00008de20,\
    \ 0x5, 0xc00007e5f0?})\n\t/tmp/tmp3ff9cn3d_test.go:44 +0x19e\ncommand-line-arguments_test.TestDerivative(0x0?)\n\
    \t/tmp/tmp3ff9cn3d_test.go:58 +0xa8\ntesting.tRunner(0xc0000da340, 0x529020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    return append(xs,\
    \ 1)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmptbarl3zw_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmptbarl3zw_test.go:36:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmptbarl3zw_test.go:36:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmptbarl3zw_test.go:36:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmptbarl3zw_test.go:36: expected '[]', got '[%!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs)-1)\n    for i := 0; i < len(xs); i++ {\n        derivative[i]\
    \ = xs[i+1] - xs[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpc2bv41pi_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpc2bv41pi_test.go:30\
    \ +0x2a5\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    if n%2 == 0 {\n        d := make([]int, n-1)\n        var i int\n       \
    \ for i := range d {\n            d[i] = xs[i] - xs[i+1]\n        }\n        return\
    \ d\n    }\n    d := make([]int, n-1)\n    var i int\n    for i := range d {\n\
    \        d[i] = xs[i] - xs[i+1]\n    }\n    d[n-1] = 1\n    return d\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3c8xnpra_test.go:19:13: i declared but not used

    /tmp/tmp3c8xnpra_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs))\n    for i, x := range xs {\n        ds[i] = x*x\n    }\n    return\
    \ ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp7k9o0ijo_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=9) %!s(int=1) %!s(int=4) %!s(int=16) %!s(int=25)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp7k9o0ijo_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp7k9o0ijo_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=9) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp7k9o0ijo_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=9)\
    \ %!s(int=4) %!s(int=1) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp7k9o0ijo_test.go:40: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{0, 1}\n    }\n\n    // Find the coefficient of x^0\
    \ in the derivative.\n    var x0 int = xs[0]\n    var y0 int = xs[1]\n    var\
    \ d0 int\n\n    // Find the coefficient of x^1 in the derivative.\n    for i :=\
    \ 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n            x0 = xs[i-1]\n \
    \           break\n        }\n    }\n    for i := 2; i < len(xs); i++ {\n    \
    \    if xs[i] == 0 {\n            y0 += xs[i-1]\n            break\n        }\n\
    \    }\n\n    var y1 int = xs[1]\n\n    // Find the coefficient of x^2 in the\
    \ derivative.\n    for i := 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n \
    \           y1 += xs[i-1]\n            break\n        }\n    }\n\n    var d1 int\
    \ = xs[1] - x0\n\n    // Find the coefficient of x^2^2 in the derivative.\n  \
    \  for i := 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n            d1 +=\
    \ xs[i-1]\n            break\n        }\n    }\n\n    // Find the coefficient\
    \ of x^2^3 in the derivative.\n    for i := 2; i < len(xs); i++ {\n        if\
    \ xs[i] == 0 {\n            d1 += xs[i-1]\n            d1 += xs[i-2]\n       \
    \     break\n        }\n    }\n\n    // Find the coefficient of x^2^4 in the derivative.\n\
    \    for i := 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n            d1 +=\
    \ xs[i-1]\n            d1 += xs[i-2]\n            d1 += xs[i-3]\n            break\n\
    \        }\n    }\n\n    // Find the coefficient of x^2^5 in the derivative.\n\
    \    for i := 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n            d1 +=\
    \ xs[i-1]\n            d1 += xs[i-2]\n            d1 += xs[i-3]\n            d1\
    \ += xs[i-4]\n            break\n        }\n    }\n\n    // Find the coefficient\
    \ of x^2^6 in the derivative.\n    for i := 2; i < len(xs); i++ {\n        if\
    \ xs[i] == 0 {\n            d1 += xs[i-1]\n            d1 += xs[i-2]\n       \
    \     d1 += xs[i-3]\n            d1 += xs[i-4]\n            d1 += xs[i-5]\n  \
    \          break\n        }\n    }\n\n    // Find the coefficient of x^2^7 in\
    \ the derivative.\n    for i := 2; i < len(xs); i++ {\n        if xs[i] == 0 {\n\
    \            d1 += xs[i-1]\n            d1 += xs[i-2]\n            d1 += xs[i-3]\n\
    \            d1 += xs[i-4]\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpss6wie5n_test.go:108:6: expected ''('', found TestDerivative

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074068
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n\n    size := len(xs)\n    d := make([]int,\
    \ size)\n    d := append(d, xs[0])\n    temp := make([]int, size+1)\n    temp\
    \ := append(temp, xs[0])\n\n    for i := 1; i < size; i++ {\n        temp[i] =\
    \ xs[i]\n    }\n\n    for i := 1; i < size; i++ {\n        for j := 1; j < size;\
    \ j++ {\n            temp[i] += temp[j]\n        }\n        d[i] = temp[i]\n \
    \   }\n\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzoc8vnq_test.go:22:7: no new variables on left side of :=

    /tmp/tmpwzoc8vnq_test.go:24:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074068
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    derivative := make([]int, len(xs)+1)\n   \
    \ for i := 0; i < len(xs); i++ {\n        derivative[i+1] = xs[i]\n        derivative[i]\
    \ = xs[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpcv29ilt1_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpcv29ilt1_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpcv29ilt1_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpcv29ilt1_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpcv29ilt1_test.go:44: expected '[]', got '[%!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res []int\n\
    \    if len(xs) < 1 {\n        return []int{}\n    }\n    last := xs[0]\n    for\
    \ _, v := range xs[1:] {\n        last += v\n    }\n    if last == 0 {\n     \
    \   return []int{}\n    }\n    if last == 1 {\n        res = append(res, last)\n\
    \    } else {\n        res = append(res, last)\n        for i := range res {\n\
    \            res[i] = res[i]*last\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4htn3j6o_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=225)]'\n    --- FAIL: TestDerivative/test_num__1\
    \ (0.00s)\n        tmp4htn3j6o_test.go:55: expected '[%!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=36)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n    \
    \    tmp4htn3j6o_test.go:55: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=36)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp4htn3j6o_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=100)]'\n\
    \    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp4htn3j6o_test.go:55:\
    \ expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    deg := len(xs)\n\
    \    d := make([]int, deg)\n    for i := 0; i < deg; i++ {\n        d[i] = xs[i+1]\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpuiuwj3dx_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpuiuwj3dx_test.go:31\
    \ +0x65f\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ || len(xs) <= 1 {\n        return xs\n    }\n    xs := append([]int{1}, xs...)\n\
    \    var dx int = 1\n    for _, x := range xs {\n        dx *= x\n    }\n    for\
    \ i := len(xs) - 2; i >= 0; i -= 2 {\n        xs[i], xs[i+1] = xs[i+1], xs[i]\n\
    \    }\n    for i := 0; i < len(xs)-2; i++ {\n        xs[i], xs[i+1] = xs[i+1],\
    \ xs[i]\n    }\n    xs[len(xs)-1] *= dx\n    return xs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpem429kl9_test.go:19:8: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs)+1)\n    d[0] = 1\n    for i := 0; i < len(xs); i++ {\n        d[i+1]\
    \ = d[i]*xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp6kxrhgfy_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)\
    \ %!s(int=120)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp6kxrhgfy_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp6kxrhgfy_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp6kxrhgfy_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp6kxrhgfy_test.go:41: expected '[]', got '[%!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs))\n    for i, d := range xs {\n        d *= -1\n        ds[i] = d\n \
    \   }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpl65t34ur_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-3) %!s(int=-1) %!s(int=-2) %!s(int=-4) %!s(int=-5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpl65t34ur_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2) %!s(int=-3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpl65t34ur_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-3) %!s(int=-2) %!s(int=-1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpl65t34ur_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-3)\
    \ %!s(int=-2) %!s(int=-1) %!s(int=0) %!s(int=-4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpl65t34ur_test.go:41: expected '[]', got '[%!s(int=-1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    result := make([]int, n)\n    diff := 0\n    product := 1\n    for i := 1;\
    \ i < n; i++ {\n        diff += xs[i] - xs[i - 1]\n        product *= xs[i]\n\
    \    }\n    result[0] += diff\n    result[1] += product\n    for i := 2; i < n;\
    \ i++ {\n        result[i] += result[i-2]\n    }\n    return result\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative({0xc00007d5e8, 0x1, 0xc00007d5f0?})\n\
    \t/tmp/tmp82p15yd4_test.go:25 +0xb6\ncommand-line-arguments_test.TestDerivative(0x0?)\n\
    \t/tmp/tmp82p15yd4_test.go:43 +0x23f\ntesting.tRunner(0xc000003d40, 0x529020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0]\
    \ = xs[1]\n    for i := 2; i < len(xs); i++ {\n        d[i] = xs[i] * d[i-1]\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpclh3l2zl_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpclh3l2zl_test.go:38\
    \ +0x212\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    var degree int\n\n    for degree = 0; degree < len(xs); degree++ {\n    \
    \    d := 1\n        for ; d < degree; d++ {\n            result *= len(xs)\n\
    \            result += xs[d]\n        }\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8sdjnha1_test.go:22:13: invalid operation: result *= len(xs) (mismatched
    types []int and int)

    /tmp/tmp8sdjnha1_test.go:23:13: invalid operation: result += xs[d] (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0] = 1\n    for i := 0; i < len(xs); i++ {\n        d[i+1] =\
    \ 2 * d[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp0aaczwmf_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp0aaczwmf_test.go:31\
    \ +0x565\ntesting.tRunner(0xc000103520, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    deg := len(xs)\
    \ - 1\n    result := make([]int, deg)\n    for i, x := range xs {\n        result[i]\
    \ = x\n    }\n    result[len(xs)-1] = 1\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpfqc1kekg_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpfqc1kekg_test.go:32\
    \ +0x94\ntesting.tRunner(0xc000103860, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Initialize\
    \ result array to zero.\n    var result []int\n    // Use two for loops instead\
    \ of for i := 0 to len(xs)-1 { ... } to save one in\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcu1hs1nw_test.go:19:6: expected ''('', found TestDerivative

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074069
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{1, 1}\n    }\n\n    var result []int\n    var x int\
    \ = xs[0]\n    for _, val := range xs[1:] {\n        x = val\n        result =\
    \ append(result, x)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmprwp_ilku_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmprwp_ilku_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmprwp_ilku_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmprwp_ilku_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 3 {\n        return nil\n    }\n    if len(xs) == 1 {\n        return nil\n\
    \    }\n\n    n := len(xs) - 1\n    derivative := make([]int, n)\n    for i :=\
    \ range derivative {\n        derivative[i] = xs[i] * xs[i+1]\n    }\n    return\
    \ derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpf0_65tdi_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=20)]'\n    ---\
    \ FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpf0_65tdi_test.go:48: expected\
    \ '[%!s(int=2) %!s(int=2)]', got '[%!s(int=6) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmpf0_65tdi_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[%!s(int=6) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if xs[0] < 1 {\n        return nil\n    }\n    xs2 := make([]int, len(xs)-1)\n\
    \    copy(xs2, xs)\n    result := make([]int, len(xs)+1)\n    for i := 0; i <\
    \ len(xs); i++ {\n        xs2[i] -= 1\n        xs2[i+1] += xs[i]\n        result[i+1]\
    \ = xs2[i+1]\n    }\n    return result\n}\n</code>\n<|/ a tags=algorithm,math,c++,derivative,polynomials\
    \ dscore=1 |>\n<| a |>\nAs an alternative to writing a recursive algorithm, you\
    \ could use a stack to evaluate the derivative with memoization. Here's a Python\
    \ implementation that uses memoization for speed and recursion for brevity:\n\
    <code>\ndef memoize(f):\n    cache = {}\n    def helper(*args):\n        if args\
    \ in cache:\n            return cache[args]\n        else:\n            cache[args]\
    \ = f(*args)\n            return cache[args]\n    return helper\n\ndef derivative(f,\
    \ x_initial, d_initial=1):\n    def helper(x):\n        if x == x_initial:\n \
    \           return d_initial\n        else:\n            return helper(x - f(x))\n\
    \    return helper\n\n# Example usage:\nf = lambda x:x**2\ng = lambda x: 2*x\n\
    print(derivative(f, 2)(1))  # 2\nprint(derivative(g, 1)(1))  # 2\nprint(derivative(f,\
    \ 2)(1))  # 4\nprint(derivative(g, 1)(1))  # 4\n</code>\n<|/ a tags=algorithm,math,c++,derivative,polynomials\
    \ dscore=0 |>\n<| c |>\nI like this answer. Unfortunately my maths skills are\
    \ not good enough to convert this into C++ (I didn't downvote you), but I'll leave\
    \ it up for now in case someone wants to implement it.\n<|/ c |>\n<| a |>\nIn\
    \ Haskell,\n<code>\n{-# LANGUAGE NoMonomorphismRestriction #-}\nderiv :: (Ord\
    \ p, Num p, Show p, Ord a) => p -> [a] -> [a] -> a\nderiv 0 _ [] = 0\nderiv n\
    \ xs (y : ys)\n    | n < 0 = error \"Argument is negative\"\n    | n == 0 = y\n\
    \    | otherwise = deriv (n-1) xs (y : ys)\nderiv n xs (x : xs)\n    | n < 0 =\
    \ error \"Argument is negative\"\n    | n == 0 = x\n    | otherwise = deriv (n-1)\
    \ xs (x : xs)\n\nderiv' :: (Num p, \nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpis4uosst_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074070
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        d[i] = xs[i] - xs[i-1]\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp2mu4aag2_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp2mu4aag2_test.go:30\
    \ +0x24c\ntesting.tRunner(0xc0000cc680, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073967
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        ds[i] = xs[i]\n    }\n\
    \    ds[0] = 1\n    for i := 1; i < len(ds); i++ {\n        ds[i] *= i\n    }\n\
    \    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpg03xjs5u_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpg03xjs5u_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpg03xjs5u_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpg03xjs5u_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpg03xjs5u_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\
    \ - 1\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n; i++ {\n\
    \        d[i] = xs[i] * d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpnknaxrnz_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpnknaxrnz_test.go:36\
    \ +0x212\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return nil\n    }\n    result := make([]int, len(xs))\n    i :=\
    \ 0\n    for i < len(xs) {\n        if xs[i] == 0 {\n            result[i] = 1\n\
    \        } else {\n            result[i] = result[i-1] * xs[i] - xs[i-1]\n   \
    \     }\n        i++\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp9h1eumbm_test.go:25\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp9h1eumbm_test.go:39\
    \ +0x672\ntesting.tRunner(0xc0000cc4e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs))\n\n    for i := 0; i < len(xs); i++ {\n        result[i] = xs[i] -\
    \ xs[i-1]\n    }\n\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpnhzcaw79_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpnhzcaw79_test.go:32\
    \ +0x24c\ntesting.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs)+1)\n    d[len(d)-1] = 1\n    for i := 0; i < len(xs); i++ {\n      \
    \  d[i] = xs[i] + d[i+1]*d\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6m_p64i_test.go:19:24: invalid operation: d[i + 1] * d (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    result := make([]int, len(xs))\n    result[0]\
    \ = xs[1]\n    for i := 1; i < len(xs); i++ {\n        result[i] = result[i-1]\
    \ * xs[i]\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpn6kauzvh_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpn6kauzvh_test.go:38\
    \ +0x212\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs))\n    dx := 0\n    for i := 0; i < len(xs); i++ {\n    \
    \    if dx == 1 {\n            derivative[i] = xs[i]\n        } else {\n     \
    \       derivative[i] = xs[i] * dx\n        }\n        dx *= xs[i] - 1\n    }\n\
    \    return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp0_64epcp_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp0_64epcp_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp0_64epcp_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp0_64epcp_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0_64epcp_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ 0)\n    lastVal := xs[0]\n    for _, x := range xs[1:] {\n        result = append(result,\
    \ lastVal*x + 1)\n        lastVal = x\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpu2tpsxct_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=4) %!s(int=3) %!s(int=9) %!s(int=21)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpu2tpsxct_test.go:42: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpu2tpsxct_test.go:42: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpu2tpsxct_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=7) %!s(int=3) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 0 {\n        return nil\n    }\n    y := make([]int, len(xs))\n    y[0] = xs[0]\n\
    \    x := 1\n    for i := 1; i < len(xs); i++ {\n        y[i] = xs[i] * x\n  \
    \      x += xs[i]\n    }\n    return y\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpi3ve4k_f_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=16) %!s(int=40)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpi3ve4k_f_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpi3ve4k_f_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpi3ve4k_f_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpi3ve4k_f_test.go:46: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return xs\n    }\n\n    i := len(xs) - 1\n    product := 0\n\n  \
    \  for ; i <= 0; i-- {\n        product += xs[i] * (i-1)\n    }\n\n    return\
    \ append(xs, product)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0001d8030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d8030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpltixopu7_test.go:24\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpltixopu7_test.go:41\
    \ +0x605\ntesting.tRunner(0xc000198ea0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Sum up all\
    \ polynomial's coefficients\n    sum := 0\n    for _, x := range xs {\n      \
    \  sum += x*x\n    }\n\n    // Evaluate derivative of sum\n    dst := make([]int,\
    \ len(xs)+2)\n    for i := len(xs) - 2; i >= 0; i-- {\n        dst[i] = xs[i]\
    \ + sum\n        sum += dst[i]*dst[i+1]\n    }\n    dst[len(xs)-1] = sum\n\n \
    \   return dst\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpubp008zl_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=198304) %!s(int=3419) %!s(int=57) %!s(int=59) %!s(int=678199677)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmpubp008zl_test.go:50: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=15)\
    \ %!s(int=16) %!s(int=254) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpubp008zl_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=17) %!s(int=16) %!s(int=286) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpubp008zl_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=30785) %!s(int=962)\
    \ %!s(int=31) %!s(int=30) %!s(int=29645952) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestDerivative/test_num__4 (0.00s)\n        tmpubp008zl_test.go:50: expected\
    \ '[]', got '[%!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    last := len(xs)\
    \ - 1\n    diff := make([]int, last+1)\n    for i := 0; i < last; i++ {\n    \
    \    diff[i] = xs[i+1] - xs[i]\n    }\n    diff[last] = diff[last]*(xs[last] -\
    \ 1)\n    return diff\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmptizqdt9p_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmptizqdt9p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmptizqdt9p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmptizqdt9p_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1)\
    \ %!s(int=-1) %!s(int=-1) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmptizqdt9p_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs))\n    for i := range ds {\n        ds[i] = xs[i]\n    }\n    ds[0] =\
    \ 0\n    ds[len(xs)-1] = 0\n    for i := 1; i < len(ds); i++ {\n        ds[i]\
    \ *= (i - 1)\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpn7wxr3i4_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpn7wxr3i4_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpn7wxr3i4_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpn7wxr3i4_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpn7wxr3i4_test.go:45: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs)-1)\n\n    for i, x := range xs {\n        result[i] = 0\n        for\
    \ j := i + 1; j < len(xs); j++ {\n            result[i] += xs[j]*result[j]\n \
    \       }\n    }\n\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekzt04t1_test.go:18:12: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074071
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    result := make([]int, len(xs))\n   \
    \ deriver := func(i, j int) {\n        den, numer := xs[i], xs[j]\n        if\
    \ j > 0 {\n            den, numer = xs[j], den\n        }\n        result[i] =\
    \ (numer / den)\n    }\n    deriver(0, len(xs)-1)\n    return result\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpb_bqflji_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpb_bqflji_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpb_bqflji_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpb_bqflji_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpb_bqflji_test.go:48: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    return make([]int, len(xs))\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpvyrod_1i_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvyrod_1i_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvyrod_1i_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvyrod_1i_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpvyrod_1i_test.go:39: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ || len(xs) == 0 {\n        return nil\n    }\n    result := make([]int, len(xs)-1)\n\
    \    for i := 0; i < len(xs); i++ {\n        result[i] = xs[i+1] - xs[i]\n   \
    \ }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp7l9w0ke9_test.go:21\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp7l9w0ke9_test.go:33\
    \ +0x2a5\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    if len(xs) < 1 {\n        return nil\n   \
    \ }\n    derivative := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++\
    \ {\n        derivative[i] = xs[i] - xs[i-1]\n    }\n    return derivative\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpviwdajib_test.go:24\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpviwdajib_test.go:36\
    \ +0x61f\ntesting.tRunner(0xc0000cc4e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074072
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    length := len(xs)\n\
    \    if length == 0 {\n        return nil\n    }\n    if length == 1 {\n     \
    \   return xs\n    }\n    derivative := make([]int, length)\n    derivative[0]\
    \ = 1\n    derivative := appendDerivative(derivative, xs[1:])\n    return derivative\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wx0wxkb_test.go:25:16: no new variables on left side of :=

    /tmp/tmp9wx0wxkb_test.go:25:19: undefined: appendDerivative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074072
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 1 {\n        return nil\n    }\n    xs := make([]int, len(xs)-1)\n    x := 1\n\
    \    for i := len(xs)-1; i >= 0; i-- {\n        xs[i] *= x\n        if xs[i+1]\
    \ > 0 {\n            x += 1\n        } else {\n            x -= 1\n        }\n\
    \    }\n    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg40936rj_test.go:19:8: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074072
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    length := len(xs)\n\
    \    derivative := make([]int, 0, length)\n    for i := 0; i < length; i++ {\n\
    \        // If xs[i] is not 1, return 0.\n        if xs[i] == 1 {\n          \
    \  continue\n        }\n        derivative := append(derivative, xs[i])\n    \
    \    for j := i - 1; j > 0; j-- {\n            // If xs[i] - xs[j] is not 1, return\
    \ 0.\n            if xs[i]-xs[j] != 1 {\n                continue\n          \
    \  }\n            derivative := append(derivative, (xs[i]*(xs[j])+(xs[j])*xs[j+1]))\n\
    \        }\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ss0gln7_test.go:29:13: derivative declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0] = 1\n    for _, x := range xs {\n        d[0] *= x\n    \
    \    for i := 1; i < len(xs); i++ {\n            d[i] = d[i-1]*x\n        }\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpawwg72su_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=120) %!s(int=600) %!s(int=3000) %!s(int=15000)\
    \ %!s(int=75000)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n       \
    \ tmpawwg72su_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=6)\
    \ %!s(int=18) %!s(int=54)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n\
    \        tmpawwg72su_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=6)\
    \ %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpawwg72su_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestDerivative/test_num__4 (0.00s)\n        tmpawwg72su_test.go:44: expected\
    \ '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return []int{}\n    }\n    p := make([]int, len(xs)+1)\n    p[0]\
    \ = xs[0]\n    for i := 0; i < len(xs); i++ {\n        p[i+1] = xs[i]\n    }\n\
    \    for i := 0; i < len(p); i++ {\n        p[i+1]--\n    }\n    return p\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpk486pv30_test.go:25\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpk486pv30_test.go:37\
    \ +0x6ec\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 1 {\n        return nil\n    }\n    t := make([]int, len(xs))\n    t[0] = 1\n\
    \    for i := 0; i < len(xs); i++ {\n        t[i+1] = t[i]*xs[i]\n    }\n    return\
    \ t\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp1jmqaerw_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp1jmqaerw_test.go:34\
    \ +0x61f\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    d := make([]int, n+1)\n    d[0] = xs[0]\n    for i := 0; i < n; i++ {\n \
    \       d[i+1] = xs[i+1] * d[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp3_sz9eov_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp3_sz9eov_test.go:32\
    \ +0x6ac\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073858
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs)%2\
    \ != 0 {\n        panic(\"len(xs)%2 != 0\")\n    }\n    n := len(xs) / 2\n   \
    \ derivative := make([]int, n)\n    derivative[0] = xs[0]\n    for i := 1; i <\
    \ n; i++ {\n        derivative[i] = xs[i] - derivative[i-1]*xs[i-1]\n    }\n \
    \   return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: len(xs)%2 != 0 [recovered]\n\t\
    panic: len(xs)%2 != 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp0qjsg9c2_test.go:17\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp0qjsg9c2_test.go:35\
    \ +0x27\ntesting.tRunner(0xc0000da340, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs, xs[len(xs)-1]\
    \ == 0 {\n        xs = xs[:len(xs)-1]\n    }\n    if len(xs) < 2 {\n        return\
    \ xs\n    }\n    d := make([]int, len(xs)-1)\n    for i := len(d) - 1; i >= 0;\
    \ i-- {\n        d[i] = xs[i+1] * xs[i+2]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptyee43k__test.go:16:8: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074072
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return xs\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[1]\n\
    \    for i := 2; i < len(xs)-1; i++ {\n        d[i] = xs[i] - xs[i-1]\n    }\n\
    \    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpywnwkj7g_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpywnwkj7g_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpywnwkj7g_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpywnwkj7g_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2)\
    \ %!s(int=0) %!s(int=-1) %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpywnwkj7g_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs)+1)\n    degree := len(xs)\n\n    // compute coefficients of x\n    var\
    \ c []int\n    for i := 0; i < degree; i++ {\n        c[i] = xs[i]\n    }\n  \
    \  c[len(xs)] = 1 // last coef\n\n    // compute derivative\n    for i := 0; i\
    \ < degree; i++ {\n        deriv := 1\n        for j := 0; j < degree-i; j++ {\n\
    \            deriv *= c[j]\n        }\n        result[i+1] = deriv\n    }\n  \
    \  return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative({0xc00007e620?, 0x5, 0xc00007e5f0?})\n\
    \t/tmp/tmp14m6iu8r_test.go:22 +0x45\ncommand-line-arguments_test.TestDerivative(0x0?)\n\
    \t/tmp/tmp14m6iu8r_test.go:44 +0xa8\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return xs\n    }\n    dxs := make([]int, len(xs)-1)\n    dxs[0],\
    \ dxs[len(xs)-1] = 1, 1\n    for i := 1; i < len(xs); i++ {\n        dxs[i] =\
    \ (1 + xs[i])*(1+dxs[i-1])\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpne42twd9_test.go:20\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpne42twd9_test.go:34\
    \ +0x79\ntesting.tRunner(0xc0000da340, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Find the derivative\
    \ of a polynomial with n degree.\n    // Here n is 2, so the derivative of {1,\
    \ 2, 3} is {6, 4, 3}\n    if n == 0 {\n        return xs // return the same array\n\
    \    }\n    s := make([]int, n) // polynomial with degree n-1\n    for i := 0;\
    \ i < n; i++ {\n        s[i] = xs[i+1]\n    }\n    for i := n - 2; i >= 0; i--\
    \ {\n        s[i] = s[i+1] * xs[i]\n    }\n    return s\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kqdjn_g_test.go:18:8: undefined: n

    /tmp/tmp2kqdjn_g_test.go:21:22: undefined: n

    /tmp/tmp2kqdjn_g_test.go:22:21: undefined: n

    /tmp/tmp2kqdjn_g_test.go:25:14: undefined: n

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074073
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d := append(d, xs[0]...)\n    for _, x := range xs[1:] {\n   \
    \     d = append(d, x * d[0])\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv7afuyu_test.go:17:7: no new variables on left side of :=

    /tmp/tmpbv7afuyu_test.go:17:20: cannot use xs[0] (variable of type int) as type
    []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{1}\n    }\n    return append(derivative(xs[1:]), xs[0]*(xs[0]+1))\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp6ox74iu1_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=30) %!s(int=20) %!s(int=6) %!s(int=2)\
    \ %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp6ox74iu1_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=12) %!s(int=6)\
    \ %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp6ox74iu1_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp6ox74iu1_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=20) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp6ox74iu1_test.go:39: expected '[]', got '[%!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    df := make([]int,\
    \ len(xs))\n    df[0] = xs[0]\n    df[1] = 1\n    for i := 2; i < len(xs); i++\
    \ {\n        df[i] = df[i-2] + xs[i]\n    }\n    return df\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpqtk51499_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpqtk51499_test.go:36\
    \ +0x246\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074073
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ 0)\n    for i := len(xs) - 1; i >= 0; i-- {\n        ds = append(ds, xs[i] +\
    \ ds[i+1]*x)\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8efydcv_test.go:18:41: undefined: x

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074073
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var degree int\
    \ = len(xs)\n    if degree == 0 {\n        return []int{}\n    }\n    var result\
    \ []int\n    for i := 0; i < degree; i++ {\n        if i+1 < degree {\n      \
    \      result[i] = xs[i+1] - xs[i]\n        } else {\n            result[i] =\
    \ 0\n        }\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpra00834j_test.go:23\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpra00834j_test.go:38\
    \ +0x18\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n    result := make([]int, len(xs)-1)\n \
    \   for i := 0; i < len(xs)-1; i++ {\n        result[i] = xs[i+1]\n    }\n   \
    \ result[len(xs)-1] = 1\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpiu0i6bph_test.go:23\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpiu0i6bph_test.go:34\
    \ +0x93\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ret := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        mul := 1\n        for\
    \ j := 0; j < i; j++ {\n            mul *= xs[j]\n        }\n        ret[i] =\
    \ mul\n    }\n    return ret\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpvr16chcx_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvr16chcx_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvr16chcx_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvr16chcx_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpvr16chcx_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    k := len(xs)\
    \ - 1\n    for i := 0; i < k; i++ {\n        xs[i] += xs[i+1]\n    }\n    return\
    \ xs[:k+1]\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmph_hekhml_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=4) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmph_hekhml_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=5) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmph_hekhml_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmph_hekhml_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmph_hekhml_test.go:40: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return xs\n    }\n    ds := make([]int, len(xs))\n    ds[0] = 1\n\
    \    for i := 0; i < len(xs)-1; i++ {\n        ds[i+1] = xs[i+1]\n    }\n    return\
    \ ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpaphdytmp_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpaphdytmp_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpaphdytmp_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpaphdytmp_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpaphdytmp_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs)-1)\n    result := append(result, 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[len(result)-1] = result[len(result)-1] * xs[i-1]\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgktrk25w_test.go:17:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{0, 0}\n    }\n    d := make([]int, len(xs)+1)\n  \
    \  x := xs[0]\n    for i := range d {\n        d[i] = xs[i+1]\n    }\n    d :=\
    \ append(d, x)\n    for i := range d[1:] {\n        d[i+1] += d[i]\n    }\n  \
    \  return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzfjxe32g_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs)+1)\n    d[0] = x[1]\n    for i := 0; i < len(xs); i++ {\n        d[i+1]\
    \ = xs[i+1]*d[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjfz3ycxe_test.go:17:12: undefined: x

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 1 {\n        return xs\n    }\n    d := make([]int, len(xs)-1)\n    d[0] = 1\n\
    \    for i, x := range xs {\n        d[i+1] = d[i] * x\n    }\n    return d\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp8a3si_77_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp8a3si_77_test.go:34\
    \ +0x699\ntesting.tRunner(0xc0001031e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    d := make([]int, n)\n    for i := n - 1; i >= 0; i-- {\n        d[i] = xs[i]\
    \ - xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpdv1dbtha_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpdv1dbtha_test.go:31\
    \ +0x672\ntesting.tRunner(0xc000103380, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var d []int\n\
    \    var s []int\n    for i := len(xs) - 1; i >= 0; i-- {\n        d := make([]int,\
    \ len(xs)-i+1)\n        for j := 0; j < len(d); j++ {\n            d[j] = d[j]*xs[j]\n\
    \        }\n        s = append(s, d[0])\n    }\n    return s\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoodjrjg__test.go:16:9: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs))\n    multiplier := 1\n    for i, val := range xs {\n        result[i]\
    \ = multiplier * val\n        multiplier *= xs[i]\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp2coxa3mg_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24) %!s(int=120)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp2coxa3mg_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp2coxa3mg_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp2coxa3mg_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=6) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp2coxa3mg_test.go:42: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Start with\
    \ 0th derivative\n    // For each element in xs\n    // multiply previous element\
    \ by x times\n    // add element to result\n    var result []int\n    for _, x\
    \ := range xs {\n        result = append(result, 0)\n        for _, r := range\
    \ result {\n            result[r] += x\n        }\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 2 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp6e5zh11i_test.go:24\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp6e5zh11i_test.go:37\
    \ +0xa1d\ntesting.tRunner(0xc0000d04e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var d []int\n\
    \    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] - xs[i-1]\n    }\n \
    \   return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 0 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpiz2ps53q_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpiz2ps53q_test.go:30\
    \ +0x1a\ntesting.tRunner(0xc000103520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    derivatives := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n       \
    \ derivatives[i+1] = xs[i] - xs[i+1]\n    }\n    return derivatives\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmplwckcepk_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmplwckcepk_test.go:31\
    \ +0x61f\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    for i := 0; i < len(xs); i++ {\n        result = append(result, xs[i]-derivative(xs[:i]+xs[i+1:])[0])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1va0i1_l_test.go:18:52: invalid operation: operator + not defined on xs[:i]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs==nil {\n\
    \        return []int{}\n    }\n    dxs := make([]int, len(xs))\n    for i :=\
    \ 0; i < len(xs); i++ {\n        dxs[i] = 1\n    }\n    for i := len(xs) - 1;\
    \ i > 1; i-- {\n        for j := i - 1; j >= 0; j-- {\n            dxs[j] *= xs[i]\n\
    \        }\n        dxs[i-1] *= xs[i]\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp_gj8qtoy_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=40) %!s(int=80) %!s(int=80) %!s(int=25) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_gj8qtoy_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_gj8qtoy_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_gj8qtoy_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=16) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp_gj8qtoy_test.go:49: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return nil\n    }\n\n    deriv := make([]int, len(xs))\n    deriv[0]\
    \ = xs[1]\n\n    for i := 2; i < len(xs); i++ {\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    }\n\n    return deriv\n}\n</code>\n<|/ a tags=go dscore=5 |>\n\
    <| c |>\nThis doesn't actually solve the problem of \"what if the length of the\
    \ input array is greater than 2?\" The second example is actually a slightly better\
    \ version of the first example, with some extra checks for length less than 2.\n\
    <|/ c |>\n<| a |>\nHere's a simple function which does that:\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpssfnjf7s_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <=\
    \ 0 {\n        return nil\n    }\n    derivative := make([]int, len(xs)-1)\n \
    \   derivative := derivative[1:]\n    for i := 1; i <= len(xs); i++ {\n      \
    \  derivative := append(derivative, xs[i-1]*xs[i]+derivative[i-1])\n    }\n  \
    \  return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxloobht_test.go:20:16: no new variables on left side of :=

    /tmp/tmpmxloobht_test.go:22:9: derivative declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var derivative\
    \ = []int{0, 1}\n    for i := 0; i < len(xs); i++ {\n        derivative += []int{xs[i],\
    \ 1}\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_hstiun4_test.go:18:9: invalid operation: operator + not defined on derivative
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs)%2\
    \ != 0 {\n        // raise error\n        fmt.Printf(\"error: length %v must be\
    \ even\", len(xs))\n        return []int{0, 0}\n    }\n    ret := make([]int,\
    \ len(xs)/2)\n    for i := 0; i < len(xs); i += 2 {\n        ret[i] = xs[i+1]\n\
    \        ret[i+1] = xs[i] * xs[i+1]\n    }\n    return ret\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "error: length 5 must be evenerror: length 3 must be evenerror: length 3\
    \ must be evenerror: length 5 must be evenerror: length 1 must be even--- FAIL:\
    \ TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n \
    \       tmp_0vii84p_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmp_0vii84p_test.go:46: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_0vii84p_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestDerivative/test_num__3 (0.00s)\n        tmp_0vii84p_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp_0vii84p_test.go:46:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\
    \ - 1\n    d := make([]int, n)\n    d[0] = 1\n    d[1] = xs[1]\n    for i := 2;\
    \ i < n; i++ {\n        d[i] = d[i-2] * xs[i]\n    }\n    return d\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpcfwwrb0w_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpcfwwrb0w_test.go:37\
    \ +0x1e5\ntesting.tRunner(0xc0000da1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    size := len(xs)\n\
    \    result := make([]int, size)\n    for i := range xs {\n        result[i] =\
    \ 1\n    }\n    for i := size - 2; i >= 0; i-- {\n        for j := i + 1; j <\
    \ size; j++ {\n            result[i] += xs[j]*result[j]\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp2c5ljxqi_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=180) %!s(int=90) %!s(int=30) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp2c5ljxqi_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=12) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp2c5ljxqi_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=6) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp2c5ljxqi_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=30)\
    \ %!s(int=10) %!s(int=5) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp2c5ljxqi_test.go:46: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    ders := make([]int, 0, n)\n    ders = append(ders, xs[0])\n    for i := 1;\
    \ i < n; i++ {\n        ders = append(ders, xs[i])\n        ders = append(ders,\
    \ xs[i]*xs[i])\n    }\n    return ders\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpwjp9jkjm_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=16) %!s(int=5) %!s(int=25)]'\n    --- FAIL: TestDerivative/test_num__1\
    \ (0.00s)\n        tmpwjp9jkjm_test.go:43: expected '[%!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=9)]'\n    --- FAIL:\
    \ TestDerivative/test_num__2 (0.00s)\n        tmpwjp9jkjm_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=4) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpwjp9jkjm_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=4)\
    \ %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpwjp9jkjm_test.go:43:\
    \ expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ds := make([]int,\
    \ len(xs)+1)\n    ds[0] = 0\n    for i := 0; i < len(xs); i++ {\n        ds[i+1]\
    \ = xs[i]\n    }\n    for i := 1; i < len(ds); i++ {\n        ds[i] = ds[i-1]\
    \ * ds[i] / i\n    }\n    return ds\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer but it doesn't work.  I get the following error when I\
    \ try to run:\n\n`panic: runtime error: index out of range\n    panic: runtime\
    \ error: index out of range\n\ngoroutine 1 [running]:\npanic(0x398be0, 0xc04203a8c)\n\
    \    /home/chris/go/src/runtime/panic.go:500 +0x3e8 fp=0xc810e60c0 sp=0xc810e60c8\n\
    main.derivative(0x4c030c, 0xc810e60c0, 0x0, 0x0)\n    /home/chris/workspace/Derivative/derivative_test.go:12\
    \ +0x191 fp=0xc810e60f8 sp=0xc810e60f0\nmain.derivativeTest(0x4c030c, 0xc810e60f8)\n\
    \    /home/chris/workspace/Derivative/derivative_test.go:17 +0x47b fp=0xc810e6428\
    \ sp=0xc810e6420\ntesting.tRunner()\n    /home/chris/go/src/testing/testing.go:984\
    \ +0x49e fp=0xc810e6454 sp=0xc810e6448\ntesting.runTests.func1(0x4c030c)\n   \
    \ /home/chris/go/src/testing/testing.go:1010 +0x263 fp=0xc810e6500 sp=0xc810e64f8\n\
    runtime.goexit()\n    /home/chris/go/src/runtime/asm_amd64.s:3074 +0x1\n\ngoroutine\
    \ 1 [chan receive]:\nmain.main()\n    /home/chris/workspace/Derivative/derivative_test.go:14\
    \ +0x2b fp=0xc810e6534 sp=0xc810e6528\nexit status 2`\n<|/ c |>\n<| a tags=polynomial-math,math,go\
    \ |>\nOne way to do it without calculating the derivative is to use binary exponentiation.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkftrvfwt_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return nil\n    }\n    n := len(xs)\n    ds := make([]int, 0, n-1)\n\
    \    for i := 0; i < n-1; i++ {\n        d := 0\n        for j := i; j < n; j++\
    \ {\n            d *= xs[j]\n        }\n        ds = append(ds, d)\n    }\n  \
    \  return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpq363y9jf_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpq363y9jf_test.go:48: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpq363y9jf_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpq363y9jf_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    n := len(xs)\n    for i := 0; i < n; i++ {\n        if i == 0 {\n       \
    \     result[n-1] = 1\n        }\n        else {\n            result[n-1] = result[i-1]*xs[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprf1a8od1_test.go:22:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs==nil ||\
    \ len(xs)==0 {\n        return nil\n    }\n    result := make([]int, 0, len(xs)-1)\n\
    \    for i := 0; i < len(xs); i++ {\n        result := append(result, xs[i+1]-xs[i])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw11srn35_test.go:21:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    if len(xs) < 1 {\n        return nil\n    }\n    for i := len(xs) - 1; i\
    \ >= 1; i-- {\n        result := make([]int, i+1)\n        result[i-1] = xs[i]\n\
    \        for j := 0; j < i; j++ {\n            result[j+1] = result[j]*xs[i-1]\n\
    \        }\n        result = append(result, 0)\n    }\n    return result\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp6sbc37w3_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmp6sbc37w3_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp6sbc37w3_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmp6sbc37w3_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074076
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return nil\n    }\n    xs := make([]int, len(xs))\n    prev :=\
    \ len(xs) - 1\n    xs[0] = 1\n    for i := 1; i < len(xs); i++ {\n        xs[i]\
    \ = prev * xs[i-1] + xs[i]\n    }\n    return xs[len(xs)-1]\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pv2o_jb_test.go:19:8: no new variables on left side of :=

    /tmp/tmp1pv2o_jb_test.go:25:12: cannot use xs[len(xs) - 1] (variable of type int)
    as type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{0}\n    }\n    d := make([]int, len(xs)-1)\n    d[0]\
    \ = xs[1]\n    for i := 0; i < len(xs)-2; i++ {\n        d[i+1] = xs[i+1] * d[i]\n\
    \    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpmqlztbv2_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpmqlztbv2_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpmqlztbv2_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpmqlztbv2_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpmqlztbv2_test.go:44: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs))\n\n    for i := range xs {\n        derivative[i] = xs[i]\n\
    \    }\n\n    derivative := derivative[1:]\n    derivative[0] = derivative[0]\
    \ * x[1]\n    for i := range derivative[1:] {\n        derivative[i] = derivative[i]\
    \ * x[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpii3k750c_test.go:22:16: no new variables on left side of :=

    /tmp/tmpii3k750c_test.go:23:37: undefined: x

    /tmp/tmpii3k750c_test.go:25:41: undefined: x

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n   \
    \     d[i] = d[i - 1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp1_pi3g6f_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24) %!s(int=120)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1_pi3g6f_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1_pi3g6f_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1_pi3g6f_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=6) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1_pi3g6f_test.go:42: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    deriv := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        deriv[i] = xs[i] - xs[i-1]\n\
    \    }\n    return deriv\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmprw7svrip_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmprw7svrip_test.go:30\
    \ +0x24c\ntesting.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    ret := []int{}\n\
    \    if len(xs) < 2 {\n        return ret\n    }\n    rest = xs[1:]\n    for _,\
    \ x := range xs {\n        d := 1\n        for _, v := range rest {\n        \
    \    d *= x - v\n        }\n        ret = append(ret, d)\n    }\n    return ret\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp57dws0hd_test.go:20:5: undefined: rest

    /tmp/tmp57dws0hd_test.go:23:27: undefined: rest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i]\
    \ - xs[i-1] * xs[i-1]\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpbnk95rpw_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-8) %!s(int=1) %!s(int=0) %!s(int=-11)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbnk95rpw_test.go:40: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpbnk95rpw_test.go:40: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=-7) %!s(int=-3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpbnk95rpw_test.go:40: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=-7) %!s(int=-3) %!s(int=-1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) ==\
    \ 0 {\n        return []int{}\n    }\n\n    y := []int{}\n\n    for i := len(xs)\
    \ - 2; i >= 0; i-- {\n        y := append(y, xs[i+1]*x)\n        x = xs[i]\n \
    \   }\n\n    return y\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmproksp4sz_test.go:23:9: y declared but not used

    /tmp/tmproksp4sz_test.go:23:32: undefined: x

    /tmp/tmproksp4sz_test.go:24:9: undefined: x

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    if len(xs) == 0 {\n        return []int{}\n    }\n    for i := 1; i < len(xs);\
    \ i++ {\n        result = append(result, xs[i] - xs[i-1])\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpxqsvq55y_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpxqsvq55y_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpxqsvq55y_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpxqsvq55y_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \    for idx := range xs {\n        result = append(result, xs[idx] - xs[idx-1]*result[-1])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37wgilww_test.go:18:60: invalid argument: index -1 (constant of type int)
    must not be negative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return xs\n    }\n    if len(xs) < 2 {\n        return xs\n    }\n\
    \    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n  \
    \      result[i-1] = xs[i] - xs[i-1]\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpe85fzz8a_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpe85fzz8a_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpe85fzz8a_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpe85fzz8a_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpe85fzz8a_test.go:46: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return xs\n    }\n    dxs := make([]int, len(xs)-1)\n    dys :=\
    \ make([]int, len(xs)-1)\n    for i := 0; i < len(xs); i++ {\n        dxs[i] =\
    \ (xs[i+1]-xs[i-1]) / (xs[i]+1)\n        dys[i] = dxs[i] * (xs[i+1]-xs[i-1])/(xs[i]-1)\n\
    \    }\n    return append(dxs, dys...)\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative({0xc000024390?, 0x5, 0x4b3160?})\n\
    \t/tmp/tmplk17yjex_test.go:22 +0x1e8\ncommand-line-arguments_test.TestDerivative(0x0?)\n\
    \t/tmp/tmplk17yjex_test.go:35 +0x7f\ntesting.tRunner(0xc0000da340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return nil\n    }\n    if len(xs) == 1 {\n        return nil\n\
    \    }\n    x := xs[0]\n    y := derivative(xs[1:])\n    for _, z:= range y {\n\
    \        z = x * z\n    }\n    return y\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp9iz_16qf_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmp9iz_16qf_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp9iz_16qf_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmp9iz_16qf_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var xj int\n\
    \    for i := 1; i < len(xs); i++ {\n        xj = xs[i-1] + xj*xs[i]\n    }\n\
    \    return append([]int{0}, xs[j:]...)\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kp_8d05_test.go:20:32: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // To compute\
    \ derivative, we need to know how many terms are in this polynomial.\n    // For\
    \ this we use another helper function: derivative_coeffs.\n    //\n    // It returns\
    \ an array of coefficients representing the order of derivative of the given polynomial.\n\
    \    // It can be used as a basis for the next one.\n    //\n    // So when xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // it returns:\n    // >>> derivative_coeffs([3,\
    \ 1, 2, 4, 5])\n    // [3]\n    // >>> derivative_coeffs([1, 2, 3])\n    // [2]\n\
    \n    // First we need to know how many terms are in given polynomial\n    //\
    \ To do that we can compute how many xs are in the polynomial\n    // For this\
    \ we use the function polynomial_coefficients\n    // This returns an array of\
    \ coefficients representing the order of derivative\n    // of polynomial in the\
    \ form:\n    // >>> polynomial_coefficients([3, 1, 2, 4, 5])\n    // [3, 1, 2,\
    \ 4, 5]\n    // >>> polynomial_coefficients([1, 2, 3])\n    // [1, 1, 1, 1]\n\
    \    numOfTerms := len(xs)\n\n    // Now let's compute which coefficients represent\
    \ derivative of given polynomial\n    // So for this we need to use polynomial\
    \ coefficients\n    // It returns array of coefficients representing derivative.\n\
    \    // It can be used as a basis for the next one.\n    deriv := make([]int,\
    \ len(xs)+1)\n    deriv[0] = 1\n    for _, v := range xs {\n        deriv[numOfTerms+v]\
    \ = 1\n    }\n\n    // Now let's compute first derivate\n    lastTerm := deriv[len(deriv)-1]\n\
    \n    // And now we can compute second derivative\n    for i := len(deriv)-2;\
    \ ; i-- {\n        if deriv[i] > 1 {\n            deriv[i+1] += deriv[i]\n   \
    \     } else {\n            break\n        }\n    }\n\n    // Last one is the\
    \ derivative of given polynomial in the form of x\n    // Now we can just compute\
    \ the coefficients representing second derivative\n    // Here they are in the\
    \ form: [1, 3, 5]\n    // >>> [deriv[i] / deriv[i+numOfTerms] for i in range(numOfTerms+1)]\n\
    \    return deriv[len(deriv)-numOfTerms+1:len(deriv)]\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9dyo7lqp_test.go:51:5: lastTerm declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0], d[1] = xs[0], xs[1]\n    for i := 2; i < len(xs); i++ {\n\
    \        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpbxs31a9l_test.go:17\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpbxs31a9l_test.go:35\
    \ +0x23a\ntesting.tRunner(0xc0000e01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // return derivative\
    \ of empty polynomial\n    if len(xs) < 2 {\n        return []int{}\n    }\n \
    \   d := make([]int, len(xs)-1)\n    // derivative of polynomial with one variable\
    \ is its variable\n    if xs[0] != 0 {\n        d[0] = xs[0]\n    }\n    // derivative\
    \ of polynomial with two variables is its product of derivatives\n    for i :=\
    \ 1; i < len(xs)-1; i++ {\n        d[i] = d[i-1]*(xs[i] + xs[i+1])\n    }\n  \
    \  return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpm0nbw6td_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=9) %!s(int=54) %!s(int=486)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpm0nbw6td_test.go:49: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpm0nbw6td_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=9)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpm0nbw6td_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=9) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs)%2\
    \ != 0 {\n        return []int{0, 0}\n    }\n    ret := []int{}\n    for i :=\
    \ len(xs)-1; i >= 0; i-- {\n        ret := append(ret, xs[i] - xs[i+1]*ret[0])\n\
    \    }\n    return ret\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ifkr_o2_test.go:21:9: ret declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    result := make([]int, n)\n    result := append(result, nil)\n    for i :=\
    \ n - 1; i >= 0; i-- {\n        result[i] = result[i+1] * xs[i] + result[i+2]\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub7vy_6e_test.go:18:12: no new variables on left side of :=

    /tmp/tmpub7vy_6e_test.go:18:30: cannot use nil as int value in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    p := make([]int,\
    \ len(xs)+1)\n    p[0] = xs[0]\n    for i := 0; i < len(xs); i++ {\n        p[i+1]\
    \ = p[i] + xs[i]\n    }\n    return p[:len(xs)]\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpya64ald9_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=13)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpya64ald9_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpya64ald9_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=6) %!s(int=8)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpya64ald9_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3)\
    \ %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpya64ald9_test.go:41: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\
    \ - 1\n    ds := make([]int, n)\n    for i := 0; i < n; i++ {\n        ds[i] =\
    \ xs[i]\n    }\n    ds[n] = xs[len(xs)-1]\n    return ds\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp00g5zlsh_test.go:21\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp00g5zlsh_test.go:32\
    \ +0x93\ntesting.tRunner(0xc0000d81a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    d[0] = xs[0]\n    d[1] = 1\n    for i := 2; i < len(xs); i++ {\n\
    \        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001ce030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001ce030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmph3weu0uw_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmph3weu0uw_test.go:36\
    \ +0x252\ntesting.tRunner(0xc00019b040, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Create slice\
    \ of derivatives.\n    ders := make([]int, len(xs))\n    ders[0] = 1\n    ders[len(xs)-1]\
    \ = 1\n\n    for i := 0; i < len(xs)-1; i++ {\n        ders[i+1] = ders[i] * xs[i]\n\
    \    }\n    return ders\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpk0nb0b_i_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpk0nb0b_i_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpk0nb0b_i_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpk0nb0b_i_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpk0nb0b_i_test.go:44: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    sum := xs[0]\n\
    \    for i := 1; i < len(xs); i++ {\n        sum -= xs[i]\n    }\n    return make([]int,\
    \ len(xs)+1)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpgnp5rq1e_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpgnp5rq1e_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpgnp5rq1e_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpgnp5rq1e_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpgnp5rq1e_test.go:40: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivative :=\
    \ make([]int, len(xs))\n    derivative := append(derivative, 1)\n    for i :=\
    \ 2; i < len(xs); i++ {\n        derivative := append(derivative, xs[i-1]*xs[i]+derivative[i-1])\
    \ \n    }\n    return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2egytcc_test.go:17:16: no new variables on left side of :=

    /tmp/tmpa2egytcc_test.go:19:9: derivative declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs))\n    result[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n      \
    \  result[i] = result[i-1] * xs[i] - xs[i-1]\n    }\n    return result\n}\n</cell>\n\
    <text>\nTest cases:\n\n</text>\n<cell>\nimport unittest\n\nclass TestDerivative(unittest.TestCase):\n\
    \    def testDerivative(self):\n        self.assertEqual(derivative([]int{3, 1,\
    \ 2, 4, 5}), []int{1, 4, 12, 20})\n        self.assertEqual(derivative([]int{1,\
    \ 2, 3}), []int{2, 6})\n        self.assertEqual(derivative([]int{}), []int{})\n\
    \        self.assertEqual(derivative([]int{3, 1, 2, 3, 2}), []int{1, 3, 9})\n\
    \        self.assertEqual(derivative([]int{3, 1, 2, 3, 1}), []int{1, -3, 8})\n\
    \        self.assertEqual(derivative([]int{3, 1, 2, 3, 0}), []int{1, 3, 0})\n\
    </cell>\n<text>\nExercise:\nWrite a function named derivative that returns the\
    \ derivative of a polynomial of degree n.\nWrite a test case that checks if derivative\
    \ is correct.\n\n\n</text>\n<text>\nPart 2: Polynomial Arithmetic\nThe next part\
    \ of the problem involves adding polynomials.\n\nThe function should work with\
    \ polynomials of arbitrary degree, but it will not work with\npolynomials of degree\
    \ 0 or 1.\n\n\n</text>\n<cell>\npackage addition_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgpvld6yx_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    derivatives := make([]int, n+1)\n    for i := 0; i < n; i++ {\n        derivatives[i]\
    \ = xs[i+1] - xs[i]\n    }\n    return derivatives\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpxy30emaf_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpxy30emaf_test.go:31\
    \ +0x67f\ntesting.tRunner(0xc000198ea0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs)+1)\n    d[0] = x[0]\n    for i := 1; i < len(xs) && xs[i] <= xs[i-1];\
    \ i++ {\n        d[i] = xs[i] - xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40jqly5x_test.go:17:12: undefined: x

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    dxs := make([]int,\
    \ len(xs)+1)\n    dxs[0] = 1\n    for i := 1; i < len(xs); i++ {\n        dxs[i]\
    \ = dxs[i-1]*xs[i]\n    }\n    return dxs[len(xs)]\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzk63b8id_test.go:21:12: cannot use dxs[len(xs)] (variable of type int)
    as type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res []int\n\
    \    if xs[0] == 0 {\n        res = make([]int, 1, len(xs))\n    } else {\n  \
    \      for i := 0; i < len(xs); i++ {\n            xi := xs[i]\n            res[i]\
    \ = xs[len(xs)-1-i]\n        }\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuf_odv36_test.go:21:13: xi declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs))\n    for i := 0; i < len(xs); i++ {\n        d[i] = xs[i+1]\n    }\n\
    \    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpgirqp4lm_test.go:18\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpgirqp4lm_test.go:30\
    \ +0x65f\ntesting.tRunner(0xc0000da340, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073965
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) <\
    \ 2 {\n        return []int{}\n    }\n    degree := len(xs) - 1\n    derivative\
    \ := make([]int, degree)\n    for i := 0; i < degree; i++ {\n        derivative[i]\
    \ = xs[i+1] * xs[i]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpdx7hr96v_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=20)]'\n    ---\
    \ FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpdx7hr96v_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=2)]', got '[%!s(int=6) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmpdx7hr96v_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[%!s(int=6) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Return derivative\
    \ if empty or single.\n    if len(xs) < 2 {\n        return xs\n    }\n    d :=\
    \ make([]int, len(xs))\n    d := append(d, 1)\n    for i := 2; i < len(xs); i++\
    \ {\n        d := append(d, xs[i-1]*d[i-1])\n    }\n    return d\n}\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpus8jy5ev_test.go:21:7: no new variables on left side of :=

    /tmp/tmpus8jy5ev_test.go:23:9: d declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Use a temporary\
    \ array so we don't have to worry about allocation\n    // failures.\n    temp\
    \ := make([]int, len(xs)+1)\n\n    // Initialize the temporary array to the correct\
    \ size\n    copy(temp, make([]int, len(xs)+1))\n\n    // First element is not\
    \ the derivative\n    temp[0] = 1\n\n    // Calculate the rest of the derivative\n\
    \    for i := 1; i < len(xs); i++ {\n        temp[i+1] = temp[i] * xs[i]\n   \
    \ }\n\n    // The derivative is everything in the temp array minus the first element\n\
    \    return temp[:len(temp)-1]\n}\n</code>\n<|/ a tags=math,algorithm,go,function\
    \ dscore=1 |>\n<| c |>\nThis answer would be better if it included some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\nThis code will give you the desired result.\n<code>\n\
    package main\n\nimport \"fmt\"\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp39e9pbkd_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if xs == nil\
    \ {\n        return []int{}\n    }\n    ds := make([]int, len(xs))\n    for i\
    \ := 0; i < len(ds); i++ {\n        ds[i] = 0\n    }\n    for i := 0; i < len(xs);\
    \ i++ {\n        ds[i] += xs[i]\n    }\n    for i := 0; i < len(ds); i++ {\n \
    \       ds[i] = ds[i]/len(xs)\n    }\n    return ds\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpyvm_uyhx_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpyvm_uyhx_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpyvm_uyhx_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpyvm_uyhx_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpyvm_uyhx_test.go:49: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    length := len(xs)\n\
    \    derivative := make([]int, length)\n\n    for i := 0; i < length; i++ {\n\
    \        // derivative[i] = derivative[i-1] + xs[i]\n        derivative[i] = xs[i]\
    \ + derivative[i-1]\n    }\n    return derivative\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpvybwjrqn_test.go:21\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpvybwjrqn_test.go:33\
    \ +0x24c\ntesting.tRunner(0xc00011b1e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var x int\n \
    \   var n int\n    ds := make([]int, len(xs))\n    ds[0] = 1\n    ds[1] = xs[0]\n\
    \    for i := 2; i < len(xs); i++ {\n        x = xs[i]\n        ds[i] = ds[i-1]\
    \ * x\n        n++\n    }\n    for i := 2; i < n; i++ {\n        ds[i] = ds[i]\
    \ * x\n    }\n    return ds\n}\n`\n\nvar derivativeTests = []\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptcug3rqg_test.go:31:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    derivative := make([]int, n)\n\n    if n < 1 {\n        return derivative\n\
    \    }\n    \n    derivative [0] = xs[0]\n    derivative [1] = xs[1]\n\n    for\
    \ i := 2; i < n; i++ {\n        derivative [i] = derivative [i-1] * xs[i]\n  \
    \  }\n    \n    return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp5dorros5_test.go:24\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmp5dorros5_test.go:44\
    \ +0x265\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res []int\n\
    \    for _, x := range xs {\n        res = append(res, 1)\n        if x == 0 {\n\
    \            continue\n        }\n        if x%2 == 0 {\n            res = append(res,\
    \ x+1)\n        } else {\n            res = append(res, x**2+x)\n        }\n \
    \   }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdrq4yap2_test.go:25:34: invalid operation: cannot indirect 2 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var ds []int\n\
    \n    for i := range xs {\n        ds = append(ds, xs[i]+xs[i+1])\n    }\n\n \
    \   return ds\n}\n</code>\n<|/ a |>\n<| a |>\nThe above answers are great, but\
    \ you can also use the function \n<code>\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpslcab942_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var derivative\
    \ []int\n    for i := 0; i < len(xs); i++ {\n        if i == 0 {\n           \
    \ derivative = append(derivative, xs[i])\n        } else {\n            derivative\
    \ = append(derivative, derivative(xs[i-1])*xs[i])\n        }\n    }\n    return\
    \ derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0r2bntb7_test.go:21:45: invalid operation: cannot call non-function derivative
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    derivatives :=\
    \ make([]int, 0)\n    for i, _ := range xs {\n        derivatives = append(derivatives,\
    \ xs[i])\n        derivatives = append(derivatives, xs[i]*xs[i])\n    }\n    return\
    \ derivatives\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpsoicwmip_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=4) %!s(int=16) %!s(int=5) %!s(int=25)]'\n    --- FAIL: TestDerivative/test_num__1\
    \ (0.00s)\n        tmpsoicwmip_test.go:41: expected '[%!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=9)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpsoicwmip_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=9) %!s(int=2) %!s(int=4)\
    \ %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpsoicwmip_test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=2) %!s(int=4) %!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpsoicwmip_test.go:41: expected '[]', got '[%!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var result []int\n\
    \n    for len(xs) > 0 {\n        n := len(xs)\n\n        result = (xs[:n-1]).Append(result)\n\
    \        xs = xs[n:]\n    }\n\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp616s5zxq_test.go:21:29: (xs[:n - 1]).Append undefined (type []int has
    no field or method Append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var derivative\
    \ = make([]int, len(xs))\n    for i := range derivative[:len(xs)-1] {\n      \
    \  derivative[i] = xs[i+1] - xs[i]\n    }\n    derivative[len(xs)-1] = 1\n   \
    \ return derivative\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp1_y2vw6y_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1_y2vw6y_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1_y2vw6y_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=1)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1_y2vw6y_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1)\
    \ %!s(int=-1) %!s(int=-1) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1_y2vw6y_test.go:41: expected '[]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    d := make([]int,\
    \ len(xs)-1)\n    d := append(d, 1)\n    for i := 1; i < len(xs); i++ {\n    \
    \    d[i-1] = d[i]*xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41icx18g_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\
    \ - 1\n    result := make([]int, degree)\n    for i := range xs {\n        result[i]\
    \ = 0\n    }\n    for i := range result {\n        result[i] = xs[i]\n    }\n\
    \    for i := range xs {\n        for j := i + 1; j < degree; j++ {\n        \
    \    result[j] *= xs[i]\n        }\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpy1py2h76_test.go:19\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpy1py2h76_test.go:39\
    \ +0x365\ntesting.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var deriv []int\n\
    \    switch len(xs) {\n    case 1:\n        deriv = append(deriv, xs[0])\n   \
    \ case 2:\n        deriv = append(deriv, xs[1]-xs[0])\n    case 3:\n        deriv\
    \ = append(deriv, xs[1]-xs[0]*xs[2])\n    case 4:\n        deriv = append(deriv,\
    \ xs[1]-xs[0]*xs[3]-xs[2]*xs[1])\n    case 5:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1])\n\
    \    case 6:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1])\n\
    \    case 7:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1])\n\
    \    case 8:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1])\n\
    \    case 9:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1]-xs[7]*xs[1])\n\
    \    case 10:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1]-xs[7]*xs[1]-xs[8]*xs[1])\n\
    \    case 11:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1]-xs[7]*xs[1]-xs[8]*xs[1]-xs[9]*xs[1])\n\
    \    case 12:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1]-xs[7]*xs[1]-xs[8]*xs[1]-xs[9]*xs[1]-xs[10]*xs[1])\n\
    \    case 13:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]-xs[3]*xs[1]-xs[4]*xs[1]-xs[5]*xs[1]-xs[6]*xs[1]-xs[7]*xs[1]-xs[8]*xs[1]-xs[9]*xs[1]-xs[10]*xs[1]-xs[11]*xs[1])\n\
    \    case 14:\n        deriv = append(deriv, xs[1]-xs[0]*xs[3]-xs[2]*xs[1]\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpttsv842t_test.go:45:60: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    degree := len(xs)\
    \ - 1 // degree of polynomial\n    derivative := make([]int, degree) // allocate\
    \ memory for derivative\n    for i := 0; i < degree; i++ { // calculate derivative\n\
    \        // x^(n+1) == x^n + x^(n-1) + ... + x + 1\n        derivative[i] = xs[i]\n\
    \    }\n    for i := degree - 1; i >= 0; i-- {\n        // calculate derivative\n\
    \        derivative [i] = derivative[i] + xs[i]\n    }\n    return derivative\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp486mjtwq_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=6) %!s(int=2) %!s(int=4) %!s(int=8)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp486mjtwq_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp486mjtwq_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp486mjtwq_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=4) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var ans []int\n\
    \    for _, x := range xs {\n        ans = append(ans, xs[len(ans)-1])\n    }\n\
    \    return ans\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfg7djv0h_test.go:17:12: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1,\
    \ 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n\
    \    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = xs[i]\n    }\n    for i := n - 1; i >= 0; i-- {\n        result[i] *= xs[i+1]\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpv1fmgj8i_test.go:22\n\
    command-line-arguments_test.TestDerivative(0x0?)\n\t/tmp/tmpv1fmgj8i_test.go:34\
    \ +0x70c\ntesting.tRunner(0xc0000da1a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073963
