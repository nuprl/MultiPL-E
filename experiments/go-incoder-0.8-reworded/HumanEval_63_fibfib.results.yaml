language: go_test.go
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<2 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmphw2rejmb_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmphw2rejmb_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpztmzvhxj_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpztmzvhxj_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpztmzvhxj_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpztmzvhxj_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    fib1 :=\
    \ fibfib(n-1)\n    fib2 := fibfib(n-2)\n    fib3 := fibfib(n-3)\n\n    return\
    \ fib1 + fib2 + fib3\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpqo0mm_9i_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpqo0mm_9i_test.go:51: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpqo0mm_9i_test.go:51: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpqo0mm_9i_test.go:51: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpqo0mm_9i_test.go:51: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpqo0mm_9i_test.go:51:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        panic(\"fibfib() argument must\
    \ be a non-negative integer.\")\n    }\n    fibfib0 := 0\n    fibfib1 := 0\n \
    \   fibfib2 := 1\n    fibfib3 := 0\n    for n > 0 {\n        fibfib3 = fibfib2\
    \ + fibfib1\n        fibfib2 = fibfib1\n        fibfib1 = fibfib0\n        fibfib0\
    \ = fibfibfib3\n        n--\n    }\n    return fibfib0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8895f010_test.go:27:5: fibfib3 declared but not used

    /tmp/tmp8895f010_test.go:32:19: undefined: fibfibfib3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075002
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpx6kb9r5r_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpx6kb9r5r_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpmys79xah_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpmys79xah_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpmys79xah_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpmys79xah_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    result := 0\n    if n <= 1 {\n        result = 0\n\
    \    } else {\n        result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    \n    return result\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpvgyot4yp_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpvgyot4yp_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpvgyot4yp_test.go:50: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpvgyot4yp_test.go:50: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpvgyot4yp_test.go:50: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpvgyot4yp_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n\n    if n <\
    \ 2 {\n        return 0\n    }\n\n    if n < 5 {\n        return 1\n    }\n\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp4vpusw3o_test.go:55: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp4vpusw3o_test.go:55: expected\
    \ '%!s(int=24)', got '%!s(int=17)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp4vpusw3o_test.go:55: expected '%!s(int=81)', got '%!s(int=57)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp4vpusw3o_test.go:55:\
    \ expected '%!s(int=274)', got '%!s(int=193)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp4vpusw3o_test.go:55: expected '%!s(int=927)', got '%!s(int=653)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        fmt.Printf(\"fibfib() only takes\
    \ positive integers\\n\")\n        return 0\n    }\n\n    if n == 0 {\n      \
    \  return 0\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integers

    fibfib() only takes positive integ'
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpr2hvbe3f_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpr2hvbe3f_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpl193fznj_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpl193fznj_test.go:52: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 2 {\n        return 0\n    } else {\n     \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp45pdp2w6_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp45pdp2w6_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp45pdp2w6_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp45pdp2w6_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp45pdp2w6_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp45pdp2w6_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 0\n    case n == 2: return 1\n    default: return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<0 {\n        return -1\n    }\n    if n==0 {\n\
    \        return 0\n    }\n    if n==1 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2ep_edef_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2ep_edef_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2ep_edef_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2ep_edef_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2ep_edef_test.go:52: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2ep_edef_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2ep_edef_test.go:52: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp9nhu2oa8_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp9nhu2oa8_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp9nhu2oa8_test.go:49: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp9nhu2oa8_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp9nhu2oa8_test.go:49: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp9nhu2oa8_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib(n) called\
    \ with n < 0\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    if n == 3 {\n        return 2\n    }\n    if n != fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3) {\n        fmt.Println(\"fibfib(n) called with not\
    \ fibonacci number\")\n        return -1\n    }\n    return n\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not fibonacci number

    fibfib(n) called with not f'
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<2 {\n        return 0\n    }\n    if n%2 == 0\
    \ {\n        return fibfib(n-1)+fibfib(n-2)\n    }\n    return fibfib(n-3)+fibfib(n-2)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpn2s9xvye_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpn2s9xvye_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpn2s9xvye_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpn2s9xvye_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpn2s9xvye_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpn2s9xvye_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n    case\
    \ n == 1:\n        return 1\n    case n == 2:\n        return 2\n    }\n    a,\
    \ b := fibfib(n-1), fibfib(n-2)\n    return a + b + b\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpqw9wh1_3_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpqw9wh1_3_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpqw9wh1_3_test.go:52: expected '%!s(int=4)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpqw9wh1_3_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=128)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpqw9wh1_3_test.go:52: expected '%!s(int=81)', got '%!s(int=512)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpqw9wh1_3_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=2048)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpqw9wh1_3_test.go:52: expected '%!s(int=927)', got '%!s(int=8192)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return n\n    }\n\n    fibfibs\
    \ := make([]int, n)\n    fibfibs[0] = 0\n    fibfibs[1] = 1\n\n    for i := 2;\
    \ i <= n; i++ {\n        fibfibs[i] = fibfibs[i-2] + fibfibs[i-1]\n    }\n\n \
    \   return fibfibs[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmpm9t92o7b_test.go:30\n\
    command-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmpm9t92o7b_test.go:43 +0x45\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n <= 3 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpp_goipj9_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpp_goipj9_test.go:55: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpp_goipj9_test.go:55: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpp_goipj9_test.go:55: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpp_goipj9_test.go:55: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpp_goipj9_test.go:55:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpp_goipj9_test.go:55: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 3 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp7mvulk1l_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpc0pdgs65_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<2 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmphw2rejmb_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmphw2rejmb_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpmg_s5tp9_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Your code here\n    if n <= 1 {\n        return\
    \ 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp9ey4qpqz_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp9ey4qpqz_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp9ey4qpqz_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp9ey4qpqz_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp9ey4qpqz_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp9ey4qpqz_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp87i41t99_test.go:20 +0x8c fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var a int = 1\n    var b int = 1\n\n    for i := 3;\
    \ i <= n; i++ {\n        var tmp int = b\n        b = a\n        a = tmp + b\n\
    \    }\n\n    return a\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp97lkqz65_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp97lkqz65_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp97lkqz65_test.go:52: expected '%!s(int=24)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp97lkqz65_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp97lkqz65_test.go:52: expected '%!s(int=274)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp97lkqz65_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=377)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var i int\n    var fib int\n    fib = 1\n    i = 0\n\
    \    for ; i < n; i++ {\n        fib += fib\n    }\n    return fib\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpegjiu08z_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpegjiu08z_test.go:50: expected\
    \ '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpegjiu08z_test.go:50: expected '%!s(int=4)', got '%!s(int=32)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpegjiu08z_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=256)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpegjiu08z_test.go:50: expected '%!s(int=81)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpegjiu08z_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=4096)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpegjiu08z_test.go:50: expected '%!s(int=927)', got '%!s(int=16384)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // YOUR CODE HERE\n    switch {\n    case n == 0: return\
    \ 0\n    case n == 1: return 0\n    case n == 2: return 1\n    default: return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    f := make([]int, n)\n    f[0] = 0\n    f[1] = 0\n \
    \   f[2] = 1\n    for i := 3; i < len(f); i++ {\n        f[i] = f[i-1] + f[i-2]\
    \ + f[i-3]\n    }\n    return f[n-1]\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmpcl95_rdf_test.go:24\n\
    command-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmpcl95_rdf_test.go:38 +0x39\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Insert your code here\n    switch {\n    case n\
    \ < 2:\n        return n\n    default:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmppqb04adj_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmppqb04adj_test.go:49: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmppqb04adj_test.go:49: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmppqb04adj_test.go:49: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmppqb04adj_test.go:49: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmppqb04adj_test.go:49:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmppqb04adj_test.go:49: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 || n > 100 {\n        fmt.Println(\"fibfib:\"\
    , n)\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 1\n    }\n    if n == 2 {\n        return 0\n    }\n    if n == 3 {\n\
    \        return 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmparwit3yn_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmparwit3yn_test.go:58: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmparwit3yn_test.go:58: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmparwit3yn_test.go:58: expected\
    \ '%!s(int=24)', got '%!s(int=33)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmparwit3yn_test.go:58: expected '%!s(int=81)', got '%!s(int=112)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmparwit3yn_test.go:58:\
    \ expected '%!s(int=274)', got '%!s(int=379)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmparwit3yn_test.go:58: expected '%!s(int=927)', got '%!s(int=1282)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp9g02t2hy_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp9g02t2hy_test.go:55: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp9g02t2hy_test.go:55: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp9g02t2hy_test.go:55:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp9g02t2hy_test.go:55: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp9g02t2hy_test.go:55:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 2 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjpmo9g82_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjpmo9g82_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjpmo9g82_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var result int\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    if n == 3 {\n        return 1\n    }\n    result = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    return result\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpi_3t_n6a_test.go:57: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpi_3t_n6a_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpi_3t_n6a_test.go:57: expected '%!s(int=24)', got '%!s(int=31)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpi_3t_n6a_test.go:57:\
    \ expected '%!s(int=81)', got '%!s(int=105)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpi_3t_n6a_test.go:57: expected '%!s(int=274)', got '%!s(int=355)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpi_3t_n6a_test.go:57:\
    \ expected '%!s(int=927)', got '%!s(int=1201)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var sum int = 0\n\n    if n <= 0 {\n        return\
    \ 0\n    }\n\n    if n == 1 {\n        return sum\n    }\n\n    sum += fibfib(n-1)\n\
    \    sum += fibfib(n-2)\n    sum += fibfib(n-3)\n\n    return sum\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpc6jia_i7_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpc6jia_i7_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpc6jia_i7_test.go:57: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpc6jia_i7_test.go:57: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpc6jia_i7_test.go:57: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpc6jia_i7_test.go:57:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\
    \nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 20 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpm_k8mfrx_test.go:20 +0x75 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x4ef6d5\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc0201703d0 sp=0xc0201703a8 pc=0x4ef685\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpm_k8mfrx_test.go:21 +0x25 fp=0xc0201703f8 sp=0xc0201703d0 pc=0x4ef685\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc020170420 sp=0xc0201703f8 pc=0x4ef685\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpm_k8mfrx_test.go:21 +0x25 fp=0xc020170448 sp=0xc020170420 pc=0x4ef685\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc020170470 sp=0xc020170448 pc=0x4ef685\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpm_k8mfrx_test.go:21 +0x25 fp=0xc020170498 sp=0xc020170470 pc=0x4ef685\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc0201704c0 sp=0xc020170498 pc=0x4ef685\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpm_k8mfrx_test.go:21 +0x25 fp=0xc0201704e8 sp=0xc0201704c0 pc=0x4ef685\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc020170510 sp=0xc0201704e8 pc=0x4ef685\ncommand-line-arguments_test.fibfib(0xffffffffff333364)\n\
    \t/tmp/tmpm_k8mfrx_test.go:21 +0x25 fp=0xc020170538 sp=0xc020170510 pc=0x4ef685\n\
    command-line-arguments_test.fibfib(0xffffffffff333365)\n\t/tmp/tmpm_k8mfrx_test.go:21\
    \ +0x25 fp=0xc02017"
  timestamp: 1660075006
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // base case: fibfib(0) = 0\n    if n == 0 {\n    \
    \    return 0\n    }\n\n    // fibfib(1) = 0\n    if n == 1 {\n        return\
    \ 0\n    }\n\n    // fibfib(2) = 1\n    if n == 2 {\n        return 1\n    }\n\
    \n    // fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075006
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n    case\
    \ n == 1:\n        return 0\n    case n == 2:\n        return 1\n    case n >\
    \ 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rs30xi0_test.go:31:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpp6lo_qfe_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpp6lo_qfe_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpp6lo_qfe_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    fibfibNums := make([]int, n+1)\n    fibfibNums[0] =\
    \ 0\n    fibfibNums[1] = 0\n    fibfibNums[2] = 1\n    for i := 3; i <= n; i++\
    \ {\n        fibfibNums[i] = fibfibNums[i-2] + fibfibNums[i-1] + fibfibNums[i]\n\
    \    }\n    return fibfibNums[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmp6go0lq97_test.go:24\n\
    command-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmp6go0lq97_test.go:39 +0x5a\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    } else {\n     \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpl5jxwu4m_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpl5jxwu4m_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpl5jxwu4m_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 3\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpdbg2rmao_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpdbg2rmao_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpdbg2rmao_test.go:49: expected '%!s(int=24)', got '%!s(int=31)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpdbg2rmao_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=105)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpdbg2rmao_test.go:49: expected '%!s(int=274)', got '%!s(int=355)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpdbg2rmao_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1201)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<0 {\n        return -1\n    }\n    if n==0 ||\
    \ n==1 {\n        return 0\n    }\n    if n==2 {\n        return 1\n    }\n  \
    \  if n%2==0 {\n        return fibfib(n-1)+fibfib(n-2)\n    }\n    return fibfib(n-3)+fibfib(n-2)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpmrdb60ey_test.go:55: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpmrdb60ey_test.go:55: expected\
    \ '%!s(int=24)', got '%!s(int=4)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpmrdb60ey_test.go:55: expected '%!s(int=81)', got '%!s(int=8)'\n  \
    \  --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpmrdb60ey_test.go:55: expected\
    \ '%!s(int=274)', got '%!s(int=16)'\n    --- FAIL: TestFibfib/test_num__6 (0.00s)\n\
    \        tmpmrdb60ey_test.go:55: expected '%!s(int=927)', got '%!s(int=32)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp14ht0opc_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp14ht0opc_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp14ht0opc_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n > 2 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpand_hz2r_test.go:33:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 3 {\n        return 0\n    }\n    if n%2 !=\
    \ 0 {\n        return fibfib(n-2) + fibfib(n-3)\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpaepzkyur_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpaepzkyur_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpaepzkyur_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpaepzkyur_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpaepzkyur_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpaepzkyur_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpmys79xah_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpmys79xah_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpmys79xah_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpmys79xah_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpmys79xah_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075006
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpcaqdsw08_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcaqdsw08_test.go:42: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcaqdsw08_test.go:42: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcaqdsw08_test.go:42: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpcaqdsw08_test.go:42: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcaqdsw08_test.go:42:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpbykg5jtq_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpbykg5jtq_test.go:47: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpbykg5jtq_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpbykg5jtq_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpbykg5jtq_test.go:47: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpbykg5jtq_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpbykg5jtq_test.go:47: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 0\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmps9wwp63f_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmps9wwp63f_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmps9wwp63f_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmps9wwp63f_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmps9wwp63f_test.go:52: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmps9wwp63f_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmps9wwp63f_test.go:52: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpr2hvbe3f_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpr2hvbe3f_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpx6kb9r5r_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpx6kb9r5r_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<=0 {\n        return 0\n    }\n    if n==1 {\n\
    \        return 1\n    }\n    if n==2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpkvn5k5xz_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpkvn5k5xz_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpkvn5k5xz_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpkvn5k5xz_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpkvn5k5xz_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpkvn5k5xz_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358?)\n\
    \t/tmp/tmpwzk6zu1t_test.go:20 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n        case n == 0: return 0\n        case\
    \ n == 1: return 0\n        case n == 2: return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n\
    \    n -= 1\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xfffffffffe6666b1)\n\
    \t/tmp/tmpqj_sioad_test.go:20 +0x8c fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666b3)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xfffffffffe6666b5)\n\
    \t/tmp/tmpqj_sioad_test.go:27 +0x3c fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666b7)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xfffffffffe6666b9)\n\
    \t/tmp/tmpqj_sioad_test.go:27 +0x3c fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666bb)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xfffffffffe6666bd)\n\
    \t/tmp/tmpqj_sioad_test.go:27 +0x3c fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666bf)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xfffffffffe6666c1)\n\
    \t/tmp/tmpqj_sioad_test.go:27 +0x3c fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666c3)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xfffffffffe6666c5)\n\
    \t/tmp/tmpqj_sioad_test.go:27 +0x3c fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xfffffffffe6666c7)\n\t/tmp/tmpqj_sioad_test.go:27\
    \ +0x3c fp=0xc0201e0"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp1p1bf6zs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp1p1bf6zs_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp1p1bf6zs_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp1p1bf6zs_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp1p1bf6zs_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp1p1bf6zs_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n <= 1:\n        return 0\n    case\
    \ n <= 2:\n        return 1\n    case n > 2:\n        return fibfib(n-2) + fibfib(n-1)\n\
    \    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_7lovnt_test.go:29:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n==0 {\n        return 0\n    }\n    if n==1 {\n\
    \        return 1\n    }\n    if n==2 {\n        return 1\n    }\n    if n<0 {\n\
    \        return -1\n    }\n    if n%3 == 0 {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    return fibfib(n-3) + fibfib(n-2) + fibfib(n-1)\n}\n\
    \nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp0ku8lxb0_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp0ku8lxb0_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp0ku8lxb0_test.go:58: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp0ku8lxb0_test.go:58:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp0ku8lxb0_test.go:58: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp0ku8lxb0_test.go:58:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ || n == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5sxn7lio_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp5sxn7lio_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp5sxn7lio_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp5sxn7lio_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp5sxn7lio_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp5sxn7lio_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    fibfiblist := make([]int, n)\n    fibfiblist[0], fibfiblist[1]\
    \ = 0, 1\n    for i := 2; i < len(fibfiblist); i++ {\n        fibfiblist[i] =\
    \ fibfiblist[i-1] + fibfiblist[i-2] + fibfiblist[i-3]\n    }\n    return fibfiblist[n-1]\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmpa2v__zgf_test.go:22\n\
    command-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmpa2v__zgf_test.go:37 +0x65\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 2\n    }\n\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmptawh3778_test.go:56: expected '%!s(int=4)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmptawh3778_test.go:56: expected\
    \ '%!s(int=24)', got '%!s(int=37)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmptawh3778_test.go:56: expected '%!s(int=81)', got '%!s(int=125)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmptawh3778_test.go:56:\
    \ expected '%!s(int=274)', got '%!s(int=423)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmptawh3778_test.go:56: expected '%!s(int=927)', got '%!s(int=1431)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n > 100\
    \ {\n        return -1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmphk9x3o8n_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmphk9x3o8n_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmphk9x3o8n_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmphk9x3o8n_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmphk9x3o8n_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmphk9x3o8n_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 || n >= 1000 {\n        fmt.Println(\"fibfib:\
    \ \", n)\n        return 0\n    }\n    var a, b int\n    if n <= 2 {\n       \
    \ a = 1\n        b = n\n    } else {\n        a = fibfib(n-1)\n        b = fibfib(n-2)\n\
    \    }\n    return a + b\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate :=\
    \ fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp1n23r5gq_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp1n23r5gq_test.go:55: expected\
    \ '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp1n23r5gq_test.go:55: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp1n23r5gq_test.go:55: expected\
    \ '%!s(int=24)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp1n23r5gq_test.go:55: expected '%!s(int=81)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp1n23r5gq_test.go:55:\
    \ expected '%!s(int=274)', got '%!s(int=377)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp1n23r5gq_test.go:55: expected '%!s(int=927)', got '%!s(int=987)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var a, b, c int\n    for i := 0; i < n; i++ {\n   \
    \     a = b\n        b = c\n        c = a + b\n    }\n    return c\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpdjdakdlq_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpdjdakdlq_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpdjdakdlq_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpdjdakdlq_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpdjdakdlq_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpdjdakdlq_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpubndokud_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpubndokud_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpubndokud_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n < 3:\n        return 0\n    case\
    \ n < 5:\n        return 1\n    case n < 8:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    default:\n        return -1\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp8vji1jok_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp8vji1jok_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp8vji1jok_test.go:52: expected '%!s(int=24)', got '%!s(int=-1)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp8vji1jok_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=-1)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp8vji1jok_test.go:52: expected '%!s(int=274)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp8vji1jok_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var fibfibs int\n    for i := 0; i < n; i++ {\n   \
    \     fibfibs = fibfibs + fibfib(i-1)\n    }\n    return fibfibs;\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp1362148q_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp1362148q_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp1362148q_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp1362148q_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp1362148q_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp1362148q_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpx6kb9r5r_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpx6kb9r5r_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpx6kb9r5r_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpx6kb9r5r_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0\
    \ || n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n  \
    \  }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Write your code here.\n    if n <= 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 0\n    case n == 2: return 1\n    default:\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<0 {\n        fmt.Println(\"fibfib: input number\
    \ must be positive.\")\n        return 0\n    }\n\n    if n==0 {\n        return\
    \ 0\n    }\n\n    if n==1 {\n        return 1\n    }\n\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number must be positive.

    fibfib: input number'
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpmg_s5tp9_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 1\n    } else if n == 2 {\n        return 1\n    } else if\
    \ n > 2 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7swp2ag8_test.go:30:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpvpu2p9nh_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpvpu2p9nh_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpvpu2p9nh_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpvpu2p9nh_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpvpu2p9nh_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpvpu2p9nh_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return fibfib2(n, 0, 0)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyv8o4sc_test.go:21:12: undefined: fibfib2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Base case\n    if n == 0 {\n        return 0\n \
    \   }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333359)\n\
    \t/tmp/tmpu6r0qst7_test.go:20 +0x89 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e9\n\
    command-line-arguments_test.fibfib(0xffffffffff33335a)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef696\ncommand-line-arguments_test.fibfib(0xffffffffff33335b)\n\
    \t/tmp/tmpu6r0qst7_test.go:25 +0x36 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef696\n\
    command-line-arguments_test.fibfib(0xffffffffff33335c)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef696\ncommand-line-arguments_test.fibfib(0xffffffffff33335d)\n\
    \t/tmp/tmpu6r0qst7_test.go:25 +0x36 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef696\n\
    command-line-arguments_test.fibfib(0xffffffffff33335e)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef696\ncommand-line-arguments_test.fibfib(0xffffffffff33335f)\n\
    \t/tmp/tmpu6r0qst7_test.go:25 +0x36 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef696\n\
    command-line-arguments_test.fibfib(0xffffffffff333360)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef696\ncommand-line-arguments_test.fibfib(0xffffffffff333361)\n\
    \t/tmp/tmpu6r0qst7_test.go:25 +0x36 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef696\n\
    command-line-arguments_test.fibfib(0xffffffffff333362)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef696\ncommand-line-arguments_test.fibfib(0xffffffffff333363)\n\
    \t/tmp/tmpu6r0qst7_test.go:25 +0x36 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef696\n\
    command-line-arguments_test.fibfib(0xffffffffff333364)\n\t/tmp/tmpu6r0qst7_test.go:25\
    \ +0x36 fp=0xc0201e"
  timestamp: 1660075010
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n\n    } else {\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmps1u6d61g_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmps1u6d61g_test.go:47: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmps1u6d61g_test.go:47: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmps1u6d61g_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmps1u6d61g_test.go:47: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmps1u6d61g_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmps1u6d61g_test.go:47: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n\
    \    if n > 2 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhcdn5k3_test.go:36:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return n\n    } else {\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpfw8au2fk_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpfw8au2fk_test.go:47: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpfw8au2fk_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpfw8au2fk_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpfw8au2fk_test.go:47: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpfw8au2fk_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpfw8au2fk_test.go:47: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpl193fznj_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpl193fznj_test.go:52: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpc0pdgs65_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 || n > 100 {\n        fmt.Println(\"Invalid\
    \ argument, n = \", n)\n        exit(1)\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a int = 0\n    var b int = 1\n    var c int = 1\n    for\
    \ i := 2; i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n   \
    \ }\n    return b\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjm0eplqx_test.go:23:9: undefined: exit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<0 || n>100000 {\n        fmt.Printf(\"fibfib()\
    \ invalid input: %d\\n\", n)\n        return -1\n    }\n    if n==0 || n==1 {\n\
    \        return n\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input: -1

    fibfib() invalid input:'
  timestamp: 1660075010
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n < 1:\n        return 0\n    case\
    \ n == 1: \n        return 0\n    case n == 2:\n        return 1\n    case n >\
    \ 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7d_ze68_test.go:31:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 1 {\n        return 0\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333359)\n\
    \t/tmp/tmpnp74j8gk_test.go:20 +0x89 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e9\n\
    command-line-arguments_test.fibfib(0xffffffffff33335a)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef697\ncommand-line-arguments_test.fibfib(0xffffffffff33335b)\n\
    \t/tmp/tmpnp74j8gk_test.go:25 +0x37 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef697\n\
    command-line-arguments_test.fibfib(0xffffffffff33335c)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef697\ncommand-line-arguments_test.fibfib(0xffffffffff33335d)\n\
    \t/tmp/tmpnp74j8gk_test.go:25 +0x37 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef697\n\
    command-line-arguments_test.fibfib(0xffffffffff33335e)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef697\ncommand-line-arguments_test.fibfib(0xffffffffff33335f)\n\
    \t/tmp/tmpnp74j8gk_test.go:25 +0x37 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef697\n\
    command-line-arguments_test.fibfib(0xffffffffff333360)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef697\ncommand-line-arguments_test.fibfib(0xffffffffff333361)\n\
    \t/tmp/tmpnp74j8gk_test.go:25 +0x37 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef697\n\
    command-line-arguments_test.fibfib(0xffffffffff333362)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef697\ncommand-line-arguments_test.fibfib(0xffffffffff333363)\n\
    \t/tmp/tmpnp74j8gk_test.go:25 +0x37 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef697\n\
    command-line-arguments_test.fibfib(0xffffffffff333364)\n\t/tmp/tmpnp74j8gk_test.go:25\
    \ +0x37 fp=0xc0201e0"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n <\
    \ 3 {\n        return 1\n    }\n\n    sum := 0\n    for i := 3; i <= n; i++ {\n\
    \        sum += fibfib(i-1)\n    }\n\n    return sum\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpyxjmmm7p_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpyxjmmm7p_test.go:56: expected\
    \ '%!s(int=24)', got '%!s(int=32)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpyxjmmm7p_test.go:56: expected '%!s(int=81)', got '%!s(int=128)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpyxjmmm7p_test.go:56:\
    \ expected '%!s(int=274)', got '%!s(int=512)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpyxjmmm7p_test.go:56: expected '%!s(int=927)', got '%!s(int=2048)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    sum := 0\n    for i := 0; i < n; i++ {\n        sum\
    \ += fib(i, n)\n    }\n    return sum\n}\n\nfunc TestFibfib(t *testing.T) {\n\
    \  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ksa1r9y_test.go:23:16: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n <= 1:\n        return n\n    case\
    \ n > 2:\n        return fibfib(n-1) + fibfib(n-2)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6bkag62a_test.go:27:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1:\n\
    \        return 0\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkd673knx_test.go:24:14: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // base case\n    if n <= 1 {\n        return 0\n \
    \   }\n\n    // Recursive case\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpg5gmoym6_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpg5gmoym6_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpg5gmoym6_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpg5gmoym6_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpg5gmoym6_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpg5gmoym6_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 3 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp7mvulk1l_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"Bad input, input\
    \ not valid.\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n      \
    \  return 1\n    }\n    if n == 5 {\n        return 1\n    }\n    if n == 6 {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    if n == 7\
    \ {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\n  \
    \  }\n    if n == 8 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4) + fibfib(n-5)\n    }\n    if n == 9 {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3) + fibfib(n-4) + fibfib(n-5) + fibfib(n-6)\n    }\n\
    \    if n == 10 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\
    \ + fibfib(n-5) + fibfib(n-6) + fibfib(n-7)\n    }\n    if n == 11 {\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4) + fibfib(n-5) +\
    \ fibfib(n-6) + fibfib(n-7) + fibfib(n-8)\n    }\n    if n == 12 {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4) + fibfib(n-5) + fibfib(n-6)\
    \ + fibfib(n-7) + fibfib(n-8) + fibfib(n-9)\n    }\n    if n == 13 {\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4) + fibfib(n-5) +\
    \ fibfib(n-6) + fibfib(n-7) + fibfib(n-8) + fibfib(n-9) + fibfib(n-10)\n    }\n\
    \    if n == 14 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\
    \ + fibfib(n-5) + fibfib(n-6) + fibfib(n-7) + fibfib(n-8) + fibfib(n-9) + fibfib(n-10)\
    \ + fibfib(n-11)\n    }\n    if n == 15 {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3) + fibfib(n-4) + fibfib(n-5) + fibfib(n-6) + fibfib(n-7) + fibfib(n-8)\
    \ + fibfib\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2hdnlkfq_test.go:72:6: expected ''('', found TestFibfib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 3 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp7mvulk1l_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp7mvulk1l_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp7mvulk1l_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 3\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpdbg2rmao_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpdbg2rmao_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpdbg2rmao_test.go:49: expected '%!s(int=24)', got '%!s(int=31)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpdbg2rmao_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=105)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpdbg2rmao_test.go:49: expected '%!s(int=274)', got '%!s(int=355)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpdbg2rmao_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1201)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358?)\n\
    \t/tmp/tmpwzk6zu1t_test.go:20 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e"
  timestamp: 1660075008
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Your code here\n    prev := 0\n    current := 1\n\
    \    sum := 0\n    for i := 2; i < n; i++ {\n        current = prev + current\n\
    \        sum = sum + prev\n        prev = current\n    }\n    return sum\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpvl8py5j9_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpvl8py5j9_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpvl8py5j9_test.go:52: expected '%!s(int=24)', got '%!s(int=31)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpvl8py5j9_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=127)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpvl8py5j9_test.go:52: expected '%!s(int=274)', got '%!s(int=511)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpvl8py5j9_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=2047)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if (n == 0 || n == 1) {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp1nkvznwy_test.go:20 +0x8c fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp1nkvznwy_test.go:24 +0x3c fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp1nkvznwy_test.go:24 +0x3c fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp1nkvznwy_test.go:24 +0x3c fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp1nkvznwy_test.go:24 +0x3c fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp1nkvznwy_test.go:24 +0x3c fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp1nkvznwy_test.go:24\
    \ +0x3c fp=0xc0201e0"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358?)\n\
    \t/tmp/tmpwzk6zu1t_test.go:20 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpwzk6zu1t_test.go:27 +0x46 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpwzk6zu1t_test.go:27\
    \ +0x46 fp=0xc0201e"
  timestamp: 1660075008
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp1ch6gcjy_test.go:52: expected '%!s(int=4)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp1ch6gcjy_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=37)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp1ch6gcjy_test.go:52: expected '%!s(int=81)', got '%!s(int=125)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp1ch6gcjy_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=423)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp1ch6gcjy_test.go:52: expected '%!s(int=927)', got '%!s(int=1431)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpkztn5sxe_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpkztn5sxe_test.go:55: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpkztn5sxe_test.go:55: expected '%!s(int=24)', got '%!s(int=18)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpkztn5sxe_test.go:55:\
    \ expected '%!s(int=81)', got '%!s(int=61)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpkztn5sxe_test.go:55: expected '%!s(int=274)', got '%!s(int=206)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpkztn5sxe_test.go:55:\
    \ expected '%!s(int=927)', got '%!s(int=697)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpmg_s5tp9_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 0\n    case n == 2: return 1\n    default:\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd7lo_w_v_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd7lo_w_v_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd7lo_w_v_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd7lo_w_v_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd7lo_w_v_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd7lo_w_v_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    } else {\n     \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpl5jxwu4m_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpl5jxwu4m_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpl5jxwu4m_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpl5jxwu4m_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpubndokud_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpubndokud_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpubndokud_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpubndokud_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 0\n    case n == 2: return 1\n    default:\n        c := fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        return c\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var a int = 0\n    var b int = 0\n    var c int = 1\n\
    \    for i := 0; i < n; i++ {\n        a = c\n        c = b\n        b = a + b\n\
    \    }\n    return b\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpayismij4_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpayismij4_test.go:51: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpayismij4_test.go:51: expected '%!s(int=24)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpayismij4_test.go:51:\
    \ expected '%!s(int=81)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpayismij4_test.go:51: expected '%!s(int=274)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpayismij4_test.go:51:\
    \ expected '%!s(int=927)', got '%!s(int=377)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  else if n == 2 {\n        return 1\n    }\n    else if n == 3 {\n        return\
    \ 1\n    }\n    else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsjh4oo8y_test.go:24:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpr2hvbe3f_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpr2hvbe3f_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpr2hvbe3f_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpr2hvbe3f_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    if n == 2\
    \ {\n        return 0\n    }\n    return fibfib(n-2) + fibfib(n-1)\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmped6fgjb2_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmped6fgjb2_test.go:49: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmped6fgjb2_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmped6fgjb2_test.go:49: expected\
    \ '%!s(int=24)', got '%!s(int=8)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmped6fgjb2_test.go:49: expected '%!s(int=81)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmped6fgjb2_test.go:49:\
    \ expected '%!s(int=274)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmped6fgjb2_test.go:49: expected '%!s(int=927)', got '%!s(int=144)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<0 {\n        return 0\n    }\n    if n==0 {\n\
    \        return 0\n    }\n    if n==1 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpo4ty2uds_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpo4ty2uds_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpo4ty2uds_test.go:52: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpo4ty2uds_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpo4ty2uds_test.go:52: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpo4ty2uds_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n    case\
    \ n == 1:\n        return 0\n    case n == 2:\n        return 1\n    case n >\
    \ 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rs30xi0_test.go:31:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  r := fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return r\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp43q1l3h4_test.go:20 +0x8c fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp43q1l3h4_test.go:24 +0x3c fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp43q1l3h4_test.go:24 +0x3c fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp43q1l3h4_test.go:24 +0x3c fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp43q1l3h4_test.go:24 +0x3c fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp43q1l3h4_test.go:24 +0x3c fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp43q1l3h4_test.go:24\
    \ +0x3c fp=0xc0201e0"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Base case\n    if n == 0 {\n        return 0\n \
    \   }\n    // Recursive case\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358?)\n\
    \t/tmp/tmpn7vktvhq_test.go:20 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpn7vktvhq_test.go:29 +0x46 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpn7vktvhq_test.go:29 +0x46 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpn7vktvhq_test.go:29 +0x46 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpn7vktvhq_test.go:29 +0x46 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpn7vktvhq_test.go:29 +0x46 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpn7vktvhq_test.go:29\
    \ +0x46 fp=0xc0201e"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpmg_s5tp9_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpmg_s5tp9_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpmg_s5tp9_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 1\n    case n == 2: return 1\n    default:\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp7s0n1ejt_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp7s0n1ejt_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp7s0n1ejt_test.go:49: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp7s0n1ejt_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp7s0n1ejt_test.go:49: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp7s0n1ejt_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    sum := 0\n\
    \    for i := 0; i < n; i++ {\n        sum += fibfib(n-2)\n    }\n    return sum\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5ha5wxo1_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp5ha5wxo1_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp5ha5wxo1_test.go:50: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp5ha5wxo1_test.go:50: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp5ha5wxo1_test.go:50: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp5ha5wxo1_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    if n == 4 {\n        return 1\n    }\n    if\
    \ n == 5 {\n        return 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpcswelivu_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcswelivu_test.go:55: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcswelivu_test.go:55: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcswelivu_test.go:55:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcswelivu_test.go:55: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcswelivu_test.go:55:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 0\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpaiadhf41_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpaiadhf41_test.go:55: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpaiadhf41_test.go:55: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpaiadhf41_test.go:55: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpaiadhf41_test.go:55: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpaiadhf41_test.go:55:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpaiadhf41_test.go:55: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075005
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpc0pdgs65_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        n = 0\n    }\n\n    return 0\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp8xmc6if1_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp8xmc6if1_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp8xmc6if1_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp8xmc6if1_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp8xmc6if1_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp8xmc6if1_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n==0 || n==1 {\n        return n\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmprp7zrr2i_test.go:20 +0x8b fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6eb\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmprp7zrr2i_test.go:25 +0x3a fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmprp7zrr2i_test.go:25 +0x3a fp=0xc020160448 sp=0xc020160420 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc020160470 sp=0xc020160448 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmprp7zrr2i_test.go:25 +0x3a fp=0xc020160498 sp=0xc020160470 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmprp7zrr2i_test.go:25 +0x3a fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmprp7zrr2i_test.go:25 +0x3a fp=0xc020160538 sp=0xc020160510 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmprp7zrr2i_test.go:25\
    \ +0x3a fp=0xc02016"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp14ht0opc_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp14ht0opc_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp14ht0opc_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp14ht0opc_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpl193fznj_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpl193fznj_test.go:52: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpl193fznj_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpl193fznj_test.go:52: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    f := fibfib(n-1)\n\
    \    g := fibfib(n-2)\n    h := fibfib(n-3)\n\n    return f * h + g\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpiu0wyfz5_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpiu0wyfz5_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpiu0wyfz5_test.go:50: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpiu0wyfz5_test.go:50: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpiu0wyfz5_test.go:50: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpiu0wyfz5_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 1\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp9l7b4wid_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp9l7b4wid_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp9l7b4wid_test.go:43: expected '%!s(int=24)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp9l7b4wid_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp9l7b4wid_test.go:43: expected '%!s(int=274)', got '%!s(int=1)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp9l7b4wid_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp9bngrnsn_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp9bngrnsn_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp9bngrnsn_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp9bngrnsn_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp9bngrnsn_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp9bngrnsn_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpp6lo_qfe_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpp6lo_qfe_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpp6lo_qfe_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpp6lo_qfe_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075006
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        panic(\"fibfib(0) is undefined\"\
    )\n    }\n    if n < 2 {\n        return 0\n    }\n    fibfib1 := fibfib(n-1)\n\
    \    fibfib2 := fibfib(n-2)\n    fibfib3 := fibfib(n-3)\n    return fibfib1 +\
    \ fibfib2 + fibfib3\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: fibfib(0) is undefined [recovered]\n\
    \tpanic: fibfib(0) is undefined\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2({0x4fce20,\
    \ 0x548c00})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fce20, 0x548c00})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(0xd0?)\n\t/tmp/tmpc8qgi5dt_test.go:22\
    \ +0x9e\ncommand-line-arguments_test.fibfib(0x2)\n\t/tmp/tmpc8qgi5dt_test.go:29\
    \ +0x71\ncommand-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmpc8qgi5dt_test.go:40\
    \ +0x43\ntesting.tRunner(0xc0001a81a0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var sum = 1\n    sum := sum + fibfib(n-1)\n    sum\
    \ := sum + fibfib(n-2)\n    sum := sum + fibfib(n-3)\n    return sum\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphye99d0q_test.go:22:9: no new variables on left side of :=

    /tmp/tmphye99d0q_test.go:23:9: no new variables on left side of :=

    /tmp/tmphye99d0q_test.go:24:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n    case\
    \ n == 1:\n        return 1\n    case n == 2:\n        return 0\n    case n >\
    \ 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mx_lkoi_test.go:31:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var fibfibNums [30]int\n    var i int\n    for i =\
    \ 0; i <= 30; i++ {\n        fibfibNums[i] = fibfibNums[i-1] + fibfibNums[i-2]\
    \ + fibfibNums[i-3]\n    }\n    return fibfibNums[n]\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmpfycyaete_test.go:24\n\
    command-line-arguments_test.TestFibfib(0xc0001964e0?)\n\t/tmp/tmpfycyaete_test.go:36\
    \ +0x919\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n < 2:\n        return 0\n    case\
    \ n > 2:\n        return fibfib(n-1) + fibfib(n-2)\n    default:\n        return\
    \ 1\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmppkzjkhbr_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmppkzjkhbr_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=13)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmppkzjkhbr_test.go:50: expected '%!s(int=81)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmppkzjkhbr_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=89)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmppkzjkhbr_test.go:50: expected '%!s(int=927)', got '%!s(int=233)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<3 { return 0 }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp602tejx9_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp602tejx9_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp602tejx9_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp602tejx9_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp602tejx9_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp602tejx9_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp87i41t99_test.go:20 +0x8c fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp87i41t99_test.go:25 +0x3c fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp87i41t99_test.go:25\
    \ +0x3c fp=0xc0201e0"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpztmzvhxj_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpztmzvhxj_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpztmzvhxj_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpztmzvhxj_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpztmzvhxj_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 1:\n        return 0\n    case\
    \ 2:\n        return 1\n    case 3:\n        return 2\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp13oftayv_test.go:52: expected '%!s(int=4)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp13oftayv_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=37)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp13oftayv_test.go:52: expected '%!s(int=81)', got '%!s(int=125)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp13oftayv_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=423)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp13oftayv_test.go:52: expected '%!s(int=927)', got '%!s(int=1431)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n <= 2:\n        return 0\n    case\
    \ n <= 4:\n        return 1\n    case n <= 8:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxkzrasm_test.go:29:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 2 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjpmo9g82_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjpmo9g82_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjpmo9g82_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjpmo9g82_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n <= 1:\n        return 0\n    case\
    \ n <= 3:\n        return 1\n    case n <= 6:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    default:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075013
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0: return 0\n    case n ==\
    \ 1: return 0\n    case n == 2: return 1\n    default:\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Write code here\n    if n < 1 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    a, b := 0,\
    \ 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return a\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp9bfsm0g8_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp9bfsm0g8_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=13)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp9bfsm0g8_test.go:50: expected '%!s(int=81)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp9bfsm0g8_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=89)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp9bfsm0g8_test.go:50: expected '%!s(int=927)', got '%!s(int=233)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib(-n)\")\n \
    \       return -1\n    }\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 || n >= 1000 {\n        return 0\n    }\n\
    \    if n < 2 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpzsphb1do_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpzsphb1do_test.go:58: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpzsphb1do_test.go:58: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpzsphb1do_test.go:58: expected\
    \ '%!s(int=24)', got '%!s(int=33)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpzsphb1do_test.go:58: expected '%!s(int=81)', got '%!s(int=112)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpzsphb1do_test.go:58:\
    \ expected '%!s(int=274)', got '%!s(int=379)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpzsphb1do_test.go:58: expected '%!s(int=927)', got '%!s(int=1282)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n\n    if n ==\
    \ 3 {\n        return 1\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmppiiqqf2w_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmppiiqqf2w_test.go:51: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmppiiqqf2w_test.go:51: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmppiiqqf2w_test.go:51:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmppiiqqf2w_test.go:51: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmppiiqqf2w_test.go:51:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    \n    if n < 2 {\n        return 0\n    }\n    \n \
    \   if n == 3 {\n        return 1\n    }\n    \n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpqpt3nxvf_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpqpt3nxvf_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpqpt3nxvf_test.go:52: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpqpt3nxvf_test.go:52:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpqpt3nxvf_test.go:52: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpqpt3nxvf_test.go:52:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    f := fibfib(n-1)\n\
    \    return f + f + f\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmptsgh6goq_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmptsgh6goq_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmptsgh6goq_test.go:47: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmptsgh6goq_test.go:47: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmptsgh6goq_test.go:47: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmptsgh6goq_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 1\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358?)\n\
    \t/tmp/tmpeutg_w3u_test.go:20 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpeutg_w3u_test.go:29 +0x46 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpeutg_w3u_test.go:29 +0x46 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpeutg_w3u_test.go:29 +0x46 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpeutg_w3u_test.go:29 +0x46 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6a6\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpeutg_w3u_test.go:29 +0x46 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6a6\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpeutg_w3u_test.go:29\
    \ +0x46 fp=0xc0201e"
  timestamp: 1660075016
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpc0pdgs65_test.go:46: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpc0pdgs65_test.go:46: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpc0pdgs65_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075004
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-2) + fibfib(n-3)\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp1brhmv3i_test.go:49: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp1brhmv3i_test.go:49: expected\
    \ '%!s(int=24)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp1brhmv3i_test.go:49: expected '%!s(int=81)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp1brhmv3i_test.go:49: expected\
    \ '%!s(int=274)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__6 (0.00s)\n\
    \        tmp1brhmv3i_test.go:49: expected '%!s(int=927)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpb6mpfuzb_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpb6mpfuzb_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpb6mpfuzb_test.go:49: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpb6mpfuzb_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpb6mpfuzb_test.go:49: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpb6mpfuzb_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        n *= -1\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    return fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmppol7e1lm_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmppol7e1lm_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmppol7e1lm_test.go:49: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmppol7e1lm_test.go:49: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmppol7e1lm_test.go:49: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmppol7e1lm_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n > 2 {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpre6mupnc_test.go:33:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n <= 2 {\n        return n\n    }\n\n    // base\
    \ case: fibfib(0) = 0\n    if n == 0 {\n        return 0\n    }\n\n    // base\
    \ case: fibfib(1) = 0\n    if n == 1 {\n        return 0\n    }\n\n    // base\
    \ case: fibfib(2) = 1\n    if n == 2 {\n        return 1\n    }\n\n    // recursive\
    \ case:\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpncipuh3o_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpncipuh3o_test.go:63: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpncipuh3o_test.go:63: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpncipuh3o_test.go:63: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpncipuh3o_test.go:63: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpncipuh3o_test.go:63:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpncipuh3o_test.go:63: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return n\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp2vr6475k_test.go:20 +0x8b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6eb\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0"
  timestamp: 1660075016
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmpazfzidec_test.go:20 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmpazfzidec_test.go:24 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmpazfzidec_test.go:24\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074849
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // base case\n    if n < 2 {\n        return n\n  \
    \  }\n    return fibfib(n-2) + fibfib(n-1)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3fw9l6x3_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3fw9l6x3_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3fw9l6x3_test.go:47: expected '%!s(int=24)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3fw9l6x3_test.go:47:\
    \ expected '%!s(int=81)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3fw9l6x3_test.go:47: expected '%!s(int=274)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3fw9l6x3_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=377)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 0\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2r0ura4d_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp2r0ura4d_test.go:51: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp2r0ura4d_test.go:51: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp2r0ura4d_test.go:51: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp2r0ura4d_test.go:51: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp2r0ura4d_test.go:51:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n<2 {\n        return n\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmphw2rejmb_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmphw2rejmb_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmphw2rejmb_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmphw2rejmb_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075003
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Write code here\n\n    if n<=0 {\n        return\
    \ 0\n    }\n    if n==1 {\n        return 0\n    }\n    if n==2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if (n == 0) return 0\n    if (n == 1) return 0\n  \
    \  if (n == 2) return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3dj2e8fn_test.go:21:17: expected '';'', found ''return''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    fibfib0 :=\
    \ fibfib(n-1) + fibfib(n-2)\n    return fibfib0\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp50jifb3s_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp50jifb3s_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp50jifb3s_test.go:47: expected '%!s(int=24)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp50jifb3s_test.go:47:\
    \ expected '%!s(int=81)', got '%!s(int=55)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp50jifb3s_test.go:47: expected '%!s(int=274)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp50jifb3s_test.go:47:\
    \ expected '%!s(int=927)', got '%!s(int=377)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n\n    }\n\n    result :=\
    \ 0\n    i := 1\n    for ; i < n; i++ {\n        result = result + fibfib(n-i)\n\
    \    }\n\n    return result\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpcybevfki_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpcybevfki_test.go:53: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpcybevfki_test.go:53: expected '%!s(int=4)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpcybevfki_test.go:53: expected\
    \ '%!s(int=24)', got '%!s(int=96)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpcybevfki_test.go:53: expected '%!s(int=81)', got '%!s(int=384)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpcybevfki_test.go:53:\
    \ expected '%!s(int=274)', got '%!s(int=1536)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpcybevfki_test.go:53: expected '%!s(int=927)', got '%!s(int=6144)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 1\n    }\n    if n < 3 {\n        return fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    return fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpe93lv4h5_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpe93lv4h5_test.go:52: expected\
    \ '%!s(int=24)', got '%!s(int=13)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpe93lv4h5_test.go:52: expected '%!s(int=81)', got '%!s(int=28)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpe93lv4h5_test.go:52:\
    \ expected '%!s(int=274)', got '%!s(int=60)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpe93lv4h5_test.go:52: expected '%!s(int=927)', got '%!s(int=129)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return n\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp2vr6475k_test.go:20 +0x8b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6eb\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef69a\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp2vr6475k_test.go:24 +0x3a fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef69a\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp2vr6475k_test.go:24\
    \ +0x3a fp=0xc0201e0"
  timestamp: 1660075016
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // write your code in here\n    return 0\n}\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpbbb_np3i_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpbbb_np3i_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpbbb_np3i_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpbbb_np3i_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpbbb_np3i_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpbbb_np3i_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075015
