language: go_test.go
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]bool{}\n    var result []int\n    for _, v := range l {\n\
    \        if !set[v] {\n            result = append(result, v)\n            set[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpm53br2zs_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    seen := make(map[int]bool, len(l))\n    for _,\
    \ v := range l {\n        if !seen[v] {\n            seen[v] = true\n        \
    \    out = append(out, v)\n        }\n    }\n    return out\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp8ngsdzq5_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    x := make([]int, len(l))\n    i := 0\n    for _, v := range l {\n       \
    \ x[i] = v\n        i++\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \n    var out []int\n    for _, v := range x {\n        if !contains(out, v) {\n\
    \            out = append(out, v)\n        }\n    }\n\n    return out\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwpfg6txb_test.go:19:5: undefined: sort

    /tmp/tmpwpfg6txb_test.go:23:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0, len(l))\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if seen[v] {\n            continue\n        }\n    \
    \    out = append(out, v)\n        seen[v] = true\n    }\n    return out\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp2uh639n1_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    prev := -1\n    seen := map[int]bool{}\n    for _, i := range l {\n     \
    \   if seen[i] {\n            continue\n        }\n\n        seen[i] = true\n\
    \        if prev != -1 {\n            seen[prev] = true\n        }\n        prev\
    \ = i\n    }\n    return l[:len(l)-len(seen)]\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=go |>\nMy solution was like this:\n<code>\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw8wu84ah_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) <= 1 {\n        return l\n    }\n    last := l[0]\n    l := l[1:]\n\
    \    for i := 0; i < len(l); i++ {\n        if l[i] == last {\n            continue\n\
    \        } else {\n            last = l[i]\n            l = append(l, last)\n\
    \        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4w_jfzg4_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := map[int]bool{}\n    for _, v := range l {\n        if _, ok := s[v];\
    \ !ok {\n            s[v] = true\n            sort.Ints(l)\n        }\n    }\n\
    \    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscbzaxp6_test.go:16:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res []int\n    seen := make(map[int]bool)\n\n    for _, x := range l\
    \ {\n        if seen[x] {\n            continue\n        }\n        seen[x] =\
    \ true\n        res = append(res, x)\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp9rqg_ap1_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    return l\n}\n</code>\nAnd this is the code to run it all:\n\
    <code>\npackage main\n\nimport \"fmt\"\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpisv3ee6i_test.go:15:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    seen := map[int]bool{}\n\n    for _, v := range l {\n  \
    \      if !seen[v] {\n            seen[v] = true\n            u = append(u, v)\n\
    \        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpv_izugor_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    prev := -1\n    uniq := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if prev != v {\n            prev = v\n            uniq = append(uniq,\
    \ v)\n        }\n    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpclo45utc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpcu3fnnqi_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6a4yt7i4_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := 0\n    result := make([]int, 0)\n    for i := 0; i < len(l); i++ {\n\
    \        if l[k] != l[i] {\n            result = append(result, l[k])\n      \
    \      k = k + 1\n        }\n    }\n    for i := k; i < len(l); i++ {\n      \
    \  result = append(result, l[i])\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpocwmr1si_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    n := make(map[int]bool)\n    for _, v := range l {\n        n[v] = true\n\
    \    }\n    return sorted(uniqueValues(n), nil)\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjnglurrr_test.go:16:12: undefined: sorted

    /tmp/tmpjnglurrr_test.go:16:19: undefined: uniqueValues

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]int, len(l))\n    for i, v := range l {\n        m[v] =\
    \ i\n    }\n\n    result := make([]int, 0, len(m))\n    for _, v := range m {\n\
    \        result = append(result, v)\n    }\n\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp478g1pwc_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=6) %!s(int=8) %!s(int=5) %!s(int=3)\
    \ %!s(int=7) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, item\
    \ := range l {\n        if seen[item] {\n            continue\n        }\n   \
    \     seen[item] = true\n        result = append(result, item)\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=go |>\n<| a |>\nHere is a solution with less\
    \ code:\n<code>\npackage main\n\nimport \"testing\"\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9vw9rdd_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, 0, len(l))\n    seen := make(map[int]bool, len(l))\n\
    \    for _, e := range l {\n        if seen[e] {\n            continue\n     \
    \   }\n        seen[e] = true\n        result = append(result, e)\n    }\n   \
    \ return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpmntf4648_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0)\n    for _, i := range l {\n        if !contains(u, i)\
    \ {\n            u = append(u, i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8ug3pwi_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool)\n    seen := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        if !seen[v] {\n            seen[v] = true\n            l1\
    \ := append(s, v)\n            l2 := append([]int{}, l...)\n            l2 = append(l2,\
    \ v)\n            s = l1\n            l = l2\n        }\n    }\n    return l\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0udb9lfp_test.go:17:26: first argument to append must be a slice; have
    s (variable of type map[int]bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    d := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_hhrgkb_test.go:12:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, v := range l {\n        if !inArray(u, v) {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpduttih19_test.go:14:13: undefined: inArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    idx := make(map[int]int)\n    for _, v := range l {\n        idx[v]++\n \
    \   }\n    out := make([]int, 0, 5)\n    for v := range idx {\n        out = append(out,\
    \ v)\n    }\n    return out\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpa0tiqjhy_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    n := len(l)\n    sort.Ints(l)\n    var u []int\n    var j int\n    for i\
    \ = 0; i < n; i++ {\n        j := i\n        for k = i; k < n; k++ {\n       \
    \     if l[k] < l[j] {\n                j = k\n            }\n        }\n    \
    \    if j != i {\n            u = append(u, l[i])\n        }\n    }\n    return\
    \ u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplb_8_62__test.go:13:5: undefined: sort

    /tmp/tmplb_8_62__test.go:15:9: j declared but not used

    /tmp/tmplb_8_62__test.go:16:9: undefined: i

    /tmp/tmplb_8_62__test.go:17:14: undefined: i

    /tmp/tmplb_8_62__test.go:18:13: undefined: k

    /tmp/tmplb_8_62__test.go:18:17: undefined: i

    /tmp/tmplb_8_62__test.go:19:18: undefined: k

    /tmp/tmplb_8_62__test.go:20:21: undefined: k

    /tmp/tmplb_8_62__test.go:23:17: undefined: i

    /tmp/tmplb_8_62__test.go:24:29: undefined: i

    /tmp/tmplb_8_62__test.go:15:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool)\n    for _, v := range l {\n        if !s[v] {\n\
    \            s[v] = true\n            return append([]int{}, v)\n        }\n \
    \   }\n    return nil\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpzmcu0iwu_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]bool{}\n    for _, v := range l {\n        set[v] = true\n\
    \    }\n\n    result := make([]int, 0, len(set))\n    for k := range set {\n \
    \       result = append(result, k)\n    }\n\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyozy2ijj_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, len(l))\n    seen := make(map[int]bool)\n    for i, e\
    \ := range l {\n        if seen[e] {\n            continue\n        }\n      \
    \  seen[e] = true\n        out[i] = e\n    }\n    return out\n}\n</code>\n<|/\
    \ a tags=list,go,sorting dscore=5 |>\n<| c |>\nThank you very much for the solution\n\
    <|/ c |>\n<| c |>\nI'm afraid this solution is only valid for small lists. On\
    \ the other hand, `sort` seems to be faster and more memory efficient.\n<|/ c\
    \ |>\n<| c |>\nThe solution will work fine, but you might want to consider using\
    \ the [`sort.Slice`](https://golang.org/pkg/sort/#Slice) method instead of the\
    \ loop and slice indexing.\n<|/ c |>\n<| a dscore=5 |>\nJust for fun, I wrote\
    \ this simple benchmark to compare the different solutions.\nBenchmark results:\n\
    <code>\nBenchmarkUnique-1              100000  11.9 ns/op     0 B/op    0 allocs/op\n\
    BenchmarkSort-1              100000  13.5 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-2\
    \              100000  17.7 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-2 \
    \             100000  17.7 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-3\
    \              100000  16.4 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-3 \
    \             100000  16.4 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-4\
    \              100000  12.4 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-4 \
    \             100000  12.4 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-5\
    \              100000  14.8 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-5 \
    \             100000  14.8 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-6\
    \              100000  13.4 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-6 \
    \             100000  13.4 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-7\
    \              100000  12.8 ns/op     0 B/op    0 allocs/op\nBenchmarkSort-7 \
    \             100000  12.8 ns/op     0 B/op    0 allocs/op\nBenchmarkUnique-8\
    \              100000  \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpua36g9vo_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    out := make([]int, 0, len(l))\n    for i, v := range l\
    \ {\n        if i > 0 && l[i-1] == v {\n            continue\n        }\n    \
    \    out = append(out, v)\n    }\n    return out\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadcscce__test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075074
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n    seen := make(map[int]bool)\n    for _, i := range l\
    \ {\n        if seen[i] {\n            continue\n        }\n        seen[i] =\
    \ true\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpcmx5buaa_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var a []int\n    for _, v := range l {\n        if !contains(a, v) {\n  \
    \          a = append(a, v)\n        }\n    }\n    return a\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcdz8upm_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    i := 0\n    n := len(l)\n    s := make([]int, n)\n    for ; i < n; i++ {\n\
    \        if !contains(l, s[i]) {\n            s[i] = l[i]\n        } else {\n\
    \            break\n        }\n    }\n    return s[0:i]\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9_1_3l4_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    r := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        r = append(r, v)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplhgmgdba_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0, len(l))\n    seen := map[int]bool{}\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        s = append(s, v)\n    }\n    return s\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjz1kqy4w_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n\n    l := []int{}\n    for v := range m {\n        l = append(l, v)\n\
    \    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpueocvkzh_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := make(map[int]bool)\n    for _, val := range l {\n        set[val]\
    \ = true\n    }\n\n    var result []int\n    for v := range set {\n        result\
    \ = append(result, v)\n    }\n\n    return append([]int{}, result...)\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5nv4xxh1_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0, len(l))\n    for _, v := range l {\n        // Avoid\
    \ duplicate elements\n        if _, ok := out[v]; ok {\n            continue\n\
    \        }\n        out = append(out, v)\n    }\n    return out\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhxxh8fu_test.go:15:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    result := make([]int, len(l))\n    for i := 0;\
    \ i < len(l); i++ {\n        if seen[l[i]] {\n            continue\n        }\n\
    \        result[i] = l[i]\n        seen[l[i]] = true\n    }\n    return result\n\
    }\n</code>\n<|/ a |>\n<| a dscore=5 |>\n<code>\nvar unique = map[string]bool{}\n\
    for _, item := range []string{1, 2, 3, 4, 4, 5} {\n    if unique[item] {\n   \
    \     // already exist\n    } else {\n        unique[item] = true\n    }\n}\n\
    fmt.Printf(\"%v\\n\", unique)\n</code>\nOutput : map[5:true]\n<|/ a tags=go,slice,sorting\
    \ |>\n<| c |>\nThis isn't a good solution. Consider the case where you try to\
    \ loop through a slice and encounter a duplicate item at the end. You'd need to\
    \ add that item to the slice as a last item before you break out of the loop.\
    \ Since this solution is modifying the slice you're looping through, it's going\
    \ to cause unnecessary moves and copies. It's a good solution when the slice you're\
    \ looping through is small and can be copied entirely before looping.\n<|/ c |>\n\
    <| a tags=go,slice,sorting dscore=5 |>\n<code>\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe11xjb7p_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    var uid map[int]bool\n    var result []int\n    for _,\
    \ v := range l {\n        if _, ok := uid[v]; !ok {\n            result = []int{v}\n\
    \            uid[v] = true\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ty9027b_test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    idx := make(map[int]bool, len(l))\n    for _, v := range l {\n        idx[v]\
    \ = true\n    }\n    result := make([]int, 0, len(idx))\n    for v := range idx\
    \ {\n        result = append(result, v)\n    }\n    return result\n}\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp68y2yt1e_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=0) %!s(int=123) %!s(int=3)\
    \ %!s(int=9) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075076
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Sorting will avoid duplicates\n    sort.Ints(l)\n    // return only unique\
    \ elements\n    var result []int\n    for _, item := range l {\n        // skip\
    \ already existing values\n        if !inArray(item, result) {\n            result\
    \ = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo35nif8_test.go:13:5: undefined: sort

    /tmp/tmpvo35nif8_test.go:18:13: undefined: inArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]*bool)\n    result := make([]int, 0)\n    for _, e :=\
    \ range l {\n        if seen[e] {\n            continue\n        }\n        seen[e]\
    \ = true\n        result = append(result, e)\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuyir2qx_test.go:15:12: non-boolean condition in if statement

    /tmp/tmpzuyir2qx_test.go:18:19: cannot use true (untyped bool constant) as *bool
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0, len(l))\n    seen := make(map[int]bool)\n    for\
    \ _, v := range l {\n        if _, ok := seen[v]; !ok {\n            unique =\
    \ append(unique, v)\n            seen[v] = true\n        }\n    }\n    return\
    \ unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp6lbuwb57_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make(map[int]bool)\n    var res []int\n    for _, v := range l {\n \
    \       if !u[v] {\n            res = append(res, v)\n            u[v] = true\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpzojypfvb_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075076
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    var res []int\n    for _, v := range l {\n        if !inSlice(v,\
    \ res) {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlzo2jvt_test.go:12:5: undefined: sort

    /tmp/tmptlzo2jvt_test.go:15:13: undefined: inSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0, len(l))\n    for\
    \ _, v := range l {\n        if seen[v] {\n            continue\n        }\n \
    \       seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp463al_7__test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074944
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, len(l))\n    for i := range l {\n        for j := range\
    \ result {\n            if l[i] < result[j] {\n                result[j] = l[i]\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpy5n8strk_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    seen := make(map[int]\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8mn6279x_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := []int{}\n    for _, v := range l {\n        if !contains(out, v) {\n\
    \            out = append(out, v)\n        }\n    }\n    return out\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpys3q2vzg_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    out := make([]int, 0, len(l))\n    for _, v :=\
    \ range l {\n        if seen[v] == true {\n            continue\n        }\n \
    \       seen[v] = true\n        out = append(out, v)\n    }\n    return out\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpt6ah8eec_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, len(l))\n    for i, v := range l {\n        if i > 0 &&\
    \ l[i-1] != v {\n            s[i] = v\n        }\n    }\n    return s\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpd86rwzcf_test.go:34: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := make([]int, len(l))\n    seen := make(map[int]bool, len(l))\n    for\
    \ _, v := range l {\n        if seen[v] {\n            continue\n        }\n \
    \       seen[v] = true\n        k[v] = true\n    }\n    return k\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wpj_c8t_test.go:19:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := 0\n    seen := map[int]bool{}\n    for _, v := range l {\n        if\
    \ !seen[v] {\n            seen[v] = true\n            k += 1\n        }\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = l[i]\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for\
    \ your answer.\n<|/ c |>\n<| c |>\nThis solution has a very high complexity (O(n\xB2\
    ), because of the two loops. With n elements, the complexity is O(n\xB3).\n<|/\
    \ c |>\n<| a dscore=5 |>\nIf you want a generic solution which can work on arbitrary\
    \ data types, then you can use a map to keep track of seen elements.\n<code>\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolx4crks_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]bool{}\n    var res []int\n    for _, v := range l {\n   \
    \     if !set[v] {\n            res = append(res, v)\n            set[v] = true\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpaihhidcz_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    seen := make(map[int]\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8mn6279x_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075075
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    out := make([]int, 0, len(l))\n    var seen map[int]bool\n\
    \    for _, x := range l {\n        if seen[x] {\n            continue\n     \
    \   }\n        out = append(out, x)\n        seen[x] = true\n    }\n    return\
    \ out\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9jylinr_test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0, len(l))\n    for\
    \ _, v := range l {\n        if _, ok := seen[v]; !ok {\n            seen[v] =\
    \ true\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpqwxrk34g_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, len(l))\n    found := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if !found[v] {\n            unique[v] = true\n     \
    \       found[v] = true\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp522ycgu7_test.go:16:25: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) < 2 {\n        return l\n    }\n\n    s := make(map[int]bool)\n\
    \    out := make([]int, 0)\n\n    for _, v := range l {\n        if !s[v] {\n\
    \            out = append(out, v)\n            s[v] = true\n        }\n    }\n\
    \n    return out\n}\n</code>\n<|/ a dscore=1 tags=algorithm,go |>\n<| a tags=algorithm,go\
    \ |>\nHere is a simple solution in python which can be optimized:\n<code>\ndef\
    \ unique_nums(l):\n    unique_nums = []\n    unique_nums.append(l[0])\n    for\
    \ i in range(1, len(l)):\n        if l[i] not in unique_nums:\n            unique_nums.append(l[i])\n\
    \    return unique_nums\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ahq8h5z_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n    seenIdx := make(map[int]int)\n    for _, v := range\
    \ l {\n        if _, ok := seenIdx[v]; !ok {\n            result = append(result,\
    \ v)\n            seenIdx[v] = len(result)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvslt0ie0_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, len(l))\n    j := 0\n    for i, v := range l {\n       \
    \ if i < j {\n            s[j], s[i] = s[i], s[j]\n        }\n        s[j] = v\n\
    \        j += 1\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_rwasysr_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0qj1a7yl_test.go:12:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9muha2h_test.go:12:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0, len(l))\n    seen := make(map[int]\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp82nvz2qz_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz8y218hb_test.go:12:20: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    unique := make([]int, 0)\n\n    for _, v\
    \ := range l {\n        if seen[v] {\n            continue\n        }\n      \
    \  unique = append(unique, v)\n        seen[v] = true\n    }\n    return unique\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpkymjemhk_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]bool{}\n    for _, v := range l {\n        m[v] = true\n   \
    \ }\n    l := []int{}\n    for k := range m {\n        l = append(l, k)\n    }\n\
    \    l = append(l, 0)\n    sort.Ints(l)\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppziuqhd6_test.go:16:7: no new variables on left side of :=

    /tmp/tmppziuqhd6_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := []int{}\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpm7ql2rn8_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n    for _, v := range l {\n        if _, ok := result[v];\
    \ ok {\n            continue\n        }\n        result = append(result, v)\n\
    \    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa0tbxvon_test.go:14:21: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]bool{}\n    for _, v := range l {\n        m[v] = true\n   \
    \ }\n    return make([]int, 0, len(m))\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpulpny7j__test.go:32: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var out []int\n    seen := map[int]bool{}\n\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            out = append(out,\
    \ v)\n        }\n    }\n    return out\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_vz61tlb_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    i := 0\n    j := 0\n    result := make([]int, len(l))\n    for ; i < len(l);\
    \ i, j = i+1, j+1 {\n        if l[i] != l[j] {\n            result[j] = l[i]\n\
    \        }\n    }\n    return result\n}\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp41z946zi_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return nil\n    }\n    index := 1\n    result :=\
    \ []int{}\n    for _, e := range l {\n        if e != l[index] {\n           \
    \ result = append(result, e)\n        }\n        index++\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9]\
    \ with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512680,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmpawiu62s7_test.go:18\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmpawiu62s7_test.go:33 +0x367\n\
    testing.tRunner(0xc0000cc4e0, 0x527fa0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    j := 0\n    result := make([]int, len(l))\n    for i := range l {\n     \
    \   result[j] = l[i]\n        if j+1 < len(l) {\n            j++\n        } else\
    \ {\n            j = 0\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpffz5rnzl_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    var ret []int\n    for _, v := range l {\n \
    \       if _, ok := m[v]; !ok {\n            m[v] = true\n            ret = append(ret,\
    \ v)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp8gntkhql_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    j := 0\n    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    for k := range m {\n        l[j++] = k\n    }\n    return\
    \ l\n}\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqxwtnhzl_test.go:18:12: expected '']'', found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    for _, v := range l {\n        if !seen[v] {\n\
    \            seen[v] = true\n            return append([]int{v}, v...)\n     \
    \   }\n    }\n\n    return nil\n}\n</code>\n<|/ a tags=go,list |>\n<| c |>\nI\
    \ like this answer too but I am going to accept the one above because it is more\
    \ efficient and also it has a bit more explanation.\n<|/ c |>\n<| a |>\nThe accepted\
    \ answer has some errors with its code, which can be fixed by:\n\nThe type assertion\
    \ should be done on v, not v[0], otherwise you lose type safety\nThe return statement\
    \ should be v instead of v[0]\n\nApart from that, the code is very concise and\
    \ elegant, so I would use that instead.\nI thought I would add another answer\
    \ that makes use of the fact that []int{5, 3, 5, 2, 3, 3, 9, 0, 123} is sorted.\
    \ The algorithm is basically the same.\n<code>\npackage unique_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl790g8rq_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075078
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := map[int]bool{}\n    for _, v := range l {\n        if s[v] {\n     \
    \       continue\n        }\n        s[v] = true\n        s = append(s, v)\n \
    \   }\n    return s[:len(s)]\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7pent88x_test.go:18:20: first argument to append must be a slice; have
    s (variable of type map[int]bool)

    /tmp/tmp7pent88x_test.go:20:12: invalid operation: cannot slice s (variable of
    type map[int]bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := make([]int, 0)\n    for i := 0; i < len(l); i++ {\n        if l[i] !=\
    \ k[len(k)-1] {\n            k = append(k, l[i])\n        }\n    }\n    return\
    \ k\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmppnq77rzv_test.go:14\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmppnq77rzv_test.go:28 +0x32f\n\
    testing.tRunner(0xc0000da340, 0x527fa0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n\n    result := []int{}\n    for _, v := range l\
    \ {\n        if seen[v] {\n            continue\n        }\n\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n\n    return result\n}\n\
    </code>\n<|/ a |>\n<| a dscore=2 tags=go,algorithm,sorting,arrays |>\nMy solution\
    \ is slightly different from other solutions, it uses only one pass through the\
    \ slice. It requires sorting an extra slice of the original slice and then slice\
    \ into 2 slices with equal lengths.\n<code>\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjj3jpfrl_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, len(l))\n    seen := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        if !seen[v] {\n            seen[v] = true\n            s[len(s)-1]\
    \ = v\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjgpsv6am_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    prev := make([]int, len(l))\n    result := make([]int, 0, len(prev))\n  \
    \  for i, v := range l {\n        if !containsAny(prev, v) {\n            prev\
    \ = append(prev, v)\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51kboxkn_test.go:14:9: i declared but not used

    /tmp/tmp51kboxkn_test.go:15:13: undefined: containsAny

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    var uniqueLi []int\n\
    \    current := l[0]\n    for _, v := range l {\n        if v == current {\n \
    \           continue\n        } else {\n            uniqueLi = append(uniqueLi,\
    \ v)\n        }\n        current = v\n    }\n    return uniqueLi\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplg47x9ek_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=2) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := 0\n    var result []int\n    for _, value := range l {\n        if value\
    \ == l[k] {\n            continue\n        }\n        result = append(result,\
    \ value)\n        k++\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpc5i_9p23_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=2) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := make([]int, len(l))\n    seen := make(map[int]bool)\n    for i :=\
    \ range l {\n        if seen[l[i]] {\n            continue\n        }\n      \
    \  seen[l[i]] = true\n        uniq[i] = l[i]\n    }\n    return uniq\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp7s8ivnqk_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, e :=\
    \ range l {\n        if seen[e] {\n            continue\n        }\n        seen[e]\
    \ = true\n        result = append(result, e)\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpz4pa0m0w_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := make([]int, 0)\n    j := 0\n    for i := range l {\n        if j\
    \ > i {\n            if l[j] == l[i] {\n                continue\n           \
    \ }\n            uniq = append(uniq, l[j])\n        }\n        j += 1\n    }\n\
    \    return uniq\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpkbhossut_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    out := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        out = append(out, v)\n    }\n    return out\n}\n`,\n\t},\n}\n\
    \nvar testDataSetsPacked = []string{\n\t`{\n  \"package\": \"unique_test\",\n\
    \  \"tests\": []\n  {\n    \"test\": \"Packed\",\n    \"input\": [\n      [0,\
    \ 1, 2, 3, 4, 5],\n      [5, 1, 3, 4, 5, 3],\n      [5, 4, 3, 2, 7, 0],\n    \
    \  [6, 5, 2, 4, 5, 3],\n      [3, 6, 5, 2, 3, 5],\n      [0, 5, 4, 3, 2, 1],\n\
    \      [0, 6, 2, 4, 5, 3],\n      [4, 5, 6, 1, 3, 5],\n      [7, 1, 2, 3, 4, 5],\n\
    \      [7, 1, 5, 4, 3, 2],\n      [7, 5, 4, 3, 2, 1],\n      [8, 6, 5, 4, 3, 2],\n\
    \      [9, 8, 5, 4, 3, 2],\n      [9, 5, 6, 5, 4, 3]\n    ],\n    \"expected_output\"\
    : [\n      [0, 1, 2, 3, 4, 5],\n      [5, 1, 3, 4, 5, 3],\n      [5, 4, 3, 2,\
    \ 7, 0],\n      [6, 5, 2, 4, 5, 3],\n      [3, 6, 5, 2, 3, 5],\n      [0, 5, 4,\
    \ 3, 2, 1],\n      [0, 6, 2, 4, 5, 3],\n      [4, 5, 6, 1, 3, 5],\n      [7, 1,\
    \ 2, 3, 4, 5],\n      [7, 1, 5, 4, 3, 2],\n      [7, 5, 4, 3, 2, 1],\n      [8,\
    \ 6, 5, 4, 3, 2],\n      [9, 8, 5, 4, 3, 2],\n      [9, 5, 6, 5, 4, 3]\n    ],\n\
    \    \"expected_errors\": []\n  },\n  {\n    \"test\": \"Packed with same values\"\
    ,\n    \"input\": [\n      [0, 1, 2, 3, 4, 5],\n      [5, 4, 3, 2, 7, 0],\n  \
    \    [6, 5, 2, 4, 5, 3],\n      [7, 1, 2, 3, 4, 5],\n      [7, 5, 4, 3, 2, 1],\n\
    \      [8, 6, 5, 4, 3, 2],\n      [9, 8, 5, 4, 3, 2],\n      [9, 5, 4, 3, 2, 1],\n\
    \      [9, 8, 5, 4, 3, 2]\n    ],\n    \"expected_output\": [\n      [0, 1, 2,\
    \ 3, 4, 5],\n      [5, 4, 3, 2, 7, 0],\n      [6, 5, 2, 4, 5, 3],\n      [7, 1,\
    \ 2, 3, 4, 5],\n      [7, 5, 4, 3, 2, 1],\n      [8, 6, 5, 4, 3, 2],\n      [9,\
    \ 8, 5, 4, 3, 2],\n      [9, 5, 4, 3, 2, 1],\n      [9, 8, 5, 4, 3, 2]\n    ],\n\
    \    \"expected_errors\": []\n  },\n  {\n    \"test\": \"Packed with different\
    \ values\",\n    \"input\": [\n      [0, 1, 2, 3, 4, 5],\n      [5, 4, 3, 2, 7,\
    \ 0],\n      [6, 5, 2, 4, 5, 3],\n      [7, 1, 2, 3, 4, 5],\n      [7, 5, 4, 3,\
    \ 2, 1],\n      [8, 6, 5, 4, 3, 2],\n      [9, 8, 5, 4, 3, 2],\n      [9, 5, 4,\
    \ 3, 2, 1],\n      [9, 8, 5, 4, 3, 2]\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments\n/tmp/tmp36mr5s0e_test.go:23:1: expected declaration,\
    \ found `,\n\t},\n}\n\nvar testDataSetsPacked = []string{\n\t`\n"
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool, len(l))\n    for _, v := range l {\n        if !s[v]\
    \ {\n            s[v] = true\n            return append(l, v)\n        }\n   \
    \ }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjef4f5ye_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := make(map[int]bool)\n    for _, v := range l {\n        if !v {\n   \
    \         v = true\n        }\n        if _, ok := l[v]; !ok {\n            l[v]\
    \ = true\n        }\n    }\n    return make([]int, 0)\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wv_i2d4_test.go:12:7: no new variables on left side of :=

    /tmp/tmp1wv_i2d4_test.go:12:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp1wv_i2d4_test.go:14:13: invalid operation: operator ! not defined on v
    (variable of type int)

    /tmp/tmp1wv_i2d4_test.go:15:17: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmp1wv_i2d4_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmp1wv_i2d4_test.go:18:20: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: null
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) < 2 {\n        return l\n    }\n    i := 0\n    j := 0\n    n :=\
    \ len(l)\n    out := make([]int, 0, n)\n    for i < n {\n        if l[i] < l[j]\
    \ {\n            out = append(out, l[i])\n            i++\n        } else {\n\
    \            j = i\n            out = append(out, l[j])\n        }\n    }\n  \
    \  return out\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    n := len(l)\n    r := make([]int, 0, n)\n    for _, v := range l {\n    \
    \    if r == nil {\n            r = append(r, v)\n            continue\n     \
    \   }\n        for _, v2 := range r {\n            if v == v2 {\n            \
    \    continue\n            }\n            if v > v2 {\n                break\n\
    \            }\n            r = append(r, v)\n        }\n    }\n    return r\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpe1f6ro92_test.go:45: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool)\n    for _, v := range l {\n        if !s[v] {\n\
    \            s[v] = true\n            result := make([]int, 0)\n            for\
    \ _, v2 := range l {\n                if v != v2 {\n                    result\
    \ = append(result, v2)\n                }\n            }\n            return result\n\
    \        }\n    }\n    return l\n}\n</code>\n<|/ a |>\n<| a |>\nYou can try this\
    \ short and simple code:\n<code>\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8igibx1n_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, len(l))\n\n    seen := make(map[int]\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8vjv6tli_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, len(l))\n    for i, j := range l {\n        if i >\
    \ 0 && l[i-1] == j {\n            continue\n        }\n        result[i] = j\n\
    \    }\n    return sorted(result)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofkg18oz_test.go:19:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    result := make([]int, 0, len(l))\n    for _,\
    \ v := range l {\n        m[v] = true\n    }\n    for _, v := range m {\n    \
    \    result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64amj4v4_test.go:18:33: cannot use v (variable of type bool) as type int
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, len(l))\n    seen := make(map[int]bool)\n    for i :=\
    \ range l {\n        if seen[l[i]] {\n            continue\n        }\n      \
    \  seen[l[i]] = true\n        out[i] = l[i]\n    }\n    return out\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpb5tuoypz_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0, len(l))\n    for\
    \ _, v := range l {\n        if !seen[v] {\n            result = append(result,\
    \ v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpu_371tgm_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    result := []int{}\n    for _, i := range l {\n\
    \        if seen[i] {\n            continue\n        }\n        seen[i] = true\n\
    \        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_1d053go_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := append([]int{}, l...)\n    for i := range l {\n        for j := range\
    \ l {\n            if i != j && l[i] == l[j] {\n                copy(l[j:], l[j+1:])\n\
    \                l[j] = i\n                j = j - 1\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgvimetc_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz8y218hb_test.go:12:20: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Make two maps to store element and uniq count in same memory\n    // since\
    \ they are gonna be used frequently.\n    // This algorithm is O(n^2), but if\
    \ we assume that our inputs are small\n    // enough, we can improve this by O(n).\n\
    \    // We need two maps, because we cannot use sorted slice or map.\n    // If\
    \ we sort slice or map, we may lose some information that we need\n    // to recon\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9roen6o3_test.go:19:6: expected ''('', found TestUnique

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ret []int\n    seen := make(map[int]bool)\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        ret = append(ret, v)\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjq2_ucbu_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := make(map[int]bool)\n    result := make([]int, 0)\n\n    for _, v :=\
    \ range l {\n        if !set[v] {\n            set[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptix7spvb_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool, len(l))\n    for _, v := range l {\n        if _,\
    \ ok := s[v]; !ok {\n            s[v] = true\n        } else {\n            continue\n\
    \        }\n        fmt.Println(v)\n    }\n    return nil\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,go |>\nAnother implementation could be:\n<code>\npackage\
    \ unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg4pqu6xm_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        if m[v] {\n \
    \           continue\n        }\n        m[v] = true\n    }\n\n    var out []int\n\
    \    for v := range m {\n        out = append(out, v)\n    }\n    return out\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp0a1miwo9_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := make(map[int]bool)\n    var result []int\n    for _, v := range l\
    \ {\n        if !set[v] {\n            result = append(result, v)\n          \
    \  set[v] = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmphtwesdtp_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, 0, len(l))\n    seen := make(map[int]\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdak4reej_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var a map[int]bool\n    var u []int\n    for _, v := range l {\n        if\
    \ !a[v] {\n            u = append(u, v)\n        }\n        a[v] = true\n    }\n\
    \    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: assignment to entry in nil map [recovered]\n\
    \tpanic: assignment to entry in nil map\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502aa0,\
    \ 0x5491b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502aa0, 0x5491b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmp0t7f55zd_test.go:18\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmp0t7f55zd_test.go:30 +0xe8\n\
    testing.tRunner(0xc0000cc4e0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := make([]int, 0, len(l))\n    var i int\n    for i := 0; i < len(l); i++\
    \ {\n        if i == 0 || l[i] != l[i-1] {\n            l = append(l, l[i])\n\
    \        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwjk66hk_test.go:12:7: no new variables on left side of :=

    /tmp/tmpiwjk66hk_test.go:13:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := make(map[int]bool)\n    result := make([]int, 0)\n\n    for _, v :=\
    \ range l {\n        if !set[v] {\n            set[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1vfo2rhf_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool, len(l))\n    for _, v := range l {\n        if !s[v]\
    \ {\n            s[v] = true\n        }\n    }\n    result := make([]int, 0, len(s))\n\
    \    for k := range s {\n        result = append(result, k)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n</code>\n<|/ a tags=go,sorting |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiq4u373s_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    for _, v := range l {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        return append(l,\
    \ v)\n    }\n    return l\n}\n</code>\n<|/ a |>\n<| a tags=go dscore=4 |>\nA simple\
    \ and efficient solution with less memory usage is using the slice as a stack.\
    \ Also no need to import a package for this:\n<code>\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp703g33ck_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    var unique []int\n    for _, v := range l {\n        if\
    \ !contains(&unique, v) {\n            unique = append(unique, v)\n        }\n\
    \    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgh278tu6_test.go:12:5: undefined: sort

    /tmp/tmpgh278tu6_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, v := range l {\n        if !inArray(u, v) {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpduttih19_test.go:14:13: undefined: inArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    for _, v := range l {\n        if !contains(s, v)\
    \ {\n            s = append(s, v)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbl6sqbw3_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074944
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, len(l))\n    for i := range l {\n        s[i] = l[i]\n \
    \   }\n    sort.Ints(s)\n    return s\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dntod2y_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    n := 0\n    prev := 0\n    result := make([]int, 0, len(l))\n    for _, val\
    \ := range l {\n        n += 1\n        if val != prev {\n            result =\
    \ append(result, val)\n            prev = val\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a |>\n<| c |>\nCan you explain why you have to use `unique_test`\
    \ ? Is it a mistake or just a naming convention ? And why is it necessary ?\n\
    <|/ c |>\n<| c |>\nThe name \"unique_test\" was chosen arbitrarily. You can name\
    \ it however you like. I chose this name because it will be easily recognisable\
    \ from the code that uses this \"unique_test\" package.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI think this is the most readable and efficient algorithm for this problem:\n\
    <code>\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkngvjs_0_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]bool{}\n    for _, i := range l {\n        if !m[i] {\n    \
    \        m[i] = true\n            return append([]int{i}, i...)\n        }\n \
    \   }\n    return nil\n}\n</code>\n<|/ a |>\n<| a tags=go |>\nIf you want a really\
    \ short and sweet solution without using golang methods,\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm3zf6odx_test.go:21:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, len(l))\n    m := map[int]int{}\n    for i := 0; i\
    \ < len(l); i++ {\n        m[l[i]] = i\n    }\n\n    for key, _ := range m {\n\
    \        result[key] = l[key]\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9]\
    \ with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmptwp4736d_test.go:19\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmptwp4736d_test.go:31 +0x3c5\n\
    testing.tRunner(0xc0001036c0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0)\n    for _, value := range l {\n        if !contains(unique,\
    \ value) {\n            unique = append(unique, value)\n        }\n    }\n   \
    \ return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqg18igcw_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    var result []int\n    for _, e := range l {\n\
    \        if seen[e] {\n            continue\n        }\n        seen[e] = true\n\
    \        result = append(result, e)\n    }\n    return result\n}\n</code>\n<|/\
    \ a tags=go |>\n<| a |>\nIf you want to use sorting, you can use following function\
    \ and pass your list to it, it will return sorted slice of ints.\n<code>\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx77przs5_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    result := []int{}\n    for _, e := range l {\n\
    \        if seen[e] {\n            continue\n        }\n        seen[e] = true\n\
    \        result = append(result, e)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjaea12f0_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]bool{}\n    for _, i := range l {\n        if !m[i] {\n    \
    \        m[i] = true\n            return append(l, i)\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp6v0mrccw_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, i := range l {\n        if i != u[len(u)-1] {\n \
    \           u = append(u, i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmp4rk0mhny_test.go:14\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmp4rk0mhny_test.go:28 +0x325\n\
    testing.tRunner(0xc0000da1a0, 0x527fa0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    var result []int\n    for _, v := range l\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjybzf3zw_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := []int{}\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is a good solution, but it doesn't quite answer the question\
    \ (at least not in the most straightforward manner).  If I want to keep my data\
    \ \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4jkd53du_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Make new list to hold the unique elements\n    c := make([]int, 0, len(l))\n\
    \n    // Add the first unique element\n    for _, v := range l {\n        if _,\
    \ ok := c[v]; !ok {\n            c <- v\n        }\n    }\n    c <- 0\n\n    //\
    \ Add rest to new list until list is empty\n    for v := range c {\n        //\
    \ Add the element to new list\n        l = append(l, v)\n\n        // Get element\
    \ from the old list to remove it from the old list\n        i := len(c) - 1\n\
    \        for j := len(l)-1; j >= 0; j-- {\n            if l[j] == v {\n      \
    \          // Remove element\n                c[i] = l[j]\n                i =\
    \ j\n            }\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3sj6p76_test.go:17:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpj3sj6p76_test.go:18:13: invalid operation: cannot send to non-channel
    c (variable of type []int)

    /tmp/tmpj3sj6p76_test.go:21:5: invalid operation: cannot send to non-channel c
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ret []int\n    seen := map[int]bool{}\n    for _, e := range l {\n  \
    \      if seen[e] {\n            continue\n        }\n        seen[e] = true\n\
    \        ret = append(ret, e)\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpolaas7js_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Create a map to store unique elements\n    m := map[int]bool{}\n\n   \
    \ // For each element check if it is unique or not\n    for _, e := range l {\n\
    \        if _, exists := m[e]; !exists {\n            m[e] = true\n        } else\
    \ {\n            // If it is unique, remove it from the map\n            m[e]\
    \ = false\n        }\n    }\n\n    // Return a slice of unique elements\n    var\
    \ output []int\n    for e := range m {\n        output = append(output, e)\n \
    \   }\n\n    return output\n}\n</code>\n<|/ a tags=list,go |>\n<| a tags=list,go\
    \ |>\nAnother way of doing this in golang is to simply return the unique items\
    \ of the slice.\nI haven't written the code for you, but I have shared the logic\
    \ to get the unique items from a slice of strings.\n<code>\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy5qhb62m_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    result := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] == false {\n            seen[v] = true\n           \
    \ result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnp_569wv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    j := 0\n    var result []int\n    for i := 0; i < len(l); i++ {\n       \
    \ if l[j] != l[i] {\n            result = append(result, l[j])\n            j++\n\
    \        }\n    }\n    return append(result, l[j:]...)\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvkraklxv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var sorted []int\n    unique := make(map[int]bool)\n    for _, v := range\
    \ l {\n        if _, ok := unique[v]; ok {\n            continue\n        }\n\
    \        unique[v] = true\n        sorted = append(sorted, v)\n    }\n    return\
    \ sorted\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmps9cczknh_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    result := []int{}\n    for _, v := range l {\n\
    \        if seen[v] == false {\n            seen[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyr4qn20t_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0, len(l))\n    var last, current int\n    for i := range\
    \ l {\n        if last != current {\n            s[len(s)] = l[i]\n          \
    \  last = current\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpkae7gvpv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, len(l))\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l {\n        if !seen[v] {\n            result[len(seen)] = v\n \
    \           seen[v] = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpddhzb2ig_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var list []int\n    seen := map[int]bool{}\n    for _, v := range l {\n \
    \       if !seen[v] {\n            list = append(list, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return list\n}\n</code>\n<|/ a tags=algorithm,go\
    \ |>\n<| a dscore=1 |>\nI find this golang code very efficient.\n<code>\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2qd6kgjd_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := map[int]bool{}\n    var result []int\n    for _, v := range l {\n  \
    \      if _, ok := m[v]; !ok {\n            result = append(result, v)\n     \
    \   }\n        m[v] = true\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptwcja3o3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Sort(sort.IntSlice(l))\n    var ret []int\n    for _, v := range l {\n\
    \        if !utils.Has(ret, v) {\n            ret = append(ret, v)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4j7fkno6_test.go:12:5: undefined: sort

    /tmp/tmp4j7fkno6_test.go:15:13: undefined: utils

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    s := map[int]int{}\n\
    \    for _, v := range l {\n        s[v]++\n    }\n    l := make([]int, 0, len(s))\n\
    \    for k := range s {\n        l = append(l, k)\n    }\n    return l\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc_6ea6s_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seenSet := make(map[int]bool)\n    return filterOutDuplicates(l, seenSet)\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxyr_6b__test.go:13:12: undefined: filterOutDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    map := make(map[int]int)\n    result := []int{}\n\n    for _, v := range\
    \ l {\n        if _, exists := map[v]; !exists {\n            map[v] = len(result)\n\
    \            result = append(result, v)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscpdpyp__test.go:12:9: expected ''['', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    k := 0\n    set := make(map[int]bool)\n    for _, v := range l {\n      \
    \  if set[v] == true {\n            k = k + 1\n            continue\n        }\n\
    \        set[v] = true\n        k += 1\n    }\n    return make([]int, k, k)\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpcoqdr1gw_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    var unique []int\n    for _, v := range l\
    \ {\n        if seen[v] == false {\n            unique = append(unique, v)\n \
    \           seen[v] = true\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpz76auncn_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]*\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbkriqt7z_test.go:13:6: expected ''('', found TestUnique

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := make([]int, len(l))\n    j := 0\n    for i := 0; i < len(l); i++ {\n\
    \        if i == 0 {\n            l[i] = l[j]\n            j++\n            continue\n\
    \        }\n        if l[i-1] == l[i] {\n            continue\n        }\n   \
    \     l[i] = l[j]\n        j++\n    }\n    return l[0:j]\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwp4ywu9j_test.go:12:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    r := make([]int, 0)\n    for _, v := range\
    \ l {\n        if _, ok := seen[v]; ok {\n            continue\n        }\n  \
    \      rs = append(r, v)\n        seen[v] = true\n    }\n    return r\n}\n</code>\n\
    <|/ a tags=go |>\n<| a |>\nI like to use something like this:\n<code>\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcis5_cy4_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6a4yt7i4_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyrw46eip_test.go:12:21: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seens := map[int]bool{}\n    result := make([]int, 0)\n    for i, v := range\
    \ l {\n        if !seens[v] {\n            seens[v] = true\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiicgi8pn_test.go:14:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0, len(l))\n    var seen map[int]bool\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        out = append(out, v)\n    }\n    return sorted(out)\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6t8fuq6_test.go:21:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjz8jwndb_test.go:13:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return nil\n    }\n    lastElement := l[0]\n  \
    \  result := make([]int, 0)\n    for i, element := range l {\n        if element\
    \ != lastElement {\n            result = append(result, element)\n           \
    \ lastElement = element\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1ztonnl_test.go:17:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool, len(l))\n    unique := make([]int, 0, len(l))\n\
    \    for _, v := range l {\n        if seen[v] {\n            continue\n     \
    \   }\n        seen[v] = true\n        unique = append(unique, v)\n    }\n   \
    \ return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp8o5jp447_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0, len(l))\n    seen := make(map[int]bool)\n    for\
    \ _, e := range l {\n        if seen[e] {\n            continue\n        }\n \
    \       seen[e] = true\n        unique = append(unique, e)\n    }\n    return\
    \ unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp25zk3xwp_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    i := 0\n    result := make([]int, len(l))\n    for _, v := range l {\n  \
    \      for j := i; j < len(result); j++ {\n            if v == result[j] {\n \
    \               break\n            }\n        }\n        if j == len(result) {\n\
    \            result[i] = v\n            i++\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfg9lrid4_test.go:20:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    var result []int\n    var i int\n    for i = 0 ; i != len(l)\
    \ ; i++ {\n        if i == 0 || l[i] != l[i-1] {\n            result = append(result,\
    \ l[i])\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg5aao75z_test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res = []int{}\n    for _, v := range l {\n        if !inSlice(v, res)\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7pmdu0__test.go:14:13: undefined: inSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := map[int]bool{}\n    for _, e := range l {\n        set[e] = true\n\
    \    }\n    var ret []int\n    for _, e := range l {\n        if !set[e] {\n \
    \           ret = append(ret, e)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptdzacnf__test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, e :=\
    \ range l {\n        if seen[e] {\n            continue\n        }\n        seen[e]\
    \ = true\n        result = append(result, e)\n    }\n    return append(result,\
    \ 0)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpz4pa0m0w_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075080
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    i := 0\n    j := 0\n    for\
    \ j < len(l) {\n        if j > 0 && l[j] != l[j-1] {\n            i++\n      \
    \  }\n        l[i], l[j] = l[j], l[i]\n        j++\n        i++\n    }\n    return\
    \ l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd93zrt3h_test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    seen := make(map[int]bool, len(l))\n    for\
    \ _, val := range l {\n        if seen[val] {\n            continue\n        }\n\
    \        seen[val] = true\n        sort.Ints(l)\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wrbo8m1_test.go:13:10: no new variables on left side of :=

    /tmp/tmp7wrbo8m1_test.go:19:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n\n    for _, v := range l {\n        if contains(result,\
    \ v) {\n            continue\n        }\n\n        result = append(result, v)\n\
    \    }\n\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx5mijqyc_test.go:15:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n\n    seen := map[int]bool{}\n\
    \    var result []int\n    for _, v := range l {\n        if seen[v] {\n     \
    \       continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n\n    return result\n}\n`)\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvuv1xs__test.go:28:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var out []int\n\n    for _, val := range l {\n        for _, nval := range\
    \ out {\n            if val == nval {\n                break\n            }\n\
    \        }\n\n        out = append(out, val)\n    }\n\n    return out\n}\n</code>\n\
    <|/ a |>\n<| a dscore=1 tags=go |>\n<code>\npackage main\n\nimport \"fmt\"\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq7tz30sc_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniq []int\n    for _, v := range l {\n        if !inArray(v, uniq) {\n\
    \            uniq = append(uniq, v)\n        }\n    }\n    return uniq\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4guy_ye_test.go:14:13: undefined: inArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ng5m7qe_test.go:12:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075073
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool)\n    var result []int\n    for _, v := range l {\n\
    \        if !s[v] {\n            s[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppib2hg0o_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Build set\n    set := make(map[int]\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpis8i708h_test.go:13:25: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075089
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var i int\n    var ret []int\n    for _, v := range l {\n        if i > 0\
    \ {\n            if v != ret[i-1] {\n                ret = append(ret, v)\n  \
    \          }\n        } else {\n            ret = append(ret, v)\n        }\n\
    \        i++\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512680,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmpij9ic56c_test.go:16\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmpij9ic56c_test.go:34 +0x388\n\
    testing.tRunner(0xc0000da340, 0x527fa0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    for _, x := range l {\n        // Search if x\
    \ exists in out\n        i := 0\n        for _, y := range out {\n           \
    \ if x == y {\n                i++\n                continue\n            }\n\
    \        }\n        if i == len(out) {\n            out = append(out, x)\n   \
    \     }\n    }\n    return out\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppltl8eyc_test.go:42: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ret []int\n    var found bool\n    for _, i := range l {\n        if\
    \ found {\n            if i == ret[len(ret)-1] {\n                continue\n \
    \           }\n            ret = append(ret, i)\n        } else {\n          \
    \  ret = append(ret, i)\n            found = true\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpk7b7wliv_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, len(l))\n    i := 0\n    for _, v := range l {\n       \
    \ if i > 0 && v == s[i-1] {\n            continue\n        }\n        s[i] = v\n\
    \        i++\n    }\n    return s[:i]\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_k90d1i2_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := make([]int, len(l))\n    i := 0\n    for _, v := range l {\n       \
    \ if !isUnique(v, i, l) {\n            copy(l[i:], l[i:])\n            l[i++]\
    \ = v\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_7scnzg__test.go:17:16: expected '']'', found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n    seen := map[int]bool{}\n    for _, v := range l {\n\
    \        if !seen[v] {\n            result = append(result, v)\n            seen[v]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxsmsisw4_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    b := make(map[int]bool)\n    for _, n := range l {\n        if b[n] {\n \
    \           continue\n        }\n        b[n] = true\n        return append(l,\
    \ n)\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpu9rbqtes_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l := make([]int, 0, len(l))\n    for _, v := range l {\n        if !exist(v,\
    \ l) {\n            l = append(l, v)\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeo_fbdnh_test.go:12:7: no new variables on left side of :=

    /tmp/tmpeo_fbdnh_test.go:14:13: undefined: exist

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool)\n    for _, i := range l {\n        if _, ok := s[i];\
    \ ok {\n            continue\n        }\n        s[i] = true\n        sort.Ints(l)\n\
    \        fmt.Println(l)\n    }\n    return l\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis answer misses out the sorting requirement. Also it does not explain\
    \ how you arrived at the solution, which makes it difficult to understand why\
    \ it works and how it can be applied in general.\n<|/ c |>\n<| a tags=sorting,go\
    \ dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpogvzn3gt_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    map := make(map[int]int, len(l))\n    for _, val := range l {\n        map[val]\
    \ = map[val] + 1\n    }\n    result := make([]int, 0, len(map))\n    for val :=\
    \ range map {\n        result = append(result, val)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n</code>\n<|/ a dscore=2 tags=go |>\n<| c |>\nI like the\
    \ `for` loop approach because it makes it easy to visualize the `map`/`sorted`\
    \ approach.\n<|/ c |>\n<| c |>\nI like your second suggestion, though it requires\
    \ iterating through the list multiple times.  For my case, I was concerned about\
    \ efficiency so I went with the first suggestion.  Thanks though!\n<|/ c |>\n\
    <| a dscore=2 |>\nI like to use an external sort package (like bufio) to iterate\
    \ through a slice for its efficiency, and use binary search to determine if something\
    \ is already in the slice, or insert it if not (I used this for my own project):\n\
    <code>\npackage main\n\nimport (\n    \"bufio\"\n    \"sort\"\n    \"strings\"\
    \n)\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62ek8vu8_test.go:12:9: expected ''['', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    result := []int{}\n\
    \    for _, val := range l {\n        if !contains(result, val) {\n          \
    \  result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshxbv6dw_test.go:17:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    seen := map[int]bool{}\n    for _, i := range\
    \ l {\n        if seen[i] {\n            continue\n        }\n        out = append(out,\
    \ i)\n        seen[i] = true\n    }\n    return out\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1qiyma4j_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    ret := make([]int, 0)\n    for _, v := range\
    \ l {\n        if !seen[v] {\n            seen[v] = true\n            ret = append(ret,\
    \ v)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpwf77i08l_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6a4yt7i4_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075072
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    set := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqxj7btsk_test.go:12:25: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // TODO: Implement me\n    return nil\n}\n</code>\n<|/ a tags=go |>\n<| c\
    \ |>\nthank you so much for your detailed answer. Now it is clear what \"unique\"\
    \ does. Unfortunately my Go skills fail to do so yet again :D\n<|/ c |>\n<| c\
    \ |>\nI am now trying to implement your idea in my own code, but I can't seem\
    \ to figure out how to convert a slice into map or set or list to do so. Please\
    \ have a look at my edited question.\n<|/ c |>\n<| c |>\nSorry, I don't know anything\
    \ about Go. Maybe this https://play.golang.org/p/5R9PsW5qMvC will help\n<|/ c\
    \ |>\n<| c |>\nThat helps a lot, thank you very much! Unfortunately I need a different\
    \ approach for my problem now, since I am not allowed to change the `func unique`\
    \ code, but instead have to implement a solution in the `func unique` itself.\
    \ Have you got any ideas on how I could implement that in my code?\n<|/ c |>\n\
    <| c |>\nNot much. I think the answer will be very close to that of Sergey, but\
    \ with a map instead of a set.\n<|/ c |>\n<| a |>\n<code>\npackage unique_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqnwty8uk_test.go:15:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075092
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    list := make([]int, len(l))\n    for i := range l {\n        list[i] = l[i]\n\
    \    }\n    sort.Ints(list)\n    return list\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wmm7v___test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) <= 1 {\n        return l\n    }\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var u []int\n    for\
    \ v := range m {\n        u = append(u, v)\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpirlkdt4g_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := map[int]bool{}\n    for _, v := range l {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        fmt.Printf(\"\
    %d\\n\", v)\n        return append(l, v)\n    }\n    return l\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "5\n--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpj9wpbvws_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    j := 0\n    seen := make(map[int]bool)\n    for _, x := range l {\n     \
    \   if seen[x] {\n            continue\n        }\n        seen[x] = true\n  \
    \      l[j] = x\n        j++\n    }\n    return l[0:j]\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpk3o90vyn_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, i :=\
    \ range l {\n        if seen[i] == false {\n            seen[i] = true\n     \
    \       result = append(result, i)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpqjypbazl_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res []int\n    var last int\n\n    for _, v := range l {\n        if\
    \ v == last {\n            continue\n        }\n\n        last = v\n        res\
    \ = append(res, v)\n    }\n\n    return res\n}\n</code>\n<|/ a tags=go |>\n<|\
    \ c |>\nThis answer should be accepted as the correct answer to this question.\
    \ Thanks a lot!\n<|/ c |>\n<| a |>\nThe easiest way would be to convert the slice\
    \ to an array and then sort it.\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"sort\"\n)\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m0j7z3d_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var unq []int\n    var j int\n    for _, v := range l {\n        if unq[j]\
    \ == v {\n            continue\n        }\n        unq = append(unq, v)\n    \
    \    j += 1\n    }\n    return unq\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512680,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512680, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique(...)\n\t/tmp/tmpayqlfyv2_test.go:15\n\
    command-line-arguments_test.TestUnique(0x0?)\n\t/tmp/tmpayqlfyv2_test.go:31 +0x34f\n\
    testing.tRunner(0xc0000cc4e0, 0x527fa0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make(map[int]bool, len(l))\n    for _, v := range l {\n        if v\
    \ > 0 {\n            s[v] = true\n        }\n    }\n    return append([]int{},\
    \ l...)\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvnj3lr3o_test.go:34: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    out := make([]int, 0)\n    seen := make(map[int]bool)\n    for _, i := range\
    \ l {\n        if seen[i] {\n            continue\n        }\n        seen[i]\
    \ = true\n        out = append(out, i)\n    }\n    return out\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjnmim0o1_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075093
