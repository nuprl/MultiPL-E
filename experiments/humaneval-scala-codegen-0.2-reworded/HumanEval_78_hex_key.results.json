{
  "name": "HumanEval_78_hex_key",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase().split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val primes = Seq.range(2, numAsInt.length, 2)\n        val primesAsInt = primes.map(_.toInt).toSeq\n        val primesAsList = primesAsInt.map(_.toString).toSeq\n        val primesAsString = primesAsList.mkString(\"\")\n        val primesAsIntAsString = primesAsInt.mkString(\"\")\n        val primesAsListAsString = primesAsList.mkString(\"\")\n        val primesAsIntAsStringAsString = primesAsIntAsString.mkString(\"\")\n        val primesAsListAsStringAsString = primesAsListAsString.mkString(\"\")\n        val primesAsIntAsStringAsStringAsString = primesAsIntAsStringAsString.mkString(\"\")\n        val primesAsListAsStringAsStringAsString = primesAsListAsStringAsString.mkString(\"\")\n        val primesAsIntAsStringAsStringAsStringAsString = primesAsIntAsStringAsStringAsString.mkString(\"\")\n        val primesAsListAsStringAsStringAsStringAsString = primesAsListAsStringAsStringAsString.mkString(\"\")\n        val primesAsIntAsStringAsStringAsStringAsStringAsString = primesAsIntAsStringAsStringAsStringAsString.mkString(\"\")\n        val primesAsListAsStringAsStringAsStringAsStringAsString = primesAsListAsStringAsStringAsStringAsString.mkString(\"\")\n        val primesAsIntAsStringAsStringAsStringAsStringAsStringAsString = primesAsIntAsStringAsStringAsStringAsStringAsString.mkString(\"\")\n        val primesAsListAsStringAsStringAsStringAsStringAsStringAsString = primesAsListAsStringAsStringAsStringAsStringAsString.mkString(\"\")\n        val primesAsIntAsStringAsStringAsStringAsStringAsStringAsStringAsString = primesAsIntAsStringAsStringAsStringAsStringAsStringAsString.mkString(\"\")\n        val primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptmv84d5j.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmv84d5j.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpashas8bh.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpashas8bh.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"C\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"E\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"F\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 2\n            }\n            if (nums[i].toUpperCase == \"C\") {\n                count += 3\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 4\n            }\n            if (nums[i].toUpperCase == \"E\") {\n                count += 5\n            }\n            if (nums[i].toUpperCase == \"F\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbuxtl8t.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmbuxtl8t.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbuxtl8t.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmbuxtl8t.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbuxtl8t.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmbuxtl8t.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmbuxtl8t.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toLowerCase.split(\"\")\n        val primes = digits.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"a\" || d == \"b\" || d == \"c\" || d == \"d\" || d == \"e\" || d == \"f\")\n        val primesCount = primes.reduce(0, (a, b) -> a + b)\n        val primesDigits = primes.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"a\" || d == \"b\" || d == \"c\" || d == \"d\" || d == \"e\" || d == \"f\")\n        val primesDigitsCount = primesDigits.reduce(0, (a, b) -> a + b)\n        val primesDigitsDigitsCount = primesDigits.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"a\" || d == \"b\" || d == \"c\" || d == \"d\" || d == \"e\" || d == \"f\")\n        val primesDigitsDigitsCount = primesDigitsDigitsCount.reduce(0, (a, b) -> a + b)\n        val primesDigitsDigitsCount2 = primesDigitsDigitsCount.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmputda3ifv.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmputda3ifv.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsDigitsCount\u001b[0m = primesDigitsDigitsCount.reduce(\u001b[31m0\u001b[0m, (a, b) -> a + b)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimesDigitsDigitsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimesDigitsDigitsCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmputda3ifv.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"0\"\u001b[0m || d == \u001b[31m\"1\"\u001b[0m || d == \u001b[31m\"2\"\u001b[0m || d == \u001b[31m\"3\"\u001b[0m || d == \u001b[31m\"4\"\u001b[0m || d == \u001b[31m\"5\"\u001b[0m || d == \u001b[31m\"6\"\u001b[0m || d == \u001b[31m\"7\"\u001b[0m || d == \u001b[31m\"8\"\u001b[0m || d == \u001b[31m\"9\"\u001b[0m || d == \u001b[31m\"a\"\u001b[0m || d == \u001b[31m\"b\"\u001b[0m || d == \u001b[31m\"c\"\u001b[0m || d == \u001b[31m\"d\"\u001b[0m || d == \u001b[31m\"e\"\u001b[0m || d == \u001b[31m\"f\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmputda3ifv.scala:27:226 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"0\"\u001b[0m || d == \u001b[31m\"1\"\u001b[0m || d == \u001b[31m\"2\"\u001b[0m || d == \u001b[31m\"3\"\u001b[0m || d == \u001b[31m\"4\"\u001b[0m || d == \u001b[31m\"5\"\u001b[0m || d == \u001b[31m\"6\"\u001b[0m || d == \u001b[31m\"7\"\u001b[0m || d == \u001b[31m\"8\"\u001b[0m || d == \u001b[31m\"9\"\u001b[0m || d == \u001b[31m\"a\"\u001b[0m || d == \u001b[31m\"b\"\u001b[0m || d == \u001b[31m\"c\"\u001b[0m || d == \u001b[31m\"d\"\u001b[0m || d == \u001b[31m\"e\"\u001b[0m || d == \u001b[31m\"f\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                primes.append(nums[i])\n            }\n        }\n        val result = primes.toList\n        if (result.length == 0) {\n            return 0l\n        } else {\n            return result.length\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyicsvn73.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyicsvn73.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(nums[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.length - i > 2) {\n                primes.append(2l)\n            } else {\n                primes.append(3l)\n            }\n        }\n        primes.foreach(p => {\n            if (p == 2) {\n                primes.append(5l)\n            } else if (p == 3) {\n                primes.append(7l)\n            } else if (p == 5) {\n                primes.append(11l)\n            } else if (p == 7) {\n                primes.append(13l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 11) {\n                primes.append(17l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 13) {\n                primes.append(19l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 17) {\n                primes.append(23l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 19) {\n                primes.append(29l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 23) {\n                primes.append(31l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 29) {\n                primes.append(37l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 31) {\n                primes.append(41l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 37) {\n                primes.append(43l)\n            }\n        })\n        primes.foreach(p => {\n            if (p == 41) {\n                primes.append(47\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292794,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprbtq7xfl.scala:89:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprbtq7xfl.scala:100:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m100 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m')' expected, but eof found\n\u001b[33m\u001b[33m-- Warning: /tmp/tmprbtq7xfl.scala:90:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m90 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n2 = n.replaceAll(\"[A-F]\",\"\")\n        val n3 = n2.replaceAll(\"[0-9]\",\"\")\n        val n4 = n3.replaceAll(\"[0-9]\",\"\")\n        val n5 = n4.replaceAll(\"[0-9]\",\"\")\n        val n6 = n5.replaceAll(\"[0-9]\",\"\")\n        val n7 = n6.replaceAll(\"[0-9]\",\"\")\n        val n8 = n7.replaceAll(\"[0-9]\",\"\")\n        val n9 = n8.replaceAll(\"[0-9]\",\"\")\n        val n10 = n9.replaceAll(\"[0-9]\",\"\")\n        val n11 = n10.replaceAll(\"[0-9]\",\"\")\n        val n12 = n11.replaceAll(\"[0-9]\",\"\")\n        val n13 = n12.replaceAll(\"[0-9]\",\"\")\n        val n14 = n13.replaceAll(\"[0-9]\",\"\")\n        val n15 = n14.replaceAll(\"[0-9]\",\"\")\n        val n16 = n15.replaceAll(\"[0-9]\",\"\")\n        val n17 = n16.replaceAll(\"[0-9]\",\"\")\n        val n18 = n17.replaceAll(\"[0-9]\",\"\")\n        val n19 = n18.replaceAll(\"[0-9]\",\"\")\n        val n20 = n19.replaceAll(\"[0-9]\",\"\")\n        val n21 = n20.replaceAll(\"[0-9]\",\"\")\n        val n22 = n21.replaceAll(\"[0-9]\",\"\")\n        val n23 = n22.replaceAll(\"[0-9]\",\"\")\n        val n24 = n23.replaceAll(\"[0-9]\",\"\")\n        val n25 = n24.replaceAll(\"[0-9]\",\"\")\n        val n26 = n25.replaceAll(\"[0-9]\",\"\")\n        val n27 = n26.replaceAll(\"[\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkgittpn9.scala:52:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn27\u001b[0m = n26.replaceAll(\"[\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkgittpn9.scala:54:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgittpn9.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgittpn9.scala:54:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toUpperCase).filter(x => x.equals(\"2\") || x.equals(\"3\") || x.equals(\"5\") || x.equals(\"7\") || x.equals(\"B\") || x.equals(\"D\")).count\n        val hexDigitsPrimesCount = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimesCount = hexDigitsPrimesCount.toInt\n        val hexDigitsPrimes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuey1jfsj.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuey1jfsj.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCount\u001b[0m = hexDigitsPrimesCount.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhexDigitsPrimesCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhexDigitsPrimesCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuey1jfsj.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCount\u001b[0m = hexDigitsPrimesCount.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhexDigitsPrimesCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhexDigitsPrimesCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuey1jfsj.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCount\u001b[0m = hexDigitsPrimesCount.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhexDigitsPrimesCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhexDigitsPrimesCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuey1jfsj.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCount\u001b[0m = hexDigitsPrimesCount.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhexDigitsPrimesCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhexDigitsPrimesCount",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase == \"A\") {\n                result += 1L\n            } else if (digits[i].toUpperCase == \"B\") {\n                result += 2L\n            } else if (digits[i].toUpperCase == \"C\") {\n                result += 3L\n            } else if (digits[i].toUpperCase == \"D\") {\n                result += 4L\n            } else if (digits[i].toUpperCase == \"E\") {\n                result += 5L\n            } else if (digits[i].toUpperCase == \"F\") {\n                result += 6L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5com5pq5.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5com5pq5.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5com5pq5.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5com5pq5.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5com5pq5.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5com5pq5.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Fo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until digits.length) {\n            if (digits.length - i > 2) {\n                primes.append(digits.length - i)\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x % 2 == 0) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x % 3 == 0) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x % 5 == 0) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x % 7 == 0) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 11) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 13) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 17) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 19) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 23) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 29) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 31) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 37) {\n                x\n            }\n        }\n        primes.foreach(x <- primes) {\n            if (x == 41) {\n                x\n            }\n        }\n        primes.foreach\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:33:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:38:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:43:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:48:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:53:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:58:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:63:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                         ')' expected, but '<-' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7b5ht1z3.scala:68:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        primes.foreach(x <- primes) {\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit.toUpperCase == \"A\" || digit.toUpperCase == \"B\" || digit.toUpperCase == \"C\" || digit.toUpperCase == \"D\" || digit.toUpperCase == \"E\" || digit.toUpperCase == \"F\") {\n                primes.append(11l)\n            } else if (digit.toUpperCase == \"0\") {\n                primes.append(0l)\n            } else {\n                primes.append(Integer.parseInt(digit, 16))\n            }\n        }\n        primes.sort(Comparator.comparing(x -> x))\n        return primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxw4pzg9f.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxw4pzg9f.scala:38:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.sort(Comparator.comparing(x -> x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of scala.collection.mutable.ListBuffer[Long] - did you mean primes.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxw4pzg9f.scala:38:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.sort(Comparator.comparing(x -> x))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.length - i > 2) {\n                primes.append(2l)\n            } else {\n                primes.append(3l)\n            }\n        }\n        val primesList = primes.toList\n        val primesCount = primesList.length\n        val primesDigits = primesList.map(x => x.toString).toList\n        val primesDigitsCount = primesDigits.length\n        val primesDigitsPrimes = primesDigits.map(x => x.toUpperCase).toList\n        val primesDigitsPrimesCount = primesDigitsPrimes.length\n        val primesDigitsPrimesPrimes = primesDigitsPrimes.map(x => x.toUpperCase).toList\n        val primesDigitsPrimesPrimesCount = primesDigitsPrimesPrimes.length\n        val primesDigitsPrimesPrimesPrimes = primesDigitsPrimesPrimes.map(x => x.toUpperCase).toList\n        val primesDigitsPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimes.length\n        val primesDigitsPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimes.map(x => x.toUpperCase).toList\n        val primesDigitsPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimes.length\n        val primesDigitsPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimes.map(x => x.toUpperCase).toList\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimesPrimes.length\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimesPrimes.map(x\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxf60eyp.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphxf60eyp.scala:49:110 -----------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsPrimesPrimesPrimesPrimesPrimesPrimes\u001b[0m = primesDigitsPrimesPrimesPrimesPrimesPrimes.map(x\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxf60eyp.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toList\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesPrimes = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toList\n        val hexDigitsPrimesPrimesCount = hexDigitsPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimes = hexDigitsPrimesPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toList\n        val hexDigitsPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toList\n        val hexDigitsPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toList\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimesPrimes.map(x => x\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphfptvev5.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphfptvev5.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isUpperCase()).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmphfptvev5.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isUpperCase()).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfptvev5.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsInts = numAsInt.toSeq\n        val numAsIntsAsList = numAsInts.toList\n        val numAsIntsAsSeq = numAsIntsAsList.toSeq\n        val numAsIntsAsSeqAsList = numAsIntsAsSeq.toList\n        val numAsIntsAsSeqAsSeq = numAsIntsAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsSeqAsList = numAsIntsAsSeqAsSeq.toList\n        val numAsIntsAsSeqAsSeqAsSeq = numAsIntsAsSeqAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsSeqAsSeqAsList = numAsIntsAsSeqAsSeqAsSeq.toList\n        val numAsIntsAsSeqAsSeqAsSeqAsSeq = numAsIntsAsSeqAsSeqAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsSeqAsSeqAsSeqAsList = numAsIntsAsSeqAsSeqAsSeqAsSeq.toList\n        val numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeq = numAsIntsAsSeqAsSeqAsSeqAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeqAsList = numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeq.toList\n        val numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeqAsSeq = numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeqAsSeqAsList = numAsIntsAsSeqAsSeqAsSeqAsSeqAsSeqAsSeq.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_h10of5l.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase == \"A\") {\n                result += 1\n            } else if (digits[i].toUpperCase == \"B\") {\n                result += 2\n            } else if (digits[i].toUpperCase == \"C\") {\n                result += 3\n            } else if (digits[i].toUpperCase == \"D\") {\n                result += 4\n            } else if (digits[i].toUpperCase == \"E\") {\n                result += 5\n            } else if (digits[i].toUpperCase == \"F\") {\n                result += 6\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_tu1bude.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_tu1bude.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_tu1bude.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_tu1bude.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_tu1bude.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_tu1bude.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 2\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 3\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 4\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 5\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 6\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphhxywazk.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhxywazk.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphhxywazk.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhxywazk.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphhxywazk.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhxywazk.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphhxywazk.scala:35:28 --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().split(\"\")\n        val primes = scala.math.primes(scala.math.max(digits.length, 2))\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (primes.contains(digits[i])) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjqnkare5.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(scala.math.max(digits.length, \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjqnkare5.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong = numAsInt.toLong\n        val numAsInt2 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong2 = numAsInt2.toLong\n        val numAsInt3 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong3 = numAsInt3.toLong\n        val numAsInt4 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong4 = numAsInt4.toLong\n        val numAsInt5 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong5 = numAsInt5.toLong\n        val numAsInt6 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong6 = numAsInt6.toLong\n        val numAsInt7 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong7 = numAsInt7.toLong\n        val numAsInt8 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong8 = numAsInt8.toLong\n        val numAsInt9 = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong9 = numAsInt9.toLong\n        val numAsIntA = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLongA = numAsIntA.toLong\n        val numAsIntB = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLongB = numAsIntB.toLong\n        val numAsIntC = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLongC = numAsIntC.toLong\n        val numAsIntD = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLongD\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi_wy0ra0.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:27:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:29:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt2\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:31:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt3\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:33:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt4\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:35:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt5\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpi_wy0ra0.scala:37:54 -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"C\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"E\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"F\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpixm_itnt.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpixm_itnt.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.apply(i).equals(\"2\") || hexDigits.apply(i).equals(\"3\") || hexDigits.apply(i).equals(\"5\") || hexDigits.apply(i).equals(\"7\")) {\n                primes.append(i)\n            }\n        }\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"B\") || hexDigits.apply(i).equals(\"D\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"C\") || hexDigits.apply(i).equals(\"E\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"A\") || hexDigits.apply(i).equals(\"F\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"0\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"1\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"8\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"9\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.apply(i).equals(\"A\")) {\n                primes.append(\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292795,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfnakdsmm.scala:70:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m                primes.append(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfnakdsmm.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnakdsmm.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnakdsmm.scala:38:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnakdsmm.scala:43:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnakdsmm.scala:48:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnakdsmm.scala:53:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(x => x.toInt).toSeq\n        val numAsIntList = numAsInt.toList\n        val numAsIntListLength = numAsIntList.length\n        val numAsIntListLengthMinusOne = numAsIntListLength - 1\n        val numAsIntListLengthMinusTwo = numAsIntListLength - 2\n        val numAsIntListLengthMinusThree = numAsIntListLength - 3\n        val numAsIntListLengthMinusFour = numAsIntListLength - 4\n        val numAsIntListLengthMinusFive = numAsIntListLength - 5\n        val numAsIntListLengthMinusSix = numAsIntListLength - 6\n        val numAsIntListLengthMinusSeven = numAsIntListLength - 7\n        val numAsIntListLengthMinusEight = numAsIntListLength - 8\n        val numAsIntListLengthMinusNine = numAsIntListLength - 9\n        val numAsIntListLengthMinusTen = numAsIntListLength - 10\n        val numAsIntListLengthMinusEleven = numAsIntListLength - 11\n        val numAsIntListLengthMinusTwelve = numAsIntListLength - 12\n        val numAsIntListLengthMinusThirteen = numAsIntListLength - 13\n        val numAsIntListLengthMinusFourteen = numAsIntListLength - 14\n        val numAsIntListLengthMinusFifteen = numAsIntListLength - 15\n        val numAsIntListLengthMinusSixteen = numAsIntListLength - 16\n        val numAsIntListLengthMinusSeventeen = numAsIntListLength - 17\n        val numAsIntListLengthMinusEighteen = numAsIntListLength - 18\n        val numAsIntListLengthMinusNineteen = numAsIntListLength - 19\n        val numAsIntListLengthMinusTwenty = numAsIntListLength - 20\n        val numAsIntListLengthMinusTwentyOne = numAsIntListLength - 21\n        val numAsIntListLengthMinusTwentyTwo = numAsIntListLength - 22\n        val numAsIntListLengthMinusTwentyThree = num\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7vw58bx0.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexPrimes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"A\") {\n                hexPrimes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                hexPrimes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"C\") {\n                hexPrimes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                hexPrimes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"E\") {\n                hexPrimes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"F\") {\n                hexPrimes.append(13l)\n            }\n        }\n        return hexPrimes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjzqayyqf.scala:39:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"F\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                primes.append(nums[i])\n            }\n        }\n        val result = primes.toList.map(x => x.toInt).reduce(0, (x, y) => x + y)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292805,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbz49snx.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvbz49snx.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(nums[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvbz49snx.scala:33:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvbz49snx.scala:33:67 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.toInt).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until numAsList.length) {\n            val digit = numAsList[i]\n            if (digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\") {\n                result += 1L\n            } else if (digit == \"2\" || digit == \"3\" || digit == \"5\" || digit == \"7\") {\n                result += 2L\n            } else if (digit == \"11\" || digit == \"13\") {\n                result += 3L\n            } else if (digit == \"17\") {\n                result += 4L\n            } else if (digit == \"19\") {\n                result += 5L\n            } else if (digit == \"23\") {\n                result += 6L\n            } else if (digit == \"29\") {\n                result += 7L\n            } else if (digit == \"31\") {\n                result += 8L\n            } else if (digit == \"37\") {\n                result += 9L\n            } else if (digit == \"41\") {\n                result += 10L\n            } else if (digit == \"43\") {\n                result += 11L\n            } else if (digit == \"47\") {\n                result += 12L\n            } else if (digit == \"53\") {\n                result += 13L\n            } else if (digit == \"59\") {\n                result += 14L\n            } else if (digit == \"61\") {\n                result += 15L\n            } else if (digit == \"67\") {\n                result += 16L\n            } else if (digit == \"71\") {\n                result += 17L\n            } else if (digit == \"73\") {\n                result += 18L\n            } else if (digit == \"79\") {\n                result += 19L\n            } else if (digit == \"83\") {\n                result += 20L\n            } else if (digit == \"89\") {\n                result += 21L\n            } else if (digit == \"97\") {\n                result += 22L\n            } else if (digit == \"101\") {\n                result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmput4xza1q.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmput4xza1q.scala:29:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = numAsList[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmput4xza1q.scala:41:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toChar.to_i % 2 == 0) {\n                primes.append(nums[i].toChar.to_i)\n            }\n        }\n        val result = primes.toList.map(x => x.to_i).reduce(0l, (x, y) => x + y)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkes9rlts.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toChar.to_i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkes9rlts.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(nums[\u001b[35mi\u001b[0m].toChar.to_i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkes9rlts.scala:33:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value to_i is not a member of Long - did you mean x.toInt?\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpkes9rlts.scala:33:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpkes9rlts.scala:33:67 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntList = numAsInt.toList\n        val numAsIntListLength = numAsIntList.length\n        val numAsIntListLengthMinusOne = numAsIntListLength - 1\n        val numAsIntListLengthMinusTwo = numAsIntListLength - 2\n        val numAsIntListLengthMinusThree = numAsIntListLength - 3\n        val numAsIntListLengthMinusFour = numAsIntListLength - 4\n        val numAsIntListLengthMinusFive = numAsIntListLength - 5\n        val numAsIntListLengthMinusSix = numAsIntListLength - 6\n        val numAsIntListLengthMinusSeven = numAsIntListLength - 7\n        val numAsIntListLengthMinusEight = numAsIntListLength - 8\n        val numAsIntListLengthMinusNine = numAsIntListLength - 9\n        val numAsIntListLengthMinusTen = numAsIntListLength - 10\n        val numAsIntListLengthMinusEleven = numAsIntListLength - 11\n        val numAsIntListLengthMinusTwelve = numAsIntListLength - 12\n        val numAsIntListLengthMinusThirteen = numAsIntListLength - 13\n        val numAsIntListLengthMinusFourteen = numAsIntListLength - 14\n        val numAsIntListLengthMinusFifteen = numAsIntListLength - 15\n        val numAsIntListLengthMinusSixteen = numAsIntListLength - 16\n        val numAsIntListLengthMinusSeventeen = numAsIntListLength - 17\n        val numAsIntListLengthMinusEighteen = numAsIntListLength - 18\n        val numAsIntListLengthMinusNineteen = numAsIntListLength - 19\n        val numAsIntListLengthMinusTwenty = numAsIntListLength - 20\n        val numAsIntListLengthMinusTwentyOne = numAsIntListLength - 21\n        val numAsIntListLengthMinusTwentyTwo = numAsIntListLength - 22\n        val numAsIntListLengthMinusTwentyThree = numAsIntList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpop43rela.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.math.primes(2, hexDigits.length)\n        val result = 0L\n        for (i <- 0 until hexDigits.length) {\n            if (primes.contains(hexDigits[i].toInt)) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdxs87pda.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(\u001b[31m2\u001b[0m, hexDigits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdxs87pda.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].equals(\"2\") || digits[i].equals(\"3\") || digits[i].equals(\"5\") || digits[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyt8st10.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyt8st10.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsInts = numAsInt.toSeq\n        val numAsIntsAsSeq = numAsInts.toSeq\n        val numAsIntsAsSeqAsList = numAsIntsAsSeq.toList\n        val numAsIntsAsSeqAsListAsSeq = numAsIntsAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsListAsSeqAsList = numAsIntsAsSeqAsListAsSeq.toList\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeq = numAsIntsAsSeqAsListAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsList = numAsIntsAsSeqAsListAsSeqAsListAsSeq.toList\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeq = numAsIntsAsSeqAsListAsSeqAsListAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsList = numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeq.toList\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeq = numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsList.toSeq\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsList = numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeq.toList\n        val numAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeq = numAsIntsAsSeqAsListAsSeqAsListAs\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf7xbweoj.scala:39:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntsAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeqAsListAsSeq\u001b[0m = numAsIntsAsSeqAsListAsSeqAsListAs\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: numAsIntsAsSeqAsListAsSeqAsListAs\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7xbweoj.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6suex3gq.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6suex3gq.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        return primes.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsLength = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toUpperCase).filter(x => x.equals(\"2\") || x.equals(\"3\") || x.equals(\"5\") || x.equals(\"7\") || x.equals(\"B\") || x.equals(\"D\")).count()\n        val hexDigitsPrimesLength = hexDigitsPrimes.toLong\n        if (hexDigitsPrimesLength == 0) {\n            return 0l\n        } else {\n            return hexDigitsPrimesLength\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpwhqjnrlr.scala:28:181 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toUpperCase).filter(\u001b[36mx\u001b[0m => x.equals(\u001b[31m\"2\"\u001b[0m) || x.equals(\u001b[31m\"3\"\u001b[0m) || x.equals(\u001b[31m\"5\"\u001b[0m) || x.equals(\u001b[31m\"7\"\u001b[0m) || x.equals(\u001b[31m\"B\"\u001b[0m) || x.equals(\u001b[31m\"D\"\u001b[0m)).count()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter p of \u001b[33mmethod\u001b[0m \u001b[35mcount\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArrayOps\u001b[0m: (p: String => Boolean): Int\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 7L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 11L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 13L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m5L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toCharArray\n        val primes = mutable.List[Long]\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase() == \"A\") {\n                primes:=primes.append(2l)\n            } else if (digits[i].toUpperCase() == \"B\") {\n                primes:=primes.append(3l)\n            } else if (digits[i].toUpperCase() == \"C\") {\n                primes:=primes.append(5l)\n            } else if (digits[i].toUpperCase() == \"D\") {\n                primes:=primes.append(7l)\n            } else if (digits[i].toUpperCase() == \"E\") {\n                primes:=primes.append(11l)\n            } else if (digits[i].toUpperCase() == \"F\") {\n                primes:=primes.append(13l)\n            }\n        }\n        primes.foreach(x => {\n            if (x % 2 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x % 3 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x % 5 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x % 7 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x % 11 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x % 13 == 0) {\n                primes:=primes.remove(x)\n            }\n        })\n        primes.foreach(x => {\n            if (x %\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpg1xprdbc.scala:74:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m            \u001b[33mif\u001b[0m (x %\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg1xprdbc.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg1xprdbc.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg1xprdbc.scala:27:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg1xprdbc.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase() == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg1xprdbc.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase() == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg1xprdbc.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until n.length) {\n            if (n[i].toUpperCase == \"2\") {\n                res += 1L\n            } else if (n[i].toUpperCase == \"3\") {\n                res += 2L\n            } else if (n[i].toUpperCase == \"5\") {\n                res += 4L\n            } else if (n[i].toUpperCase == \"7\") {\n                res += 8L\n            } else if (n[i].toUpperCase == \"B\") {\n                res += 16L\n            } else if (n[i].toUpperCase == \"D\") {\n                res += 32L\n            } else if (n[i].toUpperCase == \"E\") {\n                res += 64L\n            } else if (n[i].toUpperCase == \"F\") {\n                res += 128L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe00on1uo.scala:29:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (n[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe00on1uo.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe00on1uo.scala:31:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (n[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe00on1uo.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe00on1uo.scala:33:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (n[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe00on1uo.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m4L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe00on1uo.scala:35:25 ------------------------\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpazi7vzpc.scala:39:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6suex3gq.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6suex3gq.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(x => x.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMin\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxby_wkor.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxby_wkor.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\")\n        val primesCount = primes.reduce(0, (a, b) -> a + b)\n        val primesDigits = primes.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\")\n        val primesDigitsCount = primesDigits.reduce(0, (a, b) -> a + b)\n        val primesDigitsDigits = primesDigits.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"9\" || d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\")\n        val primesDigitsDigitsCount = primesDigitsDigits.reduce(0, (a, b) -> a + b)\n        val primesDigitsDigitsDigits = primesDigitsDigits.map(d -> d == \"0\" || d == \"1\" || d == \"2\" || d == \"3\" || d == \"4\" || d == \"5\" || d == \"6\" || d == \"7\" || d == \"8\" || d == \"\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfp18uuc0.scala:33:180 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsDigitsDigits\u001b[0m = primesDigitsDigits.map(d -> d == \u001b[31m\"0\"\u001b[0m || d == \u001b[31m\"1\"\u001b[0m || d == \u001b[31m\"2\"\u001b[0m || d == \u001b[31m\"3\"\u001b[0m || d == \u001b[31m\"4\"\u001b[0m || d == \u001b[31m\"5\"\u001b[0m || d == \u001b[31m\"6\"\u001b[0m || d == \u001b[31m\"7\"\u001b[0m || d == \u001b[31m\"8\"\u001b[0m || d == \"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfp18uuc0.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"0\"\u001b[0m || d == \u001b[31m\"1\"\u001b[0m || d == \u001b[31m\"2\"\u001b[0m || d == \u001b[31m\"3\"\u001b[0m || d == \u001b[31m\"4\"\u001b[0m || d == \u001b[31m\"5\"\u001b[0m || d == \u001b[31m\"6\"\u001b[0m || d == \u001b[31m\"7\"\u001b[0m || d == \u001b[31m\"8\"\u001b[0m || d == \u001b[31m\"9\"\u001b[0m || d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfp18uuc0.scala:27:226 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"0\"\u001b[0m || d == \u001b[31m\"1\"\u001b[0m || d == \u001b[31m\"2\"\u001b[0m || d == \u001b[31m\"3\"\u001b[0m || d == \u001b[31m\"4\"\u001b[0m || d == \u001b[31m\"5\"\u001b[0m || d == \u001b[31m\"6\"\u001b[0m || d == \u001b[31m\"7\"\u001b[0m || d == \u001b[31m\"8\"\u001b[0m || d == \u001b[31m\"9\"\u001b[0m || d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        primes.foreach(p -> println(p))\n        return primes.length()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpntc_c5ln.scala:39:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"F\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for(i <- 0 until nums.length) {\n            val digit = nums[i]\n            if(digit == \"0\") {\n                primes.append(0l)\n            } else if(digit == \"1\") {\n                primes.append(1l)\n            } else if(digit == \"2\") {\n                primes.append(2l)\n            } else if(digit == \"3\") {\n                primes.append(3l)\n            } else if(digit == \"4\") {\n                primes.append(4l)\n            } else if(digit == \"5\") {\n                primes.append(5l)\n            } else if(digit == \"6\") {\n                primes.append(6l)\n            } else if(digit == \"7\") {\n                primes.append(7l)\n            } else if(digit == \"8\") {\n                primes.append(8l)\n            } else if(digit == \"9\") {\n                primes.append(9l)\n            } else if(digit == \"A\") {\n                primes.append(11l)\n            } else if(digit == \"B\") {\n                primes.append(11l)\n            } else if(digit == \"C\") {\n                primes.append(13l)\n            } else if(digit == \"D\") {\n                primes.append(13l)\n            } else if(digit == \"E\") {\n                primes.append(17l)\n            } else if(digit == \"F\") {\n                primes.append(17l)\n            }\n        }\n        val result = primes.toList.map(x => x).reduce(0l, (x, y) => x + y)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaegl454j.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpaegl454j.scala:64:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpaegl454j.scala:64:62 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x).reduce(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val primesCount = primes.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigits = primes.map(d -> d % 2 == 0 ? d : d + 1).toSeq\n        val primesDigitsCount = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount2 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount3 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount4 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount5 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount6 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount7 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount8 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCount9 = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCountA = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCountB = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCountC = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCountD = primesDigits.map(d -> d % 2 == 0 ? 0 : 1).sum\n        val primesDigitsCountE = primesDigits.map(d -> d %\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp6eanckgp.scala:43:58 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsCountE\u001b[0m = primesDigits.map(d -> d %\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6eanckgp.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6eanckgp.scala:27:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6eanckgp.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1L\n            }\n            if (nums[i].equals(\"B\") || nums[i].equals(\"D\")) {\n                res += 2L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgjpj3lwi.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjpj3lwi.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgjpj3lwi.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"B\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"D\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjpj3lwi.scala:33:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        return primes.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hvje9qr.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m = s.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n2 = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s2 = n2.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m2 = s2.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n3 = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s3 = n3.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m3 = s3.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n4 = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s4 = n4.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m4 = s4.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n5 = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s5 = n5.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m5 = s5.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n6 = n.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s6 = n6.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val m6 = s6.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo3w1u967.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toUpperCase).filter(x => x.equals(\"2\") || x.equals(\"3\") || x.equals(\"5\") || x.equals(\"7\") || x.equals(\"B\") || x.equals(\"D\")).count()\n        val hexDigitsPrimesCount = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount2 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount3 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount4 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount5 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount6 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount7 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount8 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount9 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount10 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount11 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount12 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount13 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount14 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount15 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount16 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount17 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount18 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount19 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount20 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount21 = hexDigitsPrimes.toLong\n        val hexDigitsPr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292813,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj1we15ib.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1we15ib.scala:28:181 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toUpperCase).filter(\u001b[36mx\u001b[0m => x.equals(\u001b[31m\"2\"\u001b[0m) || x.equals(\u001b[31m\"3\"\u001b[0m) || x.equals(\u001b[31m\"5\"\u001b[0m) || x.equals(\u001b[31m\"7\"\u001b[0m) || x.equals(\u001b[31m\"B\"\u001b[0m) || x.equals(\u001b[31m\"D\"\u001b[0m)).count()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter p of \u001b[33mmethod\u001b[0m \u001b[35mcount\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArrayOps\u001b[0m: (p: String => Boolean): Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1we15ib.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).reduce(_.add)\n        val numAsLong = numAsInt.toLong\n        val numAsIntList = numAsList.map(_.toInt).toList\n        val numAsIntListLength = numAsIntList.length\n        val numAsIntListLengthMinusOne = numAsIntListLength - 1\n        val numAsIntListLengthMinusTwo = numAsIntListLength - 2\n        val numAsIntListLengthMinusThree = numAsIntListLength - 3\n        val numAsIntListLengthMinusFour = numAsIntListLength - 4\n        val numAsIntListLengthMinusFive = numAsIntListLength - 5\n        val numAsIntListLengthMinusSix = numAsIntListLength - 6\n        val numAsIntListLengthMinusSeven = numAsIntListLength - 7\n        val numAsIntListLengthMinusEight = numAsIntListLength - 8\n        val numAsIntListLengthMinusNine = numAsIntListLength - 9\n        val numAsIntListLengthMinusTen = numAsIntListLength - 10\n        val numAsIntListLengthMinusEleven = numAsIntListLength - 11\n        val numAsIntListLengthMinusTwelve = numAsIntListLength - 12\n        val numAsIntListLengthMinusThirteen = numAsIntListLength - 13\n        val numAsIntListLengthMinusFourteen = numAsIntListLength - 14\n        val numAsIntListLengthMinusFifteen = numAsIntListLength - 15\n        val numAsIntListLengthMinusSixteen = numAsIntListLength - 16\n        val numAsIntListLengthMinusSeventeen = numAsIntListLength - 17\n        val numAsIntListLengthMinusEighteen = numAsIntListLength - 18\n        val numAsIntListLengthMinusNineteen = numAsIntListLength - 19\n        val numAsIntListLengthMinusTwenty = numAsIntListLength - 20\n        val numAsIntListLengthMinusTwentyOne = numAsIntListLength - 21\n        val numAsIntListLengthMinusTwentyTwo = numAs\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp8lykxvlq.scala:27:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(_.toInt).reduce(_.add)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8lykxvlq.scala:52:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntListLengthMinusTwentyTwo\u001b[0m = numAs\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: numAs\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lykxvlq.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        val result = primes.toSeq.map(x => x.toString).mkString(\"\")\n        if (result.length == 0) {\n            result = \"0\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1c3m5ean.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val s = n.toCharArray\n        val l = s.length\n        val res = 0L\n        for (i <- 0 until l) {\n            val c = s[i]\n            if (c == '0') {\n                continue\n            }\n            val d = c.toInt\n            if (d == 2) {\n                res += 1L\n            } else if (d == 3) {\n                res += 2L\n            } else if (d == 5) {\n                res += 3L\n            } else if (d == 7) {\n                res += 4L\n            } else if (d == 11) {\n                res += 5L\n            } else if (d == 13) {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6fw30fi9.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6fw30fi9.scala:33:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6fw30fi9.scala:37:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6fw30fi9.scala:39:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6fw30fi9.scala:41:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6fw30fi9.scala:43:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                res += \u001b[31m4L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6fw30fi9.scala:45:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                res += \u001b[31m5L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for(i <- 0 until nums.length) {\n            if(nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8vka0iw8.scala:29:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m(nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8vka0iw8.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.math.primes(2, nums.length)\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (primes.contains(nums[i])) {\n                res += 1L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfjrcx2xb.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(\u001b[31m2\u001b[0m, nums.length)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfjrcx2xb.scala:31:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 1L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 4L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\").toSeq\n        val primesCount = primes.length()\n        val primesDigits = primes.map(d -> d.toCharCode() - 'A').toSeq\n        val primesDigitsCount = primesDigits.length()\n        val primesDigitsCount2 = primesDigits.map(d -> d - 2).toSeq\n        val primesDigitsCount3 = primesDigits.map(d -> d - 3).toSeq\n        val primesDigitsCount5 = primesDigits.map(d -> d - 5).toSeq\n        val primesDigitsCount7 = primesDigits.map(d -> d - 7).toSeq\n        val primesDigitsCount11 = primesDigits.map(d -> d - 11).toSeq\n        val primesDigitsCount13 = primesDigits.map(d -> d - 13).toSeq\n        val primesDigitsCount17 = primesDigits.map(d -> d - 17).toSeq\n        val primesDigitsCount19 = primesDigits.map(d -> d - 19).toSeq\n        val primesDigitsCount23 = primesDigits.map(d -> d - 23).toSeq\n        val primesDigitsCount29 = primesDigits.map(d -> d - 29).toSeq\n        val primesDigitsCount31 = primesDigits.map(d -> d - 31).toSeq\n        val primesDigitsCount37 = primesDigits.map(d -> d - 37).toSeq\n        val primesDigitsCount41 = primesDigits.map(d -> d - 41).toSeq\n        val primesDigitsCount43 = primesDigits.map(d -> d - 43).toSeq\n        val primesDigitsCount47 = primesDigits.map(d -> d - 47).toSeq\n        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2_dfb9j.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmps2_dfb9j.scala:27:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2_dfb9j.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                result += 1\n            } else if (digit == \"1\") {\n                result += 2\n            } else if (digit == \"2\") {\n                result += 3\n            } else if (digit == \"3\") {\n                result += 4\n            } else if (digit == \"4\") {\n                result += 5\n            } else if (digit == \"5\") {\n                result += 6\n            } else if (digit == \"6\") {\n                result += 7\n            } else if (digit == \"7\") {\n                result += 8\n            } else if (digit == \"8\") {\n                result += 9\n            } else if (digit == \"A\") {\n                result += 10\n            } else if (digit == \"B\") {\n                result += 11\n            } else if (digit == \"C\") {\n                result += 12\n            } else if (digit == \"D\") {\n                result += 13\n            } else if (digit == \"E\") {\n                result += 14\n            } else if (digit == \"F\") {\n                result += 15\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq2vr8tgg.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:41:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                result += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toCharArray()).map(x => x[0]).filter(x => x == '2' || x == '3' || x == '5' || x == '7').toList\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesPrimes = hexDigitsPrimes.map(x => x.toCharArray()).map(x => x[0]).filter(x => x == '2' || x == '3' || x == '5' || x == '7').toList\n        val hexDigitsPrimesPrimesCount = hexDigitsPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimes = hexDigitsPrimesPrimes.map(x => x.toCharArray()).map(x => x[0]).filter(x => x == '2' || x == '3' || x == '5' || x == '7').toList\n        val hexDigitsPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimes.map(x => x.toCharArray()).map(x => x[0]).filter(x => x == '2' || x == '3' || x == '5' || x == '7').toList\n        val hexDigitsPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimes.map(x => x.toCharArray()).map(x => x[0]).filter(x => x == '2' || x == '3' || x == '5' || x == '7').toList\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl6eae908.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6eae908.scala:28:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toCharArray()).map(\u001b[36mx\u001b[0m => x[\u001b[31m0\u001b[0m]).filter(\u001b[36mx\u001b[0m => x == \u001b[31m'2'\u001b[0m || x == \u001b[31m'3'\u001b[0m || x == \u001b[31m'5'\u001b[0m || x == \u001b[31m'7'\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6eae908.scala:28:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toCharArray()).map(\u001b[36mx\u001b[0m => x[\u001b[31m0\u001b[0m]).filter(\u001b[36mx\u001b[0m => x == \u001b[31m'2'\u001b[0m || x == \u001b[31m'3'\u001b[0m || x == \u001b[31m'5'\u001b[0m || x == \u001b[31m'7'\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl6eae908.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                count += 1\n            }\n            if (nums[i].equals(\"B\") || nums[i].equals(\"D\")) {\n                count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"B\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"D\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit.equals(\"0\")) continue\n            if (digit.equals(\"1\")) primes.append(2l)\n            if (digit.equals(\"2\")) primes.append(3l)\n            if (digit.equals(\"3\")) primes.append(5l)\n            if (digit.equals(\"4\")) primes.append(7l)\n            if (digit.equals(\"5\")) primes.append(11l)\n            if (digit.equals(\"6\")) primes.append(13l)\n            if (digit.equals(\"7\")) primes.append(17l)\n            if (digit.equals(\"8\")) primes.append(19l)\n            if (digit.equals(\"9\")) primes.append(23l)\n            if (digit.equals(\"A\")) primes.append(29l)\n            if (digit.equals(\"B\")) primes.append(31l)\n            if (digit.equals(\"C\")) primes.append(37l)\n            if (digit.equals(\"D\")) primes.append(41l)\n            if (digit.equals(\"E\")) primes.append(43l)\n            if (digit.equals(\"F\")) primes.append(47l)\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrckqrkd.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrckqrkd.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (digit.equals(\u001b[31m\"0\"\u001b[0m)) continue\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdrckqrkd.scala:47:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        primes.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit.equals(\"0\")) {\n                continue\n            }\n            val prime = isPrime(digit)\n            if (prime) {\n                primes.append(digit)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplfn4p4t1.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplfn4p4t1.scala:31:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplfn4p4t1.scala:33:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = isPrime(digit)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfn4p4t1.scala:38:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                count += 2\n            } else if (nums[i].toUpperCase == \"C\") {\n                count += 3\n            } else if (nums[i].toUpperCase == \"D\") {\n                count += 4\n            } else if (nums[i].toUpperCase == \"E\") {\n                count += 5\n            } else if (nums[i].toUpperCase == \"F\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toChar).filter(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D').count\n        val hexDigitsPrimesCount = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount2 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount3 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount4 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount5 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount6 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount7 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount8 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount9 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount10 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount11 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount12 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount13 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount14 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount15 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount16 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount17 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount18 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount19 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount20 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount21 = hexDigitsPrimes.toLong\n        val hexDigitsPrimesCount22 = hexDigitsPrimes.toLong\n        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2yl18twr.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yl18twr.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x == \u001b[31m'2'\u001b[0m || x == \u001b[31m'3'\u001b[0m || x == \u001b[31m'5'\u001b[0m || x == \u001b[31m'7'\u001b[0m || x == \u001b[31m'B'\u001b[0m || x == \u001b[31m'D'\u001b[0m).count\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2yl18twr.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x == \u001b[31m'2'\u001b[0m || x == \u001b[31m'3'\u001b[0m || x == \u001b[31m'5'\u001b[0m || x == \u001b[31m'7'\u001b[0m || x == \u001b[31m'B'\u001b[0m || x == \u001b[31m'D'\u001b[0m).count\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yl18twr.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                count += 1\n            }\n            if (nums[i].equals(\"B\") || nums[i].equals(\"D\")) {\n                count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"B\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"D\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray()\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            val digit = digits[i]\n            if (digit == '0') {\n                result += 1\n            } else if (digit == '1') {\n                result += 2\n            } else if (digit == '2') {\n                result += 3\n            } else if (digit == '3') {\n                result += 4\n            } else if (digit == '4') {\n                result += 5\n            } else if (digit == '5') {\n                result += 6\n            } else if (digit == '6') {\n                result += 7\n            } else if (digit == '7') {\n                result += 8\n            } else if (digit == '8') {\n                result += 9\n            } else if (digit == 'A') {\n                result += 10\n            } else if (digit == 'B') {\n                result += 11\n            } else if (digit == 'C') {\n                result += 12\n            } else if (digit == 'D') {\n                result += 13\n            } else if (digit == 'E') {\n                result += 14\n            } else if (digit == 'F') {\n                result += 15\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlbgqbv.scala:29:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppvlbgqbv.scala:41:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                result += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                primes.append(\u001b[31m3l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                primes.append(\u001b[31m5l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptq_uz220",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val nb = n.chars().map(_.toInt).toList\n        val nb2 = nb.map(i -> i - 9).toList\n        val nb3 = nb2.map(i -> i - 9).toList\n        val nb4 = nb3.map(i -> i - 9).toList\n        val nb5 = nb4.map(i -> i - 9).toList\n        val nb6 = nb5.map(i -> i - 9).toList\n        val nb7 = nb6.map(i -> i - 9).toList\n        val nb8 = nb7.map(i -> i - 9).toList\n        val nb9 = nb8.map(i -> i - 9).toList\n        val nb10 = nb9.map(i -> i - 9).toList\n        val nb11 = nb10.map(i -> i - 9).toList\n        val nb12 = nb11.map(i -> i - 9).toList\n        val nb13 = nb12.map(i -> i - 9).toList\n        val nb14 = nb13.map(i -> i - 9).toList\n        val nb15 = nb14.map(i -> i - 9).toList\n        val nb16 = nb15.map(i -> i - 9).toList\n        val nb17 = nb16.map(i -> i - 9).toList\n        val nb18 = nb17.map(i -> i - 9).toList\n        val nb19 = nb18.map(i -> i - 9).toList\n        val nb20 = nb19.map(i -> i - 9).toList\n        val nb21 = nb20.map(i -> i - 9).toList\n        val nb22 = nb21.map(i -> i - 9).toList\n        val nb23 = nb22.map(i -> i - 9).toList\n        val nb24\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjbohpygd.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjbohpygd.scala:27:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = n.chars().map(_.toInt).toList\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toList is not a member of java.util.stream.IntStream\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbohpygd.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.slice(i, i + 1).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:31:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:33:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:35:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:37:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplay_k_nt.scala:39:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase == \"A\" || digits[i].toUpperCase == \"B\" || digits[i].toUpperCase == \"C\" || digits[i].toUpperCase == \"D\" || digits[i].toUpperCase == \"E\" || digits[i].toUpperCase == \"F\") {\n                result += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5d62drbb.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m || digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"B\"\u001b[0m || digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"C\"\u001b[0m || digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"D\"\u001b[0m || digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"E\"\u001b[0m || digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"F\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5d62drbb.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val count = n.length()\n        val result = 0L\n        for (i <- 0 until count) {\n            val digit = n.charAt(i)\n            if (digit == \"2\") {\n                result += 1\n            } else if (digit == \"3\") {\n                result += 2\n            } else if (digit == \"5\") {\n                result += 3\n            } else if (digit == \"7\") {\n                result += 4\n            } else if (digit == \"B\") {\n                result += 5\n            } else if (digit == \"D\") {\n                result += 6\n            } else if (digit == \"E\") {\n                result += 7\n            } else if (digit == \"F\") {\n                result += 8\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnjfeoxh9.scala:31:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mif\u001b[0m (digit == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnjfeoxh9.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnjfeoxh9.scala:33:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digit == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnjfeoxh9.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnjfeoxh9.scala:35:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digit == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnjfeoxh9.scala:36:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnjfeoxh9.scala:37:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digit == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsInts = numAsInt.toSeq\n        val numAsIntsAsList = numAsInts.toList\n        val numAsIntsAsInt = numAsIntsAsList.map(_.toInt)\n        val numAsIntsAsInts = numAsIntsAsInt.toSeq\n        val numAsIntsAsIntsAsList = numAsIntsAsInts.toList\n        val numAsIntsAsIntsAsInts = numAsIntsAsIntsAsList.map(_.toInt)\n        val numAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts.toSeq\n        val numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts = numAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsIntsAsInts.toSeq\n        val num\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjwcgorog.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjwcgorog.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsList\u001b[0m = num.toUpperCase.split(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value toUpperCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwcgorog.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase().split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\") {\n                result += 1\n            } else if (digit == \"0\") {\n                result += 2\n            } else if (digit == \"1\") {\n                result += 3\n            } else if (digit == \"2\") {\n                result += 4\n            } else if (digit == \"3\") {\n                result += 5\n            } else if (digit == \"4\") {\n                result += 6\n            } else if (digit == \"5\") {\n                result += 7\n            } else if (digit == \"6\") {\n                result += 8\n            } else if (digit == \"7\") {\n                result += 9\n            } else if (digit == \"8\") {\n                result += 10\n            } else if (digit == \"9\") {\n                result += 11\n            } else if (digit == \"10\") {\n                result += 12\n            } else if (digit == \"11\") {\n                result += 13\n            } else if (digit == \"12\") {\n                result += 14\n            } else if (digit == \"13\") {\n                result += 15\n            } else if (digit == \"14\") {\n                result += 16\n            } else if (digit == \"15\") {\n                result += 17\n            } else if (digit == \"16\") {\n                result += 18\n            } else if (digit == \"17\") {\n                result += 19\n            } else if (digit == \"18\") {\n                result += 20\n            } else if (digit == \"19\") {\n                result += 21\n            } else if (digit == \"20\") {\n                result += 22\n            } else if (digit == \"21\") {\n                result += 23\n            } else if (digit == \"22\") {\n                result += 24\n            } else if (digit == \"23\") {\n                result += 25\n            } else if (digit == \"24\") {\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292830,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy2drdqo7.scala:93:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy2drdqo7.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy2drdqo7.scala:41:23 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val count = n.length()\n        val digits = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until count) {\n            digits.append(n.charAt(i) - '0')\n        }\n        val result = digits.toList.map(x => x * 2).toSeq.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x => x * 2).toSeq.toList.map(x => x + 1).toSeq.toList.map(x\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe03usw5m.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe03usw5m.scala:32:837 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x * \u001b[31m2\u001b[0m).toSeq.toList.map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toSeq.toList.map(x\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\")\n        val count = primes.reduce(0, (a, b) -> a + b)\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1pr2ge57.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1pr2ge57.scala:27:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        val result = primes.toList.map(x => x).reduce(0l, (x, y) => x + y)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplc3fwbzh.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].equals(\"2\") || digits[i].equals(\"3\") || digits[i].equals(\"5\") || digits[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hz7_2_0.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8hz7_2_0.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(Integer::parseInt).toSeq\n        val numAsLong = numAsInt.map(x -> x.toString(16)).toSeq\n        val numAsLongs = numAsLong.map(x -> x.length()).toSeq\n        val numAsLongsPrimes = numAsLongs.filter(x -> x > 1).toSeq\n        val numAsLongsPrimesPrimes = numAsLongsPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimes = numAsLongsPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimesPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes = numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes.map(x -> x - 1).toSeq\n        val numAsLongsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes = numAsLongs\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ifyxlbu.scala:27:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(Integer::parseInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: parseInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7ifyxlbu.scala:27:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(Integer::parseInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7ifyxlbu.scala:34:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsLongsPrimesPrimesPrimesPrimesPrimes\u001b[0m = numAsLongsPrimesPrimesPrimesPrimesPrimes.map(x -> x - \u001b[31m1\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m     Recursive \u001b[33mvalue\u001b[0m \u001b[35mnumAsLongsPrimesPrimesPrimesPrimesPrimes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7ifyxlbu.scala:35:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsLongsPrimesPrimesPrimesPrimesPrimesPrimes\u001b[0m = numAsLongsPrimesPrimesPrimesPrimesPrimesPrimes.map(x -> x - \u001b[31m1\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnumAsLongsPrimesPrimesPrimesPrimesPrimesPrimes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ifyxlbu.scala:40:5 --------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 1L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 4L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (digits[i].toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (digits[i].toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (digits[i].toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (digits[i].toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (digits[i].toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:37:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ct9wrfz.scala:39:30 ------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpashas8bh.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpashas8bh.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6suex3gq.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6suex3gq.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toLowerCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].toCharArray(0, 2).toUpperCase == \"0A\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5c52qmsy.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toCharArray(\u001b[31m0\u001b[0m, \u001b[31m2\u001b[0m).toUpperCase == \u001b[31m\"0A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5c52qmsy.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].equals(\"2\") || digits[i].equals(\"3\") || digits[i].equals(\"5\") || digits[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hz7_2_0.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8hz7_2_0.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val primesCount = primes.filter(d -> d % 2 == 0).length\n        val primes2Count = primes.filter(d -> d % 2 == 1).length\n        val primes3Count = primes.filter(d -> d % 3 == 0).length\n        val primes5Count = primes.filter(d -> d % 5 == 0).length\n        val primes7Count = primes.filter(d -> d % 7 == 0).length\n        val primes11Count = primes.filter(d -> d % 11 == 0).length\n        val primes13Count = primes.filter(d -> d % 13 == 0).length\n        val primes17Count = primes.filter(d -> d % 17 == 0).length\n        val primes19Count = primes.filter(d -> d % 19 == 0).length\n        val primes23Count = primes.filter(d -> d % 23 == 0).length\n        val primes29Count = primes.filter(d -> d % 29 == 0).length\n        val primes31Count = primes.filter(d -> d % 31 == 0).length\n        val primes37Count = primes.filter(d -> d % 37 == 0).length\n        val primes41Count = primes.filter(d -> d % 41 == 0).length\n        val primes43Count = primes.filter(d -> d % 43 == 0).length\n        val primes47Count = primes.filter(d -> d % 47 == 0).length\n        val primes51Count = primes.filter(d -> d % 51 == 0).length\n        val primes53Count = primes.filter(d -> d % 53 == 0).length\n        val primes59Count = primes.filter(d -> d % 59 == 0).length\n        val primes61Count = primes.filter(d -> d % 61 == 0).length\n        val primes67Count = primes.filter(d -> d % 67 == 0).length\n        val pr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx4t10lgf.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx4t10lgf.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx4t10lgf.scala:27:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4t10lgf.scala:50:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase().split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase() == \"A\") {\n                res += 1L\n            } else if (nums[i].toUpperCase() == \"B\") {\n                res += 2L\n            } else if (nums[i].toUpperCase() == \"C\") {\n                res += 3L\n            } else if (nums[i].toUpperCase() == \"D\") {\n                res += 4L\n            } else if (nums[i].toUpperCase() == \"E\") {\n                res += 5L\n            } else if (nums[i].toUpperCase() == \"F\") {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl1ylrrw5.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase() == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl1ylrrw5.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl1ylrrw5.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase() == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl1ylrrw5.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl1ylrrw5.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase() == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl1ylrrw5.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl1ylrrw5.scala",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toLowerCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until digits.length) {\n            if (digits[i].toChar.to_i % 2 == 0) {\n                primes.append(digits[i].toChar.to_i)\n            }\n        }\n        val result = primes.toList.map(x => x.to_i).reduce(0, (x, y) => x + y)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmbmwvy6.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toChar.to_i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvmbmwvy6.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(digits[\u001b[35mi\u001b[0m].toChar.to_i)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvmbmwvy6.scala:33:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value to_i is not a member of Long - did you mean x.toInt?\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvmbmwvy6.scala:33:63 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvmbmwvy6.scala:33:66 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x.to_i).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        val result = primes.toSeq.map(x => x.toString).mkString(\"\")\n        if (result.length == 0) {\n            return 0l\n        } else {\n            return result.length\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m9eho9e.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val hexDigits = numAsList.map(x -> x.toUpperCase).toList\n        val primes = hexDigits.map(x -> x.equals(\"2\") || x.equals(\"3\") || x.equals(\"5\") || x.equals(\"7\") || x.equals(\"11\") || x.equals(\"13\") || x.equals(\"17\") || x.equals(\"19\") || x.equals(\"23\") || x.equals(\"29\") || x.equals(\"31\") || x.equals(\"37\") || x.equals(\"41\") || x.equals(\"43\") || x.equals(\"47\") || x.equals(\"53\") || x.equals(\"59\") || x.equals(\"61\") || x.equals(\"67\") || x.equals(\"71\") || x.equals(\"73\") || x.equals(\"79\") || x.equals(\"83\") || x.equals(\"89\") || x.equals(\"97\") || x.equals(\"101\") || x.equals(\"103\") || x.equals(\"107\") || x.equals(\"109\") || x.equals(\"113\") || x.equals(\"127\") || x.equals(\"131\") || x.equals(\"137\") || x.equals(\"139\") || x.equals(\"149\") || x.equals(\"151\") || x.equals(\"157\") || x.equals(\"163\") || x.equals(\"167\") || x.equals(\"173\") || x.equals(\"179\") || x.equals(\"181\") || x.equals(\"191\") || x.equals(\"193\") || x.equals(\"197\") || x.equals(\"199\") || x.equals(\"211\") || x.equals(\"223\") || x.equals(\"227\") || x.equals(\"229\") || x.equals(\"233\") || x.equals(\"239\") || x.equals(\"241\") || x.equals(\"251\") || x.equals(\"257\") || x.equals(\"263\") || x.equals(\"269\") || x.\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpspu4fy08.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpspu4fy08.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(x -> x.toUpperCase).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpspu4fy08.scala:27:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(x -> x.toUpperCase).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpspu4fy08.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexPrimes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).equals(\"2\") || hexDigits.get(i).equals(\"3\") || hexDigits.get(i).equals(\"5\") || hexDigits.get(i).equals(\"7\")) {\n                hexPrimes.append(i)\n            }\n        }\n        return hexPrimes.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmglna2mp.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).equals(\u001b[31m\"2\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"3\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"5\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n2 = n.replaceAll(\"[A-F]\",\"\")\n        val n3 = n2.replaceAll(\"[0-9]\",\"\")\n        val n4 = n3.replaceAll(\"[^0-9]\",\"\")\n        val n5 = n4.replaceAll(\"[^0-9]\",\"\")\n        val n6 = n5.replaceAll(\"[^0-9]\",\"\")\n        val n7 = n6.replaceAll(\"[^0-9]\",\"\")\n        val n8 = n7.replaceAll(\"[^0-9]\",\"\")\n        val n9 = n8.replaceAll(\"[^0-9]\",\"\")\n        val n10 = n9.replaceAll(\"[^0-9]\",\"\")\n        val n11 = n10.replaceAll(\"[^0-9]\",\"\")\n        val n12 = n11.replaceAll(\"[^0-9]\",\"\")\n        val n13 = n12.replaceAll(\"[^0-9]\",\"\")\n        val n14 = n13.replaceAll(\"[^0-9]\",\"\")\n        val n15 = n14.replaceAll(\"[^0-9]\",\"\")\n        val n16 = n15.replaceAll(\"[^0-9]\",\"\")\n        val n17 = n16.replaceAll(\"[^0-9]\",\"\")\n        val n18 = n17.replaceAll(\"[^0-9]\",\"\")\n        val n19 = n18.replaceAll(\"[^0-9]\",\"\")\n        val n20 = n19.replaceAll(\"[^0-9]\",\"\")\n        val n21 = n20.replaceAll(\"[^0-9]\",\"\")\n        val n22 = n21.replaceAll(\"[^0-9]\",\"\")\n        val n23 = n22.replaceAll(\"[^0-9]\",\"\")\n        val n24 = n23.replaceAll(\"[^0-9]\",\"\")\n        val n25 = n24.replaceAll(\"[^0-9]\",\"\")\n        val n26 = n25.replace\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpts82txeg.scala:51:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn26\u001b[0m = n25.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpts82txeg.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n2 = n.replaceAll(\"[A-F]\", \"\")\n        val n3 = n2.replaceAll(\"[0-9]\", \"\")\n        val n4 = n3.replaceAll(\"[^0-9]\", \"\")\n        val n5 = n4.replaceAll(\"[^0-9]\", \"\")\n        val n6 = n5.replaceAll(\"[^0-9]\", \"\")\n        val n7 = n6.replaceAll(\"[^0-9]\", \"\")\n        val n8 = n7.replaceAll(\"[^0-9]\", \"\")\n        val n9 = n8.replaceAll(\"[^0-9]\", \"\")\n        val n10 = n9.replaceAll(\"[^0-9]\", \"\")\n        val n11 = n10.replaceAll(\"[^0-9]\", \"\")\n        val n12 = n11.replaceAll(\"[^0-9]\", \"\")\n        val n13 = n12.replaceAll(\"[^0-9]\", \"\")\n        val n14 = n13.replaceAll(\"[^0-9]\", \"\")\n        val n15 = n14.replaceAll(\"[^0-9]\", \"\")\n        val n16 = n15.replaceAll(\"[^0-9]\", \"\")\n        val n17 = n16.replaceAll(\"[^0-9]\", \"\")\n        val n18 = n17.replaceAll(\"[^0-9]\", \"\")\n        val n19 = n18.replaceAll(\"[^0-9]\", \"\")\n        val n20 = n19.replaceAll(\"[^0-9]\", \"\")\n        val n21 = n20.replaceAll(\"[^0-9]\", \"\")\n        val n22 = n21.replaceAll(\"[^0-9]\", \"\")\n        val n23 = n22.replaceAll(\"[^0-9]\", \"\")\n        val n24 = n23.replaceAll(\"[^0-9]\", \"\")\n        val n25 =\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3_3jzuhk.scala:50:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn25\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3jzuhk.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 7L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 11L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 13L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292812,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui8qm4ww.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m5L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui8qm4ww.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val primesCount = primes.filter(p -> p < 10).length\n        val hexPrimes = primes.filter(p -> p < \"F\".charCodeAt(0)).toSeq\n        val hexPrimesCount = hexPrimes.filter(p -> p < \"F\".charCodeAt(0)).length\n        val hexDigits = digits.filter(d -> d < \"F\".charCodeAt(0)).toSeq\n        val hexDigitsCount = hexDigits.filter(d -> d < \"F\".charCodeAt(0)).length\n        val hexPrimesAndDigits = hexPrimes.zip(hexDigits).toSeq\n        val hexPrimesAndDigitsCount = hexPrimesAndDigits.filter(p -> p._1 < \"F\".charCodeAt(0)).length\n        val hexPrimesAndDigitsAndPrimes = hexPrimesAndDigits.zip(primes).toSeq\n        val hexPrimesAndDigitsAndPrimesCount = hexPrimesAndDigitsAndPrimes.filter(p -> p._1 < 10).length\n        val hexPrimesAndDigitsAndPrimesAndDigits = hexPrimesAndDigitsAndPrimes.zip(hexDigits).toSeq\n        val hexPrimesAndDigitsAndPrimesAndDigitsCount = hexPrimesAndDigitsAndPrimesAndDigits.filter(p -> p._1 < \"F\".charCodeAt(0)).length\n        val hexPrimesAndDigitsAndPrimesAndDigitsAndPrimes = hexPrimesAndDigitsAndPrimesAndDigits.zip(primes).toSeq\n        val hexPrimesAndDigitsAndPrimesAndDigitsAndPrimesCount = hexPrimesAndDigitsAndPrimesAndDigitsAndPrimes.filter(p -> p._1 < 10).length\n        val hexPrimesAndDigitsAndPrimesAndDigitsAndPrimesAndDigits = hexPrimesAndDigitsAndPrimesAndDigitsAndPrimes.zip(hexDigits\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmc6po8lq.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmc6po8lq.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmc6po8lq.scala:27:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmc6po8lq.scala:31:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = digits.filter(d -> d < \u001b[31m\"F\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmc6po8lq.scala:32:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsCount\u001b[0m = hexDigits.filter(d -> d < \u001b[31m\"F\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).length\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292809,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6suex3gq.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6suex3gq.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val result = n.chars().map(x => x - \"0\".charCodeAt(0)).toSeq.toList\n        if (result.size == 0) return 0l\n        val primes = primes(result.size)\n        val count = 0l\n        for (i <- 0 until result.size) {\n            if (primes.contains(result.get(i))) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr564fjsy.scala:27:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = n.chars().map(\u001b[36mx\u001b[0m => x - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value charCodeAt is not a member of String\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr564fjsy.scala:29:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = primes(result.size)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr564fjsy.scala:32:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (primes.contains(result.get(i))) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value += is not a member of Long - did you mean count.!=?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray()\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i] == '2' || digits[i] == '3' || digits[i] == '5' || digits[i] == '7') {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpic75z7fr.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpic75z7fr.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                continue\n            }\n            val prime = isPrime(digit)\n            if (prime) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:31:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:33:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = isPrime(digit)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph888fn_2.scala:35:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n2 = n.replaceAll(\"[A-F]\", \"\")\n        val n3 = n2.replaceAll(\"[0-9]\", \"\")\n        val n4 = n3.replaceAll(\"[^0-9]\", \"\")\n        val n5 = n4.replaceAll(\"[^0-9]\", \"\")\n        val n6 = n5.replaceAll(\"[^0-9]\", \"\")\n        val n7 = n6.replaceAll(\"[^0-9]\", \"\")\n        val n8 = n7.replaceAll(\"[^0-9]\", \"\")\n        val n9 = n8.replaceAll(\"[^0-9]\", \"\")\n        val n10 = n9.replaceAll(\"[^0-9]\", \"\")\n        val n11 = n10.replaceAll(\"[^0-9]\", \"\")\n        val n12 = n11.replaceAll(\"[^0-9]\", \"\")\n        val n13 = n12.replaceAll(\"[^0-9]\", \"\")\n        val n14 = n13.replaceAll(\"[^0-9]\", \"\")\n        val n15 = n14.replaceAll(\"[^0-9]\", \"\")\n        val n16 = n15.replaceAll(\"[^0-9]\", \"\")\n        val n17 = n16.replaceAll(\"[^0-9]\", \"\")\n        val n18 = n17.replaceAll(\"[^0-9]\", \"\")\n        val n19 = n18.replaceAll(\"[^0-9]\", \"\")\n        val n20 = n19.replaceAll(\"[^0-9]\", \"\")\n        val n21 = n20.replaceAll(\"[^0-9]\", \"\")\n        val n22 = n21.replaceAll(\"[^0-9]\", \"\")\n        val n23 = n22.replaceAll(\"[^0-9]\", \"\")\n        val n24 = n23.replaceAll(\"[^0-9]\", \"\")\n        val n25 =\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3_3jzuhk.scala:50:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn25\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3jzuhk.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.toChar).map(d -> d.toUpperCase).map(d -> d.toChar).map(d -> d.toInt).toSeq\n        val primesCount = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount2 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount3 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount4 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount5 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount6 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount7 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount8 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCount9 = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCountA = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCountB = primes.map(d -> d % 2 == 0 ? 0 : 1).reduce(0, (a, b) -> a + b)\n        val primesCountC = primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc793x2d.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.toUpperCase).map(d -> d.toChar).map(d -> d.toInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjc793x2d.scala:27:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.toUpperCase).map(d -> d.toChar).map(d -> d.toInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjc793x2d.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 1L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 4L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].equals(\"2\") || digits[i].equals(\"3\") || digits[i].equals(\"5\") || digits[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyt8st10.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyt8st10.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsLong = numAsInt.map(_.toLong).toSeq\n        val numAsInts = numAsInt.toSeq\n        val numAsLongs = numAsLong.toSeq\n        val numAsIntsAndLongs = numAsInts.zip(numAsLongs)\n        val numAsIntsAndLongsAsSeq = numAsIntsAndLongs.toSeq\n        val numAsIntsAndLongsAsSeqAsLong = numAsIntsAndLongsAsSeq.map(_.toLong).toSeq\n        val numAsIntsAndLongsAsSeqAsInt = numAsIntsAndLongsAsSeq.map(_.toInt).toSeq\n        val numAsIntsAndLongsAsSeqAsIntAndLong = numAsIntsAndLongsAsSeqAsInt.zip(numAsIntsAndLongsAsSeqAsLong)\n        val numAsIntsAndLongsAsSeqAsIntAndLongAsSeq = numAsIntsAndLongsAsSeqAsIntAndLong.toSeq\n        val numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsLong = numAsIntsAndLongsAsSeqAsIntAndLongAsSeq.map(_.toLong).toSeq\n        val numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsInt = numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsLong.map(_.toInt).toSeq\n        val numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsIntAndLong = numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsInt.zip(numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsLong)\n        val numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsIntAndLongAsSeq = numAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsIntAndLongAsSeq\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2373s0b3.scala:33:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntsAndLongsAsSeqAsLong\u001b[0m = numAsIntsAndLongsAsSeq.map(_.toLong).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of (Int, Long), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2373s0b3.scala:34:71 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntsAndLongsAsSeqAsInt\u001b[0m = numAsIntsAndLongsAsSeq.map(_.toInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toInt is not a member of (Int, Long), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2373s0b3.scala:37:106 -----------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntsAndLongsAsSeqAsIntAndLongAsSeqAsLong\u001b[0m = numAsIntsAndLongsAsSeqAsIntAndLongAsSeq.map(_.toLong).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of (Nothing, Nothing), but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(Problem.hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesCounts = hexDigitsPrimes.map(Problem.hexDigitIsPrimeCount).toSeq\n        val hexDigitsPrimesCountsCount = hexDigitsPrimesCounts.length\n        val hexDigitsPrimesCountsCounts = hexDigitsPrimesCounts.map(Problem.hexDigitIsPrimeCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCounts = hexDigitsPrimesCountsCounts.map(Problem.hexDigitIsPrimeCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCounts.map(Problem.hexDigitIsPrimeCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCounts.map(Problem.hexDigitIsPrimeCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCounts.map(Problem.hexDigitIsPrimeCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCountsCounts.map(Problem.hexDigitIsPrimeCountCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCountsCountsCounts.map(Problem.hexDigitIsPrimeCountCountCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCountsCounts = hexDigitsPr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj36_jc2p.scala:28:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem.hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value hexDigitIsPrime is not a member of object Problem\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj36_jc2p.scala:28:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem.hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj36_jc2p.scala:39:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCountsCounts\u001b[0m = hexDigitsPr\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: hexDigitsPr\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj36_jc2p.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesCounts = hexDigitsPrimes.map(Problem::hexDigitIsPrimeCount).toSeq\n        val hexDigitsPrimesCountsCount = hexDigitsPrimesCounts.length\n        val hexDigitsPrimesCountsCounts = hexDigitsPrimesCounts.map(Problem::hexDigitIsPrimeCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCounts = hexDigitsPrimesCountsCounts.map(Problem::hexDigitIsPrimeCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCounts.map(Problem::hexDigitIsPrimeCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCounts.map(Problem::hexDigitIsPrimeCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCounts.map(Problem::hexDigitIsPrimeCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCountsCounts.map(Problem::hexDigitIsPrimeCountCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCounts = hexDigitsPrimesCountsCountsCountsCountsCountsCountsCounts.map(Problem::hexDigitIsPrimeCountCountCountCountCountCountCountCount).toSeq\n        val hexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCountsCounts = hexDigitsPr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv8e91a99.scala:28:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: hexDigitIsPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpv8e91a99.scala:28:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv8e91a99.scala:39:84 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCountsCountsCountsCountsCountsCountsCountsCountsCounts\u001b[0m = hexDigitsPr\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: hexDigitsPr\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8e91a99.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = scala.math.primes(scala.math.max(digits.length, 2))\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (primes.contains(digits[i].toInt)) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292842,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvjj3rls8.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(scala.math.max(digits.length, \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvjj3rls8.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits(i).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits(i).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits(i).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits(i).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits(i).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits(i).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                primes.append(\u001b[31m3l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                primes.append(\u001b[31m5l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:36:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                primes.append(\u001b[31m7l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:38:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m                primes.append(\u001b[31m11l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgpbbz7y.scala:40:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                primes.append(\u001b[31m13l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.toChar).map(d -> d.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val count = primes.map(d -> d % 2 == 0).sum\n        val count2 = primes.map(d -> d % 3 == 0).sum\n        val count3 = primes.map(d -> d % 5 == 0).sum\n        val count5 = primes.map(d -> d % 7 == 0).sum\n        val countB = primes.map(d -> d == \"B\").sum\n        val countD = primes.map(d -> d == \"D\").sum\n        val countE = primes.map(d -> d == \"E\").sum\n        val countF = primes.map(d -> d == \"F\").sum\n        val count10 = primes.map(d -> d == \"10\").sum\n        val count11 = primes.map(d -> d == \"11\").sum\n        val count13 = primes.map(d -> d == \"13\").sum\n        val count17 = primes.map(d -> d == \"17\").sum\n        val count19 = primes.map(d -> d == \"19\").sum\n        val count20 = primes.map(d -> d == \"20\").sum\n        val count21 = primes.map(d -> d == \"21\").sum\n        val count23 = primes.map(d -> d == \"23\").sum\n        val count25 = primes.map(d -> d == \"25\").sum\n        val count27 = primes.map(d -> d == \"27\").sum\n        val count29 = primes.map(d -> d == \"29\").sum\n        val count30 = primes.map(d -> d == \"30\").sum\n        val count31 = primes.map(d -> d == \"31\").sum\n        val count32 = primes.map(d -> d == \"32\").sum\n        val count33 = primes.map(d -> d == \"33\").sum\n        val count34 = primes.map(d -> d == \"\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf_g5vg44.scala:51:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcount34\u001b[0m = primes.map(d -> d == \"\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf_g5vg44.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf_g5vg44.scala:27:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf_g5vg44.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsListLen = numAsList.length\n        val numAsListLenMinusOne = numAsListLen - 1\n        val numAsListLenMinusTwo = numAsListLen - 2\n        val numAsListLenMinusThree = numAsListLen - 3\n        val numAsListLenMinusFour = numAsListLen - 4\n        val numAsListLenMinusFive = numAsListLen - 5\n        val numAsListLenMinusSix = numAsListLen - 6\n        val numAsListLenMinusSeven = numAsListLen - 7\n        val numAsListLenMinusEight = numAsListLen - 8\n        val numAsListLenMinusNine = numAsListLen - 9\n        val numAsListLenMinusTen = numAsListLen - 10\n        val numAsListLenMinusEleven = numAsListLen - 11\n        val numAsListLenMinusTwelve = numAsListLen - 12\n        val numAsListLenMinusThirteen = numAsListLen - 13\n        val numAsListLenMinusFourteen = numAsListLen - 14\n        val numAsListLenMinusFifteen = numAsListLen - 15\n        val numAsListLenMinusSixteen = numAsListLen - 16\n        val numAsListLenMinusSeventeen = numAsListLen - 17\n        val numAsListLenMinusEighteen = numAsListLen - 18\n        val numAsListLenMinusNineteen = numAsListLen - 19\n        val numAsListLenMinusTwenty = numAsListLen - 20\n        val numAsListLenMinusTwentyOne = numAsListLen - 21\n        val numAsListLenMinusTwentyTwo = numAsListLen - 22\n        val numAsListLenMinusTwentyThree = numAsListLen - 23\n        val numAsListLenMinusTwentyFour = numAsListLen - 24\n        val numAsListLenMinusTwentyFive = numAsListLen - 25\n        val numAsListLenMinusTwentySix = numAsListLen - 26\n        val numAsListLenMinusTwentySeven = numAsListLen - 27\n        val numAsListLen\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_1yq79s4.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_1yq79s4.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                result += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp466fbmiw.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp466fbmiw.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.slice(i, i + 1).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits.slice(i, i + 1).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        return primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:29:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:31:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:33:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:35:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:37:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.slice(i, i + \u001b[31m1\u001b[0m).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toUpperCase is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp94c8wtxj.scala:39:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(Problem.hexDigitToInt).toSeq\n        val primesCount = primes.count()\n        val primesDigits = primes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsCount = primesDigits.count()\n        val primesDigitsPrimes = primesDigits.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesCount = primesDigitsPrimes.count()\n        val primesDigitsPrimesPrimes = primesDigitsPrimes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesPrimesCount = primesDigitsPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimes = primesDigitsPrimesPrimes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimesPrimes.map(Problem.hexDigitToInt).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimesPrimes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3t6sgnqv.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3t6sgnqv.scala:27:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(Problem.hexDigitToInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value hexDigitToInt is not a member of object Problem\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3t6sgnqv.scala:27:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(Problem.hexDigitToInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t6sgnqv.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().replaceAll(\"[^0-9A-F]\",\"\").toCharArray()\n        val hexDigitsLength = hexDigits.length\n        val primes = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until hexDigitsLength) {\n            if (hexDigits[i].toCharCode() % 2 == 0) {\n                primes.add(hexDigits[i].toCharCode())\n            }\n        }\n        val primesLength = primes.length\n        val primesDigits = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until primesLength) {\n            primesDigits.add(primes[i])\n        }\n        val primesDigitsLength = primesDigits.length\n        val primesDigitsDigits = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until primesDigitsLength) {\n            primesDigitsDigits.add(primesDigits[i])\n        }\n        val primesDigitsDigitsLength = primesDigitsDigits.length\n        val primesDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until primesDigitsDigitsLength) {\n            primesDigitsDigitsDigits.add(primesDigitsDigits[i])\n        }\n        val primesDigitsDigitsDigitsLength = primesDigitsDigitsDigits.length\n        val primesDigitsDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until primesDigitsDigitsDigitsLength) {\n            primesDigitsDigitsDigits.add(primesDigitsDigitsDigits[i])\n        }\n        val primesDigitsDigitsDigitsDigitsLength = primesDigitsDigitsDigitsDigits.length\n        val primesDigitsDigitsDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until primesDigitsDigitsDigitsDigitsLength) {\n            primesDigitsDigitsDig\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmwc437oe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwc437oe.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits[\u001b[35mi\u001b[0m].toCharCode() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmwc437oe.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                primes.add(hexDigits[\u001b[35mi\u001b[0m].toCharCode())\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue add is not a member of scala.collection.mutable.ArrayBuffer[Nothing]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwc437oe.scala:31:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                primes.add(hexDigits[\u001b[35mi\u001b[0m].toCharCode())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmwc437oe.scala:37:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            primesDigits.add(primes[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue add is not a member of scala.collection.mutable.ArrayBuffer[Nothing], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.mutableSe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val hexDigits = numAsList.map(x => x.charCodeAt(0) - \"0\".charCodeAt(0))\n        val primes = hexDigits.filter(x => x % 2 == 0).toSeq\n        val hexPrimes = primes.map(x => x / 2).toSeq\n        val hexPrimesAsList = hexPrimes.map(x => x.toString(16)).toSeq\n        val hexPrimesAsLong = hexPrimesAsList.map(x => Long.parseLong(x, 16)).toSeq\n        val hexPrimesAsLongSum = hexPrimesAsLong.reduce((x, y) => x + y)\n        val hexPrimesAsLongSumAsList = hexPrimesAsLongSum.toSeq\n        val hexPrimesAsLongSumAsLong = hexPrimesAsLongSumAsList.head\n        return hexPrimesAsLongSumAsLong\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnv2ih_gy.scala:27:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value charCodeAt is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnv2ih_gy.scala:27:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toCharArray\n        val primes = scala.math.primes(2, digits.length)\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (primes.contains(digits[i])) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0o13w1q0.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(\u001b[31m2\u001b[0m, digits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0o13w1q0.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                count += 1\n            }\n            if (nums[i].equals(\"B\") || nums[i].equals(\"D\")) {\n                count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"B\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"D\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().replaceAll(\"[^0-9A-F]\",\"\").toCharArray()\n        val primes = scala.collection.mutable.ArrayBuffer.apply(0)\n        for (i <- 0 until digits.length) {\n            if (digits[i] == '2') {\n                primes.add(2l)\n            } else if (digits[i] == '3') {\n                primes.add(3l)\n            } else if (digits[i] == '5') {\n                primes.add(5l)\n            } else if (digits[i] == '7') {\n                primes.add(7l)\n            } else if (digits[i] == 'B') {\n                primes.add(11l)\n            } else if (digits[i] == 'D') {\n                primes.add(13l)\n            }\n        }\n        return primes.toList().length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4emcp8cf.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4emcp8cf.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.add(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value add is not a member of scala.collection.mutable.ArrayBuffer[Int]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4emcp8cf.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i] == \u001b[31m'3'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4emcp8cf.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                primes.add(\u001b[31m3l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue add is not a member of scala.collection.mutable.ArrayBuffer[Int], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.collection asJava\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n2 = n.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n3 = n2.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n4 = n3.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n5 = n4.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n6 = n5.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n7 = n6.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n8 = n7.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n9 = n8.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n10 = n9.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n11 = n10.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n12 = n11.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n13 = n12.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n14 = n13.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n15 = n14.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n16 = n15.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n17 = n16.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n18 = n17.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n19 = n18.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n20 = n19.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n21 = n20.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n22 = n21.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n23 = n22.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n24 = n23.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n25 = n24.replaceAll(\"(.)\\\\1\",\"$1\")\n        val n26 = n25\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp785sunh4.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val primesCount = primes.map(d -> d % 2 == 0).sum\n        val primesDigits = primes.map(d -> d % 2 == 0).toSeq\n        val primesDigitsCount = primesDigits.map(d -> d % 2 == 0).sum\n        val primesDigitsCount2 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).sum\n        val primesDigitsCount3 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).sum\n        val primesDigitsCount4 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).sum\n        val primesDigitsCount5 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).sum\n        val primesDigitsCount6 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).sum\n        val primesDigitsCount7 = primesDigits.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSeq.map(d -> d % 2 == 0).toSe\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1sqf1ypf.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1sqf1ypf.scala:27:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1sqf1ypf.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpashas8bh.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpashas8bh.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\") {\n                res += 1L\n            } else if (digit == \"2\" || digit == \"3\" || digit == \"5\" || digit == \"7\") {\n                res += 2L\n            } else if (digit == \"11\" || digit == \"13\") {\n                res += 3L\n            } else if (digit == \"17\") {\n                res += 4L\n            } else if (digit == \"19\") {\n                res += 5L\n            } else if (digit == \"23\") {\n                res += 6L\n            } else if (digit == \"29\") {\n                res += 7L\n            } else if (digit == \"31\") {\n                res += 8L\n            } else if (digit == \"37\") {\n                res += 9L\n            } else if (digit == \"41\") {\n                res += 10L\n            } else if (digit == \"43\") {\n                res += 11L\n            } else if (digit == \"47\") {\n                res += 12L\n            } else if (digit == \"53\") {\n                res += 13L\n            } else if (digit == \"59\") {\n                res += 14L\n            } else if (digit == \"61\") {\n                res += 15L\n            } else if (digit == \"67\") {\n                res += 16L\n            } else if (digit == \"71\") {\n                res += 17L\n            } else if (digit == \"73\") {\n                res += 18L\n            } else if (digit == \"79\") {\n                res += 19L\n            } else if (digit == \"83\") {\n                res += 20L\n            } else if (digit == \"89\") {\n                res += 21L\n            } else if (digit == \"97\") {\n                res += 22L\n            } else if (digit == \"101\") {\n                res += 23L\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpauba0nrp.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauba0nrp.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:31:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:33:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:35:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:37:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                res += \u001b[31m4L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:39:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                res += \u001b[31m5L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpauba0nrp.scala:41:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                result += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                result += 2\n            } else if (nums[i].toUpperCase == \"C\") {\n                result += 3\n            } else if (nums[i].toUpperCase == \"D\") {\n                result += 4\n            } else if (nums[i].toUpperCase == \"E\") {\n                result += 5\n            } else if (nums[i].toUpperCase == \"F\") {\n                result += 6\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ot5a54.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi8ot5a54.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ot5a54.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi8ot5a54.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ot5a54.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi8ot5a54.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = mutable.List[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x))\n        primes.foreach(x => println(x\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmparu7grrz.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparu7grrz.scala:27:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmparu7grrz.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmparu7grrz.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmparu7grrz.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmparu7grrz.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmparu7grrz.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\") {\n                result += 1\n            } else {\n                result += 2\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpewnc70xj.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpewnc70xj.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpewnc70xj.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                continue\n            }\n            val prime = _.find(primes)\n            if (prime == null) {\n                primes += digit\n            } else {\n                primes += prime * 10\n            }\n        }\n        return primes.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrwfz3nn.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrwfz3nn.scala:31:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpnrwfz3nn.scala:33:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = _.find(primes)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.find(primes).\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                count += 2\n            } else if (nums[i].toUpperCase == \"C\") {\n                count += 3\n            } else if (nums[i].toUpperCase == \"D\") {\n                count += 4\n            } else if (nums[i].toUpperCase == \"E\") {\n                count += 5\n            } else if (nums[i].toUpperCase == \"F\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toChar.to_i() % 2 == 0) {\n                primes.append(nums[i].toChar.to_i())\n            }\n        }\n        val primes2 = primes.toList\n        val primes3 = primes2.map(x => x * x).toList\n        val primes4 = primes3.map(x => x * x).toList\n        val primes5 = primes4.map(x => x * x).toList\n        val primes6 = primes5.map(x => x * x).toList\n        val primes7 = primes6.map(x => x * x).toList\n        val primes8 = primes7.map(x => x * x).toList\n        val primes9 = primes8.map(x => x * x).toList\n        val primes10 = primes9.map(x => x * x).toList\n        val primes11 = primes10.map(x => x * x).toList\n        val primes12 = primes11.map(x => x * x).toList\n        val primes13 = primes12.map(x => x * x).toList\n        val primes14 = primes13.map(x => x * x).toList\n        val primes15 = primes14.map(x => x * x).toList\n        val primes16 = primes15.map(x => x * x).toList\n        val primes17 = primes16.map(x => x * x).toList\n        val primes18 = primes17.map(x => x * x).toList\n        val primes19 = primes18.map(x => x * x).toList\n        val primes20 = primes19.map(x => x * x).toList\n        val primes21 = primes20.map(x => x * x).toList\n        val primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3ee47bxw.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ee47bxw.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toChar.to_i() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ee47bxw.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(nums[\u001b[35mi\u001b[0m].toChar.to_i())\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ee47bxw.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesCountPrime = hexDigitsPrimes.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCount = hexDigitsPrimesCountPrime.length\n        val hexDigitsPrimesCountPrimeCountPrime = hexDigitsPrimesCountPrime.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCount = hexDigitsPrimesCountPrimeCountPrime.length\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrime = hexDigitsPrimesCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrime = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCount = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrime = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCount = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrime = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n        val hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrimePrime = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrimeCountPrime.filter(Problem::hexDig\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx09d6c93.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx09d6c93.scala:28:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: hexDigitIsPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx09d6c93.scala:28:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(Problem::hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx09d6c93.scala:35:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrime\u001b[0m = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: hexDigitsPrimesCountPrimeCountPrimeCountPrimeCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpx09d6c93.scala:36:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCount\u001b[0m = hexDigitsPrimesCountPrimeCountPrimeCountPrimeCountPrimeCount.filter(Problem::hexDigitIsPrime",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for(i <- 0 until nums.length) {\n            val digit = nums[i]\n            if(digit == \"0\") continue\n            if(digit == \"1\") count += 1\n            if(digit == \"2\") count += 2\n            if(digit == \"3\") count += 3\n            if(digit == \"4\") count += 4\n            if(digit == \"5\") count += 5\n            if(digit == \"6\") count += 6\n            if(digit == \"7\") count += 7\n            if(digit == \"8\") count += 8\n            if(digit == \"9\") count += 9\n            if(digit == \"A\") count += 10\n            if(digit == \"B\") count += 11\n            if(digit == \"C\") count += 12\n            if(digit == \"D\") count += 13\n            if(digit == \"E\") count += 14\n            if(digit == \"F\") count += 15\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym4zevq_.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym4zevq_.scala:30:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m(digit == \u001b[31m\"0\"\u001b[0m) continue\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym4zevq_.scala:31:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mif\u001b[0m(digit == \u001b[31m\"1\"\u001b[0m) count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym4zevq_.scala:32:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m(digit == \u001b[31m\"2\"\u001b[0m) count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym4zevq_.scala:33:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mif\u001b[0m(digit == \u001b[31m\"3\"\u001b[0m) count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym4zevq_.scala:34:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mif\u001b[0m(digit == \u001b[31m\"4\"\u001b[0m) count += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesCount2 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount3 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount4 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount5 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount6 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount7 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isUpperCase()).toSet\n        val hexDigitsPrimesCount8 = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x =>\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292856,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpf6jrm6nc.scala:36:126 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimesCount8\u001b[0m = hexDigitsPrimes.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m =>\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf6jrm6nc.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isUpperCase()).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf6jrm6nc.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isUpperCase()).toSet\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6jrm6nc.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().split(\"\")\n        val primes = scala.math.primes(scala.math.max(hexDigits.length, 2))\n        val result = 0L\n        for (i <- 0 until hexDigits.length) {\n            if (primes.contains(hexDigits[i].toInt)) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292855,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl7wy1p6t.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(scala.math.max(hexDigits.length, \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl7wy1p6t.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            }\n            if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292811,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:35:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8xz6slg.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm8xz6slg.scala:38:21 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\") {\n                result += 1L\n            } else if (digit == \"2\" || digit == \"3\" || digit == \"5\" || digit == \"7\") {\n                result += 2L\n            } else if (digit == \"11\" || digit == \"13\") {\n                result += 4L\n            } else if (digit == \"17\") {\n                result += 6L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0h7jz_d9.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0h7jz_d9.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0h7jz_d9.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0h7jz_d9.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m4L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0h7jz_d9.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m6L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i] == \"A\") {\n                count += 1\n            } else if (nums[i] == \"B\") {\n                count += 2\n            } else if (nums[i] == \"C\") {\n                count += 3\n            } else if (nums[i] == \"D\") {\n                count += 4\n            } else if (nums[i] == \"E\") {\n                count += 5\n            } else if (nums[i] == \"F\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292859,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hw9iajv.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m] == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7hw9iajv.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hw9iajv.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i] == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7hw9iajv.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hw9iajv.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i] == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7hw9iajv.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hw9iajv.scala:35:28 -----------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d == \"A\" || d == \"B\" || d == \"C\" || d == \"D\" || d == \"E\" || d == \"F\")\n        val count = primes.reduce((acc, p) -> acc + 1)\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrmrsv9v.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbrmrsv9v.scala:27:106 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d == \u001b[31m\"A\"\u001b[0m || d == \u001b[31m\"B\"\u001b[0m || d == \u001b[31m\"C\"\u001b[0m || d == \u001b[31m\"D\"\u001b[0m || d == \u001b[31m\"E\"\u001b[0m || d == \u001b[31m\"F\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit.toUpperCase == \"A\" || digit.toUpperCase == \"B\" || digit.toUpperCase == \"C\" || digit.toUpperCase == \"D\" || digit.toUpperCase == \"E\" || digit.toUpperCase == \"F\") {\n                primes.append(11l)\n            } else {\n                primes.append(13l)\n            }\n        }\n        val result = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until primes.size) {\n            val prime = primes.apply(i)\n            for (j <- 0 until prime) {\n                result.append(nums[j])\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292859,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk541mad2.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk541mad2.scala:39:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until prime) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (prime : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk541mad2.scala:40:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                result.append(nums[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk541mad2.scala:43:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        result.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase().split(\"\")\n        val numAsInt = numAsList.map(Integer::parseInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwenty\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292860,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuit0s3gc.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuit0s3gc.scala:27:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(Integer::parseInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: parseInt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpuit0s3gc.scala:27:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(Integer::parseInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuit0s3gc.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"2\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"3\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"5\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"7\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"D\") {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr7ayb2un.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7ayb2un.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr7ayb2un.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7ayb2un.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr7ayb2un.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7ayb2un.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr7ayb2un",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toCharArray\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i] == '0' || digits[i] == '1' || digits[i] == '2' || digits[i] == '3' || digits[i] == '4' || digits[i] == '5' || digits[i] == '6' || digits[i] == '7' || digits[i] == '8' || digits[i] == '9' || digits[i] == 'A' || digits[i] == 'B' || digits[i] == 'C' || digits[i] == 'D' || digits[i] == 'E' || digits[i] == 'F') {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi7wfhay.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m] == \u001b[31m'0'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'1'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'4'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'6'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'8'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'9'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'A'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'B'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'C'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'D'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'E'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'F'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyi7wfhay.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i] == '2' || digits[i] == '3' || digits[i] == '5' || digits[i] == '7') {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrxvka6j.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzrxvka6j.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                count += 1\n            }\n            if (nums[i].equals(\"B\") || nums[i].equals(\"D\")) {\n                count += 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7d9l8cq6.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"B\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"D\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7d9l8cq6.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray\n        val hexDigitsLength = hexDigits.length\n        val primes = scala.collection.mutable.ArrayBuffer.apply(hexDigitsLength)\n        for (i <- 0 until hexDigitsLength) {\n            if (isPrime(hexDigits[i])) {\n                primes.add(hexDigits[i])\n            }\n        }\n        val primesLength = primes.length\n        val primesDigits = scala.collection.mutable.ArrayBuffer.apply(primesLength)\n        for (i <- 0 until primesLength) {\n            primesDigits.add(primes[i])\n        }\n        val primesDigitsLength = primesDigits.length\n        val primesDigitsDigits = scala.collection.mutable.ArrayBuffer.apply(primesDigitsLength)\n        for (i <- 0 until primesDigitsLength) {\n            primesDigitsDigits.add(primesDigits[i])\n        }\n        val primesDigitsDigitsLength = primesDigitsDigits.length\n        val primesDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer.apply(primesDigitsDigitsLength)\n        for (i <- 0 until primesDigitsDigitsLength) {\n            primesDigitsDigitsDigits.add(primesDigitsDigits[i])\n        }\n        val primesDigitsDigitsDigitsLength = primesDigitsDigitsDigits.length\n        val primesDigitsDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer.apply(primesDigitsDigitsDigitsLength)\n        for (i <- 0 until primesDigitsDigitsDigitsLength) {\n            primesDigitsDigitsDigits.add(primesDigitsDigitsDigits[i])\n        }\n        val primesDigitsDigitsDigitsLength = primesDigitsDigitsDigits.length\n        val primesDigitsDigitsDigitsDigits = scala.collection.mutable.ArrayBuffer.apply(\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpqjrz8ow5.scala:55:88 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsDigitsDigitsDigits\u001b[0m = scala.collection.mutable.ArrayBuffer.apply(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqjrz8ow5.scala:54:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigitsDigitsDigitsLength\u001b[0m = primesDigitsDigitsDigits.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimesDigitsDigitsDigitsLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimesDigitsDigitsDigitsLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjrz8ow5.scala:30:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(hexDigits[\u001b[35mi\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqjrz8ow5.scala:30:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(hexDigits[\u001b[35mi\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqjrz8ow5.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                primes.add(hexDigits[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value add is not a member of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigitsCount) {\n            val digit = hexDigits(i)\n            if (digit == \"0\" || digit == \"1\" || digit == \"2\" || digit == \"3\" || digit == \"4\" || digit == \"5\" || digit == \"6\" || digit == \"7\" || digit == \"8\" || digit == \"9\") {\n                primes.append(digit.toLong)\n            }\n        }\n        val primesCount = primes.length\n        val primesDigits = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until primesCount) {\n            val prime = primes(i)\n            if (prime == 2 || prime == 3 || prime == 5 || prime == 7) {\n                primesDigits.append(prime)\n            }\n        }\n        val primesDigitsCount = primesDigits.length\n        val result = primesDigitsCount\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpff5ieiuz.scala:48)\n\tat Problem.main(tmpff5ieiuz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val res = n.chars().map(x => x - \"0\".charCodeAt(0)).toSeq\n        val res2 = res.filter(x => x % 2 == 0).toSeq\n        val res3 = res2.filter(x => x % 3 == 0).toSeq\n        val res4 = res3.filter(x => x % 5 == 0).toSeq\n        val res5 = res4.filter(x => x % 7 == 0).toSeq\n        val res6 = res5.filter(x => x % 11 == 0).toSeq\n        val res7 = res6.filter(x => x % 13 == 0).toSeq\n        val res8 = res7.filter(x => x % 17 == 0).toSeq\n        val res9 = res8.filter(x => x % 19 == 0).toSeq\n        val res10 = res9.filter(x => x % 23 == 0).toSeq\n        val res11 = res10.filter(x => x % 29 == 0).toSeq\n        val res12 = res11.filter(x => x % 31 == 0).toSeq\n        val res13 = res12.filter(x => x % 37 == 0).toSeq\n        val res14 = res13.filter(x => x % 41 == 0).toSeq\n        val res15 = res14.filter(x => x % 43 == 0).toSeq\n        val res16 = res15.filter(x => x % 47 == 0).toSeq\n        val res17 = res16.filter(x => x % 53 == 0).toSeq\n        val res18 = res17.filter(x => x % 59 == 0).toSeq\n        val res19 = res18.filter(x => x % 61 == 0).toSeq\n        val res20 = res19.filter(x => x % 67 == 0).toSeq\n        val res21 = res20.filter(x => x % 71 == 0).toSeq\n        val res22 = res21.filter(x => x % 73 == 0).\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeyj01199.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeyj01199.scala:27:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = n.chars().map(\u001b[36mx\u001b[0m => x - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value charCodeAt is not a member of String\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeyj01199.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntList = numAsInt.toList\n        val numAsIntListLength = numAsIntList.length\n        val numAsIntListLengthMinusOne = numAsIntListLength - 1\n        val numAsIntListLengthMinusTwo = numAsIntListLength - 2\n        val numAsIntListLengthMinusThree = numAsIntListLength - 3\n        val numAsIntListLengthMinusFour = numAsIntListLength - 4\n        val numAsIntListLengthMinusFive = numAsIntListLength - 5\n        val numAsIntListLengthMinusSix = numAsIntListLength - 6\n        val numAsIntListLengthMinusSeven = numAsIntListLength - 7\n        val numAsIntListLengthMinusEight = numAsIntListLength - 8\n        val numAsIntListLengthMinusNine = numAsIntListLength - 9\n        val numAsIntListLengthMinusTen = numAsIntListLength - 10\n        val numAsIntListLengthMinusEleven = numAsIntListLength - 11\n        val numAsIntListLengthMinusTwelve = numAsIntListLength - 12\n        val numAsIntListLengthMinusThirteen = numAsIntListLength - 13\n        val numAsIntListLengthMinusFourteen = numAsIntListLength - 14\n        val numAsIntListLengthMinusFifteen = numAsIntListLength - 15\n        val numAsIntListLengthMinusSixteen = numAsIntListLength - 16\n        val numAsIntListLengthMinusSeventeen = numAsIntListLength - 17\n        val numAsIntListLengthMinusEighteen = numAsIntListLength - 18\n        val numAsIntListLengthMinusNineteen = numAsIntListLength - 19\n        val numAsIntListLengthMinusTwenty = numAsIntListLength - 20\n        val numAsIntListLengthMinusTwentyOne = numAsIntListLength - 21\n        val numAsIntListLengthMinusTwentyTwo = numAsIntListLength - 22\n        val numAsIntListLengthMinusTwentyThree = numAsIntList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpop43rela.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).equals(\"2\") || hexDigits.get(i).equals(\"3\") || hexDigits.get(i).equals(\"5\") || hexDigits.get(i).equals(\"7\")) {\n                primes.append(i)\n            }\n        }\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"B\") || hexDigits.get(i).equals(\"D\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"C\") || hexDigits.get(i).equals(\"E\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"A\") || hexDigits.get(i).equals(\"F\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"0\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"1\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"8\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"9\")) {\n                primes.append(i)\n            }\n        })\n        primes.foreach(i -> {\n            if (hexDigits.get(i).equals(\"A\")) {\n                primes.append(i\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpddb76p3k.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpddb76p3k.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpddb76p3k.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).equals(\u001b[31m\"2\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"3\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"5\"\u001b[0m) || hexDigits.get(i).equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpddb76p3k.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long] - did you mean primes.apply?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpddb76p3k.scala:33:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpddb76p3k.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpddb76p3k.scala:38:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        primes.foreach(i -> {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Seq[Long] => scala.collection.mutable.ListBuffer[Long]\n\u001b[31m\u001b[31m-- [E006] Not Fo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.math.primes(2, hexDigits.length)\n        val result = 0L\n        for (i <- 0 until hexDigits.length) {\n            if (primes.contains(hexDigits[i])) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_2d2qy1f.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = scala.math.primes(\u001b[31m2\u001b[0m, hexDigits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value primes is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_2d2qy1f.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntList = numAsInt.toList\n        val numAsIntListLength = numAsIntList.length\n        val numAsIntListLengthMinusOne = numAsIntListLength - 1\n        val numAsIntListLengthMinusTwo = numAsIntListLength - 2\n        val numAsIntListLengthMinusThree = numAsIntListLength - 3\n        val numAsIntListLengthMinusFour = numAsIntListLength - 4\n        val numAsIntListLengthMinusFive = numAsIntListLength - 5\n        val numAsIntListLengthMinusSix = numAsIntListLength - 6\n        val numAsIntListLengthMinusSeven = numAsIntListLength - 7\n        val numAsIntListLengthMinusEight = numAsIntListLength - 8\n        val numAsIntListLengthMinusNine = numAsIntListLength - 9\n        val numAsIntListLengthMinusTen = numAsIntListLength - 10\n        val numAsIntListLengthMinusEleven = numAsIntListLength - 11\n        val numAsIntListLengthMinusTwelve = numAsIntListLength - 12\n        val numAsIntListLengthMinusThirteen = numAsIntListLength - 13\n        val numAsIntListLengthMinusFourteen = numAsIntListLength - 14\n        val numAsIntListLengthMinusFifteen = numAsIntListLength - 15\n        val numAsIntListLengthMinusSixteen = numAsIntListLength - 16\n        val numAsIntListLengthMinusSeventeen = numAsIntListLength - 17\n        val numAsIntListLengthMinusEighteen = numAsIntListLength - 18\n        val numAsIntListLengthMinusNineteen = numAsIntListLength - 19\n        val numAsIntListLengthMinusTwenty = numAsIntListLength - 20\n        val numAsIntListLengthMinusTwentyOne = numAsIntListLength - 21\n        val numAsIntListLengthMinusTwentyTwo = numAsIntListLength - 22\n        val numAsIntListLengthMinusTwentyThree = numAsIntList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292808,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpop43rela.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i] == '2' || digits[i] == '3' || digits[i] == '5' || digits[i] == '7') {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzrxvka6j.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || digits[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzrxvka6j.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s = n.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s2 = s.replaceAll(\"[^0-9A-F]\",\"\")\n        val s3 = s2.replaceAll(\"[^0-9A-F]\",\"\")\n        val s4 = s3.replaceAll(\"[^0-9A-F]\",\"\")\n        val s5 = s4.replaceAll(\"[^0-9A-F]\",\"\")\n        val s6 = s5.replaceAll(\"[^0-9A-F]\",\"\")\n        val s7 = s6.replaceAll(\"[^0-9A-F]\",\"\")\n        val s8 = s7.replaceAll(\"[^0-9A-F]\",\"\")\n        val s9 = s8.replaceAll(\"[^0-9A-F]\",\"\")\n        val s10 = s9.replaceAll(\"[^0-9A-F]\",\"\")\n        val s11 = s10.replaceAll(\"[^0-9A-F]\",\"\")\n        val s12 = s11.replaceAll(\"[^0-9A-F]\",\"\")\n        val s13 = s12.replaceAll(\"[^0-9A-F]\",\"\")\n        val s14 = s13.replaceAll(\"[^0-9A-F]\",\"\")\n        val s15 = s14.replaceAll(\"[^0-9A-F]\",\"\")\n        val s16 = s15.replaceAll(\"[^0-9A-F]\",\"\")\n        val s17 = s16.replaceAll(\"[^0-9A-F]\",\"\")\n        val s18 = s17.replaceAll(\"[^0-9A-F]\",\"\")\n        val s19 = s18.replaceAll(\"[^0-9A-F]\",\"\")\n        val s20 = s19.replaceAll(\"[^0-9A-F]\",\"\")\n        val s21 = s20.replaceAll(\"[^0-9A-F]\",\"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292863,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq1p47k2v.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n2 = n.replaceAll(\"[A-F]\",\"\")\n        val n3 = n2.replaceAll(\"[0-9]\",\"\")\n        val n4 = n3.replaceAll(\"[0-9]\",\"\")\n        val n5 = n4.replaceAll(\"[0-9]\",\"\")\n        val n6 = n5.replaceAll(\"[0-9]\",\"\")\n        val n7 = n6.replaceAll(\"[0-9]\",\"\")\n        val n8 = n7.replaceAll(\"[0-9]\",\"\")\n        val n9 = n8.replaceAll(\"[0-9]\",\"\")\n        val n10 = n9.replaceAll(\"[0-9]\",\"\")\n        val n11 = n10.replaceAll(\"[0-9]\",\"\")\n        val n12 = n11.replaceAll(\"[0-9]\",\"\")\n        val n13 = n12.replaceAll(\"[0-9]\",\"\")\n        val n14 = n13.replaceAll(\"[0-9]\",\"\")\n        val n15 = n14.replaceAll(\"[0-9]\",\"\")\n        val n16 = n15.replaceAll(\"[0-9]\",\"\")\n        val n17 = n16.replaceAll(\"[0-9]\",\"\")\n        val n18 = n17.replaceAll(\"[0-9]\",\"\")\n        val n19 = n18.replaceAll(\"[0-9]\",\"\")\n        val n20 = n19.replaceAll(\"[0-9]\",\"\")\n        val n21 = n20.replaceAll(\"[0-9]\",\"\")\n        val n22 = n21.replaceAll(\"[0-9]\",\"\")\n        val n23 = n22.replaceAll(\"[0-9]\",\"\")\n        val n24 = n23.replaceAll(\"[0-9]\",\"\")\n        val n25 = n24.replaceAll(\"[0-9]\",\"\")\n        val n26 = n25.replaceAll(\"[0-9]\",\"\")\n        val n27 = n26.replaceAll(\"[\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkgittpn9.scala:52:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn27\u001b[0m = n26.replaceAll(\"[\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkgittpn9.scala:54:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkgittpn9.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgittpn9.scala:54:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpashas8bh.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpashas8bh.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits[i].toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits[i].toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits[i].toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits[i].toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits[i].toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits[i].toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5sl22jby.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5sl22jby.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5sl22jby.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5sl22jby.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits[i].toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5sl22jby.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                res += 1L\n            } else if (nums[i].toUpperCase == \"B\") {\n                res += 2L\n            } else if (nums[i].toUpperCase == \"C\") {\n                res += 3L\n            } else if (nums[i].toUpperCase == \"D\") {\n                res += 4L\n            } else if (nums[i].toUpperCase == \"E\") {\n                res += 5L\n            } else if (nums[i].toUpperCase == \"F\") {\n                res += 6L\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:32:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                res += \u001b[31m2L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u4p_44s.scala:34:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                res += \u001b[31m3L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u4p_44s.scala:35:28",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().replaceAll(\"[^0-9A-F]\", \"\").toCharArray\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = new Array[Long](hexDigitsCount)\n        for (i <- 0 until hexDigitsCount) {\n            hexDigitsPrimes[i] = hexDigits[i].toLong\n        }\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesPrimes = new Array[Long](hexDigitsPrimesCount)\n        for (i <- 0 until hexDigitsPrimesCount) {\n            hexDigitsPrimesPrimes[i] = hexDigitsPrimes[i] % 2\n        }\n        val hexDigitsPrimesPrimesCount = hexDigitsPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimes = new Array[Long](hexDigitsPrimesPrimesCount)\n        for (i <- 0 until hexDigitsPrimesPrimesCount) {\n            hexDigitsPrimesPrimesPrimes[i] = hexDigitsPrimesPrimes[i] % 3\n        }\n        val hexDigitsPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimes = new Array[Long](hexDigitsPrimesPrimesPrimesCount)\n        for (i <- 0 until hexDigitsPrimesPrimesPrimesCount) {\n            hexDigitsPrimesPrimesPrimes[i] = hexDigitsPrimesPrimesPrimes[i] % 5\n        }\n        val hexDigitsPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimes = new Array[Long](hexDigitsPrimesPrimesPrimesPrimesCount)\n        for (i <- 0 until hexDigitsPrimesPrimesPrimesPrimesCount) {\n            hexDigitsPrimesPrimesPrimesPrimes[i] = hexDigitsPrimesPrimesPrimesPrimes[i] % 7\n        }\n        val hexDig\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpch2sua4l.scala:30:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            hexDigitsPrimes[\u001b[35mi\u001b[0m] = hexDigits[i].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpch2sua4l.scala:35:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            hexDigitsPrimesPrimes[\u001b[35mi\u001b[0m] = hexDigitsPrimes[i] % \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpch2sua4l.scala:40:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            hexDigitsPrimesPrimesPrimes[\u001b[35mi\u001b[0m] = hexDigitsPrimesPrimes[i] % \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpch2sua4l.scala:45:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            hexDigitsPrimesPrimesPrimes[\u001b[35mi\u001b[0m] = hexDigitsPrimesPrimesPrimes[i] % \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpch2sua4l.scala:50:49 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            hexDigitsPrimesPrimesPrimesPrimes[\u001b[35mi\u001b[0m] = hexDigitsPrimesPrimesPrimesPrimes[i] % \u001b[31m7\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpch2sua4l.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpch2sua4l.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase().split(\"\")\n        val result = 0L\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase() == \"A\") {\n                result += 1\n            } else if (digits[i].toUpperCase() == \"B\") {\n                result += 2\n            } else if (digits[i].toUpperCase() == \"C\") {\n                result += 3\n            } else if (digits[i].toUpperCase() == \"D\") {\n                result += 4\n            } else if (digits[i].toUpperCase() == \"E\") {\n                result += 5\n            } else if (digits[i].toUpperCase() == \"F\") {\n                result += 6\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf2zex4ns.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase() == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf2zex4ns.scala:30:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf2zex4ns.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase() == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf2zex4ns.scala:32:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf2zex4ns.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase() == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf2zex4ns.scala:34:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                primes.append(2l)\n            } else if (nums[i].toUpperCase == \"B\") {\n                primes.append(3l)\n            } else if (nums[i].toUpperCase == \"C\") {\n                primes.append(5l)\n            } else if (nums[i].toUpperCase == \"D\") {\n                primes.append(7l)\n            } else if (nums[i].toUpperCase == \"E\") {\n                primes.append(11l)\n            } else if (nums[i].toUpperCase == \"F\") {\n                primes.append(13l)\n            }\n        }\n        val result = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until primes.size) {\n            if (primes.get(i) == 2l) {\n                result.append(2l)\n            } else if (primes.get(i) == 3l) {\n                result.append(3l)\n            } else if (primes.get(i) == 5l) {\n                result.append(5l)\n            } else if (primes.get(i) == 7l) {\n                result.append(7l)\n            } else if (primes.get(i) == 11l) {\n                result.append(11l)\n            } else if (primes.get(i) == 13l) {\n                result.append(13l)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:37:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"E\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbvf08gok.scala:39:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val primes = scala.collection.mutable.ArrayBuffer.apply(hexDigitsCount)\n        for (i <- 0 until hexDigitsCount) {\n            if (isPrime(hexDigits(i))) {\n                primes.add(i)\n            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw0jruy6z.scala:30:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (isPrime(hexDigits(i))) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw0jruy6z.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                primes.add(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  value add is not a member of scala.collection.mutable.ArrayBuffer[Int]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw0jruy6z.scala:34:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        primes.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[Int]\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toCharArray\n        val primes = mutable.List[Long]\n        for (i <- 0 until digits.length) {\n            val digit = digits[i]\n            if (digit == '0' || digit == '1' || digit == '2' || digit == '3' || digit == '4' || digit == '5' || digit == '6' || digit == '7' || digit == '8' || digit == '9' || digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F') {\n                primes:=primes.append(i)\n            }\n        }\n        primes.foreach(i -> {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                val primes2 = mutable.List[Long]\n                primes2.append(i)\n                primes2.append(i + 1)\n                primes2.append(i + 2)\n                primes2.append(i + 3)\n                primes2.foreach(j -> {\n                    if (num.charAt(j) == 'B') {\n                        primes2.append(j + 1)\n                    }\n                    if (num.charAt(j) == 'D') {\n                        primes2.append(j + 1)\n                    }\n                })\n                primes = primes.appendAll(primes2)\n            }\n        })\n        primes.foreach(i -> {\n            if (num.charAt(i) == 'B' || num.charAt(i) == 'D') {\n                val primes2 = mutable.List[Long]\n                primes2.append(i)\n                primes2.append(i + 1)\n                primes2.append(i + 2)\n                primes2.append(i + 3)\n                primes2.foreach(j -> {\n                    if (num.charAt(j) == 'B') {\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292863,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkjlpwxop.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkjlpwxop.scala:27:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkjlpwxop.scala:29:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpkjlpwxop.scala:63:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsListLen = numAsList.length\n        val numAsInt = numAsList.map(_.toInt).reduce(0, (_ + _))\n        val numAsIntLen = numAsInt.toInt\n        val numAsIntPrimes = numAsInt.filter(x => x % 2 == 0 && x > 1).toInt\n        val numAsIntPrimesLen = numAsIntPrimes.length\n        val numAsIntPrimesPrimes = numAsIntPrimes.filter(x => x % 3 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimesLen = numAsIntPrimesPrices.length\n        val numAsIntPrimesPrimes2 = numAsIntPrimesPrices.filter(x => x % 5 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimes2Len = numAsIntPrimesPrices2.length\n        val numAsIntPrimesPrimes3 = numAsIntPrimesPrices2.filter(x => x % 7 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimes3Len = numAsIntPrimesPrices3.length\n        val numAsIntPrimesPrimes4 = numAsIntPrimesPrices3.filter(x => x % 11 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimes4Len = numAsIntPrimesPrices4.length\n        val numAsIntPrimesPrimes5 = numAsIntPrimesPrices4.filter(x => x % 13 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimes5Len = numAsIntPrimesPrices5.length\n        val numAsIntPrimesPrimes6 = numAsIntPrimesPrices5.filter(x => x % 17 == 0 && x > 1).toInt\n        val numAsIntPrimesPrimes6Len = numAsIntPrimesPrices6.length\n        val numAsIntPrimesPrimes7 = numAsIntPrimesPrices6.filter(x => x % 19 == 0 && x > 1).toInt\n        val numAsIntPr\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292869,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpztzht989.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpztzht989.scala:28:57 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(_.toInt).reduce(\u001b[31m0\u001b[0m, (_ + _))\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$2, _$3) => _$2 + _$3.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpztzht989.scala:28:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsInt\u001b[0m = numAsList.map(_.toInt).reduce(\u001b[31m0\u001b[0m, (_ + _))\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   (_$2, _$3) => _$2 + _$3.\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpztzht989.scala:30:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntPrimes\u001b[0m = numAsInt.filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && x > \u001b[31m1\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value filter is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztzht989.scala:33:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumAsIntPrimesPrimesLen\u001b[0m = numAsIntPrimesPrices.length\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: numAsIntPrimesPrices\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztzht989.scala:34:36 ---------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val count = n.length()\n        val digits = n.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until count) {\n            val digit = digits[i].toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n            if (digit == \"0\") {\n                primes.append(0l)\n            } else if (digit == \"1\") {\n                primes.append(1l)\n            } else if (digit == \"2\") {\n                primes.append(2l)\n            } else if (digit == \"3\") {\n                primes.append(3l)\n            } else if (digit == \"5\") {\n                primes.append(5l)\n            } else if (digit == \"7\") {\n                primes.append(7l)\n            } else if (digit == \"B\") {\n                primes.append(11l)\n            } else if (digit == \"D\") {\n                primes.append(13l)\n            } else if (digit == \"E\") {\n                primes.append(17l)\n            } else if (digit == \"F\") {\n                primes.append(19l)\n            }\n        }\n        val result = primes.toList\n        if (result.isEmpty) {\n            return 0l\n        } else {\n            return result.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292865,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpigsmfojq.scala:31:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = digits[\u001b[35mi\u001b[0m].toUpperCase.replaceAll(\u001b[31m\"[^0-9A-F]\"\u001b[0m,\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.toChar).map(d -> d.toInt).toSeq\n        val primesDigits = primes.map(d -> d % 10).toSeq\n        val primesDigitsCount = primesDigits.count()\n        val primesDigitsPrimes = primesDigits.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesCount = primesDigitsPrimes.count()\n        val primesDigitsPrimesPrimes = primesDigitsPrimes.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesPrimesCount = primesDigitsPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimes = primesDigitsPrimesPrimes.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimes.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimes.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesCount = primesDigitsPrimesPrimesPrimesPrimesPrimes.count()\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesPrimes = primesDigitsPrimesPrimesPrimesPrimesPrimes.map(d -> d == 2 || d == 3 || d == 5).toSeq\n        val primesDigitsPrimesPrimesPrimesPrimesPrimesPrimesCount = primesDigitsPrimes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxrfmj4g.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.toInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkxrfmj4g.scala:27:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.toChar).map(d -> d.toInt).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxrfmj4g.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter(x => x.isDigit()).map(x => x.toChar).filter\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292872,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpufffr61_.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x.toChar).filter\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmpufffr61_.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).map(\u001b[36mx\u001b[0m => x",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                continue\n            }\n            val prime = isPrime(digit)\n            if (prime) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:31:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:33:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = isPrime(digit)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph888fn_2.scala:35:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toChar == '0') {\n                continue\n            }\n            if (nums[i].toChar == '1') {\n                primes.append(2l)\n            } else if (nums[i].toChar == '2') {\n                primes.append(3l)\n            } else if (nums[i].toChar == '3') {\n                primes.append(5l)\n            } else if (nums[i].toChar == '4') {\n                primes.append(7l)\n            } else if (nums[i].toChar == '5') {\n                primes.append(11l)\n            } else if (nums[i].toChar == '6') {\n                primes.append(13l)\n            } else if (nums[i].toChar == '7') {\n                primes.append(17l)\n            } else if (nums[i].toChar == '8') {\n                primes.append(19l)\n            } else if (nums[i].toChar == '9') {\n                primes.append(23l)\n            } else if (nums[i].toChar == 'A') {\n                primes.append(29l)\n            } else if (nums[i].toChar == 'B') {\n                primes.append(31l)\n            } else if (nums[i].toChar == 'C') {\n                primes.append(37l)\n            } else if (nums[i].toChar == 'D') {\n                primes.append(41l)\n            } else if (nums[i].toChar == 'E') {\n                primes.append(43l)\n            } else if (nums[i].toChar == 'F') {\n                primes.append(47l)\n            }\n        }\n        return primes.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toChar == \u001b[31m'0'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:30:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:32:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toChar == \u001b[31m'1'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:34:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toChar == \u001b[31m'2'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:36:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toChar == \u001b[31m'3'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr68ofq3g.scala:38:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toChar == \u001b[31m'4'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase().split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            if (nums[i].equals(\"2\") || nums[i].equals(\"3\") || nums[i].equals(\"5\") || nums[i].equals(\"7\")) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292870,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyw8sbm8r.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || nums[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyw8sbm8r.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val numAsInt = numAsList.map(_.toInt).toSeq\n        val numAsIntSeq = numAsInt.toSeq\n        val numAsIntSeqLength = numAsIntSeq.length\n        val numAsIntSeqLengthMinusOne = numAsIntSeqLength - 1\n        val numAsIntSeqLengthMinusTwo = numAsIntSeqLength - 2\n        val numAsIntSeqLengthMinusThree = numAsIntSeqLength - 3\n        val numAsIntSeqLengthMinusFour = numAsIntSeqLength - 4\n        val numAsIntSeqLengthMinusFive = numAsIntSeqLength - 5\n        val numAsIntSeqLengthMinusSix = numAsIntSeqLength - 6\n        val numAsIntSeqLengthMinusSeven = numAsIntSeqLength - 7\n        val numAsIntSeqLengthMinusEight = numAsIntSeqLength - 8\n        val numAsIntSeqLengthMinusNine = numAsIntSeqLength - 9\n        val numAsIntSeqLengthMinusTen = numAsIntSeqLength - 10\n        val numAsIntSeqLengthMinusEleven = numAsIntSeqLength - 11\n        val numAsIntSeqLengthMinusTwelve = numAsIntSeqLength - 12\n        val numAsIntSeqLengthMinusThirteen = numAsIntSeqLength - 13\n        val numAsIntSeqLengthMinusFourteen = numAsIntSeqLength - 14\n        val numAsIntSeqLengthMinusFifteen = numAsIntSeqLength - 15\n        val numAsIntSeqLengthMinusSixteen = numAsIntSeqLength - 16\n        val numAsIntSeqLengthMinusSeventeen = numAsIntSeqLength - 17\n        val numAsIntSeqLengthMinusEighteen = numAsIntSeqLength - 18\n        val numAsIntSeqLengthMinusNineteen = numAsIntSeqLength - 19\n        val numAsIntSeqLengthMinusTwenty = numAsIntSeqLength - 20\n        val numAsIntSeqLengthMinusTwentyOne\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91o238js.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91o238js.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until hexDigits.length) {\n            if (hexDigits.get(i).toUpperCase == \"2\") {\n                primes.append(2l)\n            } else if (hexDigits.get(i).toUpperCase == \"3\") {\n                primes.append(3l)\n            } else if (hexDigits.get(i).toUpperCase == \"5\") {\n                primes.append(5l)\n            } else if (hexDigits.get(i).toUpperCase == \"7\") {\n                primes.append(7l)\n            } else if (hexDigits.get(i).toUpperCase == \"B\") {\n                primes.append(11l)\n            } else if (hexDigits.get(i).toUpperCase == \"D\") {\n                primes.append(13l)\n            }\n        }\n        return primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:29:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:33:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:35:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"7\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:37:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqir9he58.scala:39:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (hexDigits.get(i).toUpperCase == \u001b[31m\"D\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value get is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                result += 1\n            } else if (digit == \"1\") {\n                result += 2\n            } else if (digit == \"2\") {\n                result += 3\n            } else if (digit == \"3\") {\n                result += 4\n            } else if (digit == \"4\") {\n                result += 5\n            } else if (digit == \"5\") {\n                result += 6\n            } else if (digit == \"6\") {\n                result += 7\n            } else if (digit == \"7\") {\n                result += 8\n            } else if (digit == \"8\") {\n                result += 9\n            } else if (digit == \"A\") {\n                result += 10\n            } else if (digit == \"B\") {\n                result += 11\n            } else if (digit == \"C\") {\n                result += 12\n            } else if (digit == \"D\") {\n                result += 13\n            } else if (digit == \"E\") {\n                result += 14\n            } else if (digit == \"F\") {\n                result += 15\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq2vr8tgg.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:41:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                result += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 2\n            } else if (nums[i].toUpperCase == \"B\") {\n                count += 3\n            } else if (nums[i].toUpperCase == \"C\") {\n                count += 5\n            } else if (nums[i].toUpperCase == \"D\") {\n                count += 7\n            } else if (nums[i].toUpperCase == \"E\") {\n                count += 11\n            } else if (nums[i].toUpperCase == \"F\") {\n                count += 13\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtir6_qk.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtir6_qk.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtir6_qk.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtir6_qk.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtir6_qk.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtir6_qk.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtir6_qk",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val nb = n.length()\n        val res = 0L\n        for (i <- 0 until nb) {\n            val digit = n.charAt(i)\n            if (digit == \"0\") {\n                continue\n            }\n            val prime = isPrime(digit)\n            if (prime) {\n                res += 1\n            }\n        }\n        return res\n    }\n\n    def isPrime(digit : String) : Boolean = {\n        val n = digit.toUpperCase.replaceAll(\"[^0-9]\", \"\")\n        val nb = n.length()\n        if (nb == 0) {\n            return false\n        }\n        val nb2 = nb / 2\n        val i = 2L\n        while (i <= nb2) {\n            if (n.charAt(i - 1) == n.charAt(nb - i)) {\n                return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzidj7q8i.scala:31:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mif\u001b[0m (digit == \u001b[31m\"0\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzidj7q8i.scala:32:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzidj7q8i.scala:34:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = isPrime(digit)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (digit : Char)\n\u001b[31m   |\u001b[0m                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzidj7q8i.scala:36:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzidj7q8i.scala:51:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mif\u001b[0m (n.charAt(i - \u001b[31m1\u001b[0m) == n.charAt(nb - i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzidj7q8i.scala:51:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mif\u001b[0m (n.charAt(i - \u001b[31m1\u001b[0m) == n.charAt(nb - i)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until nums.length) {\n            if (nums[i].toUpperCase == \"A\") {\n                count += 1\n            } else if (nums[i].toUpperCase == \"B\") {\n                count += 2\n            } else if (nums[i].toUpperCase == \"C\") {\n                count += 3\n            } else if (nums[i].toUpperCase == \"D\") {\n                count += 4\n            } else if (nums[i].toUpperCase == \"E\") {\n                count += 5\n            } else if (nums[i].toUpperCase == \"F\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"A\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:31:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"B\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj.scala:33:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (nums[i].toUpperCase == \u001b[31m\"C\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmz5zajgj.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmz5zajgj",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until nums.length) {\n            if (nums[i].toChar.to_i % 2 == 0) {\n                primes.append(nums[i].toChar.to_i)\n            }\n        }\n        val primes_count = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_2 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_3 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_5 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_7 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_11 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_13 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_17 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_19 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_23 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_29 = primes.toList.map(x => x).reduce(0, (x, y) => x + y)\n        val primes_count_31 = primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdy7rcjj9.scala:29:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (nums[\u001b[35mi\u001b[0m].toChar.to_i % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdy7rcjj9.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                primes.append(nums[\u001b[35mi\u001b[0m].toChar.to_i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdy7rcjj9.scala:33:64 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes_count\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter x.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdy7rcjj9.scala:33:67 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes_count\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                          I could not infer the type of the parameter y.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdy7rcjj9.scala:34:66 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes_count_2\u001b[0m = primes.toList.map(\u001b[36mx\u001b[0m => x).reduce(\u001b[31m0\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x + y)\n\u001b[31m\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().split(\"\")\n        val hexPrimes = hexDigits.map(x => x.toInt).filter(x => x % 2 == 0 && x > 1).toList\n        val hexPrimesCount = hexPrimes.length\n        val hexPrimesDigits = hexPrimes.map(x => x.toInt).toList\n        val hexPrimesDigitsCount = hexPrimesDigits.length\n        val hexPrimesDigitsDigits = hexPrimesDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsCount = hexPrimesDigitsDigits.length\n        val hexPrimesDigitsDigitsDigits = hexPrimesDigitsDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsDigitsCount = hexPrimesDigitsDigitsDigits.length\n        val hexPrimesDigitsDigitsDigitsDigits = hexPrimesDigitsDigitsDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsDigitsDigitsCount = hexPrimesDigitsDigitsDigitsDigits.length\n        val hexPrimesDigitsDigitsDigitsDigitsDigits = hexPrimesDigitsDigitsDigitsDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsDigitsDigitsDigitsCount = hexPrimesDigitsDigitsDigitsDigitsDigits.length\n        val hexPrimesDigitsDigitsDigitsDigitsDigitsDigits = hexPrimesDigitsDigitsDigitsDigitsDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsDigitsDigitsDigitsDigitsCount = hexPrimesDigitsDigitsDigitsDigitsDigitsDigits.length\n        val hexPrimesDigitsDigitsDigitsDigitsDigitsDigitsDigits = hexPrimesDigitsDigitsDigitsDigitsDigitsDigits.map(x => x.toInt).toList\n        val hexPrimesDigitsDigitsDigitsDigitsDigitsDigitsDigitsCount = hexPrimesDigitsDigitsDigitsDigits\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmd6ah_rm.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            val digit = digits[i]\n            if (digit == \"0\") {\n                count += 1\n            } else if (digit == \"1\") {\n                count += 2\n            } else if (digit == \"2\") {\n                count += 3\n            } else if (digit == \"3\") {\n                count += 4\n            } else if (digit == \"4\") {\n                count += 5\n            } else if (digit == \"5\") {\n                count += 6\n            } else if (digit == \"6\") {\n                count += 7\n            } else if (digit == \"7\") {\n                count += 8\n            } else if (digit == \"8\") {\n                count += 9\n            } else if (digit == \"A\") {\n                count += 10\n            } else if (digit == \"B\") {\n                count += 11\n            } else if (digit == \"C\") {\n                count += 12\n            } else if (digit == \"D\") {\n                count += 13\n            } else if (digit == \"E\") {\n                count += 14\n            } else if (digit == \"F\") {\n                count += 15\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqpj07tun.scala:29:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:33:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:35:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:37:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                count += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:39:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                count += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqpj07tun.scala:41:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                count += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n2 = n.replaceAll(\"[A-F]\", \"\")\n        val n3 = n2.replaceAll(\"[0-9]\", \"\")\n        val n4 = n3.replaceAll(\"[^0-9]\", \"\")\n        val n5 = n4.replaceAll(\"[^0-9]\", \"\")\n        val n6 = n5.replaceAll(\"[^0-9]\", \"\")\n        val n7 = n6.replaceAll(\"[^0-9]\", \"\")\n        val n8 = n7.replaceAll(\"[^0-9]\", \"\")\n        val n9 = n8.replaceAll(\"[^0-9]\", \"\")\n        val n10 = n9.replaceAll(\"[^0-9]\", \"\")\n        val n11 = n10.replaceAll(\"[^0-9]\", \"\")\n        val n12 = n11.replaceAll(\"[^0-9]\", \"\")\n        val n13 = n12.replaceAll(\"[^0-9]\", \"\")\n        val n14 = n13.replaceAll(\"[^0-9]\", \"\")\n        val n15 = n14.replaceAll(\"[^0-9]\", \"\")\n        val n16 = n15.replaceAll(\"[^0-9]\", \"\")\n        val n17 = n16.replaceAll(\"[^0-9]\", \"\")\n        val n18 = n17.replaceAll(\"[^0-9]\", \"\")\n        val n19 = n18.replaceAll(\"[^0-9]\", \"\")\n        val n20 = n19.replaceAll(\"[^0-9]\", \"\")\n        val n21 = n20.replaceAll(\"[^0-9]\", \"\")\n        val n22 = n21.replaceAll(\"[^0-9]\", \"\")\n        val n23 = n22.replaceAll(\"[^0-9]\", \"\")\n        val n24 = n23.replaceAll(\"[^0-9]\", \"\")\n        val n25 =\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3_3jzuhk.scala:50:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn25\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3jzuhk.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numAsList = num.toUpperCase.split(\"\")\n        val hexDigits = numAsList.map(x => x.charCodeAt(0) - \"0\".charCodeAt(0))\n        val primes = hexDigits.filter(x => x > 1 && x % 2 == 1).toSeq\n        val primesAsList = primes.map(x => x.toString(16)).toSeq\n        val primesAsLong = primesAsList.map(x => x.toUpperCase.charCodeAt(0) - \"0\".charCodeAt(0))\n        val primesAsLongAsList = primesAsLong.toSeq\n        val primesAsLongAsListLength = primesAsLongAsList.length\n        val primesAsLongAsListLengthAsLong = primesAsLongAsListLength.toLong\n        val primesAsLongAsListLengthAsLongAsLong = primesAsLongAsListLengthAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLongAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLongAsLong.toLong\n        val primesAsLongAsListLengthAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong = primesAsLongAsListLengthAsLong\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp46cotmb4.scala:27:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value charCodeAt is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46cotmb4.scala:27:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigits\u001b[0m = numAsList.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46cotmb4.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].toUpperCase == \"2\") {\n                count += 1\n            } else if (digits[i].toUpperCase == \"3\") {\n                count += 2\n            } else if (digits[i].toUpperCase == \"5\") {\n                count += 3\n            } else if (digits[i].toUpperCase == \"7\") {\n                count += 4\n            } else if (digits[i].toUpperCase == \"B\") {\n                count += 5\n            } else if (digits[i].toUpperCase == \"D\") {\n                count += 6\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4_uufq.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].toUpperCase == \u001b[31m\"2\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsl4_uufq.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4_uufq.scala:31:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"3\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsl4_uufq.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                count += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4_uufq.scala:33:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digits[i].toUpperCase == \u001b[31m\"5\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsl4_uufq.scala:34:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m                count += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase.split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.charCodeAt(0) - \"0\".charCodeAt(0)).toSeq\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesPrimes = hexDigitsPrimes.filter(x => x > 1).toSeq\n        val hexDigitsPrimesPrimesCount = hexDigitsPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimes = hexDigitsPrimesPrimes.filter(x => x > 2).toSeq\n        val hexDigitsPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimes.filter(x => x > 3).toSeq\n        val hexDigitsPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimes.filter(x => x > 4).toSeq\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimesPrimes.filter(x => x > 5).toSeq\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesPrimesPrimes = hexDigitsPrimesPrimesPrimesPrimesPrimesPrimes.filter(x => x > 6).toSeq\n        val hexDigitsPrimesPrimesPrimesPrimesPrimesPrimesPrimesCount = hexDigitsPrimesPrimesPrimesPrimesPrimesPrimesPrimes.length\n        val hexDigitsPrimesPrimesPrimesPrimes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcirxf_z5.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcirxf_z5.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value charCodeAt is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcirxf_z5.scala:28:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m\"0\"\u001b[0m.charCodeAt(\u001b[31m0\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcirxf_z5.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s = n.toCharArray\n        val result = 0L\n        for (i <- 0 until s.length) {\n            if (s[i] == '2' || s[i] == '3' || s[i] == '5' || s[i] == '7') {\n                result += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpag60qmci.scala:30:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (s[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || s[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || s[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || s[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpag60qmci.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val count = 0\n        for (i <- 0 until digits.length) {\n            if (digits[i].equals(\"2\") || digits[i].equals(\"3\") || digits[i].equals(\"5\") || digits[i].equals(\"7\")) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyt8st10.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mif\u001b[0m (digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"2\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"3\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"5\"\u001b[0m) || digits[\u001b[35mi\u001b[0m].equals(\u001b[31m\"7\"\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyt8st10.scala:30:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toUpperCase.split(\"\")\n        val primes = digits.map(d -> d.equals(\"A\") || d.equals(\"B\") || d.equals(\"C\") || d.equals(\"D\") || d.equals(\"E\") || d.equals(\"F\")).toSeq\n        val primesCount = primes.count()\n        val primesDigits = primes.map(d -> d.equals(\"A\") ? 2 : d.equals(\"B\") ? 3 : d.equals(\"C\") ? 5 : d.equals(\"D\") ? 7 : d.equals(\"E\") ? 11 : d.equals(\"F\") ? 13 : 0).toSeq\n        val primesDigitsCount = primesDigits.count()\n        val result = (primesCount * primesDigitsCount)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi2aevshb.scala:29:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimesDigits\u001b[0m = primes.map(d -> d.equals(\u001b[31m\"A\"\u001b[0m) ? \u001b[31m2\u001b[0m : d.equals(\u001b[31m\"B\"\u001b[0m) ? \u001b[31m3\u001b[0m : d.equals(\u001b[31m\"C\"\u001b[0m) ? \u001b[31m5\u001b[0m : d.equals(\u001b[31m\"D\"\u001b[0m) ? \u001b[31m7\u001b[0m : d.equals(\u001b[31m\"E\"\u001b[0m) ? \u001b[31m11\u001b[0m : d.equals(\u001b[31m\"F\"\u001b[0m) ? \u001b[31m13\u001b[0m : \u001b[31m0\u001b[0m).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ')' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2aevshb.scala:27:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.equals(\u001b[31m\"A\"\u001b[0m) || d.equals(\u001b[31m\"B\"\u001b[0m) || d.equals(\u001b[31m\"C\"\u001b[0m) || d.equals(\u001b[31m\"D\"\u001b[0m) || d.equals(\u001b[31m\"E\"\u001b[0m) || d.equals(\u001b[31m\"F\"\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi2aevshb.scala:27:136 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = digits.map(d -> d.equals(\u001b[31m\"A\"\u001b[0m) || d.equals(\u001b[31m\"B\"\u001b[0m) || d.equals(\u001b[31m\"C\"\u001b[0m) || d.equals(\u001b[31m\"D\"\u001b[0m) || d.equals(\u001b[31m\"E\"\u001b[0m) || d.equals(\u001b[31m\"F\"\u001b[0m)).toSeq\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val digits = num.toCharArray\n        val primes = mutable.List[Long]()\n        for (i <- 0 until digits.length) {\n            val digit = digits[i]\n            if (digit == '0' || digit == '1' || digit == '2' || digit == '3' || digit == '4' || digit == '5' || digit == '6' || digit == '7' || digit == '8' || digit == '9' || digit == 'A' || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F') {\n                primes.append(digit - '0')\n            }\n        }\n        val result = 0L\n        for (i <- 0 until primes.length) {\n            if (primes.apply(i) > 1) {\n                result += 1L\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpng6az5y7.scala:27:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimes\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpng6az5y7.scala:29:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpng6az5y7.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m1L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                result += 1\n            } else if (digit == \"1\") {\n                result += 2\n            } else if (digit == \"2\") {\n                result += 3\n            } else if (digit == \"3\") {\n                result += 4\n            } else if (digit == \"4\") {\n                result += 5\n            } else if (digit == \"5\") {\n                result += 6\n            } else if (digit == \"6\") {\n                result += 7\n            } else if (digit == \"7\") {\n                result += 8\n            } else if (digit == \"8\") {\n                result += 9\n            } else if (digit == \"A\") {\n                result += 10\n            } else if (digit == \"B\") {\n                result += 11\n            } else if (digit == \"C\") {\n                result += 12\n            } else if (digit == \"D\") {\n                result += 13\n            } else if (digit == \"E\") {\n                result += 14\n            } else if (digit == \"F\") {\n                result += 15\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq2vr8tgg.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq2vr8tgg.scala:41:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                result += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase.split(\"\")\n        val res = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                continue\n            }\n            val prime = isPrime(digit)\n            if (prime) {\n                res += 1\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:31:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph888fn_2.scala:33:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprime\u001b[0m = isPrime(digit)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: isPrime\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph888fn_2.scala:35:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                res += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean res.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().replaceAll(\"[^0-9A-F]\",\"\").toCharArray()\n        val hexDigitsLength = hexDigits.length\n        val hexDigitsPrimes = mutable.List[Long]()\n        for (i <- 0 until hexDigitsLength) {\n            if (hexDigits[i] == '2' || hexDigits[i] == '3' || hexDigits[i] == '5' || hexDigits[i] == '7') {\n                hexDigitsPrimes.append(hexDigits[i])\n            }\n        }\n        return hexDigitsPrimes.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nyvnx9o.scala:28:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6nyvnx9o.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            \u001b[33mif\u001b[0m (hexDigits[\u001b[35mi\u001b[0m] == \u001b[31m'2'\u001b[0m || hexDigits[\u001b[35mi\u001b[0m] == \u001b[31m'3'\u001b[0m || hexDigits[\u001b[35mi\u001b[0m] == \u001b[31m'5'\u001b[0m || hexDigits[\u001b[35mi\u001b[0m] == \u001b[31m'7'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val n2 = n.replaceAll(\"[0-9]\", \"\")\n        val n3 = n2.replaceAll(\"[A-F]\", \"\")\n        val n4 = n3.replaceAll(\"[0-9]\", \"\")\n        val n5 = n4.replaceAll(\"[A-F]\", \"\")\n        val n6 = n5.replaceAll(\"[0-9]\", \"\")\n        val n7 = n6.replaceAll(\"[A-F]\", \"\")\n        val n8 = n7.replaceAll(\"[0-9]\", \"\")\n        val n9 = n8.replaceAll(\"[A-F]\", \"\")\n        val n10 = n9.replaceAll(\"[0-9]\", \"\")\n        val n11 = n10.replaceAll(\"[A-F]\", \"\")\n        val n12 = n11.replaceAll(\"[0-9]\", \"\")\n        val n13 = n12.replaceAll(\"[A-F]\", \"\")\n        val n14 = n13.replaceAll(\"[0-9]\", \"\")\n        val n15 = n14.replaceAll(\"[A-F]\", \"\")\n        val n16 = n15.replaceAll(\"[0-9]\", \"\")\n        val n17 = n16.replaceAll(\"[A-F]\", \"\")\n        val n18 = n17.replaceAll(\"[0-9]\", \"\")\n        val n19 = n18.replaceAll(\"[A-F]\", \"\")\n        val n20 = n19.replaceAll(\"[0-9]\", \"\")\n        val n21 = n20.replaceAll(\"[A-F]\", \"\")\n        val n22 = n21.replaceAll(\"[0-9]\", \"\")\n        val n23 = n22.replaceAll(\"[A-F]\", \"\")\n        val n24 = n23.replaceAll(\"[0-9]\", \"\")\n        val n25 = n24.replaceAll(\"[A-F]\", \"\")\n        val n26 = n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplgrmh9dv.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val count = n.chars().filter(c -> c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F').count\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjf34aqob.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = n.chars().filter(c -> c == \u001b[31m'0'\u001b[0m || c == \u001b[31m'1'\u001b[0m || c == \u001b[31m'2'\u001b[0m || c == \u001b[31m'3'\u001b[0m || c == \u001b[31m'4'\u001b[0m || c == \u001b[31m'5'\u001b[0m || c == \u001b[31m'6'\u001b[0m || c == \u001b[31m'7'\u001b[0m || c == \u001b[31m'8'\u001b[0m || c == \u001b[31m'9'\u001b[0m || c == \u001b[31m'A'\u001b[0m || c == \u001b[31m'B'\u001b[0m || c == \u001b[31m'C'\u001b[0m || c == \u001b[31m'D'\u001b[0m || c == \u001b[31m'E'\u001b[0m || c == \u001b[31m'F'\u001b[0m).count\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: c\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = num.toUpperCase().split(\"\")\n        val hexDigitsCount = hexDigits.length\n        val hexDigitsPrimes = hexDigits.map(x => x.toChar).filter(x => x.isLetter()).map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesCount = hexDigitsPrimes.length\n        val hexDigitsPrimesPrime = hexDigitsPrimes.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimeCount = hexDigitsPrimesPrime.length\n        val hexDigitsPrimesPrimePrime = hexDigitsPrimesPrime.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimePrimeCount = hexDigitsPrimesPrimePrime.length\n        val hexDigitsPrimesPrimePrimePrime = hexDigitsPrimesPrimePrime.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimePrimePrimeCount = hexDigitsPrimesPrimePrimePrime.length\n        val hexDigitsPrimesPrimePrimePrimePrime = hexDigitsPrimesPrimePrimePrime.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimePrimePrimePrimeCount = hexDigitsPrimesPrimePrimePrimePrime.length\n        val hexDigitsPrimesPrimePrimePrimePrimePrime = hexDigitsPrimesPrimePrimePrimePrime.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimePrimePrimePrimePrimeCount = hexDigitsPrimesPrimePrimePrimePrimePrime.length\n        val hexDigitsPrimesPrimePrimePrimePrimePrimePrime = hexDigitsPrimesPrimePrimePrimePrimePrime.map(x => x.toChar).filter(x => x.isDigit()).toList\n        val hexDigitsPrimesPrimePrimePrimePrimePrimePrimePrime = hexDigitsPrimesPrimePrimePrimePrimePrimePrime.length\n        val hexDigitsPrimesPrimePrime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9jwwl7yy.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9jwwl7yy.scala:28:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isLetter()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9jwwl7yy.scala:28:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhexDigitsPrimes\u001b[0m = hexDigits.map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isLetter()).map(\u001b[36mx\u001b[0m => x.toChar).filter(\u001b[36mx\u001b[0m => x.isDigit()).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jwwl7yy.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\", \"\")\n        val nb = n.length\n        val nb2 = nb / 2\n        val nb3 = nb / 3\n        val nb5 = nb / 5\n        val nb7 = nb / 7\n        val nb11 = nb / 11\n        val nb13 = nb / 13\n        val nb17 = nb / 17\n        val nb19 = nb / 19\n        val nb23 = nb / 23\n        val nb29 = nb / 29\n        val nb31 = nb / 31\n        val nb37 = nb / 37\n        val nb41 = nb / 41\n        val nb43 = nb / 43\n        val nb47 = nb / 47\n        val nb53 = nb / 53\n        val nb59 = nb / 59\n        val nb61 = nb / 61\n        val nb67 = nb / 67\n        val nb71 = nb / 71\n        val nb73 = nb / 73\n        val nb79 = nb / 79\n        val nb83 = nb / 83\n        val nb89 = nb / 89\n        val nb97 = nb / 97\n        val nb101 = nb / 101\n        val nb103 = nb / 103\n        val nb107 = nb / 107\n        val nb109 = nb / 109\n        val nb113 = nb / 113\n        val nb127 = nb / 127\n        val nb131 = nb / 131\n        val nb137 = nb / 137\n        val nb139 = nb / 139\n        val nb149 = nb / 149\n        val nb151 = nb / 151\n        val nb157 = nb / 157\n        val nb163 = nb / 163\n        val nb167 = nb / 167\n        val nb173 = nb / 173\n        val nb179 = nb / 179\n        val nb181 = nb / 181\n        val nb191 = nb / 191\n        val n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppa64aav4.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppa64aav4.scala:72:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val nums = num.toUpperCase().split(\"\")\n        val result = 0L\n        for (i <- 0 until nums.length) {\n            val digit = nums[i]\n            if (digit == \"0\") {\n                result += 1\n            } else if (digit == \"1\") {\n                result += 2\n            } else if (digit == \"2\") {\n                result += 3\n            } else if (digit == \"3\") {\n                result += 4\n            } else if (digit == \"4\") {\n                result += 5\n            } else if (digit == \"5\") {\n                result += 6\n            } else if (digit == \"6\") {\n                result += 7\n            } else if (digit == \"7\") {\n                result += 8\n            } else if (digit == \"8\") {\n                result += 9\n            } else if (digit == \"A\") {\n                result += 10\n            } else if (digit == \"B\") {\n                result += 11\n            } else if (digit == \"C\") {\n                result += 12\n            } else if (digit == \"D\") {\n                result += 13\n            } else if (digit == \"E\") {\n                result += 14\n            } else if (digit == \"F\") {\n                result += 15\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwmrfi26s.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = nums[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:31:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                result += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:33:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                result += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:35:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                result += \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:37:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                result += \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:39:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                result += \u001b[31m5\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwmrfi26s.scala:41:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                result += \u001b[31m6\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value += is not a member of Long - di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s = n.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n2 = n.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s2 = s.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n3 = n2.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s3 = s2.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n4 = n3.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s4 = s3.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n5 = n4.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s5 = s4.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n6 = n5.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s6 = s5.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n7 = n6.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s7 = s6.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n8 = n7.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s8 = s7.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n9 = n8.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s9 = s8.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n10 = n9.toUpperCase.replace\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpopvjuqqx.scala:44:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn10\u001b[0m = n9.toUpperCase.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopvjuqqx.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val n = num.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val s = n.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val h = s.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val p = h.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val a = p.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val b = a.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val c = b.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val d = c.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val e = d.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val f = e.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val g = f.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val h = g.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val i = h.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val j = i.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val k = j.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val l = k.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val m = l.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val n = m.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val o = n.toUpperCase.replaceAll(\"[^0-9A-F]\",\"\")\n        val p = o.toUpperCase.replaceAll(\"[^0-\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n",
      "timestamp": 1664292877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6g8lkwjd.scala:45:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mp\u001b[0m = o.toUpperCase.replaceAll(\"[^0-\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6g8lkwjd.scala:47:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6g8lkwjd.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mh\u001b[0m = g.toUpperCase.replaceAll(\u001b[31m\"[^0-9A-F]\"\u001b[0m,\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mh is already defined as \u001b[33mvalue\u001b[0m \u001b[35mh\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6g8lkwjd.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = m.toUpperCase.replaceAll(\u001b[31m\"[^0-9A-F]\"\u001b[0m,\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6g8lkwjd.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6g8lkwjd.scala:47:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}