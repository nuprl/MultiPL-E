{
  "name": "HumanEval_158_find_max",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (w : words.tail) {\n            if (w.length > maxCount) {\n                maxCount = w.length\n                max = w\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0f3uwgc6.scala:18:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (w : words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0f3uwgc6.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0f3uwgc6.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0f3uwgc6.scala:23:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (word <- words.tail) {\n            if (word.length > max.length) max = word\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbvqft_cr.scala:23)\n\tat Problem.main(tmpbvqft_cr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            var max = \"\"\n            for (i <- 0 until word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                } else {\n                    count = 1\n                }\n                if (count > max.length) {\n                    max = word.substring(i, i + 1)\n                }\n            }\n            return max\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzxf5jq29.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzxf5jq29.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxf5jq29.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(\u001b[36mword\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length == \u001b[31m1\u001b[0m) {\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m word\n\u001b[31m19 |\u001b[0m            }\n\u001b[31m20 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mcount\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mmax\u001b[0m = \u001b[31m\"\"\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until word.length - \u001b[31m1\u001b[0m) {\n\u001b[31m23 |\u001b[0m                \u001b[33mif\u001b[0m (word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m)) {\n\u001b[31m24 |\u001b[0m                    count += \u001b[31m1\u001b[0m\n\u001b[31m25 |\u001b[0m                } \u001b[33melse\u001b[0m {\n\u001b[31m26 |\u001b[0m                    count = \u001b[31m1\u001b[0m\n\u001b[31m27 |\u001b[0m                }\n\u001b[31m28 |\u001b[0m                \u001b[33mif\u001b[0m (count > max.length) {\n\u001b[31m29 |\u001b[0m                    max = word.substring(i, i + \u001b[31m1\u001b[0m)\n\u001b[31m30 |\u001b[0m                }\n\u001b[31m31 |\u001b[0m            }\n\u001b[31m32 |\u001b[0m            \u001b[33mreturn\u001b[0m max\n\u001b[31m33 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for(var i = 1; i < words.size; i++) {\n            var count = words.head.count(words.apply(i))\n            if(count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9zzbk9l1.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9zzbk9l1.scala:18:37 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp9zzbk9l1.scala:18:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9zzbk9l1.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9zzbk9l1.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9zzbk9l1.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size; i++) {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length - 1) {\n            if (words.tail[i].length > maxCount) {\n                maxCount = words.tail[i].length\n                max = words.tail[i]\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- words.tail.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf94sbfxv.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf94sbfxv.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf94sbfxv.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf94sbfxv.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf94sbfxv.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf94sbfxv.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() == 1) {\n                return w\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9e1on7in.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9e1on7in.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9e1on7in.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(\u001b[36mw\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (w.length() == \u001b[31m1\u001b[0m) {\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m w\n\u001b[31m19 |\u001b[0m            }\n\u001b[31m20 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eis3567.scala:42:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        words.sort(Comparator.comparing(\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length - 1) {\n            if (words.tail[i].length > maxCount) {\n                maxCount = words.tail[i].length\n                max = words.tail[i]\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcxksslyn.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- words.tail.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm765ake_.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm765ake_.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm765ake_.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(word -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm765ake_.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm765ake_.scala:36:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm765ake_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            if (a.length() > b.length()) return a\n            return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17zeeqme.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17zeeqme.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17zeeqme.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17zeeqme.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17zeeqme.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17zeeqme.scala:17:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                return word\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpovlzgrd1.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpovlzgrd1.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpovlzgrd1.scala:26:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpovlzgrd1.scala:27:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                max = count\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (count : Int)\n\u001b[31m   |\u001b[0m                      Required: (Int, Int) => Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = words.head.count(words.apply(i))\n            if (count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmp9tikq.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzmp9tikq.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmp9tikq.scala:18:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count = count + 1\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count = count - 1\n                }\n            }\n            if (count > 0) {\n                return word\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgpvnxqk9.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgpvnxqk9.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgpvnxqk9.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(\u001b[36mword\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() == \u001b[31m1\u001b[0m) {\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m word\n\u001b[31m19 |\u001b[0m            }\n\u001b[31m20 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mcount\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until word.length - \u001b[31m1\u001b[0m) {\n\u001b[31m22 |\u001b[0m                count = count + \u001b[31m1\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mif\u001b[0m (word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m)) {\n\u001b[31m24 |\u001b[0m                    count = count - \u001b[31m1\u001b[0m\n\u001b[31m25 |\u001b[0m                }\n\u001b[31m26 |\u001b[0m            }\n\u001b[31m27 |\u001b[0m            \u001b[33mif\u001b[0m (count > \u001b[31m0\u001b[0m) {\n\u001b[31m28 |\u001b[0m                \u001b[33mreturn\u001b[0m word\n\u001b[31m29 |\u001b[0m            }\n\u001b[31m30 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (word <- words.tail) {\n            if (word.length > max.length) max = word\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbvqft_cr.scala:23)\n\tat Problem.main(tmpbvqft_cr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (w in words.tail) {\n            if (w.length() > max.length()) max = w\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphq3fshlv.scala:16:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (w in words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphq3fshlv.scala:18:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(x => {\n            if (x.length() > maxLen) {\n                maxLen = x.length()\n                maxWord = x\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1ngndr0.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1ngndr0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (x.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = x.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = x\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            var max = \"\"\n            for (i <- 0 until word.length - 1) {\n                count = count + 1\n                if (count > max.length) {\n                    max = word.substring(i, i + 1)\n                }\n            }\n        })\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdhwcks7f.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdhwcks7f.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdhwcks7f.scala:29:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mreturn\u001b[0m max\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch expected type String\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292623,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdkzcb2xg.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdkzcb2xg.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (w in words.tail) {\n            if (w.length > max.length) max = w\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292623,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmlan7j96.scala:16:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (w in words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmlan7j96.scala:18:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            if (word.length > 1) {\n                var count = 0\n                for (i <- 0 until word.length - 1) {\n                    count = count + 1\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count = count - 1\n                    }\n                }\n                if (count > 0) {\n                    return word\n                }\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6t3tlcn4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6t3tlcn4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6t3tlcn4.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(\u001b[36mword\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length == \u001b[31m1\u001b[0m) {\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m word\n\u001b[31m19 |\u001b[0m            }\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (word.length > \u001b[31m1\u001b[0m) {\n\u001b[31m21 |\u001b[0m                \u001b[33mvar\u001b[0m \u001b[36mcount\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until word.length - \u001b[31m1\u001b[0m) {\n\u001b[31m23 |\u001b[0m                    count = count + \u001b[31m1\u001b[0m\n\u001b[31m24 |\u001b[0m                    \u001b[33mif\u001b[0m (word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m)) {\n\u001b[31m25 |\u001b[0m                        count = count - \u001b[31m1\u001b[0m\n\u001b[31m26 |\u001b[0m                    }\n\u001b[31m27 |\u001b[0m                }\n\u001b[31m28 |\u001b[0m                \u001b[33mif\u001b[0m (count > \u001b[31m0\u001b[0m) {\n\u001b[31m29 |\u001b[0m                    \u001b[33mreturn\u001b[0m word\n\u001b[31m30 |\u001b[0m                }\n\u001b[31m31 |\u001b[0m            }\n\u001b[31m32 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length) {\n            if (words.tail[i].length > maxCount) {\n                max = words.tail[i]\n                maxCount = words.tail[i].length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdthvc645.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdthvc645.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdthvc645.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- words.tail.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                max = i\n                maxCount = i.length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3p866f.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3p866f.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(x => {\n            if (x.length() > maxLen) {\n                maxLen = x.length()\n                maxWord = x\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1ngndr0.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1ngndr0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (x.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = x.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = x\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn1ngndr0.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                for (i <- 0 until word.length - 1) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    }\n                }\n                if (count > max) {\n                    max = count\n                    maxWord = word\n                }\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnfj7w5lq.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnfj7w5lq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnfj7w5lq.scala:27:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnfj7w5lq.scala:28:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                    max = count\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (count : Int)\n\u001b[31m   |\u001b[0m                          Required: (Int, Int) => Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnfj7w5lq.scala:29:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                    maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not foun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                var max = \"\"\n                for (i <- 0 until word.length()) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    } else {\n                        count = 1\n                    }\n                    if (count > max.length()) {\n                        max = word.substring(i, i + 1)\n                    }\n                }\n                return max\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwrl30i8_.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwrl30i8_.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwrl30i8_.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(\u001b[36mword\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() == \u001b[31m1\u001b[0m) {\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m word\n\u001b[31m19 |\u001b[0m            }\n\u001b[31m20 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > \u001b[31m1\u001b[0m) {\n\u001b[31m21 |\u001b[0m                \u001b[33mvar\u001b[0m \u001b[36mcount\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mvar\u001b[0m \u001b[36mmax\u001b[0m = \u001b[31m\"\"\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until word.length()) {\n\u001b[31m24 |\u001b[0m                    \u001b[33mif\u001b[0m (word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m)) {\n\u001b[31m25 |\u001b[0m                        count += \u001b[31m1\u001b[0m\n\u001b[31m26 |\u001b[0m                    } \u001b[33melse\u001b[0m {\n\u001b[31m27 |\u001b[0m                        count = \u001b[31m1\u001b[0m\n\u001b[31m28 |\u001b[0m                    }\n\u001b[31m29 |\u001b[0m                    \u001b[33mif\u001b[0m (count > max.length()) {\n\u001b[31m30 |\u001b[0m                        max = word.substring(i, i + \u001b[31m1\u001b[0m)\n\u001b[31m31 |\u001b[0m                    }\n\u001b[31m32 |\u001b[0m                }\n\u001b[31m33 |\u001b[0m                \u001b[33mreturn\u001b[0m max\n\u001b[31m34 |\u001b[0m          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvtp2p76.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvtp2p76.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvtp2p76.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(word -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvtp2p76.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eis3567.scala:42:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        words.sort(Comparator.comparing(\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.size) {\n            if (words.tail.head.length > maxCount) {\n                maxCount = words.tail.head.length\n                max = words.tail.head\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplie00w24.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplie00w24.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplie00w24.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- words.tail.size) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            else if (a.length() > b.length()) return a\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmfoifxbb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmfoifxbb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmfoifxbb.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmfoifxbb.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmfoifxbb.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmfoifxbb.scala:17:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 to word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                return word\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph26sv1ru.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph26sv1ru.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmph26sv1ru.scala:26:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph26sv1ru.scala:27:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                max = count\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (count : Int)\n\u001b[31m   |\u001b[0m                      Required: (Int, Int) => Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp671d1g9r.scala:22:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                count += \u001b[31m1\u001b[0m \u001b[33mif\u001b[0m word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m) \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp671d1g9r.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp671d1g9r.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp671d1g9r.scala:24:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp671d1g9r.scala:25:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                max = count\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (count : Int)\n\u001b[31m   |\u001b[0m                      Required: (Int",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > max.length) {\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).length > max.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:19:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::valueOf))\n        words.sort(Comparator.comparing(String::hashCode))\n        words.sort(Comparator.comparing(String::toString))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292629,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjyw10u2j.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjyw10u2j.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyw10u2j.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjyw10u2j.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyw10u2j.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjyw10u2j.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::toUpperCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > max.countUniqueChars()) {\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpov0dpwfn.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpov0dpwfn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpov0dpwfn.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > max.countUniqueChars()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpov0dpwfn.scala:19:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word <- words.tail) {\n            if (word.length > maxCount) {\n                maxCount = word.length\n                max = word\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_y9yt2h.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_y9yt2h.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:18:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                for (i <- 0 to word.length() - 1) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    } else {\n                        count = 1\n                    }\n                }\n                if (count > max) {\n                    max = count\n                    maxWord = word\n                }\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8aq357tm.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8aq357tm.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp8aq357tm.scala:29:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8aq357tm.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                    max = count\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (count : Int)\n\u001b[31m   |\u001b[0m                          Required: (Int, Int) => Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8aq357tm.scala:31:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                    maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not foun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps1w09biy.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps1w09biy.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1w09biy.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1w09biy.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1w09biy.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1w09biy.scala:17:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:18:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                maxCount = words.get(i).countUnique()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe42s28y4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe42s28y4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe42s28y4.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe42s28y4.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe42s28y4.scala:21:28 ----------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292628,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2dpnw7kx.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2dpnw7kx.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2dpnw7kx.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(word -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2dpnw7kx.scala:22:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        maxWord\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2dpnw7kx.scala:36:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2dpnw7kx.scala:36:26 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (word <- words) {\n            var count = 0\n            for (i <- 0 until word.length) {\n                if (word.charAt(i) == max.charAt(i)) count += 1\n            }\n            if (count > maxCount) {\n                max = word\n                maxCount = count\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpohtu2uho.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpohtu2uho.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            var count = 0\n            for (i <- 0 until word.length) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) max = count\n        })\n        words.foreach(word => {\n            if (word == max) return\n        })\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1378twtq.scala:19:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                count += \u001b[31m1\u001b[0m \u001b[33mif\u001b[0m word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m) \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1378twtq.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1378twtq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp1378twtq.scala:21:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) max = count\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1378twtq.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) max = count\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (coun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUniqueChars() > maxCount) {\n                maxCount = words.apply(i).countUniqueChars()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292638,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaimw68zi.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaimw68zi.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaimw68zi.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUniqueChars is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaimw68zi.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value countUniqueChars is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eis3567.scala:42:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        words.sort(Comparator.comparing(\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word : words.tail) {\n            var count = word.length\n            if (count > maxCount) {\n                max = word\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7buaoe19.scala:18:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (word : words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7buaoe19.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7buaoe19.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7buaoe19.scala:24:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaCon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp22g8jtt4.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word <- words.tail) {\n            if (word.length > maxCount) {\n                maxCount = word.length\n                max = word\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_y9yt2h.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_y9yt2h.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:22:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        maxWord\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpihueucmc.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpihueucmc.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpihueucmc.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihueucmc.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(word -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihueucmc.scala:22:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        maxWord\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpihueucmc.scala:36:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9hemmfym.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9hemmfym.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9hemmfym.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.foreach(word -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9hemmfym.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9hemmfym.scala:36:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9hemmfym",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_98pwh0.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (a.length() < b.length()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_98pwh0.scala:18:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mreturn\u001b[0m b\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfnofgbnd.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:22:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        maxWord\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) -> a.length() > b.length() ? a : b)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvlh6h4i.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsvlh6h4i.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvlh6h4i.scala:16:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> a.length() > b.length() ? a : \u001b[35mb\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvlh6h4i.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> a.length() > b.length() ? a : \u001b[35mb\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvlh6h4i.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.reduce((a, b) -> a.length() > b.length() ? a : \u001b[35mb\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvlh6h4i.scala:16:31 -----------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k9_2j6t.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        var maxCount = 1\n        for (w <- words.tail) {\n            var count = 0\n            for (c <- w.toCharArray) {\n                if (c == max.charAt(count)) {\n                    count += 1\n                } else {\n                    count = 1\n                }\n            }\n            if (count > maxCount) {\n                max = w\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8zev28vm.scala:34)\n\tat Problem.main(tmp8zev28vm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.apply(i).length > max.length) {\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp02uo6off.scala:25)\n\tat Problem.main(tmp02uo6off.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = words.head.count(words.apply(i))\n            if (count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmp9tikq.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzmp9tikq.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmp9tikq.scala:18:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmp9tikq.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (w : words.tail) {\n            if (w.length > maxCount) {\n                max = w\n                maxCount = w.length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo751njpi.scala:18:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (w : words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo751njpi.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo751njpi.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo751njpi.scala:23:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsokbmdz.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eis3567.scala:42:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        words.sort(Comparator.comparing(\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = 0\n            for (var j = 0; j < words.head.length(); j++) {\n                if (words.head.charAt(j) == words.head.charAt(j + i)) {\n                    count += 1\n                }\n            }\n            if (count > maxCount) {\n                max = words.head\n                maxCount = count\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7cfow6h2.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7cfow6h2.scala:18:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp7cfow6h2.scala:18:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m; i < words.size(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7cfow6h2.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7cfow6h2.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7cfow6h2.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m1\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                max = words.apply(i)\n                maxCount = words.apply(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292623,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdkzcb2xg.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdkzcb2xg.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkzcb2xg.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6_cx61if.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (word.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = word.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6_cx61if.scala:22:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        maxWord\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                max = words.apply(i)\n                maxCount = words.apply(i).countUnique()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.apply(i).countUnique() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value countUnique is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk_d6da3a.scala:21:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                maxCount = words.apply(i).countUnique()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value countUnique is not a member of String\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmposch4d85.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmposch4d85.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmposch4d85.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).length > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmposch4d85.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmposch4d85.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                maxCount = words.get(i).length\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4vwnpype.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4vwnpype.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vwnpype.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (w.length() > maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vwnpype.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                maxLen = w.length()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxLen\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vwnpype.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxWord = w\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4vwnpype.scala:22:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mreturn\u001b[0m maxWord\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292610,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpob4yatfk.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp671d1g9r.scala:22:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                count += \u001b[31m1\u001b[0m \u001b[33mif\u001b[0m word.charAt(i) == word.charAt(i + \u001b[31m1\u001b[0m) \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp671d1g9r.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp671d1g9r.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp671d1g9r.scala:24:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp671d1g9r.scala:25:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                max = count\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (count : Int)\n\u001b[31m   |\u001b[0m                      Required: (Int",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var w : words) {\n            if (w.length > maxCount) {\n                maxCount = w.length\n                max = w\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp307vx953.scala:18:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m w : words) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp307vx953.scala:18:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m w : words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp307vx953.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp307vx953.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp307vx953.scala:23:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxCount = words.get(i).countUniqueChars()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf18_2uac.scala:21:28 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                max = i\n                maxCount = i.length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3p866f.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3p866f.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        var max = words.head\n        for (w in words.tail) {\n            if (countUniqueChars(w) > countUniqueChars(max)) max = w\n        }\n        return max\n    }\n\n    // Count the number of unique characters in a string.\n    // >>> countUniqueChars(\"name\")\n    // 1\n    // >>> countUniqueChars(\"name\")\n    // 2\n    // >>> countUniqueChars(\"name\")\n    // 2\n    // >>> countUniqueChars(\"name\")\n    // 2\n    def countUniqueChars(s : String) : Int = {\n        var count = 0\n        for (c in s) {\n            if (countUniqueChars.contains(c)) count += 1\n        }\n        return count\n    }\n\n    // Check if a character is unique in a string.\n    // >>> countUniqueChars.contains('a')\n    // true\n    // >>> countUniqueChars.contains('a')\n    // false\n    // >>> countUniqueChars.contains('a')\n    // false\n    def countUniqueChars(c : Char) : Boolean = {\n        return !countUniqueChars.contains(c)\n    }\n\n    // Create a new mutable set.\n    // >>> set = new HashSet()\n    // >>> set.add('a')\n    // true\n    // >>> set.add('a')\n    // false\n    // >>> set.add('a')\n    // false\n    // >>> set.add('b')\n    // true\n    // >>> set.add('b')\n    // false\n    // >>> set.add('b')\n    // false\n    // >>> set.add('c')\n    // true\n    // >>> set.add('c')\n    // false\n    // >>> set.add('c')\n    // false\n    // >>> set.add('d')\n    // true\n    // >>> set.add('d')\n    // false\n    // >>> set.add('d')\n    // false\n    // >>> set.add('e')\n    // true\n    // >>> set.add('e')\n    // false\n    // >>> set.add('e')\n    // false\n\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnvb6l_6f.scala:16:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (w in words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnvb6l_6f.scala:33:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mfor\u001b[0m (c in s) {\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnvb6l_6f.scala:97:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m97 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnvb6l_6f.scala:18:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnvb6l_6f.scala:35:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extensio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292611,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).countUniqueChars() > maxCount) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxnshduhb.scala:21:33 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > max.length) {\n                max = words.get(i)\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292627,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (words.get(i).length > max.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_8h3pwjy.scala:19:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                max = words.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eis3567.scala:42:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        words.sort(Comparator.comparing(\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5eis3567.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eis3567.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::toLowerCase))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length()) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx_9l4dnn.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx_9l4dnn.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpx_9l4dnn.scala:26:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mif\u001b[0m (count > max) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((Int, Int) => Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx_9l4dnn.scala:27:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                max = count\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (count : Int)\n\u001b[31m   |\u001b[0m                      Required: (Int, Int) => Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx_9l4dnn.scala:28:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                maxWord = word\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word : words.tail) {\n            if (word.length > maxCount) {\n                max = word\n                maxCount = word.length\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu217pwoz.scala:18:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (word : words.tail) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu217pwoz.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu217pwoz.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(String.compareTo)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compareTo is not a member of object String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu217pwoz.scala:23:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaCon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292612,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sedem16.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sedem16.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6sedem16.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
      "timestamp": 1664292613,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumhtc_pf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:15:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of List[String] - did you mean words.sortBy?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        words.sort(Comparator.comparing(String::length).reversed())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumhtc_pf.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Comparator\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumhtc_pf.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        words.sort(Comparator.comparing(String::length))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}