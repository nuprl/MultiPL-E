{
  "name": "HumanEval_54_same_chars",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength2(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3g4ncesq.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyotwmxdq.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa61u3bis.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        for (i <- 0 until s1.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzz\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7xhjp64m.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xhjp64m.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xhjp64m.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xhjp64m.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xhjp64m.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xhjp64m.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        var vowels = \"aeiou\"\n        for (i <- 0 until vowels.length) {\n            if (s0.charAt(i) != vowels.charAt(i) && s\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj0m31d9f.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj0m31d9f.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj0m31d9f.scala:59:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) != vowels.charAt(i) && s\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0m31d9f.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpj0m31d9f.scala:61:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8we3vhfe.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8we3vhfe.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8we3vhfe.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8we3vhfe.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8we3vhfe.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8we3vhfe.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case, and\n    // ignoring the order of the characters.\n    // >>> sameCharsIgnoreCaseOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseOrder((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseOrder((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgn\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92uo17pn.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92uo17pn.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toUpperCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92uo17pn.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92uo17pn.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92uo17pn.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92uo17pn.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf5vjn0vb.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf5vjn0vb.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toUpperCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf5vjn0vb.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf5vjn0vb.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf5vjn0vb.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf5vjn0vb.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (Character.toLowerCase(s0.charAt(i)) != Character.toLowerCase(s1.charAt(i))) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzdsdohlj.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzdsdohlj.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzdsdohlj.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzdsdohlj.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzdsdohlj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzdsdohlj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case, and\n    // ignoring the first character.\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCh\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv4t28caq.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv4t28caq.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4t28caq.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4t28caq.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4t28caq.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4t28caq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two strings are anagrams.\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> anagram(\"ab\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpungspwbt.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpungspwbt.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpungspwbt.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpungspwbt.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpungspwbt.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpungspwbt.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu7gl6xwc.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == 'a' || s0.charAt(i) == 'e' ||\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphsyixmjq.scala:58:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m'a'\u001b[0m || s0.charAt(i) == \u001b[31m'e'\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphsyixmjq.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphsyixmjq.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphsyixmjq.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqv56s13u.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqv56s13u.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toUpperCase() != s1.charAt(i).toUpperCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toUpperCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv56s13u.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv56s13u.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv56s13u.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv56s13u.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsAndLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsAndLength(s0 : String, s1 : String) : Boolean = {\n        return (sameChars(s0, s1) && s0.length == s1.length)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsAndLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsAndLength(s0 : String, s1 : String) : Boolean = {\n        \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1r6vgfyl.scala:56:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameCharsAndLength\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m57 |\u001b[0m        \n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp1r6vgfyl.scala:56:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameCharsAndLength\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef sameCharsAndLength(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef sameCharsAndLength(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 56\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa61u3bis.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpakct9o4u.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpff7hzopw.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpff7hzopw.scala:48:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff7hzopw.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff7hzopw.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff7hzopw.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff7hzopw.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean =\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmph65sfdyk.scala:61:56 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameChars3\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph65sfdyk.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph65sfdyk.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph65sfdyk.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph65sfdyk.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph65sfdyk.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaox0zmb9.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaox0zmb9.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == 'a' || s0.charAt(i) == 'e' || s0.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcu3w85ov.scala:56:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m'a'\u001b[0m || s0.charAt(i) == \u001b[31m'e'\u001b[0m || s0.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcu3w85ov.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcu3w85ov.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcu3w85ov.scala:58:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa61u3bis.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        var vowels = \"aeiou\"\n        for (i <- 0 until vowels.length) {\n            if (s0.charAt(i) != vowels.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8k2k583s.scala:59:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) != vowels.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8k2k583s.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8k2k583s.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp8k2k583s.scala:61:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same number of letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdb3cqecu.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdb3cqecu.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpdb3cqecu.scala:61:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameLetters\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef sameLetters(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef sameLetters(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 61\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293423,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5fhwuh2p.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fhwuh2p.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fhwuh2p.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fhwuh2p.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fhwuh2p.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fhwuh2p.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        def count(s : String) : Int = {\n            for (i <- 0 until s.length) {\n                if (s.charAt(i) == \"a\" || s.charAt(i\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmze0ewsf.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmze0ewsf.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmze0ewsf.scala:59:20 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m                \u001b[33mif\u001b[0m (s.charAt(i) == \u001b[31m\"a\"\u001b[0m || s.charAt(i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmze0ewsf.scala:59:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m                \u001b[33mif\u001b[0m (s.charAt(i) == \u001b[31m\"a\"\u001b[0m || s.charAt(i\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Char\n\u001b[31m   |\u001b[0m                                          Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmze0ewsf.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmze0ewsf.scala:61:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        var vowels = \"aeiou\"\n        for (i <- 0 until vowels.length) {\n            if (s0.indexOf(vowels.charAt(i)) != s1.\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr_u8alzs.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr_u8alzs.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_u8alzs.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpr_u8alzs.scala:61:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293423,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3k_484v1.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3k_484v1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3k_484v1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3k_484v1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3k_484v1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3k_484v1.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case, and\n    // ignoring the first character.\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndFirstChar((\"abcd\"), (\"dd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxufhdln4.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxufhdln4.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufhdln4.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufhdln4.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufhdln4.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufhdln4.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcyzkcn2w.scala:41:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcyzkcn2w.scala:32:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcyzkcn2w.scala:33:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcyzkcn2w.scala:34:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcyzkcn2w.scala:35:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcyzkcn2w.scala:36:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu7gl6xwc.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return (s0.length == s1.length) && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength2(s0 : String, s1 : String) : Boolean = {\n        return (s0.length == s1.length) && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3bmdov0g.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bmdov0g.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bmdov0g.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bmdov0g.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bmdov0g.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bmdov0g.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaox0zmb9.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaox0zmb9.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaox0zmb9.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        var vowels = \"aeiou\"\n        for (i <- 0 until vowels.length) {\n            if (s0.charAt(i) != vowels.charAt(i)) {\n                return false\n            }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp11in7v2w.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11in7v2w.scala:74:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp11in7v2w.scala:64:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters in the same order.\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameOrder((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameOrder((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameOrder(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters in the same order.\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameOrder((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameOrder((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameOrder(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwik2q6eg.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwik2q6eg.scala:75:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpwik2q6eg.scala:61:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameOrder\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef sameOrder(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef sameOrder(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 61\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpwik2q6eg.scala:65:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" ||\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmsh1tknu.scala:58:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmsh1tknu.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsh1tknu.scala:58:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsh1tknu.scala:58:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmsh1tknu.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmsh1tknu.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) return false\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsAndLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsAndLength(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) return false\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameCharsAndLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsAndLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsAndLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsAndLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsAndLength((\"e\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpryb_vzv0.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryb_vzv0.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryb_vzv0.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryb_vzv0.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryb_vzv0.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryb_vzv0.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyotwmxdq.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        return true\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcrm_ucxo.scala:66:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) return false\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" || s0.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbjsabfzk.scala:56:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbjsabfzk.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbjsabfzk.scala:56:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbjsabfzk.scala:56:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjsabfzk.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpbjsabfzk.scala:58:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293426,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpissfm4a4.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpissfm4a4.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpissfm4a4.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpissfm4a4.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpissfm4a4.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpissfm4a4.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa61u3bis.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa61u3bis.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"ddddddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkg4vjmhq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkg4vjmhq.scala:43:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkg4vjmhq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkg4vjmhq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkg4vjmhq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkg4vjmhq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu7gl6xwc.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7gl6xwc.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"),\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd4wd1lq6.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wd1lq6.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wd1lq6.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wd1lq6.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wd1lq6.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wd1lq6.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength2(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3g4ncesq.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength2(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length && sameChars(s0, s1)\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3g4ncesq.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3g4ncesq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyf832pwh.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96qr0fo5.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyotwmxdq.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyotwmxdq.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96qr0fo5.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96qr0fo5.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same number of letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppz5zvtwn.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppz5zvtwn.scala:48:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppz5zvtwn.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppz5zvtwn.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppz5zvtwn.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppz5zvtwn.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" ||\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmsh1tknu.scala:58:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmsh1tknu.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsh1tknu.scala:58:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmsh1tknu.scala:58:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m ||\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmsh1tknu.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmsh1tknu.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and the same number of\n    // vowels.\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        if (s0.length() == 0) {\n            return true\n        }\n        vowels = 0\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" || s0.charAt(i) == \"i\" || s0.charAt(i) == \"o\" || s0.charAt(i) == \"u\") {\n                vowels += 1\n            }\n        }\n        for (i <- 0 until s1.length) {\n            if (s1.charAt(i) == \"a\" || s1.charAt(i) == \"e\" || s1.charAt(i) == \"i\" || s1.charAt(i) == \"o\" || s1.charAt\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1jqv5bk8.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1jqv5bk8.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1jqv5bk8.scala:50:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        vowels = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: vowels\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1jqv5bk8.scala:52:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m || s0.charAt(i) == \u001b[31m\"o\"\u001b[0m || s0.charAt(i) == \u001b[31m\"u\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1jqv5bk8.scala:52:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m || s0.charAt(i) == \u001b[31m\"o\"\u001b[0m || s0.charAt(i) == \u001b[31m\"u\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1jqv5bk8.scala:52:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m || s0.charAt(i) == \u001b[31m\"o\"\u001b[0m || s0.charAt(i) == \u001b[31m\"u\"\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8xhddeti.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xhddeti.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xhddeti.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xhddeti.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xhddeti.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xhddeti.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same number of letters.\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLetters((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLetters((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLetters((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLetters((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLetters(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdb3cqecu.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdb3cqecu.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpdb3cqecu.scala:61:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameLetters\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef sameLetters(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef sameLetters(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 61\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same suffix.\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyf832pwh.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyf832pwh.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" || s0.char\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp19i2w0gb.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp19i2w0gb.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp19i2w0gb.scala:58:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.char\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp19i2w0gb.scala:58:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.char\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp19i2w0gb.scala:58:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.char\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value char is not a member of String - did you mean s0.chars?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp19i2w0gb.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp19i2w0gb.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the lef",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnore\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbz9vo8cg.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbz9vo8cg.scala:47:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz9vo8cg.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz9vo8cg.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz9vo8cg.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz9vo8cg.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters in the same order.\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameOrder((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameOrder((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameOrder(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters in the same order.\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameOrder((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameOrder((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameOrder((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameOrder((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameOrder(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwik2q6eg.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwik2q6eg.scala:75:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpwik2q6eg.scala:61:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameOrder\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef sameOrder(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef sameOrder(s0: String, s1: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 61\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpwik2q6eg.scala:65:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddd\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpudh38qdq.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpudh38qdq.scala:41:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i).toLowerCase() != s1.charAt(i).toLowerCase()) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpudh38qdq.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same number of vowels.\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameVowels((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameVowels((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameVowels((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameVowels(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) == \"a\" || s0.charAt(i) == \"e\" || s0.charAt(i) == \"i\"\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoz3994lb.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoz3994lb.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoz3994lb.scala:58:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoz3994lb.scala:58:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoz3994lb.scala:58:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mif\u001b[0m (s0.charAt(i) == \u001b[31m\"a\"\u001b[0m || s0.charAt(i) == \u001b[31m\"e\"\u001b[0m || s0.charAt(i) == \u001b[31m\"i\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoz3994lb.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpoz3994lb.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjiyjd3d1.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjiyjd3d1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"ddddddda",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters and length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength2(s0 : String, s1 : String)\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293431,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpuw6jjk1v.scala:64:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36msameLength2\u001b[0m(\u001b[36ms0\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36ms1\u001b[0m : \u001b[35mString\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuw6jjk1v.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw6jjk1v.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw6jjk1v.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw6jjk1v.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw6jjk1v.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293415,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpytir0qru.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpytir0qru.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars2((\"dddzzzzzzzddeddabc\"), (\"eabcd\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> sameChars2((\"dddzzzzzzzddeddabc\"), (\"eabcd\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        } else {\n            for (i <- 0 until s0.length) {\n                if (s0.charAt(i) != s1.charAt(i)) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293431,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxfug2yzl.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfug2yzl.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfug2yzl.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfug2yzl.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfug2yzl.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxfug2yzl.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case.\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameCharsIgnoreCase((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameCharsIgnoreCase((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameCharsIgnoreCase(s0 : String, s1 : String) : Boolean = {\n        if (s0.length != s1.length) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (Character.toLowerCase(s0.charAt(i)) != Character.toLowerCase(s1.charAt(i))) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters, ignoring case and\n    // leading and trailing spaces.\n    // >>> sameCharsIgnoreCaseAndSpaces((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameCharsIgnoreCaseAndSpaces((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> same\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphc5v9_rj.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphc5v9_rj.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphc5v9_rj.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphc5v9_rj.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphc5v9_rj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphc5v9_rj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same length.\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameLength((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameLength((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameLength((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameLength((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameLength((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameLength(s0 : String, s1 : String) : Boolean = {\n        return s0.length == s1.length\n    }\n\n    // Check if two words have the same prefix.\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> samePrefix((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> samePrefix((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> samePrefix((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> samePrefix((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def samePrefix(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55a1wcsj.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55a1wcsj.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars3(s0 : String, s1 : String) : Boolean = {\n        for (i <- 0\n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpes706_98.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes706_98.scala:62:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars2(s0 : String, s1 : String) : Boolean = {\n        if (s0.length() != s1.length()) {\n            return false\n        }\n        for (i <- 0 until s0.length) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Check if two words have the same characters.\n    // >>> sameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars3((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars3((\"abcd\"), (\"dddddddabce\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmzjtg527.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcdzzzz\"\u001b[0m), (\u001b[31m\"dddzzzzzzzddeddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(sameChars((\u001b[31m\"dddddddabc\"\u001b[0m), (\u001b[31m\"abcd\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(sameChars((\u001b[31m\"eabcd\"\u001b[0m), (\u001b[31m\"dddddddabc\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmzjtg527.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(sameChars((\u001b[31m\"abcd\"\u001b[0m), (\u001b[31m\"dddddddabcf\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: sameChars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}