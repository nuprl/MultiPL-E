{
  "name": "HumanEval_159_eat",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return a list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong, 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong, 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong, 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong, 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong, 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong, 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong, 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong, 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong, 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong, 0l.toLong))));\n    }\n\n}\n",
  "completions": [
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total, left)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total, left)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number >= need) {\n            result = result.updated(1l, number - need)\n        }\n        if (number < need) {\n            result = result.updated(2l, need - number)\n        }\n        if (remaining < number) {\n            result = result.updated(3l, remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total, left)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n        } else if (number == need) {\n            result = result.updated(2l, 0l)\n        } else if (number > need) {\n            result = result.updated(2l, 0l)\n        } else if (number == need && number == 0) {\n            result = result.updated(2l, 0l)\n        } else if (number == need && number > 0) {\n            result = result.updated(2l, 0l)\n        } else if (number > need && number > 0) {\n            result = result.updated(2l, 0l)\n        } else if (number > need && number == 0) {\n            result = result.updated(2l, 0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = append(result, number)\n            result = append(result, need - number)\n        } else {\n            result = append(result, number - need)\n        }\n        result = append(result, remaining)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = new ArrayList[Long]()\n        if (number >= need) {\n            result.add(number - need)\n            result.add(remaining - need)\n        } else {\n            result.add(number)\n            result.add(remaining)\n        }\n        return result",
    "        val total = number + need\n        val eaten = number\n        val left = need - eaten\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number > 0) {\n            result = result.append(number)\n        }\n        if (need > 0) {\n            result = result.append(need)\n        }\n        if (remaining > 0) {\n            result = result.append(remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = mutable.List.empty()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List[Long](number.toLong, need.toLong)\n        } else if (number < need && remaining >= need) {\n            result = List[Long](number.toLong, need.toLong)\n        } else if (number < need && remaining < need) {\n            result = List[Long](number.toLong, remaining.toLong)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total, left)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n            result = result.updated(2l, need - number)\n        } else if (number > need) {\n            result = result.updated(1l, number - need)\n            result = result.updated(2l, need)\n        } else {\n            result = result.updated(1l, number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number - need)\n        }\n        result = result.append(remaining)\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n        } else if (number > need) {\n            result = result.updated(1l, need)\n        } else {\n            result = result.updated(1l, need)\n        }\n        if (remaining < need) {\n            result = result.updated(1l, remaining)\n        } else if (remaining > need) {\n            result = result.updated(1l, need)\n        } else {\n            result = result.updated(1l, need)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, need - number)\n        }\n        if (number < remaining) {\n            result = result.updated(2l, remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number > need) {\n            result = result.append(need)\n            result = result.append(number - need)\n        } else {\n            result = result.append(number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n        } else if (number > need) {\n            result = result.updated(2l, number - need)\n        } else {\n            result = result.updated(3l, 0l)\n        }\n        if (remaining < need) {\n            result = result.updated(4l, remaining)\n        } else if (remaining > need) {\n            result = result.updated(5l, remaining - need)\n        } else {\n            result = result.updated(6l, 0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List(number.toLong, remaining.toLong)\n        } else if (number < need) {\n            result = List(number.toLong, 0l)\n        }\n        return result",
    "        val result = new ArrayList[Long]()\n        if (number < need) {\n            result.add(number)\n            result.add(need - number)\n        } else {\n            result.add(number - need)\n            result.add(0)\n        }\n        return result",
    "        val result = mutable.List.empty()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(remaining)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - need)\n        } else {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total, left)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(eaten.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = new ArrayList[Long]\n        val total = number + need\n        val remaining_after_meal = remaining - total\n        if (remaining_after_meal < 0) {\n            result.add(total)\n            result.add(remaining_after_meal)\n        } else {\n            result.add(total)\n            result.add(remaining_after_meal)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List[Long](number.toLong, 0l.toLong)\n        } else {\n            val diff = need - number\n            val diff2 = remaining - diff\n            if (diff2 >= 0) {\n                result = List[Long](number.toLong, diff2.toLong)\n            } else {\n                result = List[Long](number.toLong, diff.toLong)\n            }\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List(number.toLong, remaining.toLong)\n        } else if (number < need) {\n            result = List(number.toLong, need.toLong - number.toLong)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val eaten = number\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - need)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - need)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(0)\n        } else if (number > need) {\n            result = result.append(number)\n            result = result.append(need)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = new ArrayList[Long]()\n        if (number < need) {\n            result.add(number)\n            result.add(need - number)\n        } else {\n            result.add(number - need)\n            result.add(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n        } else if (number > need) {\n            result = result.updated(1l, need)\n        } else {\n            result = result.updated(1l, number)\n        }\n        if (remaining < number) {\n            result = result.updated(1l, remaining)\n        } else {\n            result = result.updated(1l, remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = new ArrayList[Long]()\n        if (number >= need) {\n            result.add(number - need)\n            result.add(remaining - need)\n        } else {\n            result.add(number)\n            result.add(remaining)\n        }\n        return result",
    "        val result = new ArrayList[Long]\n        if (number < need) {\n            result = List(number)\n        } else if (number == need) {\n            result = List(number)\n        } else if (number > need) {\n            result = List(number - need)\n        } else {\n            result = List(number)\n        }\n        return result",
    "        val result = new ArrayList[Long]\n        if (number < need) {\n            result = (List[Long](number.toLong, need.toLong))\n        } else if (number > need) {\n            result = (List[Long](number.toLong, need.toLong))\n        } else {\n            result = (List[Long](number.toLong, need.toLong))\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number >= need) {\n            result = result.updated(1l, number - need)\n        }\n        if (remaining >= need) {\n            result = result.updated(1l, remaining - need)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = new ArrayList[Long]\n        if (number < need) {\n            result = (List[Long])(List[Long](number.toLong, need.toLong))\n        } else if (number > need) {\n            result = (List[Long])(List[Long](number.toLong, need.toLong))\n        } else {\n            result = (List[Long])(List[Long](number.toLong, need.toLong))\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number >= need) {\n            result = result.updated(1l, number - need)\n        }\n        if (number < need) {\n            result = result.updated(2l, need - number)\n        }\n        if (number < remaining) {\n            result = result.updated(3l, remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, need - number)\n        } else if (number > need) {\n            result = result.updated(need, 0l)\n        } else {\n            result = result.updated(need, 0l)\n        }\n        if (remaining < number) {\n            result = result.updated(remaining, 0l)\n        } else {\n            result = result.updated(remaining - number, 0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, need - number)\n        } else if (number > need) {\n            result = result.updated(need, 0l)\n        } else {\n            result = result.updated(need, 0l)\n        }\n        if (remaining < number) {\n            result = result.updated(remaining, 0l)\n        } else if (remaining > number) {\n            result = result.updated(number, remaining - number)\n        } else {\n            result = result.updated(number, remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number > need) {\n            result = result.append(number - need)\n            result = result.append(need)\n        } else {\n            result = result.append(number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List(number.toLong, remaining.toLong)\n        } else {\n            result = List(number.toLong, 0l)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val total = number + need\n        val eaten = total - remaining\n        val left = remaining\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number > need) {\n            result = result.append(number - need)\n            result = result.append(need)\n        } else {\n            result = result.append(number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = result.append(number - need)\n            result = result.append(remaining)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - number)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val total = number + need\n        val eaten = number\n        val left = need - eaten\n        val result = List(total, left)\n        return result",
    "        val total = number + need\n        val eaten = number\n        val left = need - eaten\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, number)\n        } else if (number > need) {\n            result = result.updated(1l, need)\n        } else {\n            result = result.updated(1l, number)\n        }\n        if (remaining < number) {\n            result = result.updated(1l, remaining)\n        } else {\n            result = result.updated(1l, remaining - number)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List(number + need, remaining - need)\n        } else {\n            result = List(number, remaining)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number - need)\n        }\n        result = result.append(remaining)\n        return result",
    "        val result = List[Long]()\n        if (number >= need) {\n            result = List(number + need)\n        } else {\n            result = List(number)\n        }\n        if (remaining < number) {\n            result = result + List(remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long](0l, 0l)\n        if (number < need) {\n            result = result.updated(1l, need - number)\n        }\n        if (number > need) {\n            result = result.updated(need, 0l)\n        }\n        if (number == need) {\n            result = result.updated(need, 0l)\n        }\n        if (number == 0) {\n            result = result.updated(need, remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0l)\n        } else {\n            return List(total, left)\n        }",
    "        val result = new ArrayList[Long]\n        if (number < need) {\n            result = List(number, need - number)\n        } else if (number == need) {\n            result = List(number, 0)\n        } else {\n            result = List(number, 0)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        if (number > 0 && need > 0 && remaining > 0) {\n            if (number >= need) {\n                result = mutable.List[Long](number.toLong, need.toLong)\n            } else if (number + remaining >= need) {\n                result = mutable.List[Long](number.toLong, need.toLong - (number.toLong + remaining.toLong - need.toLong))\n            } else {\n                result = mutable.List[Long](number.toLong, need.toLong)\n            }\n        }\n        return result",
    "        val result = List[Long]()\n        if (number > 0 && need > 0 && remaining > 0) {\n            result = (List[Long](number.toLong, need.toLong))\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        if (left < 0) {\n            return List(total, 0)\n        } else {\n            return List(total, left)\n        }",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number - need)\n        }\n        result = result.append(remaining)\n        return result",
    "        val result = new ArrayList[Long]\n        if (number < need) {\n            result = (List[Long])(Array(need - number).toList)\n        } else if (number > need) {\n            result = (List[Long])(Array(number - need).toList)\n        } else {\n            result = (List[Long])(Array(0l).toList)\n        }\n        result.append(number)\n        result.append(remaining - number)\n        return result",
    "        var result = List[Long](0l, 0l)\n        if (number >= need) {\n            result = result.updated(1l, number - need)\n        } else {\n            result = result.updated(1l, 0l)\n        }\n        if (remaining >= need) {\n            result = result.updated(2l, remaining - need)\n        } else {\n            result = result.updated(2l, 0l)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List(total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else if (number == need) {\n            result = result.append(number)\n            result = result.append(remaining - need)\n        } else {\n            result = result.append(number)\n            result = result.append(remaining)\n        }\n        return result",
    "        val total = number + need\n        val left = remaining - need\n        val result = List[Long](total.toLong, left.toLong)\n        return result",
    "        val result = List[Long]()\n        if (number < need) {\n            result = result.append(number)\n            result = result.append(need - number)\n        } else {\n            result = result.append(number)\n            result = result.append(0)\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}